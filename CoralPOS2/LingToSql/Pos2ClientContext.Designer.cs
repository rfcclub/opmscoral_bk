//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 6/21/2010 9:17:23 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

namespace LinqToSql.ClientContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = @"pos2.sdf")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class Pos2ClientContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(Pos2ClientContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertCrlActiveDept(CrlActiveDept instance);
        partial void UpdateCrlActiveDept(CrlActiveDept instance);
        partial void DeleteCrlActiveDept(CrlActiveDept instance);
        partial void InsertCrlBlkIn(CrlBlkIn instance);
        partial void UpdateCrlBlkIn(CrlBlkIn instance);
        partial void DeleteCrlBlkIn(CrlBlkIn instance);
        partial void InsertCrlBlkInCost(CrlBlkInCost instance);
        partial void UpdateCrlBlkInCost(CrlBlkInCost instance);
        partial void DeleteCrlBlkInCost(CrlBlkInCost instance);
        partial void InsertCrlBlkInDet(CrlBlkInDet instance);
        partial void UpdateCrlBlkInDet(CrlBlkInDet instance);
        partial void DeleteCrlBlkInDet(CrlBlkInDet instance);
        partial void InsertCrlCashIoTran(CrlCashIoTran instance);
        partial void UpdateCrlCashIoTran(CrlCashIoTran instance);
        partial void DeleteCrlCashIoTran(CrlCashIoTran instance);
        partial void InsertCrlCat(CrlCat instance);
        partial void UpdateCrlCat(CrlCat instance);
        partial void DeleteCrlCat(CrlCat instance);
        partial void InsertCrlContract(CrlContract instance);
        partial void UpdateCrlContract(CrlContract instance);
        partial void DeleteCrlContract(CrlContract instance);
        partial void InsertCrlCoupon(CrlCoupon instance);
        partial void UpdateCrlCoupon(CrlCoupon instance);
        partial void DeleteCrlCoupon(CrlCoupon instance);
        partial void InsertCrlCouponTyp(CrlCouponTyp instance);
        partial void UpdateCrlCouponTyp(CrlCouponTyp instance);
        partial void DeleteCrlCouponTyp(CrlCouponTyp instance);
        partial void InsertCrlCtry(CrlCtry instance);
        partial void UpdateCrlCtry(CrlCtry instance);
        partial void DeleteCrlCtry(CrlCtry instance);
        partial void InsertCrlCust(CrlCust instance);
        partial void UpdateCrlCust(CrlCust instance);
        partial void DeleteCrlCust(CrlCust instance);
        partial void InsertCrlCustDet(CrlCustDet instance);
        partial void UpdateCrlCustDet(CrlCustDet instance);
        partial void DeleteCrlCustDet(CrlCustDet instance);
        partial void InsertCrlDept(CrlDept instance);
        partial void UpdateCrlDept(CrlDept instance);
        partial void DeleteCrlDept(CrlDept instance);
        partial void InsertCrlDeptCost(CrlDeptCost instance);
        partial void UpdateCrlDeptCost(CrlDeptCost instance);
        partial void DeleteCrlDeptCost(CrlDeptCost instance);
        partial void InsertCrlDeptMng(CrlDeptMng instance);
        partial void UpdateCrlDeptMng(CrlDeptMng instance);
        partial void DeleteCrlDeptMng(CrlDeptMng instance);
        partial void InsertCrlDeptPo(CrlDeptPo instance);
        partial void UpdateCrlDeptPo(CrlDeptPo instance);
        partial void DeleteCrlDeptPo(CrlDeptPo instance);
        partial void InsertCrlDeptPoDet(CrlDeptPoDet instance);
        partial void UpdateCrlDeptPoDet(CrlDeptPoDet instance);
        partial void DeleteCrlDeptPoDet(CrlDeptPoDet instance);
        partial void InsertCrlDeptPoDetLog(CrlDeptPoDetLog instance);
        partial void UpdateCrlDeptPoDetLog(CrlDeptPoDetLog instance);
        partial void DeleteCrlDeptPoDetLog(CrlDeptPoDetLog instance);
        partial void InsertCrlDeptPoLog(CrlDeptPoLog instance);
        partial void UpdateCrlDeptPoLog(CrlDeptPoLog instance);
        partial void DeleteCrlDeptPoLog(CrlDeptPoLog instance);
        partial void InsertCrlDeptPoPromo(CrlDeptPoPromo instance);
        partial void UpdateCrlDeptPoPromo(CrlDeptPoPromo instance);
        partial void DeleteCrlDeptPoPromo(CrlDeptPoPromo instance);
        partial void InsertCrlDeptPrmtn(CrlDeptPrmtn instance);
        partial void UpdateCrlDeptPrmtn(CrlDeptPrmtn instance);
        partial void DeleteCrlDeptPrmtn(CrlDeptPrmtn instance);
        partial void InsertCrlDeptRet(CrlDeptRet instance);
        partial void UpdateCrlDeptRet(CrlDeptRet instance);
        partial void DeleteCrlDeptRet(CrlDeptRet instance);
        partial void InsertCrlDeptRetCost(CrlDeptRetCost instance);
        partial void UpdateCrlDeptRetCost(CrlDeptRetCost instance);
        partial void DeleteCrlDeptRetCost(CrlDeptRetCost instance);
        partial void InsertCrlDeptRetDet(CrlDeptRetDet instance);
        partial void UpdateCrlDeptRetDet(CrlDeptRetDet instance);
        partial void DeleteCrlDeptRetDet(CrlDeptRetDet instance);
        partial void InsertCrlDeptRetPo(CrlDeptRetPo instance);
        partial void UpdateCrlDeptRetPo(CrlDeptRetPo instance);
        partial void DeleteCrlDeptRetPo(CrlDeptRetPo instance);
        partial void InsertCrlDeptStk(CrlDeptStk instance);
        partial void UpdateCrlDeptStk(CrlDeptStk instance);
        partial void DeleteCrlDeptStk(CrlDeptStk instance);
        partial void InsertCrlDeptStkHis(CrlDeptStkHis instance);
        partial void UpdateCrlDeptStkHis(CrlDeptStkHis instance);
        partial void DeleteCrlDeptStkHis(CrlDeptStkHis instance);
        partial void InsertCrlDeptStkIn(CrlDeptStkIn instance);
        partial void UpdateCrlDeptStkIn(CrlDeptStkIn instance);
        partial void DeleteCrlDeptStkIn(CrlDeptStkIn instance);
        partial void InsertCrlDeptStkInCst(CrlDeptStkInCst instance);
        partial void UpdateCrlDeptStkInCst(CrlDeptStkInCst instance);
        partial void DeleteCrlDeptStkInCst(CrlDeptStkInCst instance);
        partial void InsertCrlDeptStkInDet(CrlDeptStkInDet instance);
        partial void UpdateCrlDeptStkInDet(CrlDeptStkInDet instance);
        partial void DeleteCrlDeptStkInDet(CrlDeptStkInDet instance);
        partial void InsertCrlDeptStkInHis(CrlDeptStkInHis instance);
        partial void UpdateCrlDeptStkInHis(CrlDeptStkInHis instance);
        partial void DeleteCrlDeptStkInHis(CrlDeptStkInHis instance);
        partial void InsertCrlDeptStkOut(CrlDeptStkOut instance);
        partial void UpdateCrlDeptStkOut(CrlDeptStkOut instance);
        partial void DeleteCrlDeptStkOut(CrlDeptStkOut instance);
        partial void InsertCrlDeptStkOutCst(CrlDeptStkOutCst instance);
        partial void UpdateCrlDeptStkOutCst(CrlDeptStkOutCst instance);
        partial void DeleteCrlDeptStkOutCst(CrlDeptStkOutCst instance);
        partial void InsertCrlDeptStkOutDet(CrlDeptStkOutDet instance);
        partial void UpdateCrlDeptStkOutDet(CrlDeptStkOutDet instance);
        partial void DeleteCrlDeptStkOutDet(CrlDeptStkOutDet instance);
        partial void InsertCrlDeptStkTempValid(CrlDeptStkTempValid instance);
        partial void UpdateCrlDeptStkTempValid(CrlDeptStkTempValid instance);
        partial void DeleteCrlDeptStkTempValid(CrlDeptStkTempValid instance);
        partial void InsertCrlDeptStkTempValidSave(CrlDeptStkTempValidSave instance);
        partial void UpdateCrlDeptStkTempValidSave(CrlDeptStkTempValidSave instance);
        partial void DeleteCrlDeptStkTempValidSave(CrlDeptStkTempValidSave instance);
        partial void InsertCrlDeptTimeline(CrlDeptTimeline instance);
        partial void UpdateCrlDeptTimeline(CrlDeptTimeline instance);
        partial void DeleteCrlDeptTimeline(CrlDeptTimeline instance);
        partial void InsertCrlDistbtor(CrlDistbtor instance);
        partial void UpdateCrlDistbtor(CrlDistbtor instance);
        partial void DeleteCrlDistbtor(CrlDistbtor instance);
        partial void InsertCrlEmp(CrlEmp instance);
        partial void UpdateCrlEmp(CrlEmp instance);
        partial void DeleteCrlEmp(CrlEmp instance);
        partial void InsertCrlEmpDayoff(CrlEmpDayoff instance);
        partial void UpdateCrlEmpDayoff(CrlEmpDayoff instance);
        partial void DeleteCrlEmpDayoff(CrlEmpDayoff instance);
        partial void InsertCrlEmpInfo(CrlEmpInfo instance);
        partial void UpdateCrlEmpInfo(CrlEmpInfo instance);
        partial void DeleteCrlEmpInfo(CrlEmpInfo instance);
        partial void InsertCrlEmpMoney(CrlEmpMoney instance);
        partial void UpdateCrlEmpMoney(CrlEmpMoney instance);
        partial void DeleteCrlEmpMoney(CrlEmpMoney instance);
        partial void InsertCrlEmpReward(CrlEmpReward instance);
        partial void UpdateCrlEmpReward(CrlEmpReward instance);
        partial void DeleteCrlEmpReward(CrlEmpReward instance);
        partial void InsertCrlEmpWrkgDay(CrlEmpWrkgDay instance);
        partial void UpdateCrlEmpWrkgDay(CrlEmpWrkgDay instance);
        partial void DeleteCrlEmpWrkgDay(CrlEmpWrkgDay instance);
        partial void InsertCrlExPrdColor(CrlExPrdColor instance);
        partial void UpdateCrlExPrdColor(CrlExPrdColor instance);
        partial void DeleteCrlExPrdColor(CrlExPrdColor instance);
        partial void InsertCrlExPrdSize(CrlExPrdSize instance);
        partial void UpdateCrlExPrdSize(CrlExPrdSize instance);
        partial void DeleteCrlExPrdSize(CrlExPrdSize instance);
        partial void InsertCrlGift(CrlGift instance);
        partial void UpdateCrlGift(CrlGift instance);
        partial void DeleteCrlGift(CrlGift instance);
        partial void InsertCrlMnPrice(CrlMnPrice instance);
        partial void UpdateCrlMnPrice(CrlMnPrice instance);
        partial void DeleteCrlMnPrice(CrlMnPrice instance);
        partial void InsertCrlMnStk(CrlMnStk instance);
        partial void UpdateCrlMnStk(CrlMnStk instance);
        partial void DeleteCrlMnStk(CrlMnStk instance);
        partial void InsertCrlMnStkHis(CrlMnStkHis instance);
        partial void UpdateCrlMnStkHis(CrlMnStkHis instance);
        partial void DeleteCrlMnStkHis(CrlMnStkHis instance);
        partial void InsertCrlMnftr(CrlMnftr instance);
        partial void UpdateCrlMnftr(CrlMnftr instance);
        partial void DeleteCrlMnftr(CrlMnftr instance);
        partial void InsertCrlOtherTransLog(CrlOtherTransLog instance);
        partial void UpdateCrlOtherTransLog(CrlOtherTransLog instance);
        partial void DeleteCrlOtherTransLog(CrlOtherTransLog instance);
        partial void InsertCrlPblshCpn(CrlPblshCpn instance);
        partial void UpdateCrlPblshCpn(CrlPblshCpn instance);
        partial void DeleteCrlPblshCpn(CrlPblshCpn instance);
        partial void InsertCrlPkgr(CrlPkgr instance);
        partial void UpdateCrlPkgr(CrlPkgr instance);
        partial void DeleteCrlPkgr(CrlPkgr instance);
        partial void InsertCrlPosLog(CrlPosLog instance);
        partial void UpdateCrlPosLog(CrlPosLog instance);
        partial void DeleteCrlPosLog(CrlPosLog instance);
        partial void InsertCrlPosTran(CrlPosTran instance);
        partial void UpdateCrlPosTran(CrlPosTran instance);
        partial void DeleteCrlPosTran(CrlPosTran instance);
        partial void InsertCrlPrd(CrlPrd instance);
        partial void UpdateCrlPrd(CrlPrd instance);
        partial void DeleteCrlPrd(CrlPrd instance);
        partial void InsertCrlPrdMst(CrlPrdMst instance);
        partial void UpdateCrlPrdMst(CrlPrdMst instance);
        partial void DeleteCrlPrdMst(CrlPrdMst instance);
        partial void InsertCrlPrdTyp(CrlPrdTyp instance);
        partial void UpdateCrlPrdTyp(CrlPrdTyp instance);
        partial void DeleteCrlPrdTyp(CrlPrdTyp instance);
        partial void InsertCrlPrdUnit(CrlPrdUnit instance);
        partial void UpdateCrlPrdUnit(CrlPrdUnit instance);
        partial void DeleteCrlPrdUnit(CrlPrdUnit instance);
        partial void InsertCrlPromo(CrlPromo instance);
        partial void UpdateCrlPromo(CrlPromo instance);
        partial void DeleteCrlPromo(CrlPromo instance);
        partial void InsertCrlReicpt(CrlReicpt instance);
        partial void UpdateCrlReicpt(CrlReicpt instance);
        partial void DeleteCrlReicpt(CrlReicpt instance);
        partial void InsertCrlReicptOut(CrlReicptOut instance);
        partial void UpdateCrlReicptOut(CrlReicptOut instance);
        partial void DeleteCrlReicptOut(CrlReicptOut instance);
        partial void InsertCrlReicptOutCst(CrlReicptOutCst instance);
        partial void UpdateCrlReicptOutCst(CrlReicptOutCst instance);
        partial void DeleteCrlReicptOutCst(CrlReicptOutCst instance);
        partial void InsertCrlRetBlkIn(CrlRetBlkIn instance);
        partial void UpdateCrlRetBlkIn(CrlRetBlkIn instance);
        partial void DeleteCrlRetBlkIn(CrlRetBlkIn instance);
        partial void InsertCrlRetPrd(CrlRetPrd instance);
        partial void UpdateCrlRetPrd(CrlRetPrd instance);
        partial void DeleteCrlRetPrd(CrlRetPrd instance);
        partial void InsertCrlRetTran(CrlRetTran instance);
        partial void UpdateCrlRetTran(CrlRetTran instance);
        partial void DeleteCrlRetTran(CrlRetTran instance);
        partial void InsertCrlRole(CrlRole instance);
        partial void UpdateCrlRole(CrlRole instance);
        partial void DeleteCrlRole(CrlRole instance);
        partial void InsertCrlSaleTran(CrlSaleTran instance);
        partial void UpdateCrlSaleTran(CrlSaleTran instance);
        partial void DeleteCrlSaleTran(CrlSaleTran instance);
        partial void InsertCrlScheTmplate(CrlScheTmplate instance);
        partial void UpdateCrlScheTmplate(CrlScheTmplate instance);
        partial void DeleteCrlScheTmplate(CrlScheTmplate instance);
        partial void InsertCrlSimPrd(CrlSimPrd instance);
        partial void UpdateCrlSimPrd(CrlSimPrd instance);
        partial void DeleteCrlSimPrd(CrlSimPrd instance);
        partial void InsertCrlStkDefStat(CrlStkDefStat instance);
        partial void UpdateCrlStkDefStat(CrlStkDefStat instance);
        partial void DeleteCrlStkDefStat(CrlStkDefStat instance);
        partial void InsertCrlStkIn(CrlStkIn instance);
        partial void UpdateCrlStkIn(CrlStkIn instance);
        partial void DeleteCrlStkIn(CrlStkIn instance);
        partial void InsertCrlStkInDet(CrlStkInDet instance);
        partial void UpdateCrlStkInDet(CrlStkInDet instance);
        partial void DeleteCrlStkInDet(CrlStkInDet instance);
        partial void InsertCrlStkOut(CrlStkOut instance);
        partial void UpdateCrlStkOut(CrlStkOut instance);
        partial void DeleteCrlStkOut(CrlStkOut instance);
        partial void InsertCrlStkOutCst(CrlStkOutCst instance);
        partial void UpdateCrlStkOutCst(CrlStkOutCst instance);
        partial void DeleteCrlStkOutCst(CrlStkOutCst instance);
        partial void InsertCrlStkOutDet(CrlStkOutDet instance);
        partial void UpdateCrlStkOutDet(CrlStkOutDet instance);
        partial void DeleteCrlStkOutDet(CrlStkOutDet instance);
        partial void InsertCrlStkOutTmp(CrlStkOutTmp instance);
        partial void UpdateCrlStkOutTmp(CrlStkOutTmp instance);
        partial void DeleteCrlStkOutTmp(CrlStkOutTmp instance);
        partial void InsertCrlSup(CrlSup instance);
        partial void UpdateCrlSup(CrlSup instance);
        partial void DeleteCrlSup(CrlSup instance);
        partial void InsertCrlSyncStatus(CrlSyncStatus instance);
        partial void UpdateCrlSyncStatus(CrlSyncStatus instance);
        partial void DeleteCrlSyncStatus(CrlSyncStatus instance);
        partial void InsertCrlTax(CrlTax instance);
        partial void UpdateCrlTax(CrlTax instance);
        partial void DeleteCrlTax(CrlTax instance);
        partial void InsertCrlTran(CrlTran instance);
        partial void UpdateCrlTran(CrlTran instance);
        partial void DeleteCrlTran(CrlTran instance);
        partial void InsertCrlUsrInfo(CrlUsrInfo instance);
        partial void UpdateCrlUsrInfo(CrlUsrInfo instance);
        partial void DeleteCrlUsrInfo(CrlUsrInfo instance);
        partial void InsertCrlUsrRole(CrlUsrRole instance);
        partial void UpdateCrlUsrRole(CrlUsrRole instance);
        partial void DeleteCrlUsrRole(CrlUsrRole instance);
        partial void InsertTempDeptStockStatistic(TempDeptStockStatistic instance);
        partial void UpdateTempDeptStockStatistic(TempDeptStockStatistic instance);
        partial void DeleteTempDeptStockStatistic(TempDeptStockStatistic instance);
        partial void InsertTempDeptstock(TempDeptstock instance);
        partial void UpdateTempDeptstock(TempDeptstock instance);
        partial void DeleteTempDeptstock(TempDeptstock instance);
        partial void InsertTempDeptstockMaxTemp(TempDeptstockMaxTemp instance);
        partial void UpdateTempDeptstockMaxTemp(TempDeptstockMaxTemp instance);
        partial void DeleteTempDeptstockMaxTemp(TempDeptstockMaxTemp instance);
        partial void InsertTempDpStockout(TempDpStockout instance);
        partial void UpdateTempDpStockout(TempDpStockout instance);
        partial void DeleteTempDpStockout(TempDpStockout instance);
        partial void InsertTempPr(TempPr instance);
        partial void UpdateTempPr(TempPr instance);
        partial void DeleteTempPr(TempPr instance);
        partial void InsertTempProduct(TempProduct instance);
        partial void UpdateTempProduct(TempProduct instance);
        partial void DeleteTempProduct(TempProduct instance);
        partial void InsertTempStkHis(TempStkHis instance);
        partial void UpdateTempStkHis(TempStkHis instance);
        partial void DeleteTempStkHis(TempStkHis instance);
        #endregion

        public Pos2ClientContext() :
        base(@"Data Source=E:\CoralProjects\CoralPOS\SourceCode\CoralPOS2\CoralPOS2\pos2.sdf;Password=admin;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public Pos2ClientContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ClientContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ClientContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ClientContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<CrlActiveDept> CrlActiveDepts
        {
            get
            {
                return this.GetTable<CrlActiveDept>();
            }
        }

        public Devart.Data.Linq.Table<CrlBlkIn> CrlBlkIns
        {
            get
            {
                return this.GetTable<CrlBlkIn>();
            }
        }

        public Devart.Data.Linq.Table<CrlBlkInCost> CrlBlkInCosts
        {
            get
            {
                return this.GetTable<CrlBlkInCost>();
            }
        }

        public Devart.Data.Linq.Table<CrlBlkInDet> CrlBlkInDets
        {
            get
            {
                return this.GetTable<CrlBlkInDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlCashIoTran> CrlCashIoTrans
        {
            get
            {
                return this.GetTable<CrlCashIoTran>();
            }
        }

        public Devart.Data.Linq.Table<CrlCat> CrlCats
        {
            get
            {
                return this.GetTable<CrlCat>();
            }
        }

        public Devart.Data.Linq.Table<CrlContract> CrlContracts
        {
            get
            {
                return this.GetTable<CrlContract>();
            }
        }

        public Devart.Data.Linq.Table<CrlCoupon> CrlCoupons
        {
            get
            {
                return this.GetTable<CrlCoupon>();
            }
        }

        public Devart.Data.Linq.Table<CrlCouponTyp> CrlCouponTyps
        {
            get
            {
                return this.GetTable<CrlCouponTyp>();
            }
        }

        public Devart.Data.Linq.Table<CrlCtry> CrlCtries
        {
            get
            {
                return this.GetTable<CrlCtry>();
            }
        }

        public Devart.Data.Linq.Table<CrlCust> CrlCusts
        {
            get
            {
                return this.GetTable<CrlCust>();
            }
        }

        public Devart.Data.Linq.Table<CrlCustDet> CrlCustDets
        {
            get
            {
                return this.GetTable<CrlCustDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDept> CrlDepts
        {
            get
            {
                return this.GetTable<CrlDept>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptCost> CrlDeptCosts
        {
            get
            {
                return this.GetTable<CrlDeptCost>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptMng> CrlDeptMngs
        {
            get
            {
                return this.GetTable<CrlDeptMng>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPo> CrlDeptPos
        {
            get
            {
                return this.GetTable<CrlDeptPo>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPoDet> CrlDeptPoDets
        {
            get
            {
                return this.GetTable<CrlDeptPoDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPoDetLog> CrlDeptPoDetLogs
        {
            get
            {
                return this.GetTable<CrlDeptPoDetLog>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPoLog> CrlDeptPoLogs
        {
            get
            {
                return this.GetTable<CrlDeptPoLog>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPoPromo> CrlDeptPoPromos
        {
            get
            {
                return this.GetTable<CrlDeptPoPromo>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptPrmtn> CrlDeptPrmtns
        {
            get
            {
                return this.GetTable<CrlDeptPrmtn>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptRet> CrlDeptRets
        {
            get
            {
                return this.GetTable<CrlDeptRet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptRetCost> CrlDeptRetCosts
        {
            get
            {
                return this.GetTable<CrlDeptRetCost>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptRetDet> CrlDeptRetDets
        {
            get
            {
                return this.GetTable<CrlDeptRetDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptRetPo> CrlDeptRetPos
        {
            get
            {
                return this.GetTable<CrlDeptRetPo>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStk> CrlDeptStks
        {
            get
            {
                return this.GetTable<CrlDeptStk>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkHis> CrlDeptStkHis
        {
            get
            {
                return this.GetTable<CrlDeptStkHis>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkIn> CrlDeptStkIns
        {
            get
            {
                return this.GetTable<CrlDeptStkIn>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkInCst> CrlDeptStkInCsts
        {
            get
            {
                return this.GetTable<CrlDeptStkInCst>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkInDet> CrlDeptStkInDets
        {
            get
            {
                return this.GetTable<CrlDeptStkInDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkInHis> CrlDeptStkInHis
        {
            get
            {
                return this.GetTable<CrlDeptStkInHis>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkOut> CrlDeptStkOuts
        {
            get
            {
                return this.GetTable<CrlDeptStkOut>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkOutCst> CrlDeptStkOutCsts
        {
            get
            {
                return this.GetTable<CrlDeptStkOutCst>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkOutDet> CrlDeptStkOutDets
        {
            get
            {
                return this.GetTable<CrlDeptStkOutDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkTempValid> CrlDeptStkTempValids
        {
            get
            {
                return this.GetTable<CrlDeptStkTempValid>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptStkTempValidSave> CrlDeptStkTempValidSaves
        {
            get
            {
                return this.GetTable<CrlDeptStkTempValidSave>();
            }
        }

        public Devart.Data.Linq.Table<CrlDeptTimeline> CrlDeptTimelines
        {
            get
            {
                return this.GetTable<CrlDeptTimeline>();
            }
        }

        public Devart.Data.Linq.Table<CrlDistbtor> CrlDistbtors
        {
            get
            {
                return this.GetTable<CrlDistbtor>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmp> CrlEmps
        {
            get
            {
                return this.GetTable<CrlEmp>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmpDayoff> CrlEmpDayoffs
        {
            get
            {
                return this.GetTable<CrlEmpDayoff>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmpInfo> CrlEmpInfos
        {
            get
            {
                return this.GetTable<CrlEmpInfo>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmpMoney> CrlEmpMoneys
        {
            get
            {
                return this.GetTable<CrlEmpMoney>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmpReward> CrlEmpRewards
        {
            get
            {
                return this.GetTable<CrlEmpReward>();
            }
        }

        public Devart.Data.Linq.Table<CrlEmpWrkgDay> CrlEmpWrkgDays
        {
            get
            {
                return this.GetTable<CrlEmpWrkgDay>();
            }
        }

        public Devart.Data.Linq.Table<CrlExPrdColor> CrlExPrdColors
        {
            get
            {
                return this.GetTable<CrlExPrdColor>();
            }
        }

        public Devart.Data.Linq.Table<CrlExPrdSize> CrlExPrdSizes
        {
            get
            {
                return this.GetTable<CrlExPrdSize>();
            }
        }

        public Devart.Data.Linq.Table<CrlGift> CrlGifts
        {
            get
            {
                return this.GetTable<CrlGift>();
            }
        }

        public Devart.Data.Linq.Table<CrlMnPrice> CrlMnPrices
        {
            get
            {
                return this.GetTable<CrlMnPrice>();
            }
        }

        public Devart.Data.Linq.Table<CrlMnStk> CrlMnStks
        {
            get
            {
                return this.GetTable<CrlMnStk>();
            }
        }

        public Devart.Data.Linq.Table<CrlMnStkHis> CrlMnStkHis
        {
            get
            {
                return this.GetTable<CrlMnStkHis>();
            }
        }

        public Devart.Data.Linq.Table<CrlMnftr> CrlMnftrs
        {
            get
            {
                return this.GetTable<CrlMnftr>();
            }
        }

        public Devart.Data.Linq.Table<CrlOtherTransLog> CrlOtherTransLogs
        {
            get
            {
                return this.GetTable<CrlOtherTransLog>();
            }
        }

        public Devart.Data.Linq.Table<CrlPblshCpn> CrlPblshCpns
        {
            get
            {
                return this.GetTable<CrlPblshCpn>();
            }
        }

        public Devart.Data.Linq.Table<CrlPkgr> CrlPkgrs
        {
            get
            {
                return this.GetTable<CrlPkgr>();
            }
        }

        public Devart.Data.Linq.Table<CrlPosLog> CrlPosLogs
        {
            get
            {
                return this.GetTable<CrlPosLog>();
            }
        }

        public Devart.Data.Linq.Table<CrlPosTran> CrlPosTrans
        {
            get
            {
                return this.GetTable<CrlPosTran>();
            }
        }

        public Devart.Data.Linq.Table<CrlPrd> CrlPrds
        {
            get
            {
                return this.GetTable<CrlPrd>();
            }
        }

        public Devart.Data.Linq.Table<CrlPrdMst> CrlPrdMsts
        {
            get
            {
                return this.GetTable<CrlPrdMst>();
            }
        }

        public Devart.Data.Linq.Table<CrlPrdTyp> CrlPrdTyps
        {
            get
            {
                return this.GetTable<CrlPrdTyp>();
            }
        }

        public Devart.Data.Linq.Table<CrlPrdUnit> CrlPrdUnits
        {
            get
            {
                return this.GetTable<CrlPrdUnit>();
            }
        }

        public Devart.Data.Linq.Table<CrlPromo> CrlPromos
        {
            get
            {
                return this.GetTable<CrlPromo>();
            }
        }

        public Devart.Data.Linq.Table<CrlReicpt> CrlReicpts
        {
            get
            {
                return this.GetTable<CrlReicpt>();
            }
        }

        public Devart.Data.Linq.Table<CrlReicptOut> CrlReicptOuts
        {
            get
            {
                return this.GetTable<CrlReicptOut>();
            }
        }

        public Devart.Data.Linq.Table<CrlReicptOutCst> CrlReicptOutCsts
        {
            get
            {
                return this.GetTable<CrlReicptOutCst>();
            }
        }

        public Devart.Data.Linq.Table<CrlRetBlkIn> CrlRetBlkIns
        {
            get
            {
                return this.GetTable<CrlRetBlkIn>();
            }
        }

        public Devart.Data.Linq.Table<CrlRetPrd> CrlRetPrds
        {
            get
            {
                return this.GetTable<CrlRetPrd>();
            }
        }

        public Devart.Data.Linq.Table<CrlRetTran> CrlRetTrans
        {
            get
            {
                return this.GetTable<CrlRetTran>();
            }
        }

        public Devart.Data.Linq.Table<CrlRole> CrlRoles
        {
            get
            {
                return this.GetTable<CrlRole>();
            }
        }

        public Devart.Data.Linq.Table<CrlSaleTran> CrlSaleTrans
        {
            get
            {
                return this.GetTable<CrlSaleTran>();
            }
        }

        public Devart.Data.Linq.Table<CrlScheTmplate> CrlScheTmplates
        {
            get
            {
                return this.GetTable<CrlScheTmplate>();
            }
        }

        public Devart.Data.Linq.Table<CrlSimPrd> CrlSimPrds
        {
            get
            {
                return this.GetTable<CrlSimPrd>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkDefStat> CrlStkDefStats
        {
            get
            {
                return this.GetTable<CrlStkDefStat>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkIn> CrlStkIns
        {
            get
            {
                return this.GetTable<CrlStkIn>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkInDet> CrlStkInDets
        {
            get
            {
                return this.GetTable<CrlStkInDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkOut> CrlStkOuts
        {
            get
            {
                return this.GetTable<CrlStkOut>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkOutCst> CrlStkOutCsts
        {
            get
            {
                return this.GetTable<CrlStkOutCst>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkOutDet> CrlStkOutDets
        {
            get
            {
                return this.GetTable<CrlStkOutDet>();
            }
        }

        public Devart.Data.Linq.Table<CrlStkOutTmp> CrlStkOutTmps
        {
            get
            {
                return this.GetTable<CrlStkOutTmp>();
            }
        }

        public Devart.Data.Linq.Table<CrlSup> CrlSups
        {
            get
            {
                return this.GetTable<CrlSup>();
            }
        }

        public Devart.Data.Linq.Table<CrlSyncStatus> CrlSyncStatus
        {
            get
            {
                return this.GetTable<CrlSyncStatus>();
            }
        }

        public Devart.Data.Linq.Table<CrlTax> CrlTaxes
        {
            get
            {
                return this.GetTable<CrlTax>();
            }
        }

        public Devart.Data.Linq.Table<CrlTran> CrlTrans
        {
            get
            {
                return this.GetTable<CrlTran>();
            }
        }

        public Devart.Data.Linq.Table<CrlUsrInfo> CrlUsrInfos
        {
            get
            {
                return this.GetTable<CrlUsrInfo>();
            }
        }

        public Devart.Data.Linq.Table<CrlUsrRole> CrlUsrRoles
        {
            get
            {
                return this.GetTable<CrlUsrRole>();
            }
        }

        public Devart.Data.Linq.Table<TempDeptStockStatistic> TempDeptStockStatistics
        {
            get
            {
                return this.GetTable<TempDeptStockStatistic>();
            }
        }

        public Devart.Data.Linq.Table<TempDeptstock> TempDeptstocks
        {
            get
            {
                return this.GetTable<TempDeptstock>();
            }
        }

        public Devart.Data.Linq.Table<TempDeptstockMaxTemp> TempDeptstockMaxTemps
        {
            get
            {
                return this.GetTable<TempDeptstockMaxTemp>();
            }
        }

        public Devart.Data.Linq.Table<TempDpStockout> TempDpStockouts
        {
            get
            {
                return this.GetTable<TempDpStockout>();
            }
        }

        public Devart.Data.Linq.Table<TempPr> TempPrs
        {
            get
            {
                return this.GetTable<TempPr>();
            }
        }

        public Devart.Data.Linq.Table<TempProduct> TempProducts
        {
            get
            {
                return this.GetTable<TempProduct>();
            }
        }

        public Devart.Data.Linq.Table<TempStkHis> TempStkHis
        {
            get
            {
                return this.GetTable<TempStkHis>();
            }
        }
    }


    /// <summary>
    /// There are no comments for CrlActiveDept in the schema.
    /// </summary>
    [Table(Name = @"crl_active_dept")]
    [DataContract()]
    public partial class CrlActiveDept : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Nullable<long> _DepartmentId;

        private string _DepartmentName;

        private System.Nullable<int> _Active;

        private EntityRef<CrlDept> _CrlDept;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(System.Nullable<long> value);
        partial void OnDepartmentIdChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        partial void OnActiveChanging(System.Nullable<int> value);
        partial void OnActiveChanged();
        #endregion

        public CrlActiveDept()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", DbType = "bigint")]
        [DataMember(Order=1)]
        public System.Nullable<long> DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_NAME", Storage = "_DepartmentName", DbType = "nvarchar(255)")]
        [DataMember(Order=2)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"ACTIVE", Storage = "_Active", DbType = "int")]
        [DataMember(Order=3)]
        public System.Nullable<int> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlActiveDept", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlActiveDepts.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlActiveDepts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlBlkIn in the schema.
    /// </summary>
    [Table(Name = @"crl_blk_in")]
    [DataContract()]
    public partial class CrlBlkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BlockId;

        private string _BlockName;

        private System.Nullable<System.DateTime> _ImportDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlBlkInDet> _CrlBlkInDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(long value);
        partial void OnBlockIdChanged();
        partial void OnBlockNameChanging(string value);
        partial void OnBlockNameChanged();
        partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
        partial void OnImportDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlBlkIn()
        {
            this.Initialize();
            this._CrlBlkInDets = new EntitySet<CrlBlkInDet>(new Action<CrlBlkInDet>(this.attach_CrlBlkInDets), new Action<CrlBlkInDet>(this.detach_CrlBlkInDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockName in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_NAME", Storage = "_BlockName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string BlockName
        {
            get
            {
                return this._BlockName;
            }
            set
            {
                if (this._BlockName != value)
                {
                    this.OnBlockNameChanging(value);
                    this.SendPropertyChanging();
                    this._BlockName = value;
                    this.SendPropertyChanged("BlockName");
                    this.OnBlockNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportDate in the schema.
        /// </summary>
        [Column(Name = @"IMPORT_DATE", Storage = "_ImportDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> ImportDate
        {
            get
            {
                return this._ImportDate;
            }
            set
            {
                if (this._ImportDate != value)
                {
                    this.OnImportDateChanging(value);
                    this.SendPropertyChanging();
                    this._ImportDate = value;
                    this.SendPropertyChanged("ImportDate");
                    this.OnImportDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlBlkIn_CrlBlkInDet", Storage="_CrlBlkInDets", OtherKey="BlockId")]
        [DataMember(Order=15, EmitDefaultValue=false)]
        public EntitySet<CrlBlkInDet> CrlBlkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlBlkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlBlkInDets;
            }
            set
            {
                this._CrlBlkInDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlBlkInDets(CrlBlkInDet entity)
        {
            this.SendPropertyChanging("CrlBlkInDets");
            entity.CrlBlkIn = this;
        }
    
        private void detach_CrlBlkInDets(CrlBlkInDet entity)
        {
            this.SendPropertyChanging("CrlBlkInDets");
            entity.CrlBlkIn = null;
        }

        private void Initialize()
        {
            this._CrlBlkInDets = new EntitySet<CrlBlkInDet>(new Action<CrlBlkInDet>(this.attach_CrlBlkInDets), new Action<CrlBlkInDet>(this.detach_CrlBlkInDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlBlkInCost in the schema.
    /// </summary>
    [Table(Name = @"crl_blk_in_cost")]
    [DataContract()]
    public partial class CrlBlkInCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BlockId;

        private long _CostType;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(long value);
        partial void OnBlockIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlBlkInCost()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlBlkInDet in the schema.
    /// </summary>
    [Table(Name = @"crl_blk_in_det")]
    [DataContract()]
    public partial class CrlBlkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BlockId;

        private string _BlockDetailId;

        private string _DetailValue;

        private System.Nullable<long> _ManufactureId;

        private System.Nullable<long> _PackagerId;

        private System.Nullable<long> _CountryId;

        private System.Nullable<long> _SupplierId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _StockInId;

        private System.Nullable<System.DateTime> _ImportDate;

        private EntityRef<CrlBlkIn> _CrlBlkIn;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(long value);
        partial void OnBlockIdChanged();
        partial void OnBlockDetailIdChanging(string value);
        partial void OnBlockDetailIdChanged();
        partial void OnDetailValueChanging(string value);
        partial void OnDetailValueChanged();
        partial void OnManufactureIdChanging(System.Nullable<long> value);
        partial void OnManufactureIdChanged();
        partial void OnPackagerIdChanging(System.Nullable<long> value);
        partial void OnPackagerIdChanged();
        partial void OnCountryIdChanging(System.Nullable<long> value);
        partial void OnCountryIdChanged();
        partial void OnSupplierIdChanging(System.Nullable<long> value);
        partial void OnSupplierIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInIdChanging(System.Nullable<long> value);
        partial void OnStockInIdChanged();
        partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
        partial void OnImportDateChanged();
        #endregion

        public CrlBlkInDet()
        {
            this.Initialize();
            this._CrlBlkIn  = default(EntityRef<CrlBlkIn>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    if (this._CrlBlkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", CanBeNull = false, DbType = "nvarchar(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DetailValue in the schema.
        /// </summary>
        [Column(Name = @"DETAIL_VALUE", Storage = "_DetailValue", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string DetailValue
        {
            get
            {
                return this._DetailValue;
            }
            set
            {
                if (this._DetailValue != value)
                {
                    this.OnDetailValueChanging(value);
                    this.SendPropertyChanging();
                    this._DetailValue = value;
                    this.SendPropertyChanged("DetailValue");
                    this.OnDetailValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufactureId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURE_ID", Storage = "_ManufactureId", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> ManufactureId
        {
            get
            {
                return this._ManufactureId;
            }
            set
            {
                if (this._ManufactureId != value)
                {
                    this.OnManufactureIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufactureId = value;
                    this.SendPropertyChanged("ManufactureId");
                    this.OnManufactureIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportDate in the schema.
        /// </summary>
        [Column(Name = @"IMPORT_DATE", Storage = "_ImportDate", DbType = "datetime")]
        [DataMember(Order=20)]
        public System.Nullable<System.DateTime> ImportDate
        {
            get
            {
                return this._ImportDate;
            }
            set
            {
                if (this._ImportDate != value)
                {
                    this.OnImportDateChanging(value);
                    this.SendPropertyChanging();
                    this._ImportDate = value;
                    this.SendPropertyChanged("ImportDate");
                    this.OnImportDateChanged();
                }
            }
        }

        [Association(Name="CrlBlkIn_CrlBlkInDet", Storage="_CrlBlkIn", ThisKey="BlockId", IsForeignKey=true)]
        public CrlBlkIn CrlBlkIn
        {
            get
            {
                return this._CrlBlkIn.Entity;
            }
            set
            {
                CrlBlkIn previousValue = this._CrlBlkIn.Entity;
                if ((previousValue != value) || (this._CrlBlkIn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlBlkIn.Entity = null;
                        previousValue.CrlBlkInDets.Remove(this);
                    }
                    this._CrlBlkIn.Entity = value;
                    if (value != null)
                    {
                        value.CrlBlkInDets.Add(this);
                        this._BlockId = value.BlockId;
                    }
                    else
                    {
                        this._BlockId = default(long);
                    }
                    this.SendPropertyChanged("CrlBlkIn");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlBlkIn = default(EntityRef<CrlBlkIn>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCashIoTran in the schema.
    /// </summary>
    [Table(Name = @"crl_cash_io_trans")]
    [DataContract()]
    public partial class CrlCashIoTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _CashInOutTransactionId;

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<decimal> _Amount;

        private System.Nullable<int> _ReasonCode;

        private string _CustomerId;

        private string _Comment;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCashInOutTransactionIdChanging(string value);
        partial void OnCashInOutTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnAmountChanging(System.Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnReasonCodeChanging(System.Nullable<int> value);
        partial void OnReasonCodeChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCashIoTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CashInOutTransactionId in the schema.
        /// </summary>
        [Column(Name = @"Cash_In_Out_Transaction_Id", Storage = "_CashInOutTransactionId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string CashInOutTransactionId
        {
            get
            {
                return this._CashInOutTransactionId;
            }
            set
            {
                if (this._CashInOutTransactionId != value)
                {
                    this.OnCashInOutTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashInOutTransactionId = value;
                    this.SendPropertyChanged("CashInOutTransactionId");
                    this.OnCashInOutTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Id", Storage = "_TransactionId", CanBeNull = false, DbType = "nvarchar(12) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"Store_Id", Storage = "_StoreId", CanBeNull = false, DbType = "nvarchar(5) NOT NULL")]
        [DataMember(Order=3)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"Register_Id", Storage = "_RegisterId", CanBeNull = false, DbType = "nvarchar(2) NOT NULL")]
        [DataMember(Order=4)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"Cashier_Id", Storage = "_CashierId", CanBeNull = false, DbType = "nvarchar(6) NOT NULL")]
        [DataMember(Order=5)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Storage = "_Amount", DbType = "numeric")]
        [DataMember(Order=6)]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReasonCode in the schema.
        /// </summary>
        [Column(Name = @"Reason_Code", Storage = "_ReasonCode", DbType = "int")]
        [DataMember(Order=7)]
        public System.Nullable<int> ReasonCode
        {
            get
            {
                return this._ReasonCode;
            }
            set
            {
                if (this._ReasonCode != value)
                {
                    this.OnReasonCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ReasonCode = value;
                    this.SendPropertyChanged("ReasonCode");
                    this.OnReasonCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"Customer_Id", Storage = "_CustomerId", DbType = "nvarchar(15)")]
        [DataMember(Order=8)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Storage = "_Comment", DbType = "nvarchar(1000)")]
        [DataMember(Order=9)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=16)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=17)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCat in the schema.
    /// </summary>
    [Table(Name = @"crl_cat")]
    [DataContract()]
    public partial class CrlCat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CategoryId;

        private System.Nullable<long> _ParentCategoryId;

        private string _CategoryName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlPrdMst> _CrlPrdMsts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(long value);
        partial void OnCategoryIdChanged();
        partial void OnParentCategoryIdChanging(System.Nullable<long> value);
        partial void OnParentCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCat()
        {
            this.Initialize();
            this._CrlPrdMsts = new EntitySet<CrlPrdMst>(new Action<CrlPrdMst>(this.attach_CrlPrdMsts), new Action<CrlPrdMst>(this.detach_CrlPrdMsts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentCategoryId in the schema.
        /// </summary>
        [Column(Name = @"PARENT_CATEGORY_ID", Storage = "_ParentCategoryId", DbType = "bigint")]
        [DataMember(Order=2)]
        public System.Nullable<long> ParentCategoryId
        {
            get
            {
                return this._ParentCategoryId;
            }
            set
            {
                if (this._ParentCategoryId != value)
                {
                    this.OnParentCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCategoryId = value;
                    this.SendPropertyChanged("ParentCategoryId");
                    this.OnParentCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_NAME", Storage = "_CategoryName", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=10)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=11)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=12)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlCat_CrlPrdMst", Storage="_CrlPrdMsts", OtherKey="CategoryId")]
        [DataMember(Order=15, EmitDefaultValue=false)]
        public EntitySet<CrlPrdMst> CrlPrdMsts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlPrdMsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlPrdMsts;
            }
            set
            {
                this._CrlPrdMsts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlPrdMsts(CrlPrdMst entity)
        {
            this.SendPropertyChanging("CrlPrdMsts");
            entity.CrlCat = this;
        }
    
        private void detach_CrlPrdMsts(CrlPrdMst entity)
        {
            this.SendPropertyChanging("CrlPrdMsts");
            entity.CrlCat = null;
        }

        private void Initialize()
        {
            this._CrlPrdMsts = new EntitySet<CrlPrdMst>(new Action<CrlPrdMst>(this.attach_CrlPrdMsts), new Action<CrlPrdMst>(this.detach_CrlPrdMsts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlContract in the schema.
    /// </summary>
    [Table(Name = @"crl_contract")]
    [DataContract()]
    public partial class CrlContract : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ContractId;

        private long _DepartmentId;

        private string _ContractName;

        private System.Nullable<long> _ContractType;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private string _EmployeeId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContractIdChanging(long value);
        partial void OnContractIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnContractNameChanging(string value);
        partial void OnContractNameChanged();
        partial void OnContractTypeChanging(System.Nullable<long> value);
        partial void OnContractTypeChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlContract()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ContractId in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_ID", Storage = "_ContractId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long ContractId
        {
            get
            {
                return this._ContractId;
            }
            set
            {
                if (this._ContractId != value)
                {
                    this.OnContractIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContractId = value;
                    this.SendPropertyChanged("ContractId");
                    this.OnContractIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractName in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_NAME", Storage = "_ContractName", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string ContractName
        {
            get
            {
                return this._ContractName;
            }
            set
            {
                if (this._ContractName != value)
                {
                    this.OnContractNameChanging(value);
                    this.SendPropertyChanging();
                    this._ContractName = value;
                    this.SendPropertyChanged("ContractName");
                    this.OnContractNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractType in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_TYPE", Storage = "_ContractType", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> ContractType
        {
            get
            {
                return this._ContractType;
            }
            set
            {
                if (this._ContractType != value)
                {
                    this.OnContractTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ContractType = value;
                    this.SendPropertyChanged("ContractType");
                    this.OnContractTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", DbType = "nvarchar(20)")]
        [DataMember(Order=7)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCoupon in the schema.
    /// </summary>
    [Table(Name = @"crl_coupon")]
    [DataContract()]
    public partial class CrlCoupon : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CouponId;

        private string _CouponName;

        private System.Nullable<long> _CouponType;

        private System.Nullable<long> _DiscountValue;

        private System.Nullable<long> _DiscountPercent;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(long value);
        partial void OnCouponIdChanged();
        partial void OnCouponNameChanging(string value);
        partial void OnCouponNameChanged();
        partial void OnCouponTypeChanging(System.Nullable<long> value);
        partial void OnCouponTypeChanged();
        partial void OnDiscountValueChanging(System.Nullable<long> value);
        partial void OnDiscountValueChanged();
        partial void OnDiscountPercentChanging(System.Nullable<long> value);
        partial void OnDiscountPercentChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCoupon()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_ID", Storage = "_CouponId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponName in the schema.
        /// </summary>
        [Column(Name = @"COUPON_NAME", Storage = "_CouponName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string CouponName
        {
            get
            {
                return this._CouponName;
            }
            set
            {
                if (this._CouponName != value)
                {
                    this.OnCouponNameChanging(value);
                    this.SendPropertyChanging();
                    this._CouponName = value;
                    this.SendPropertyChanged("CouponName");
                    this.OnCouponNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponType in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE", Storage = "_CouponType", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> CouponType
        {
            get
            {
                return this._CouponType;
            }
            set
            {
                if (this._CouponType != value)
                {
                    this.OnCouponTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CouponType = value;
                    this.SendPropertyChanged("CouponType");
                    this.OnCouponTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountValue in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_VALUE", Storage = "_DiscountValue", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> DiscountValue
        {
            get
            {
                return this._DiscountValue;
            }
            set
            {
                if (this._DiscountValue != value)
                {
                    this.OnDiscountValueChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountValue = value;
                    this.SendPropertyChanged("DiscountValue");
                    this.OnDiscountValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPercent in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PERCENT", Storage = "_DiscountPercent", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> DiscountPercent
        {
            get
            {
                return this._DiscountPercent;
            }
            set
            {
                if (this._DiscountPercent != value)
                {
                    this.OnDiscountPercentChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPercent = value;
                    this.SendPropertyChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCouponTyp in the schema.
    /// </summary>
    [Table(Name = @"crl_coupon_typ")]
    [DataContract()]
    public partial class CrlCouponTyp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CouponTypeId;

        private string _CouponTypeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponTypeIdChanging(long value);
        partial void OnCouponTypeIdChanged();
        partial void OnCouponTypeNameChanging(string value);
        partial void OnCouponTypeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCouponTyp()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponTypeId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE_ID", Storage = "_CouponTypeId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CouponTypeId
        {
            get
            {
                return this._CouponTypeId;
            }
            set
            {
                if (this._CouponTypeId != value)
                {
                    this.OnCouponTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponTypeId = value;
                    this.SendPropertyChanged("CouponTypeId");
                    this.OnCouponTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponTypeName in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE_NAME", Storage = "_CouponTypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string CouponTypeName
        {
            get
            {
                return this._CouponTypeName;
            }
            set
            {
                if (this._CouponTypeName != value)
                {
                    this.OnCouponTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._CouponTypeName = value;
                    this.SendPropertyChanged("CouponTypeName");
                    this.OnCouponTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCtry in the schema.
    /// </summary>
    [Table(Name = @"crl_ctry")]
    [DataContract()]
    public partial class CrlCtry : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CountryId;

        private string _CountryName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCountryIdChanging(long value);
        partial void OnCountryIdChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCtry()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryName in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_NAME", Storage = "_CountryName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string CountryName
        {
            get
            {
                return this._CountryName;
            }
            set
            {
                if (this._CountryName != value)
                {
                    this.OnCountryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CountryName = value;
                    this.SendPropertyChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCust in the schema.
    /// </summary>
    [Table(Name = @"crl_cust")]
    [DataContract()]
    public partial class CrlCust : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CustomerId;

        private string _CustomerName;

        private System.Nullable<long> _MoneySpent;

        private System.Nullable<long> _BuyCount;

        private System.Nullable<System.DateTime> _NearestCome1;

        private System.Nullable<System.DateTime> _NearestCome2;

        private System.Nullable<System.DateTime> _NearestCome3;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(long value);
        partial void OnCustomerIdChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnMoneySpentChanging(System.Nullable<long> value);
        partial void OnMoneySpentChanged();
        partial void OnBuyCountChanging(System.Nullable<long> value);
        partial void OnBuyCountChanged();
        partial void OnNearestCome1Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome1Changed();
        partial void OnNearestCome2Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome2Changed();
        partial void OnNearestCome3Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome3Changed();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlCust()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerName in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_NAME", Storage = "_CustomerName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string CustomerName
        {
            get
            {
                return this._CustomerName;
            }
            set
            {
                if (this._CustomerName != value)
                {
                    this.OnCustomerNameChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerName = value;
                    this.SendPropertyChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneySpent in the schema.
        /// </summary>
        [Column(Name = @"MONEY_SPENT", Storage = "_MoneySpent", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> MoneySpent
        {
            get
            {
                return this._MoneySpent;
            }
            set
            {
                if (this._MoneySpent != value)
                {
                    this.OnMoneySpentChanging(value);
                    this.SendPropertyChanging();
                    this._MoneySpent = value;
                    this.SendPropertyChanged("MoneySpent");
                    this.OnMoneySpentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyCount in the schema.
        /// </summary>
        [Column(Name = @"BUY_COUNT", Storage = "_BuyCount", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> BuyCount
        {
            get
            {
                return this._BuyCount;
            }
            set
            {
                if (this._BuyCount != value)
                {
                    this.OnBuyCountChanging(value);
                    this.SendPropertyChanging();
                    this._BuyCount = value;
                    this.SendPropertyChanged("BuyCount");
                    this.OnBuyCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome1 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_1", Storage = "_NearestCome1", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> NearestCome1
        {
            get
            {
                return this._NearestCome1;
            }
            set
            {
                if (this._NearestCome1 != value)
                {
                    this.OnNearestCome1Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome1 = value;
                    this.SendPropertyChanged("NearestCome1");
                    this.OnNearestCome1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome2 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_2", Storage = "_NearestCome2", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> NearestCome2
        {
            get
            {
                return this._NearestCome2;
            }
            set
            {
                if (this._NearestCome2 != value)
                {
                    this.OnNearestCome2Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome2 = value;
                    this.SendPropertyChanged("NearestCome2");
                    this.OnNearestCome2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome3 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_3", Storage = "_NearestCome3", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> NearestCome3
        {
            get
            {
                return this._NearestCome3;
            }
            set
            {
                if (this._NearestCome3 != value)
                {
                    this.OnNearestCome3Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome3 = value;
                    this.SendPropertyChanged("NearestCome3");
                    this.OnNearestCome3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlCustDet in the schema.
    /// </summary>
    [Table(Name = @"crl_cust_det")]
    [DataContract()]
    public partial class CrlCustDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CustomerId;

        private string _Address;

        private System.Nullable<long> _CountryId;

        private System.Nullable<System.DateTime> _Birthday;

        private string _PassportNumber;

        private string _Cmnd;

        private System.Nullable<long> _MoneySpent;

        private System.Nullable<long> _BuyCount;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(long value);
        partial void OnCustomerIdChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCountryIdChanging(System.Nullable<long> value);
        partial void OnCountryIdChanged();
        partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnPassportNumberChanging(string value);
        partial void OnPassportNumberChanged();
        partial void OnCmndChanging(string value);
        partial void OnCmndChanged();
        partial void OnMoneySpentChanging(System.Nullable<long> value);
        partial void OnMoneySpentChanged();
        partial void OnBuyCountChanging(System.Nullable<long> value);
        partial void OnBuyCountChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        #endregion

        public CrlCustDet()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Birthday in the schema.
        /// </summary>
        [Column(Name = @"BIRTHDAY", Storage = "_Birthday", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PassportNumber in the schema.
        /// </summary>
        [Column(Name = @"PASSPORT_NUMBER", Storage = "_PassportNumber", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string PassportNumber
        {
            get
            {
                return this._PassportNumber;
            }
            set
            {
                if (this._PassportNumber != value)
                {
                    this.OnPassportNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PassportNumber = value;
                    this.SendPropertyChanged("PassportNumber");
                    this.OnPassportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cmnd in the schema.
        /// </summary>
        [Column(Name = @"CMND", Storage = "_Cmnd", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string Cmnd
        {
            get
            {
                return this._Cmnd;
            }
            set
            {
                if (this._Cmnd != value)
                {
                    this.OnCmndChanging(value);
                    this.SendPropertyChanging();
                    this._Cmnd = value;
                    this.SendPropertyChanged("Cmnd");
                    this.OnCmndChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneySpent in the schema.
        /// </summary>
        [Column(Name = @"MONEY_SPENT", Storage = "_MoneySpent", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> MoneySpent
        {
            get
            {
                return this._MoneySpent;
            }
            set
            {
                if (this._MoneySpent != value)
                {
                    this.OnMoneySpentChanging(value);
                    this.SendPropertyChanging();
                    this._MoneySpent = value;
                    this.SendPropertyChanged("MoneySpent");
                    this.OnMoneySpentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyCount in the schema.
        /// </summary>
        [Column(Name = @"BUY_COUNT", Storage = "_BuyCount", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> BuyCount
        {
            get
            {
                return this._BuyCount;
            }
            set
            {
                if (this._BuyCount != value)
                {
                    this.OnBuyCountChanging(value);
                    this.SendPropertyChanging();
                    this._BuyCount = value;
                    this.SendPropertyChanged("BuyCount");
                    this.OnBuyCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDept in the schema.
    /// </summary>
    [Table(Name = @"crl_dept")]
    [DataContract()]
    public partial class CrlDept : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private string _DepartmentName;

        private string _Address;

        private System.Nullable<long> _Active;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private EntitySet<CrlActiveDept> _CrlActiveDepts;

        private EntitySet<CrlDeptPo> _CrlDeptPos;

        private EntitySet<CrlDeptStkIn> _CrlDeptStkIns;

        private EntitySet<CrlDeptStkOut> _CrlDeptStkOuts;

        private EntitySet<CrlDeptStkOut> _CrlDeptStkOuts1;

        private EntitySet<CrlDeptStkOutDet> _CrlDeptStkOutDets;

        private EntitySet<CrlDeptTimeline> _CrlDeptTimelines;

        private EntitySet<CrlEmp> _CrlEmps;

        private EntitySet<CrlReicpt> _CrlReicpts;

        private EntitySet<CrlStkIn> _CrlStkIns;

        private EntitySet<CrlStkOut> _CrlStkOuts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnActiveChanging(System.Nullable<long> value);
        partial void OnActiveChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        #endregion

        public CrlDept()
        {
            this.Initialize();
            this._CrlActiveDepts = new EntitySet<CrlActiveDept>(new Action<CrlActiveDept>(this.attach_CrlActiveDepts), new Action<CrlActiveDept>(this.detach_CrlActiveDepts));
            this._CrlDeptPos = new EntitySet<CrlDeptPo>(new Action<CrlDeptPo>(this.attach_CrlDeptPos), new Action<CrlDeptPo>(this.detach_CrlDeptPos));
            this._CrlDeptStkIns = new EntitySet<CrlDeptStkIn>(new Action<CrlDeptStkIn>(this.attach_CrlDeptStkIns), new Action<CrlDeptStkIn>(this.detach_CrlDeptStkIns));
            this._CrlDeptStkOuts = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts));
            this._CrlDeptStkOuts1 = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts1), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts1));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlDeptTimelines = new EntitySet<CrlDeptTimeline>(new Action<CrlDeptTimeline>(this.attach_CrlDeptTimelines), new Action<CrlDeptTimeline>(this.detach_CrlDeptTimelines));
            this._CrlEmps = new EntitySet<CrlEmp>(new Action<CrlEmp>(this.attach_CrlEmps), new Action<CrlEmp>(this.detach_CrlEmps));
            this._CrlReicpts = new EntitySet<CrlReicpt>(new Action<CrlReicpt>(this.attach_CrlReicpts), new Action<CrlReicpt>(this.detach_CrlReicpts));
            this._CrlStkIns = new EntitySet<CrlStkIn>(new Action<CrlStkIn>(this.attach_CrlStkIns), new Action<CrlStkIn>(this.detach_CrlStkIns));
            this._CrlStkOuts = new EntitySet<CrlStkOut>(new Action<CrlStkOut>(this.attach_CrlStkOuts), new Action<CrlStkOut>(this.detach_CrlStkOuts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_NAME", Storage = "_DepartmentName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"ACTIVE", Storage = "_Active", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlActiveDept", Storage="_CrlActiveDepts", OtherKey="DepartmentId")]
        [DataMember(Order=17, EmitDefaultValue=false)]
        public EntitySet<CrlActiveDept> CrlActiveDepts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlActiveDepts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlActiveDepts;
            }
            set
            {
                this._CrlActiveDepts.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptPo", Storage="_CrlDeptPos", OtherKey="DepartmentId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<CrlDeptPo> CrlDeptPos
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptPos.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptPos;
            }
            set
            {
                this._CrlDeptPos.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptStkIn", Storage="_CrlDeptStkIns", OtherKey="DepartmentId")]
        [DataMember(Order=19, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkIn> CrlDeptStkIns
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkIns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkIns;
            }
            set
            {
                this._CrlDeptStkIns.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOut", Storage="_CrlDeptStkOuts", OtherKey="DepartmentId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOut> CrlDeptStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOuts;
            }
            set
            {
                this._CrlDeptStkOuts.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOut1", Storage="_CrlDeptStkOuts1", OtherKey="DestDepartmentId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOut> CrlDeptStkOuts1
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOuts1.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOuts1;
            }
            set
            {
                this._CrlDeptStkOuts1.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOutDet", Storage="_CrlDeptStkOutDets", OtherKey="StockOutId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOutDet> CrlDeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOutDets;
            }
            set
            {
                this._CrlDeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlDeptTimeline", Storage="_CrlDeptTimelines", OtherKey="DepartmentId")]
        [DataMember(Order=23, EmitDefaultValue=false)]
        public EntitySet<CrlDeptTimeline> CrlDeptTimelines
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptTimelines.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptTimelines;
            }
            set
            {
                this._CrlDeptTimelines.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlEmp", Storage="_CrlEmps", OtherKey="DepartmentId")]
        [DataMember(Order=24, EmitDefaultValue=false)]
        public EntitySet<CrlEmp> CrlEmps
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlEmps.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlEmps;
            }
            set
            {
                this._CrlEmps.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlReicpt", Storage="_CrlReicpts", OtherKey="DepartmentId")]
        [DataMember(Order=25, EmitDefaultValue=false)]
        public EntitySet<CrlReicpt> CrlReicpts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlReicpts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlReicpts;
            }
            set
            {
                this._CrlReicpts.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlStkIn", Storage="_CrlStkIns", OtherKey="SrcDepartmentId")]
        [DataMember(Order=26, EmitDefaultValue=false)]
        public EntitySet<CrlStkIn> CrlStkIns
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkIns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkIns;
            }
            set
            {
                this._CrlStkIns.Assign(value);
            }
        }

        [Association(Name="CrlDept_CrlStkOut", Storage="_CrlStkOuts", OtherKey="DepartmentId")]
        [DataMember(Order=27, EmitDefaultValue=false)]
        public EntitySet<CrlStkOut> CrlStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkOuts;
            }
            set
            {
                this._CrlStkOuts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlActiveDepts(CrlActiveDept entity)
        {
            this.SendPropertyChanging("CrlActiveDepts");
            entity.CrlDept = this;
        }
    
        private void detach_CrlActiveDepts(CrlActiveDept entity)
        {
            this.SendPropertyChanging("CrlActiveDepts");
            entity.CrlDept = null;
        }

        private void attach_CrlDeptPos(CrlDeptPo entity)
        {
            this.SendPropertyChanging("CrlDeptPos");
            entity.CrlDept = this;
        }
    
        private void detach_CrlDeptPos(CrlDeptPo entity)
        {
            this.SendPropertyChanging("CrlDeptPos");
            entity.CrlDept = null;
        }

        private void attach_CrlDeptStkIns(CrlDeptStkIn entity)
        {
            this.SendPropertyChanging("CrlDeptStkIns");
            entity.CrlDept = this;
        }
    
        private void detach_CrlDeptStkIns(CrlDeptStkIn entity)
        {
            this.SendPropertyChanging("CrlDeptStkIns");
            entity.CrlDept = null;
        }

        private void attach_CrlDeptStkOuts(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts");
            entity.CrlDept = this;
        }
    
        private void detach_CrlDeptStkOuts(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts");
            entity.CrlDept = null;
        }

        private void attach_CrlDeptStkOuts1(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts1");
            entity.CrlDept1 = this;
        }
    
        private void detach_CrlDeptStkOuts1(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts1");
            entity.CrlDept1 = null;
        }

        private void attach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlDept = this;
        }
    
        private void detach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlDept = null;
        }

        private void attach_CrlDeptTimelines(CrlDeptTimeline entity)
        {
            this.SendPropertyChanging("CrlDeptTimelines");
            entity.CrlDept = this;
        }
    
        private void detach_CrlDeptTimelines(CrlDeptTimeline entity)
        {
            this.SendPropertyChanging("CrlDeptTimelines");
            entity.CrlDept = null;
        }

        private void attach_CrlEmps(CrlEmp entity)
        {
            this.SendPropertyChanging("CrlEmps");
            entity.CrlDept = this;
        }
    
        private void detach_CrlEmps(CrlEmp entity)
        {
            this.SendPropertyChanging("CrlEmps");
            entity.CrlDept = null;
        }

        private void attach_CrlReicpts(CrlReicpt entity)
        {
            this.SendPropertyChanging("CrlReicpts");
            entity.CrlDept = this;
        }
    
        private void detach_CrlReicpts(CrlReicpt entity)
        {
            this.SendPropertyChanging("CrlReicpts");
            entity.CrlDept = null;
        }

        private void attach_CrlStkIns(CrlStkIn entity)
        {
            this.SendPropertyChanging("CrlStkIns");
            entity.CrlDept = this;
        }
    
        private void detach_CrlStkIns(CrlStkIn entity)
        {
            this.SendPropertyChanging("CrlStkIns");
            entity.CrlDept = null;
        }

        private void attach_CrlStkOuts(CrlStkOut entity)
        {
            this.SendPropertyChanging("CrlStkOuts");
            entity.CrlDept = this;
        }
    
        private void detach_CrlStkOuts(CrlStkOut entity)
        {
            this.SendPropertyChanging("CrlStkOuts");
            entity.CrlDept = null;
        }

        private void Initialize()
        {
            this._CrlActiveDepts = new EntitySet<CrlActiveDept>(new Action<CrlActiveDept>(this.attach_CrlActiveDepts), new Action<CrlActiveDept>(this.detach_CrlActiveDepts));
            this._CrlDeptPos = new EntitySet<CrlDeptPo>(new Action<CrlDeptPo>(this.attach_CrlDeptPos), new Action<CrlDeptPo>(this.detach_CrlDeptPos));
            this._CrlDeptStkIns = new EntitySet<CrlDeptStkIn>(new Action<CrlDeptStkIn>(this.attach_CrlDeptStkIns), new Action<CrlDeptStkIn>(this.detach_CrlDeptStkIns));
            this._CrlDeptStkOuts = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts));
            this._CrlDeptStkOuts1 = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts1), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts1));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlDeptTimelines = new EntitySet<CrlDeptTimeline>(new Action<CrlDeptTimeline>(this.attach_CrlDeptTimelines), new Action<CrlDeptTimeline>(this.detach_CrlDeptTimelines));
            this._CrlEmps = new EntitySet<CrlEmp>(new Action<CrlEmp>(this.attach_CrlEmps), new Action<CrlEmp>(this.detach_CrlEmps));
            this._CrlReicpts = new EntitySet<CrlReicpt>(new Action<CrlReicpt>(this.attach_CrlReicpts), new Action<CrlReicpt>(this.detach_CrlReicpts));
            this._CrlStkIns = new EntitySet<CrlStkIn>(new Action<CrlStkIn>(this.attach_CrlStkIns), new Action<CrlStkIn>(this.detach_CrlStkIns));
            this._CrlStkOuts = new EntitySet<CrlStkOut>(new Action<CrlStkOut>(this.attach_CrlStkOuts), new Action<CrlStkOut>(this.detach_CrlStkOuts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptCost in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_cost")]
    [DataContract()]
    public partial class CrlDeptCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private System.DateTime _CostDate;

        private System.Nullable<long> _CostType;

        private string _CostName;

        private string _CostDescription;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCostDateChanging(System.DateTime value);
        partial void OnCostDateChanged();
        partial void OnCostTypeChanging(System.Nullable<long> value);
        partial void OnCostTypeChanged();
        partial void OnCostNameChanging(string value);
        partial void OnCostNameChanged();
        partial void OnCostDescriptionChanging(string value);
        partial void OnCostDescriptionChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptCost()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostDate in the schema.
        /// </summary>
        [Column(Name = @"COST_DATE", Storage = "_CostDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime CostDate
        {
            get
            {
                return this._CostDate;
            }
            set
            {
                if (this._CostDate != value)
                {
                    this.OnCostDateChanging(value);
                    this.SendPropertyChanging();
                    this._CostDate = value;
                    this.SendPropertyChanged("CostDate");
                    this.OnCostDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostName in the schema.
        /// </summary>
        [Column(Name = @"COST_NAME", Storage = "_CostName", DbType = "nvarchar(500)")]
        [DataMember(Order=4)]
        public string CostName
        {
            get
            {
                return this._CostName;
            }
            set
            {
                if (this._CostName != value)
                {
                    this.OnCostNameChanging(value);
                    this.SendPropertyChanging();
                    this._CostName = value;
                    this.SendPropertyChanged("CostName");
                    this.OnCostNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostDescription in the schema.
        /// </summary>
        [Column(Name = @"COST_DESCRIPTION", Storage = "_CostDescription", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string CostDescription
        {
            get
            {
                return this._CostDescription;
            }
            set
            {
                if (this._CostDescription != value)
                {
                    this.OnCostDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._CostDescription = value;
                    this.SendPropertyChanged("CostDescription");
                    this.OnCostDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptMng in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_mng")]
    [DataContract()]
    public partial class CrlDeptMng : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private string _EmployeeId;

        private System.Nullable<long> _Position;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.DateTime _WorkingDay;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnPositionChanging(System.Nullable<long> value);
        partial void OnPositionChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptMng()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(45)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(45)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=8)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPo in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_po")]
    [DataContract()]
    public partial class CrlDeptPo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private long _DepartmentId;

        private System.Nullable<long> _PurchasePrice;

        private System.Nullable<long> _OrderStatus;

        private System.Nullable<long> _CustomerId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _PurchaseDescription;

        private System.Nullable<long> _PurchaseQuantity;

        private EntityRef<CrlDept> _CrlDept;

        private EntitySet<CrlDeptPoDet> _CrlDeptPoDets;

        private EntitySet<CrlReicpt> _CrlReicpts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchasePriceChanging(System.Nullable<long> value);
        partial void OnPurchasePriceChanged();
        partial void OnOrderStatusChanging(System.Nullable<long> value);
        partial void OnOrderStatusChanged();
        partial void OnCustomerIdChanging(System.Nullable<long> value);
        partial void OnCustomerIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnPurchaseDescriptionChanging(string value);
        partial void OnPurchaseDescriptionChanged();
        partial void OnPurchaseQuantityChanging(System.Nullable<long> value);
        partial void OnPurchaseQuantityChanged();
        #endregion

        public CrlDeptPo()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlReicpts = new EntitySet<CrlReicpt>(new Action<CrlReicpt>(this.attach_CrlReicpts), new Action<CrlReicpt>(this.detach_CrlReicpts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchasePrice in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_PRICE", Storage = "_PurchasePrice", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> PurchasePrice
        {
            get
            {
                return this._PurchasePrice;
            }
            set
            {
                if (this._PurchasePrice != value)
                {
                    this.OnPurchasePriceChanging(value);
                    this.SendPropertyChanging();
                    this._PurchasePrice = value;
                    this.SendPropertyChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderStatus in the schema.
        /// </summary>
        [Column(Name = @"ORDER_STATUS", Storage = "_OrderStatus", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> OrderStatus
        {
            get
            {
                return this._OrderStatus;
            }
            set
            {
                if (this._OrderStatus != value)
                {
                    this.OnOrderStatusChanging(value);
                    this.SendPropertyChanging();
                    this._OrderStatus = value;
                    this.SendPropertyChanged("OrderStatus");
                    this.OnOrderStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDescription in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_DESCRIPTION", Storage = "_PurchaseDescription", DbType = "nvarchar(500)")]
        [DataMember(Order=17)]
        public string PurchaseDescription
        {
            get
            {
                return this._PurchaseDescription;
            }
            set
            {
                if (this._PurchaseDescription != value)
                {
                    this.OnPurchaseDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseDescription = value;
                    this.SendPropertyChanged("PurchaseDescription");
                    this.OnPurchaseDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseQuantity in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_QUANTITY", Storage = "_PurchaseQuantity", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> PurchaseQuantity
        {
            get
            {
                return this._PurchaseQuantity;
            }
            set
            {
                if (this._PurchaseQuantity != value)
                {
                    this.OnPurchaseQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseQuantity = value;
                    this.SendPropertyChanged("PurchaseQuantity");
                    this.OnPurchaseQuantityChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptPo", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlDeptPos.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptPos.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlDeptPo_CrlDeptPoDet", Storage="_CrlDeptPoDets", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId")]
        [DataMember(Order=19, EmitDefaultValue=false)]
        public EntitySet<CrlDeptPoDet> CrlDeptPoDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptPoDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptPoDets;
            }
            set
            {
                this._CrlDeptPoDets.Assign(value);
            }
        }

        [Association(Name="CrlDeptPo_CrlReicpt", Storage="_CrlReicpts", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<CrlReicpt> CrlReicpts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlReicpts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlReicpts;
            }
            set
            {
                this._CrlReicpts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlDeptPo = this;
        }
    
        private void detach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlDeptPo = null;
        }

        private void attach_CrlReicpts(CrlReicpt entity)
        {
            this.SendPropertyChanging("CrlReicpts");
            entity.CrlDeptPo = this;
        }
    
        private void detach_CrlReicpts(CrlReicpt entity)
        {
            this.SendPropertyChanging("CrlReicpts");
            entity.CrlDeptPo = null;
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlReicpts = new EntitySet<CrlReicpt>(new Action<CrlReicpt>(this.attach_CrlReicpts), new Action<CrlReicpt>(this.detach_CrlReicpts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPoDet in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_po_det")]
    [DataContract()]
    public partial class CrlDeptPoDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private long _PurchaseOrderDetailId;

        private long _DepartmentId;

        private string _ProductId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<long> _Price;

        private System.Nullable<long> _PurchaseStatus;

        private System.Nullable<long> _TaxId;

        private System.Nullable<long> _PurchaseType;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _ProductMasterId;

        private string _Note;

        private System.Nullable<int> _AdhocCase;

        private EntityRef<CrlDeptPo> _CrlDeptPo;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(long value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnPurchaseStatusChanging(System.Nullable<long> value);
        partial void OnPurchaseStatusChanged();
        partial void OnTaxIdChanging(System.Nullable<long> value);
        partial void OnTaxIdChanged();
        partial void OnPurchaseTypeChanging(System.Nullable<long> value);
        partial void OnPurchaseTypeChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnAdhocCaseChanging(System.Nullable<int> value);
        partial void OnAdhocCaseChanged();
        #endregion

        public CrlDeptPoDet()
        {
            this.Initialize();
            this._CrlDeptPo  = default(EntityRef<CrlDeptPo>);
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._CrlDeptPo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDeptPo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseStatus in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_STATUS", Storage = "_PurchaseStatus", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> PurchaseStatus
        {
            get
            {
                return this._PurchaseStatus;
            }
            set
            {
                if (this._PurchaseStatus != value)
                {
                    this.OnPurchaseStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseStatus = value;
                    this.SendPropertyChanged("PurchaseStatus");
                    this.OnPurchaseStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseType in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_TYPE", Storage = "_PurchaseType", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> PurchaseType
        {
            get
            {
                return this._PurchaseType;
            }
            set
            {
                if (this._PurchaseType != value)
                {
                    this.OnPurchaseTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseType = value;
                    this.SendPropertyChanged("PurchaseType");
                    this.OnPurchaseTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL")]
        [DataMember(Order=21)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Name = @"NOTE", Storage = "_Note", DbType = "nvarchar(200)")]
        [DataMember(Order=22)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging();
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdhocCase in the schema.
        /// </summary>
        [Column(Name = @"ADHOC_CASE", Storage = "_AdhocCase", DbType = "int")]
        [DataMember(Order=23)]
        public System.Nullable<int> AdhocCase
        {
            get
            {
                return this._AdhocCase;
            }
            set
            {
                if (this._AdhocCase != value)
                {
                    this.OnAdhocCaseChanging(value);
                    this.SendPropertyChanging();
                    this._AdhocCase = value;
                    this.SendPropertyChanged("AdhocCase");
                    this.OnAdhocCaseChanged();
                }
            }
        }

        [Association(Name="CrlDeptPo_CrlDeptPoDet", Storage="_CrlDeptPo", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId", IsForeignKey=true)]
        public CrlDeptPo CrlDeptPo
        {
            get
            {
                return this._CrlDeptPo.Entity;
            }
            set
            {
                CrlDeptPo previousValue = this._CrlDeptPo.Entity;
                if ((previousValue != value) || (this._CrlDeptPo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDeptPo.Entity = null;
                        previousValue.CrlDeptPoDets.Remove(this);
                    }
                    this._CrlDeptPo.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptPoDets.Add(this);
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._PurchaseOrderId = default(string);
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDeptPo");
                }
            }
        }

        [Association(Name="CrlPrd_CrlDeptPoDet", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlDeptPoDets.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptPoDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptPoDet", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlDeptPoDets.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptPoDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDeptPo = default(EntityRef<CrlDeptPo>);
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPoDetLog in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_po_det_log")]
    [DataContract()]
    public partial class CrlDeptPoDetLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PurchaseOrderDetailLogId;

        private long _DepartmentId;

        private System.Nullable<long> _PurchaseOrderDetailId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderDetailLogIdChanging(long value);
        partial void OnPurchaseOrderDetailLogIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(System.Nullable<long> value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptPoDetLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailLogId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_LOG_ID", Storage = "_PurchaseOrderDetailLogId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long PurchaseOrderDetailLogId
        {
            get
            {
                return this._PurchaseOrderDetailLogId;
            }
            set
            {
                if (this._PurchaseOrderDetailLogId != value)
                {
                    this.OnPurchaseOrderDetailLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailLogId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailLogId");
                    this.OnPurchaseOrderDetailLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPoLog in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_po_log")]
    [DataContract()]
    public partial class CrlDeptPoLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PurchaseOrderLogId;

        private long _DepartmentId;

        private string _PurchaseOrderId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderLogIdChanging(long value);
        partial void OnPurchaseOrderLogIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptPoLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderLogId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_LOG_ID", Storage = "_PurchaseOrderLogId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long PurchaseOrderLogId
        {
            get
            {
                return this._PurchaseOrderLogId;
            }
            set
            {
                if (this._PurchaseOrderLogId != value)
                {
                    this.OnPurchaseOrderLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderLogId = value;
                    this.SendPropertyChanged("PurchaseOrderLogId");
                    this.OnPurchaseOrderLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=3)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPoPromo in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_po_promo")]
    [DataContract()]
    public partial class CrlDeptPoPromo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private long _PurchaseOrderDetailId;

        private long _Id;

        private long _DepartmentId;

        private long _GiftDepartmentId;

        private System.Nullable<long> _DepartmentPromotionId;

        private System.Nullable<long> _GiftId;

        private System.Nullable<long> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(long value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnGiftDepartmentIdChanging(long value);
        partial void OnGiftDepartmentIdChanged();
        partial void OnDepartmentPromotionIdChanging(System.Nullable<long> value);
        partial void OnDepartmentPromotionIdChanged();
        partial void OnGiftIdChanging(System.Nullable<long> value);
        partial void OnGiftIdChanged();
        partial void OnGiftProductIdChanging(System.Nullable<long> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptPoPromo()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_DEPARTMENT_ID", Storage = "_GiftDepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=5)]
        public long GiftDepartmentId
        {
            get
            {
                return this._GiftDepartmentId;
            }
            set
            {
                if (this._GiftDepartmentId != value)
                {
                    this.OnGiftDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftDepartmentId = value;
                    this.SendPropertyChanged("GiftDepartmentId");
                    this.OnGiftDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentPromotionId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_PROMOTION_ID", Storage = "_DepartmentPromotionId", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> DepartmentPromotionId
        {
            get
            {
                return this._DepartmentPromotionId;
            }
            set
            {
                if (this._DepartmentPromotionId != value)
                {
                    this.OnDepartmentPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentPromotionId = value;
                    this.SendPropertyChanged("DepartmentPromotionId");
                    this.OnDepartmentPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptPrmtn in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_prmtn")]
    [DataContract()]
    public partial class CrlDeptPrmtn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentPromotionId;

        private long _DepartmentId;

        private long _PromotionId;

        private string _ProductId;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentPromotionIdChanging(long value);
        partial void OnDepartmentPromotionIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPromotionIdChanging(long value);
        partial void OnPromotionIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptPrmtn()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentPromotionId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_PROMOTION_ID", Storage = "_DepartmentPromotionId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentPromotionId
        {
            get
            {
                return this._DepartmentPromotionId;
            }
            set
            {
                if (this._DepartmentPromotionId != value)
                {
                    this.OnDepartmentPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentPromotionId = value;
                    this.SendPropertyChanged("DepartmentPromotionId");
                    this.OnDepartmentPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionId in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_ID", Storage = "_PromotionId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=3)]
        public long PromotionId
        {
            get
            {
                return this._PromotionId;
            }
            set
            {
                if (this._PromotionId != value)
                {
                    this.OnPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionId = value;
                    this.SendPropertyChanged("PromotionId");
                    this.OnPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptRet in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_ret")]
    [DataContract()]
    public partial class CrlDeptRet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentReturnId;

        private string _ProductId;

        private System.Nullable<long> _DepartmentId;

        private System.Nullable<long> _ReturnStatus;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(long value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnDepartmentIdChanging(System.Nullable<long> value);
        partial void OnDepartmentIdChanged();
        partial void OnReturnStatusChanging(System.Nullable<long> value);
        partial void OnReturnStatusChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptRet()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnStatus in the schema.
        /// </summary>
        [Column(Name = @"RETURN_STATUS", Storage = "_ReturnStatus", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> ReturnStatus
        {
            get
            {
                return this._ReturnStatus;
            }
            set
            {
                if (this._ReturnStatus != value)
                {
                    this.OnReturnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnStatus = value;
                    this.SendPropertyChanged("ReturnStatus");
                    this.OnReturnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptRetCost in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_ret_cost")]
    [DataContract()]
    public partial class CrlDeptRetCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentReturnId;

        private long _CostType;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(long value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptRetCost()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptRetDet in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_ret_det")]
    [DataContract()]
    public partial class CrlDeptRetDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentReturnId;

        private string _ProductId;

        private string _ProductMasterId;

        private long _DepartmentId;

        private System.Nullable<long> _Quantity;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(long value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptRetDet()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptRetPo in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_ret_po")]
    [DataContract()]
    public partial class CrlDeptRetPo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private long _PurchaseOrderDetailId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _ReturnDate;

        private string _Description;

        private System.Nullable<long> _Quantity;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _NextPurchaseOrderId;

        private string _ProductId;

        private System.Nullable<long> _Price;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(long value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReturnDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnNextPurchaseOrderIdChanging(string value);
        partial void OnNextPurchaseOrderIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        #endregion

        public CrlDeptRetPo()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnDate in the schema.
        /// </summary>
        [Column(Name = @"RETURN_DATE", Storage = "_ReturnDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> ReturnDate
        {
            get
            {
                return this._ReturnDate;
            }
            set
            {
                if (this._ReturnDate != value)
                {
                    this.OnReturnDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnDate = value;
                    this.SendPropertyChanged("ReturnDate");
                    this.OnReturnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=7)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextPurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"NEXT_PURCHASE_ORDER_ID", Storage = "_NextPurchaseOrderId", DbType = "nvarchar(20)")]
        [DataMember(Order=18)]
        public string NextPurchaseOrderId
        {
            get
            {
                return this._NextPurchaseOrderId;
            }
            set
            {
                if (this._NextPurchaseOrderId != value)
                {
                    this.OnNextPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._NextPurchaseOrderId = value;
                    this.SendPropertyChanged("NextPurchaseOrderId");
                    this.OnNextPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=19)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStk in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk")]
    [DataContract()]
    public partial class CrlDeptStk : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<int> _Quantity;

        private System.Nullable<int> _OnStorePrice;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<int> _GoodQuantity;

        private System.Nullable<int> _ErrorQuantity;

        private System.Nullable<int> _LostQuantity;

        private System.Nullable<int> _DamageQuantity;

        private System.Nullable<int> _UnconfirmQuantity;

        private string _Position;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<int> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<int> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<int> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<int> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<int> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<int> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        #endregion

        public CrlDeptStk()
        {
            this.Initialize();
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "int")]
        [DataMember(Order=4)]
        public System.Nullable<int> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "int")]
        [DataMember(Order=5)]
        public System.Nullable<int> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "int")]
        [DataMember(Order=17)]
        public System.Nullable<int> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "int")]
        [DataMember(Order=19)]
        public System.Nullable<int> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "int")]
        [DataMember(Order=20)]
        public System.Nullable<int> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "int")]
        [DataMember(Order=21)]
        public System.Nullable<int> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "nvarchar(200)")]
        [DataMember(Order=22)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

        [Association(Name="CrlPrd_CrlDeptStk", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlDeptStks.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStks.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStk", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlDeptStks.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStks.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkHis in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_his")]
    [DataContract()]
    public partial class CrlDeptStkHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentStockHistoryId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<int> _Quantity;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Description;

        private System.Nullable<int> _GoodCount;

        private System.Nullable<int> _ErrorCount;

        private System.Nullable<int> _DamageCount;

        private System.Nullable<int> _LostCount;

        private System.Nullable<int> _UnconfirmCount;

        private long _DepartmentId;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentStockHistoryIdChanging(long value);
        partial void OnDepartmentStockHistoryIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodCountChanging(System.Nullable<int> value);
        partial void OnGoodCountChanged();
        partial void OnErrorCountChanging(System.Nullable<int> value);
        partial void OnErrorCountChanged();
        partial void OnDamageCountChanging(System.Nullable<int> value);
        partial void OnDamageCountChanged();
        partial void OnLostCountChanging(System.Nullable<int> value);
        partial void OnLostCountChanged();
        partial void OnUnconfirmCountChanging(System.Nullable<int> value);
        partial void OnUnconfirmCountChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        #endregion

        public CrlDeptStkHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentStockHistoryId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_STOCK_HISTORY_ID", Storage = "_DepartmentStockHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentStockHistoryId
        {
            get
            {
                return this._DepartmentStockHistoryId;
            }
            set
            {
                if (this._DepartmentStockHistoryId != value)
                {
                    this.OnDepartmentStockHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentStockHistoryId = value;
                    this.SendPropertyChanged("DepartmentStockHistoryId");
                    this.OnDepartmentStockHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "int")]
        [DataMember(Order=4)]
        public System.Nullable<int> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(200)")]
        [DataMember(Order=16)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodCount in the schema.
        /// </summary>
        [Column(Name = @"GOOD_COUNT", Storage = "_GoodCount", DbType = "int")]
        [DataMember(Order=17)]
        public System.Nullable<int> GoodCount
        {
            get
            {
                return this._GoodCount;
            }
            set
            {
                if (this._GoodCount != value)
                {
                    this.OnGoodCountChanging(value);
                    this.SendPropertyChanging();
                    this._GoodCount = value;
                    this.SendPropertyChanged("GoodCount");
                    this.OnGoodCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCount in the schema.
        /// </summary>
        [Column(Name = @"ERROR_COUNT", Storage = "_ErrorCount", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> ErrorCount
        {
            get
            {
                return this._ErrorCount;
            }
            set
            {
                if (this._ErrorCount != value)
                {
                    this.OnErrorCountChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCount = value;
                    this.SendPropertyChanged("ErrorCount");
                    this.OnErrorCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageCount in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_COUNT", Storage = "_DamageCount", DbType = "int")]
        [DataMember(Order=19)]
        public System.Nullable<int> DamageCount
        {
            get
            {
                return this._DamageCount;
            }
            set
            {
                if (this._DamageCount != value)
                {
                    this.OnDamageCountChanging(value);
                    this.SendPropertyChanging();
                    this._DamageCount = value;
                    this.SendPropertyChanged("DamageCount");
                    this.OnDamageCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostCount in the schema.
        /// </summary>
        [Column(Name = @"LOST_COUNT", Storage = "_LostCount", DbType = "int")]
        [DataMember(Order=20)]
        public System.Nullable<int> LostCount
        {
            get
            {
                return this._LostCount;
            }
            set
            {
                if (this._LostCount != value)
                {
                    this.OnLostCountChanging(value);
                    this.SendPropertyChanging();
                    this._LostCount = value;
                    this.SendPropertyChanged("LostCount");
                    this.OnLostCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmCount in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_COUNT", Storage = "_UnconfirmCount", DbType = "int")]
        [DataMember(Order=21)]
        public System.Nullable<int> UnconfirmCount
        {
            get
            {
                return this._UnconfirmCount;
            }
            set
            {
                if (this._UnconfirmCount != value)
                {
                    this.OnUnconfirmCountChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmCount = value;
                    this.SendPropertyChanged("UnconfirmCount");
                    this.OnUnconfirmCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=22)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkIn in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_in")]
    [DataContract()]
    public partial class CrlDeptStkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _StockInDate;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _ExportStatus;

        private System.Nullable<long> _StockInCost;

        private System.Nullable<long> _StockInType;

        private System.Nullable<long> _SrcDepartmentId;

        private System.Nullable<long> _TotalQuantity;

        private System.Nullable<long> _TotalAmount;

        private EntityRef<CrlDept> _CrlDept;

        private EntitySet<CrlDeptStkInDet> _CrlDeptStkInDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnStockInDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockInDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnExportStatusChanging(System.Nullable<long> value);
        partial void OnExportStatusChanged();
        partial void OnStockInCostChanging(System.Nullable<long> value);
        partial void OnStockInCostChanged();
        partial void OnStockInTypeChanging(System.Nullable<long> value);
        partial void OnStockInTypeChanged();
        partial void OnSrcDepartmentIdChanging(System.Nullable<long> value);
        partial void OnSrcDepartmentIdChanged();
        partial void OnTotalQuantityChanging(System.Nullable<long> value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalAmountChanging(System.Nullable<long> value);
        partial void OnTotalAmountChanged();
        #endregion

        public CrlDeptStkIn()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_DATE", Storage = "_StockInDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StockInDate
        {
            get
            {
                return this._StockInDate;
            }
            set
            {
                if (this._StockInDate != value)
                {
                    this.OnStockInDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockInDate = value;
                    this.SendPropertyChanged("StockInDate");
                    this.OnStockInDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(2000)")]
        [DataMember(Order=4)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExportStatus in the schema.
        /// </summary>
        [Column(Name = @"EXPORT_STATUS", Storage = "_ExportStatus", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExportStatus
        {
            get
            {
                return this._ExportStatus;
            }
            set
            {
                if (this._ExportStatus != value)
                {
                    this.OnExportStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ExportStatus = value;
                    this.SendPropertyChanged("ExportStatus");
                    this.OnExportStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInCost in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_COST", Storage = "_StockInCost", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> StockInCost
        {
            get
            {
                return this._StockInCost;
            }
            set
            {
                if (this._StockInCost != value)
                {
                    this.OnStockInCostChanging(value);
                    this.SendPropertyChanging();
                    this._StockInCost = value;
                    this.SendPropertyChanged("StockInCost");
                    this.OnStockInCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SrcDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"SRC_DEPARTMENT_ID", Storage = "_SrcDepartmentId", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> SrcDepartmentId
        {
            get
            {
                return this._SrcDepartmentId;
            }
            set
            {
                if (this._SrcDepartmentId != value)
                {
                    this.OnSrcDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._SrcDepartmentId = value;
                    this.SendPropertyChanged("SrcDepartmentId");
                    this.OnSrcDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "bigint")]
        [DataMember(Order=21)]
        public System.Nullable<long> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptStkIn", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlDeptStkIns.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkIns.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlDeptStkIn_CrlDeptStkInDet", Storage="_CrlDeptStkInDets", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkInDet> CrlDeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkInDets;
            }
            set
            {
                this._CrlDeptStkInDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlDeptStkIn = this;
        }
    
        private void detach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlDeptStkIn = null;
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkInCst in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_in_cst")]
    [DataContract()]
    public partial class CrlDeptStkInCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private long _CostType;

        private long _DepartmentId;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptStkInCst()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkInDet in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_in_det")]
    [DataContract()]
    public partial class CrlDeptStkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private string _ProductId;

        private string _ProductMasterId;

        private long _DepartmentId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _Price;

        private System.Nullable<long> _OnStorePrice;

        private System.Nullable<long> _Sold;

        private EntityRef<CrlDeptStkIn> _CrlDeptStkIn;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnOnStorePriceChanging(System.Nullable<long> value);
        partial void OnOnStorePriceChanged();
        partial void OnSoldChanging(System.Nullable<long> value);
        partial void OnSoldChanged();
        #endregion

        public CrlDeptStkInDet()
        {
            this.Initialize();
            this._CrlDeptStkIn  = default(EntityRef<CrlDeptStkIn>);
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    if (this._CrlDeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sold in the schema.
        /// </summary>
        [Column(Name = @"SOLD", Storage = "_Sold", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> Sold
        {
            get
            {
                return this._Sold;
            }
            set
            {
                if (this._Sold != value)
                {
                    this.OnSoldChanging(value);
                    this.SendPropertyChanging();
                    this._Sold = value;
                    this.SendPropertyChanged("Sold");
                    this.OnSoldChanged();
                }
            }
        }

        [Association(Name="CrlDeptStkIn_CrlDeptStkInDet", Storage="_CrlDeptStkIn", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId", IsForeignKey=true)]
        public CrlDeptStkIn CrlDeptStkIn
        {
            get
            {
                return this._CrlDeptStkIn.Entity;
            }
            set
            {
                CrlDeptStkIn previousValue = this._CrlDeptStkIn.Entity;
                if ((previousValue != value) || (this._CrlDeptStkIn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDeptStkIn.Entity = null;
                        previousValue.CrlDeptStkInDets.Remove(this);
                    }
                    this._CrlDeptStkIn.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkInDets.Add(this);
                        this._StockInId = value.StockInId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockInId = default(string);
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDeptStkIn");
                }
            }
        }

        [Association(Name="CrlPrd_CrlDeptStkInDet", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlDeptStkInDets.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkInDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStkInDet", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlDeptStkInDets.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkInDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDeptStkIn = default(EntityRef<CrlDeptStkIn>);
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkInHis in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_in_his")]
    [DataContract()]
    public partial class CrlDeptStkInHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private long _SourceDepartmentid;

        private long _StockOutId;

        private long _DestDepartmentId;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnSourceDepartmentidChanging(long value);
        partial void OnSourceDepartmentidChanged();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        partial void OnDestDepartmentIdChanging(long value);
        partial void OnDestDepartmentIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptStkInHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceDepartmentid in the schema.
        /// </summary>
        [Column(Name = @"SOURCE_DEPARTMENTID", Storage = "_SourceDepartmentid", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long SourceDepartmentid
        {
            get
            {
                return this._SourceDepartmentid;
            }
            set
            {
                if (this._SourceDepartmentid != value)
                {
                    this.OnSourceDepartmentidChanging(value);
                    this.SendPropertyChanging();
                    this._SourceDepartmentid = value;
                    this.SendPropertyChanged("SourceDepartmentid");
                    this.OnSourceDepartmentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DestDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEST_DEPARTMENT_ID", Storage = "_DestDepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public long DestDepartmentId
        {
            get
            {
                return this._DestDepartmentId;
            }
            set
            {
                if (this._DestDepartmentId != value)
                {
                    this.OnDestDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DestDepartmentId = value;
                    this.SendPropertyChanged("DestDepartmentId");
                    this.OnDestDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(200)")]
        [DataMember(Order=5)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkOut in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_out")]
    [DataContract()]
    public partial class CrlDeptStkOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockOutId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _StockOutDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Description;

        private System.Nullable<long> _DefectStatusId;

        private long _ConfirmFlg;

        private System.Nullable<long> _DestDepartmentId;

        private System.Nullable<long> _TotalQuantity;

        private System.Nullable<long> _TotalAmount;

        private EntityRef<CrlDept> _CrlDept;

        private EntityRef<CrlDept> _CrlDept1;

        private EntitySet<CrlDeptStkOutDet> _CrlDeptStkOutDets;

        private EntityRef<CrlStkDefStat> _CrlStkDefStat;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(long value);
        partial void OnConfirmFlgChanged();
        partial void OnDestDepartmentIdChanging(System.Nullable<long> value);
        partial void OnDestDepartmentIdChanged();
        partial void OnTotalQuantityChanging(System.Nullable<long> value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalAmountChanging(System.Nullable<long> value);
        partial void OnTotalAmountChanged();
        #endregion

        public CrlDeptStkOut()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlDept1  = default(EntityRef<CrlDept>);
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlStkDefStat  = default(EntityRef<CrlStkDefStat>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(200)")]
        [DataMember(Order=15)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    if (this._CrlStkDefStat.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=17)]
        public long ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DestDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEST_DEPARTMENT_ID", Storage = "_DestDepartmentId", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> DestDepartmentId
        {
            get
            {
                return this._DestDepartmentId;
            }
            set
            {
                if (this._DestDepartmentId != value)
                {
                    if (this._CrlDept1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDestDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DestDepartmentId = value;
                    this.SendPropertyChanged("DestDepartmentId");
                    this.OnDestDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOut", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlDeptStkOuts.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOuts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOut1", Storage="_CrlDept1", ThisKey="DestDepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept1
        {
            get
            {
                return this._CrlDept1.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept1.Entity;
                if ((previousValue != value) || (this._CrlDept1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept1.Entity = null;
                        previousValue.CrlDeptStkOuts1.Remove(this);
                    }
                    this._CrlDept1.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOuts1.Add(this);
                        this._DestDepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DestDepartmentId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlDept1");
                }
            }
        }

        [Association(Name="CrlDeptStkOut_CrlDeptStkOutDet", Storage="_CrlDeptStkOutDets", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOutDet> CrlDeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOutDets;
            }
            set
            {
                this._CrlDeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="CrlStkDefStat_CrlDeptStkOut", Storage="_CrlStkDefStat", ThisKey="DefectStatusId", IsForeignKey=true)]
        public CrlStkDefStat CrlStkDefStat
        {
            get
            {
                return this._CrlStkDefStat.Entity;
            }
            set
            {
                CrlStkDefStat previousValue = this._CrlStkDefStat.Entity;
                if ((previousValue != value) || (this._CrlStkDefStat.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlStkDefStat.Entity = null;
                        previousValue.CrlDeptStkOuts.Remove(this);
                    }
                    this._CrlStkDefStat.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOuts.Add(this);
                        this._DefectStatusId = value.DefectStatusId;
                    }
                    else
                    {
                        this._DefectStatusId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlStkDefStat");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlDeptStkOut = this;
        }
    
        private void detach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlDeptStkOut = null;
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlDept1 = default(EntityRef<CrlDept>);
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlStkDefStat = default(EntityRef<CrlStkDefStat>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkOutCst in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_out_cst")]
    [DataContract()]
    public partial class CrlDeptStkOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockOutId;

        private long _CostType;

        private long _DepartmentId;

        private long _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCostChanging(long value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptStkOutCst()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=4)]
        public long Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkOutDet in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_out_det")]
    [DataContract()]
    public partial class CrlDeptStkOutDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockOutId;

        private string _ProductId;

        private string _ProductMasterId;

        private long _DepartmentId;

        private System.Nullable<long> _Quantity;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _DefectStatusId;

        private long _StockOutDetailId;

        private System.Nullable<long> _GoodQuantity;

        private System.Nullable<long> _ErrorQuantity;

        private System.Nullable<long> _DamageQuantity;

        private System.Nullable<long> _LostQuantity;

        private System.Nullable<long> _UnconfirmQuantity;

        private System.Nullable<long> _Price;

        private System.Nullable<long> _Amount;

        private EntityRef<CrlDept> _CrlDept;

        private EntityRef<CrlDeptStkOut> _CrlDeptStkOut;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnStockOutDetailIdChanging(long value);
        partial void OnStockOutDetailIdChanged();
        partial void OnGoodQuantityChanging(System.Nullable<long> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<long> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<long> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<long> value);
        partial void OnLostQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<long> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnAmountChanging(System.Nullable<long> value);
        partial void OnAmountChanged();
        #endregion

        public CrlDeptStkOutDet()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlDeptStkOut  = default(EntityRef<CrlDeptStkOut>);
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDeptStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDetailId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DETAIL_ID", Storage = "_StockOutDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=19)]
        public long StockOutDetailId
        {
            get
            {
                return this._StockOutDetailId;
            }
            set
            {
                if (this._StockOutDetailId != value)
                {
                    this.OnStockOutDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDetailId = value;
                    this.SendPropertyChanged("StockOutDetailId");
                    this.OnStockOutDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "bigint")]
        [DataMember(Order=21)]
        public System.Nullable<long> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "bigint")]
        [DataMember(Order=22)]
        public System.Nullable<long> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "bigint")]
        [DataMember(Order=23)]
        public System.Nullable<long> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "bigint")]
        [DataMember(Order=24)]
        public System.Nullable<long> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=25)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"AMOUNT", Storage = "_Amount", DbType = "bigint")]
        [DataMember(Order=26)]
        public System.Nullable<long> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptStkOutDet", Storage="_CrlDept", ThisKey="StockOutId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlDeptStkOutDets.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOutDets.Add(this);
                        this._StockOutId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockOutId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlDeptStkOut_CrlDeptStkOutDet", Storage="_CrlDeptStkOut", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId", IsForeignKey=true)]
        public CrlDeptStkOut CrlDeptStkOut
        {
            get
            {
                return this._CrlDeptStkOut.Entity;
            }
            set
            {
                CrlDeptStkOut previousValue = this._CrlDeptStkOut.Entity;
                if ((previousValue != value) || (this._CrlDeptStkOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDeptStkOut.Entity = null;
                        previousValue.CrlDeptStkOutDets.Remove(this);
                    }
                    this._CrlDeptStkOut.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOutDets.Add(this);
                        this._StockOutId = value.StockOutId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockOutId = default(long);
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDeptStkOut");
                }
            }
        }

        [Association(Name="CrlPrd_CrlDeptStkOutDet", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlDeptStkOutDets.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOutDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStkOutDet", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlDeptStkOutDets.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptStkOutDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlDeptStkOut = default(EntityRef<CrlDeptStkOut>);
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkTempValid in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_temp_valid")]
    [DataContract()]
    public partial class CrlDeptStkTempValid : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<int> _Quantity;

        private System.Nullable<long> _OnStorePrice;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<int> _GoodQuantity;

        private System.Nullable<int> _ErrorQuantity;

        private System.Nullable<int> _LostQuantity;

        private System.Nullable<int> _DamageQuantity;

        private System.Nullable<int> _UnconfirmQuantity;

        private long _Fixed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<long> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<int> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<int> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<int> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<int> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<int> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnFixedChanging(long value);
        partial void OnFixedChanged();
        #endregion

        public CrlDeptStkTempValid()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "int")]
        [DataMember(Order=4)]
        public System.Nullable<int> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=6)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "int")]
        [DataMember(Order=17)]
        public System.Nullable<int> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "int")]
        [DataMember(Order=19)]
        public System.Nullable<int> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "int")]
        [DataMember(Order=20)]
        public System.Nullable<int> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "int")]
        [DataMember(Order=21)]
        public System.Nullable<int> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fixed in the schema.
        /// </summary>
        [Column(Name = @"FIXED", Storage = "_Fixed", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=22)]
        public long Fixed
        {
            get
            {
                return this._Fixed;
            }
            set
            {
                if (this._Fixed != value)
                {
                    this.OnFixedChanging(value);
                    this.SendPropertyChanging();
                    this._Fixed = value;
                    this.SendPropertyChanged("Fixed");
                    this.OnFixedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptStkTempValidSave in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_stk_temp_valid_save")]
    [DataContract()]
    public partial class CrlDeptStkTempValidSave : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<long> _OnStorePrice;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _GoodQuantity;

        private System.Nullable<long> _ErrorQuantity;

        private System.Nullable<long> _LostQuantity;

        private System.Nullable<long> _DamageQuantity;

        private System.Nullable<long> _UnconfirmQuantity;

        private long _Fixed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<long> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<long> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<long> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<long> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<long> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<long> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnFixedChanging(long value);
        partial void OnFixedChanged();
        #endregion

        public CrlDeptStkTempValidSave()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=6)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "bigint")]
        [DataMember(Order=21)]
        public System.Nullable<long> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fixed in the schema.
        /// </summary>
        [Column(Name = @"FIXED", Storage = "_Fixed", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=22)]
        public long Fixed
        {
            get
            {
                return this._Fixed;
            }
            set
            {
                if (this._Fixed != value)
                {
                    this.OnFixedChanging(value);
                    this.SendPropertyChanging();
                    this._Fixed = value;
                    this.SendPropertyChanged("Fixed");
                    this.OnFixedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDeptTimeline in the schema.
    /// </summary>
    [Table(Name = @"crl_dept_timeline")]
    [DataContract()]
    public partial class CrlDeptTimeline : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private long _Period;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;

        private System.DateTime _WorkingDay;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<CrlDept> _CrlDept;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPeriodChanging(long value);
        partial void OnPeriodChanged();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDeptTimeline()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Name = @"PERIOD", Storage = "_Period", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "datetime NOT NULL")]
        [DataMember(Order=5)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(45)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(45)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlDept_CrlDeptTimeline", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlDeptTimelines.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlDeptTimelines.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlDistbtor in the schema.
    /// </summary>
    [Table(Name = @"crl_distbtor")]
    [DataContract()]
    public partial class CrlDistbtor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DistributorId;

        private string _DistributorName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDistributorIdChanging(long value);
        partial void OnDistributorIdChanged();
        partial void OnDistributorNameChanging(string value);
        partial void OnDistributorNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlDistbtor()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_ID", Storage = "_DistributorId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DistributorName in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_NAME", Storage = "_DistributorName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string DistributorName
        {
            get
            {
                return this._DistributorName;
            }
            set
            {
                if (this._DistributorName != value)
                {
                    this.OnDistributorNameChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorName = value;
                    this.SendPropertyChanged("DistributorName");
                    this.OnDistributorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlEmp in the schema.
    /// </summary>
    [Table(Name = @"crl_emp")]
    [DataContract()]
    public partial class CrlEmp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private EntityRef<CrlDept> _CrlDept;

        private EntityRef<CrlEmpInfo> _CrlEmpInfo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        #endregion

        public CrlEmp()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlEmpInfo  = default(EntityRef<CrlEmpInfo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    if (this._CrlEmpInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=14)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "datetime")]
        [DataMember(Order=15)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlEmp", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlEmps.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlEmps.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlEmpInfo_CrlEmp", Storage="_CrlEmpInfo", ThisKey="EmployeeId", IsForeignKey=true)]
        public CrlEmpInfo CrlEmpInfo
        {
            get
            {
                return this._CrlEmpInfo.Entity;
            }
            set
            {
                CrlEmpInfo previousValue = this._CrlEmpInfo.Entity;
                if ((previousValue != value) || (this._CrlEmpInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlEmpInfo.Entity = null;
                        previousValue.CrlEmps.Remove(this);
                    }
                    this._CrlEmpInfo.Entity = value;
                    if (value != null)
                    {
                        value.CrlEmps.Add(this);
                        this._EmployeeId = value.EmployeeId;
                    }
                    else
                    {
                        this._EmployeeId = default(string);
                    }
                    this.SendPropertyChanged("CrlEmpInfo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlEmpInfo = default(EntityRef<CrlEmpInfo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlEmpDayoff in the schema.
    /// </summary>
    [Table(Name = @"crl_emp_dayoff")]
    [DataContract()]
    public partial class CrlEmpDayoff : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _DayoffTime;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDayoffTimeChanging(System.DateTime value);
        partial void OnDayoffTimeChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlEmpDayoff()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DayoffTime in the schema.
        /// </summary>
        [Column(Name = @"DAYOFF_TIME", Storage = "_DayoffTime", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime DayoffTime
        {
            get
            {
                return this._DayoffTime;
            }
            set
            {
                if (this._DayoffTime != value)
                {
                    this.OnDayoffTimeChanging(value);
                    this.SendPropertyChanging();
                    this._DayoffTime = value;
                    this.SendPropertyChanged("DayoffTime");
                    this.OnDayoffTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlEmpInfo in the schema.
    /// </summary>
    [Table(Name = @"crl_emp_info")]
    [DataContract()]
    public partial class CrlEmpInfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private string _EmployeeName;

        private string _Address;

        private System.Nullable<System.DateTime> _Birthday;

        private System.Nullable<long> _ContractId;

        private System.Nullable<long> _Salary;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private string _Manager;

        private string _Barcode;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlEmp> _CrlEmps;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnEmployeeNameChanging(string value);
        partial void OnEmployeeNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnContractIdChanging(System.Nullable<long> value);
        partial void OnContractIdChanged();
        partial void OnSalaryChanging(System.Nullable<long> value);
        partial void OnSalaryChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnManagerChanging(string value);
        partial void OnManagerChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlEmpInfo()
        {
            this.Initialize();
            this._CrlEmps = new EntitySet<CrlEmp>(new Action<CrlEmp>(this.attach_CrlEmps), new Action<CrlEmp>(this.detach_CrlEmps));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeName in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_NAME", Storage = "_EmployeeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string EmployeeName
        {
            get
            {
                return this._EmployeeName;
            }
            set
            {
                if (this._EmployeeName != value)
                {
                    this.OnEmployeeNameChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeName = value;
                    this.SendPropertyChanged("EmployeeName");
                    this.OnEmployeeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Birthday in the schema.
        /// </summary>
        [Column(Name = @"BIRTHDAY", Storage = "_Birthday", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractId in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_ID", Storage = "_ContractId", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> ContractId
        {
            get
            {
                return this._ContractId;
            }
            set
            {
                if (this._ContractId != value)
                {
                    this.OnContractIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContractId = value;
                    this.SendPropertyChanged("ContractId");
                    this.OnContractIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salary in the schema.
        /// </summary>
        [Column(Name = @"SALARY", Storage = "_Salary", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Salary
        {
            get
            {
                return this._Salary;
            }
            set
            {
                if (this._Salary != value)
                {
                    this.OnSalaryChanging(value);
                    this.SendPropertyChanging();
                    this._Salary = value;
                    this.SendPropertyChanged("Salary");
                    this.OnSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Manager in the schema.
        /// </summary>
        [Column(Name = @"MANAGER", Storage = "_Manager", DbType = "nvarchar(20)")]
        [DataMember(Order=11)]
        public string Manager
        {
            get
            {
                return this._Manager;
            }
            set
            {
                if (this._Manager != value)
                {
                    this.OnManagerChanging(value);
                    this.SendPropertyChanging();
                    this._Manager = value;
                    this.SendPropertyChanged("Manager");
                    this.OnManagerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "nvarchar(10)")]
        [DataMember(Order=12)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlEmpInfo_CrlEmp", Storage="_CrlEmps", OtherKey="EmployeeId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<CrlEmp> CrlEmps
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlEmps.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlEmps;
            }
            set
            {
                this._CrlEmps.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlEmps(CrlEmp entity)
        {
            this.SendPropertyChanging("CrlEmps");
            entity.CrlEmpInfo = this;
        }
    
        private void detach_CrlEmps(CrlEmp entity)
        {
            this.SendPropertyChanging("CrlEmps");
            entity.CrlEmpInfo = null;
        }

        private void Initialize()
        {
            this._CrlEmps = new EntitySet<CrlEmp>(new Action<CrlEmp>(this.attach_CrlEmps), new Action<CrlEmp>(this.detach_CrlEmps));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlEmpMoney in the schema.
    /// </summary>
    [Table(Name = @"crl_emp_money")]
    [DataContract()]
    public partial class CrlEmpMoney : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _DateLogin;

        private System.Nullable<System.DateTime> _DateLogout;

        private string _WorkingDay;

        private System.Nullable<long> _InMoney;

        private System.Nullable<long> _OutMoney;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnDateLoginChanging(System.Nullable<System.DateTime> value);
        partial void OnDateLoginChanged();
        partial void OnDateLogoutChanging(System.Nullable<System.DateTime> value);
        partial void OnDateLogoutChanged();
        partial void OnWorkingDayChanging(string value);
        partial void OnWorkingDayChanged();
        partial void OnInMoneyChanging(System.Nullable<long> value);
        partial void OnInMoneyChanged();
        partial void OnOutMoneyChanging(System.Nullable<long> value);
        partial void OnOutMoneyChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlEmpMoney()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateLogin in the schema.
        /// </summary>
        [Column(Name = @"DATE_LOGIN", Storage = "_DateLogin", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> DateLogin
        {
            get
            {
                return this._DateLogin;
            }
            set
            {
                if (this._DateLogin != value)
                {
                    this.OnDateLoginChanging(value);
                    this.SendPropertyChanging();
                    this._DateLogin = value;
                    this.SendPropertyChanged("DateLogin");
                    this.OnDateLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateLogout in the schema.
        /// </summary>
        [Column(Name = @"DATE_LOGOUT", Storage = "_DateLogout", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> DateLogout
        {
            get
            {
                return this._DateLogout;
            }
            set
            {
                if (this._DateLogout != value)
                {
                    this.OnDateLogoutChanging(value);
                    this.SendPropertyChanging();
                    this._DateLogout = value;
                    this.SendPropertyChanged("DateLogout");
                    this.OnDateLogoutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "nvarchar(45) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=5)]
        public string WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InMoney in the schema.
        /// </summary>
        [Column(Name = @"IN_MONEY", Storage = "_InMoney", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> InMoney
        {
            get
            {
                return this._InMoney;
            }
            set
            {
                if (this._InMoney != value)
                {
                    this.OnInMoneyChanging(value);
                    this.SendPropertyChanging();
                    this._InMoney = value;
                    this.SendPropertyChanged("InMoney");
                    this.OnInMoneyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutMoney in the schema.
        /// </summary>
        [Column(Name = @"OUT_MONEY", Storage = "_OutMoney", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> OutMoney
        {
            get
            {
                return this._OutMoney;
            }
            set
            {
                if (this._OutMoney != value)
                {
                    this.OnOutMoneyChanging(value);
                    this.SendPropertyChanging();
                    this._OutMoney = value;
                    this.SendPropertyChanged("OutMoney");
                    this.OnOutMoneyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlEmpReward in the schema.
    /// </summary>
    [Table(Name = @"crl_emp_reward")]
    [DataContract()]
    public partial class CrlEmpReward : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _RewardDate;

        private long _DepartmentId;

        private System.Nullable<long> _RewardValue;

        private string _RewardName;

        private System.Nullable<long> _MoneyValue;

        private System.Nullable<long> _GiftId;

        private System.Nullable<long> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnRewardDateChanging(System.DateTime value);
        partial void OnRewardDateChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnRewardValueChanging(System.Nullable<long> value);
        partial void OnRewardValueChanged();
        partial void OnRewardNameChanging(string value);
        partial void OnRewardNameChanged();
        partial void OnMoneyValueChanging(System.Nullable<long> value);
        partial void OnMoneyValueChanged();
        partial void OnGiftIdChanging(System.Nullable<long> value);
        partial void OnGiftIdChanged();
        partial void OnGiftProductIdChanging(System.Nullable<long> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlEmpReward()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardDate in the schema.
        /// </summary>
        [Column(Name = @"REWARD_DATE", Storage = "_RewardDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime RewardDate
        {
            get
            {
                return this._RewardDate;
            }
            set
            {
                if (this._RewardDate != value)
                {
                    this.OnRewardDateChanging(value);
                    this.SendPropertyChanging();
                    this._RewardDate = value;
                    this.SendPropertyChanged("RewardDate");
                    this.OnRewardDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardValue in the schema.
        /// </summary>
        [Column(Name = @"REWARD_VALUE", Storage = "_RewardValue", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> RewardValue
        {
            get
            {
                return this._RewardValue;
            }
            set
            {
                if (this._RewardValue != value)
                {
                    this.OnRewardValueChanging(value);
                    this.SendPropertyChanging();
                    this._RewardValue = value;
                    this.SendPropertyChanged("RewardValue");
                    this.OnRewardValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardName in the schema.
        /// </summary>
        [Column(Name = @"REWARD_NAME", Storage = "_RewardName", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string RewardName
        {
            get
            {
                return this._RewardName;
            }
            set
            {
                if (this._RewardName != value)
                {
                    this.OnRewardNameChanging(value);
                    this.SendPropertyChanging();
                    this._RewardName = value;
                    this.SendPropertyChanged("RewardName");
                    this.OnRewardNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneyValue in the schema.
        /// </summary>
        [Column(Name = @"MONEY_VALUE", Storage = "_MoneyValue", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> MoneyValue
        {
            get
            {
                return this._MoneyValue;
            }
            set
            {
                if (this._MoneyValue != value)
                {
                    this.OnMoneyValueChanging(value);
                    this.SendPropertyChanging();
                    this._MoneyValue = value;
                    this.SendPropertyChanged("MoneyValue");
                    this.OnMoneyValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlEmpWrkgDay in the schema.
    /// </summary>
    [Table(Name = @"crl_emp_wrkg_days")]
    [DataContract()]
    public partial class CrlEmpWrkgDay : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _WorkingDay;

        private System.Nullable<long> _Period;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnPeriodChanging(System.Nullable<long> value);
        partial void OnPeriodChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        #endregion

        public CrlEmpWrkgDay()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Name = @"PERIOD", Storage = "_Period", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=4)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "datetime")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "datetime")]
        [DataMember(Order=17)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlExPrdColor in the schema.
    /// </summary>
    [Table(Name = @"crl_ex_prd_color")]
    [DataContract()]
    public partial class CrlExPrdColor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ColorId;

        private string _ColorName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlPrd> _CrlPrds;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnColorIdChanging(int value);
        partial void OnColorIdChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlExPrdColor()
        {
            this.Initialize();
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ColorId in the schema.
        /// </summary>
        [Column(Name = @"COLOR_ID", Storage = "_ColorId", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public int ColorId
        {
            get
            {
                return this._ColorId;
            }
            set
            {
                if (this._ColorId != value)
                {
                    this.OnColorIdChanging(value);
                    this.SendPropertyChanging();
                    this._ColorId = value;
                    this.SendPropertyChanged("ColorId");
                    this.OnColorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"COLOR_NAME", Storage = "_ColorName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=9)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=10)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=11)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlExPrdColor_CrlPrd", Storage="_CrlPrds", OtherKey="ExFld1")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<CrlPrd> CrlPrds
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlPrds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlPrds;
            }
            set
            {
                this._CrlPrds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlExPrdColor = this;
        }
    
        private void detach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlExPrdColor = null;
        }

        private void Initialize()
        {
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlExPrdSize in the schema.
    /// </summary>
    [Table(Name = @"crl_ex_prd_size")]
    [DataContract()]
    public partial class CrlExPrdSize : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _SizeId;

        private string _SizeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlPrd> _CrlPrds;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSizeIdChanging(int value);
        partial void OnSizeIdChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlExPrdSize()
        {
            this.Initialize();
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SizeId in the schema.
        /// </summary>
        [Column(Name = @"SIZE_ID", Storage = "_SizeId", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public int SizeId
        {
            get
            {
                return this._SizeId;
            }
            set
            {
                if (this._SizeId != value)
                {
                    this.OnSizeIdChanging(value);
                    this.SendPropertyChanging();
                    this._SizeId = value;
                    this.SendPropertyChanged("SizeId");
                    this.OnSizeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"SIZE_NAME", Storage = "_SizeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=9)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=10)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=11)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlExPrdSize_CrlPrd", Storage="_CrlPrds", OtherKey="ExFld2")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<CrlPrd> CrlPrds
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlPrds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlPrds;
            }
            set
            {
                this._CrlPrds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlExPrdSize = this;
        }
    
        private void detach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlExPrdSize = null;
        }

        private void Initialize()
        {
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlGift in the schema.
    /// </summary>
    [Table(Name = @"crl_gift")]
    [DataContract()]
    public partial class CrlGift : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _GiftId;

        private long _DepartmentId;

        private string _GiftName;

        private System.Nullable<long> _Quantity;

        private System.Nullable<long> _SupplierId;

        private System.Nullable<long> _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGiftIdChanging(long value);
        partial void OnGiftIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnGiftNameChanging(string value);
        partial void OnGiftNameChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnSupplierIdChanging(System.Nullable<long> value);
        partial void OnSupplierIdChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlGift()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftName in the schema.
        /// </summary>
        [Column(Name = @"GIFT_NAME", Storage = "_GiftName", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string GiftName
        {
            get
            {
                return this._GiftName;
            }
            set
            {
                if (this._GiftName != value)
                {
                    this.OnGiftNameChanging(value);
                    this.SendPropertyChanging();
                    this._GiftName = value;
                    this.SendPropertyChanged("GiftName");
                    this.OnGiftNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlMnPrice in the schema.
    /// </summary>
    [Table(Name = @"crl_mn_price")]
    [DataContract()]
    public partial class CrlMnPrice : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _DepartmentId;

        private string _ProductMasterId;

        private int _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<int> _ExclusiveKey;

        private System.Nullable<int> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _WholeSalePrice;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(int value);
        partial void OnDepartmentIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnPriceChanging(int value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<int> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<int> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnWholeSalePriceChanging(System.Nullable<long> value);
        partial void OnWholeSalePriceChanged();
        #endregion

        public CrlMnPrice()
        {
            this.Initialize();
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public int DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", CanBeNull = false, DbType = "int NOT NULL")]
        [DataMember(Order=3)]
        public int Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "int")]
        [DataMember(Order=8)]
        public System.Nullable<int> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "int")]
        [DataMember(Order=9)]
        public System.Nullable<int> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WholeSalePrice in the schema.
        /// </summary>
        [Column(Name = @"WHOLE_SALE_PRICE", Storage = "_WholeSalePrice", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> WholeSalePrice
        {
            get
            {
                return this._WholeSalePrice;
            }
            set
            {
                if (this._WholeSalePrice != value)
                {
                    this.OnWholeSalePriceChanging(value);
                    this.SendPropertyChanging();
                    this._WholeSalePrice = value;
                    this.SendPropertyChanged("WholeSalePrice");
                    this.OnWholeSalePriceChanged();
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlMnPrice", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlMnPrices.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlMnPrices.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlMnStk in the schema.
    /// </summary>
    [Table(Name = @"crl_mn_stk")]
    [DataContract()]
    public partial class CrlMnStk : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _GoodQuantity;

        private System.Nullable<long> _ErrorQuantity;

        private System.Nullable<long> _DamageQuantity;

        private System.Nullable<long> _LostQuantity;

        private System.Nullable<long> _UnconfirmQuantity;

        private string _Position;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockIdChanging(long value);
        partial void OnStockIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<long> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<long> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<long> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<long> value);
        partial void OnLostQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<long> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        #endregion

        public CrlMnStk()
        {
            this.Initialize();
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "nvarchar(200)")]
        [DataMember(Order=21)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

        [Association(Name="CrlPrd_CrlMnStk", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlMnStks.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlMnStks.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlMnStk", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlMnStks.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlMnStks.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlMnStkHis in the schema.
    /// </summary>
    [Table(Name = @"crl_mn_stk_his")]
    [DataContract()]
    public partial class CrlMnStkHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockHistoryId;

        private string _ProductId;

        private string _ProductMasterId;

        private long _Quantity;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private long _StockId;

        private string _Description;

        private System.Nullable<long> _GoodCount;

        private System.Nullable<long> _ErrorCount;

        private System.Nullable<long> _DamageCount;

        private System.Nullable<long> _LostCount;

        private System.Nullable<long> _UnconfirmCount;

        private EntityRef<CrlPrd> _CrlPrd;

        private EntityRef<CrlPrdMst> _CrlPrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockHistoryIdChanging(long value);
        partial void OnStockHistoryIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(long value);
        partial void OnQuantityChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockIdChanging(long value);
        partial void OnStockIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodCountChanging(System.Nullable<long> value);
        partial void OnGoodCountChanged();
        partial void OnErrorCountChanging(System.Nullable<long> value);
        partial void OnErrorCountChanged();
        partial void OnDamageCountChanging(System.Nullable<long> value);
        partial void OnDamageCountChanged();
        partial void OnLostCountChanging(System.Nullable<long> value);
        partial void OnLostCountChanged();
        partial void OnUnconfirmCountChanging(System.Nullable<long> value);
        partial void OnUnconfirmCountChanged();
        #endregion

        public CrlMnStkHis()
        {
            this.Initialize();
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockHistoryId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_HISTORY_ID", Storage = "_StockHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockHistoryId
        {
            get
            {
                return this._StockHistoryId;
            }
            set
            {
                if (this._StockHistoryId != value)
                {
                    this.OnStockHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockHistoryId = value;
                    this.SendPropertyChanged("StockHistoryId");
                    this.OnStockHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=4)]
        public long Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=16)]
        public long StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(200)")]
        [DataMember(Order=17)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodCount in the schema.
        /// </summary>
        [Column(Name = @"GOOD_COUNT", Storage = "_GoodCount", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> GoodCount
        {
            get
            {
                return this._GoodCount;
            }
            set
            {
                if (this._GoodCount != value)
                {
                    this.OnGoodCountChanging(value);
                    this.SendPropertyChanging();
                    this._GoodCount = value;
                    this.SendPropertyChanged("GoodCount");
                    this.OnGoodCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCount in the schema.
        /// </summary>
        [Column(Name = @"ERROR_COUNT", Storage = "_ErrorCount", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> ErrorCount
        {
            get
            {
                return this._ErrorCount;
            }
            set
            {
                if (this._ErrorCount != value)
                {
                    this.OnErrorCountChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCount = value;
                    this.SendPropertyChanged("ErrorCount");
                    this.OnErrorCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageCount in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_COUNT", Storage = "_DamageCount", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> DamageCount
        {
            get
            {
                return this._DamageCount;
            }
            set
            {
                if (this._DamageCount != value)
                {
                    this.OnDamageCountChanging(value);
                    this.SendPropertyChanging();
                    this._DamageCount = value;
                    this.SendPropertyChanged("DamageCount");
                    this.OnDamageCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostCount in the schema.
        /// </summary>
        [Column(Name = @"LOST_COUNT", Storage = "_LostCount", DbType = "bigint")]
        [DataMember(Order=21)]
        public System.Nullable<long> LostCount
        {
            get
            {
                return this._LostCount;
            }
            set
            {
                if (this._LostCount != value)
                {
                    this.OnLostCountChanging(value);
                    this.SendPropertyChanging();
                    this._LostCount = value;
                    this.SendPropertyChanged("LostCount");
                    this.OnLostCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmCount in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_COUNT", Storage = "_UnconfirmCount", DbType = "bigint")]
        [DataMember(Order=22)]
        public System.Nullable<long> UnconfirmCount
        {
            get
            {
                return this._UnconfirmCount;
            }
            set
            {
                if (this._UnconfirmCount != value)
                {
                    this.OnUnconfirmCountChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmCount = value;
                    this.SendPropertyChanged("UnconfirmCount");
                    this.OnUnconfirmCountChanged();
                }
            }
        }

        [Association(Name="CrlPrd_CrlMnStkHis", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlMnStkHis.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlMnStkHis.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlMnStkHis", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlMnStkHis.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlMnStkHis.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlPrd = default(EntityRef<CrlPrd>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlMnftr in the schema.
    /// </summary>
    [Table(Name = @"crl_mnftr")]
    [DataContract()]
    public partial class CrlMnftr : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ManufacturerId;

        private string _ManufacturerName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnManufacturerIdChanging(long value);
        partial void OnManufacturerIdChanged();
        partial void OnManufacturerNameChanging(string value);
        partial void OnManufacturerNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlMnftr()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_ID", Storage = "_ManufacturerId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufacturerName in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_NAME", Storage = "_ManufacturerName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string ManufacturerName
        {
            get
            {
                return this._ManufacturerName;
            }
            set
            {
                if (this._ManufacturerName != value)
                {
                    this.OnManufacturerNameChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerName = value;
                    this.SendPropertyChanged("ManufacturerName");
                    this.OnManufacturerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlOtherTransLog in the schema.
    /// </summary>
    [Table(Name = @"crl_other_trans_log")]
    [DataContract()]
    public partial class CrlOtherTransLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _TransactionDate;

        private long _TableName;

        private System.Nullable<long> _FieldName;

        private string _Action;

        private string _ValueBefore;

        private string _ValueAfter;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnTableNameChanging(long value);
        partial void OnTableNameChanged();
        partial void OnFieldNameChanging(System.Nullable<long> value);
        partial void OnFieldNameChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnValueBeforeChanging(string value);
        partial void OnValueBeforeChanged();
        partial void OnValueAfterChanging(string value);
        partial void OnValueAfterChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlOtherTransLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionDate in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_DATE", Storage = "_TransactionDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TableName in the schema.
        /// </summary>
        [Column(Name = @"TABLE_NAME", Storage = "_TableName", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=2)]
        public long TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if (this._TableName != value)
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging();
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FieldName in the schema.
        /// </summary>
        [Column(Name = @"FIELD_NAME", Storage = "_FieldName", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if (this._FieldName != value)
                {
                    this.OnFieldNameChanging(value);
                    this.SendPropertyChanging();
                    this._FieldName = value;
                    this.SendPropertyChanged("FieldName");
                    this.OnFieldNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Action in the schema.
        /// </summary>
        [Column(Name = @"ACTION", Storage = "_Action", DbType = "nvarchar(500)")]
        [DataMember(Order=4)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValueBefore in the schema.
        /// </summary>
        [Column(Name = @"VALUE_BEFORE", Storage = "_ValueBefore", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ValueBefore
        {
            get
            {
                return this._ValueBefore;
            }
            set
            {
                if (this._ValueBefore != value)
                {
                    this.OnValueBeforeChanging(value);
                    this.SendPropertyChanging();
                    this._ValueBefore = value;
                    this.SendPropertyChanged("ValueBefore");
                    this.OnValueBeforeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValueAfter in the schema.
        /// </summary>
        [Column(Name = @"VALUE_AFTER", Storage = "_ValueAfter", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string ValueAfter
        {
            get
            {
                return this._ValueAfter;
            }
            set
            {
                if (this._ValueAfter != value)
                {
                    this.OnValueAfterChanging(value);
                    this.SendPropertyChanging();
                    this._ValueAfter = value;
                    this.SendPropertyChanged("ValueAfter");
                    this.OnValueAfterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPblshCpn in the schema.
    /// </summary>
    [Table(Name = @"crl_pblsh_cpn")]
    [DataContract()]
    public partial class CrlPblshCpn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CouponId;

        private long _PublishedCouponId;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(long value);
        partial void OnCouponIdChanged();
        partial void OnPublishedCouponIdChanging(long value);
        partial void OnPublishedCouponIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPblshCpn()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_ID", Storage = "_CouponId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublishedCouponId in the schema.
        /// </summary>
        [Column(Name = @"PUBLISHED_COUPON_ID", Storage = "_PublishedCouponId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long PublishedCouponId
        {
            get
            {
                return this._PublishedCouponId;
            }
            set
            {
                if (this._PublishedCouponId != value)
                {
                    this.OnPublishedCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._PublishedCouponId = value;
                    this.SendPropertyChanged("PublishedCouponId");
                    this.OnPublishedCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPkgr in the schema.
    /// </summary>
    [Table(Name = @"crl_pkgr")]
    [DataContract()]
    public partial class CrlPkgr : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PackagerId;

        private string _PackagerName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPackagerIdChanging(long value);
        partial void OnPackagerIdChanged();
        partial void OnPackagerNameChanging(string value);
        partial void OnPackagerNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPkgr()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerName in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_NAME", Storage = "_PackagerName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string PackagerName
        {
            get
            {
                return this._PackagerName;
            }
            set
            {
                if (this._PackagerName != value)
                {
                    this.OnPackagerNameChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerName = value;
                    this.SendPropertyChanged("PackagerName");
                    this.OnPackagerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPosLog in the schema.
    /// </summary>
    [Table(Name = @"crl_pos_log")]
    [DataContract()]
    public partial class CrlPosLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.DateTime _Date;

        private string _Thread;

        private string _Level;

        private string _Logger;

        private string _Message;

        private string _Exception;

        private string _PosUser;

        private string _PosAction;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnThreadChanging(string value);
        partial void OnThreadChanged();
        partial void OnLevelChanging(string value);
        partial void OnLevelChanged();
        partial void OnLoggerChanging(string value);
        partial void OnLoggerChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnExceptionChanging(string value);
        partial void OnExceptionChanged();
        partial void OnPosUserChanging(string value);
        partial void OnPosUserChanged();
        partial void OnPosActionChanging(string value);
        partial void OnPosActionChanged();
        #endregion

        public CrlPosLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Storage = "_Date", CanBeNull = false, DbType = "datetime NOT NULL")]
        [DataMember(Order=2)]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thread in the schema.
        /// </summary>
        [Column(Storage = "_Thread", CanBeNull = false, DbType = "nvarchar(255) NOT NULL")]
        [DataMember(Order=3)]
        public string Thread
        {
            get
            {
                return this._Thread;
            }
            set
            {
                if (this._Thread != value)
                {
                    this.OnThreadChanging(value);
                    this.SendPropertyChanging();
                    this._Thread = value;
                    this.SendPropertyChanged("Thread");
                    this.OnThreadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [Column(Storage = "_Level", CanBeNull = false, DbType = "nvarchar(50) NOT NULL")]
        [DataMember(Order=4)]
        public string Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging();
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Logger in the schema.
        /// </summary>
        [Column(Storage = "_Logger", CanBeNull = false, DbType = "nvarchar(255) NOT NULL")]
        [DataMember(Order=5)]
        public string Logger
        {
            get
            {
                return this._Logger;
            }
            set
            {
                if (this._Logger != value)
                {
                    this.OnLoggerChanging(value);
                    this.SendPropertyChanging();
                    this._Logger = value;
                    this.SendPropertyChanged("Logger");
                    this.OnLoggerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Storage = "_Message", CanBeNull = false, DbType = "nvarchar(500) NOT NULL")]
        [DataMember(Order=6)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Exception in the schema.
        /// </summary>
        [Column(Storage = "_Exception", DbType = "nvarchar(2000)")]
        [DataMember(Order=7)]
        public string Exception
        {
            get
            {
                return this._Exception;
            }
            set
            {
                if (this._Exception != value)
                {
                    this.OnExceptionChanging(value);
                    this.SendPropertyChanging();
                    this._Exception = value;
                    this.SendPropertyChanged("Exception");
                    this.OnExceptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosUser in the schema.
        /// </summary>
        [Column(Name = @"Pos_User", Storage = "_PosUser", DbType = "nvarchar(100)")]
        [DataMember(Order=8)]
        public string PosUser
        {
            get
            {
                return this._PosUser;
            }
            set
            {
                if (this._PosUser != value)
                {
                    this.OnPosUserChanging(value);
                    this.SendPropertyChanging();
                    this._PosUser = value;
                    this.SendPropertyChanged("PosUser");
                    this.OnPosUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosAction in the schema.
        /// </summary>
        [Column(Name = @"Pos_Action", Storage = "_PosAction", DbType = "nvarchar(100)")]
        [DataMember(Order=9)]
        public string PosAction
        {
            get
            {
                return this._PosAction;
            }
            set
            {
                if (this._PosAction != value)
                {
                    this.OnPosActionChanging(value);
                    this.SendPropertyChanging();
                    this._PosAction = value;
                    this.SendPropertyChanged("PosAction");
                    this.OnPosActionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPosTran in the schema.
    /// </summary>
    [Table(Name = @"crl_pos_trans")]
    [DataContract()]
    public partial class CrlPosTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PosTransactionId;

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<decimal> _AmountIn;

        private System.Nullable<decimal> _AmountOut;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<int> _DelFlg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnAmountInChanging(System.Nullable<decimal> value);
        partial void OnAmountInChanged();
        partial void OnAmountOutChanging(System.Nullable<decimal> value);
        partial void OnAmountOutChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDelFlgChanging(System.Nullable<int> value);
        partial void OnDelFlgChanged();
        #endregion

        public CrlPosTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_Transaction_Id", Storage = "_PosTransactionId", CanBeNull = false, DbType = "nvarchar(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Id", Storage = "_TransactionId", CanBeNull = false, DbType = "nvarchar(12) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"Store_Id", Storage = "_StoreId", CanBeNull = false, DbType = "nvarchar(5) NOT NULL")]
        [DataMember(Order=3)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"Register_Id", Storage = "_RegisterId", CanBeNull = false, DbType = "nvarchar(2) NOT NULL")]
        [DataMember(Order=4)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"Cashier_Id", Storage = "_CashierId", CanBeNull = false, DbType = "nvarchar(6) NOT NULL")]
        [DataMember(Order=5)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AmountIn in the schema.
        /// </summary>
        [Column(Name = @"Amount_In", Storage = "_AmountIn", DbType = "numeric")]
        [DataMember(Order=6)]
        public System.Nullable<decimal> AmountIn
        {
            get
            {
                return this._AmountIn;
            }
            set
            {
                if (this._AmountIn != value)
                {
                    this.OnAmountInChanging(value);
                    this.SendPropertyChanging();
                    this._AmountIn = value;
                    this.SendPropertyChanged("AmountIn");
                    this.OnAmountInChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AmountOut in the schema.
        /// </summary>
        [Column(Name = @"Amount_Out", Storage = "_AmountOut", DbType = "numeric")]
        [DataMember(Order=7)]
        public System.Nullable<decimal> AmountOut
        {
            get
            {
                return this._AmountOut;
            }
            set
            {
                if (this._AmountOut != value)
                {
                    this.OnAmountOutChanging(value);
                    this.SendPropertyChanging();
                    this._AmountOut = value;
                    this.SendPropertyChanged("AmountOut");
                    this.OnAmountOutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=13)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=14)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=15)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPrd in the schema.
    /// </summary>
    [Table(Name = @"crl_prd")]
    [DataContract()]
    public partial class CrlPrd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _BlockId;

        private string _BlockDetailId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _Quantity;

        private System.Nullable<long> _Price;

        private System.Nullable<long> _TaxId;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Barcode;

        private System.Nullable<int> _AdhocCase;

        private EntitySet<CrlDeptPoDet> _CrlDeptPoDets;

        private EntitySet<CrlDeptStk> _CrlDeptStks;

        private EntitySet<CrlDeptStkInDet> _CrlDeptStkInDets;

        private EntitySet<CrlDeptStkOutDet> _CrlDeptStkOutDets;

        private EntitySet<CrlMnStk> _CrlMnStks;

        private EntitySet<CrlMnStkHis> _CrlMnStkHis;

        private EntityRef<CrlExPrdColor> _CrlExPrdColor;

        private EntityRef<CrlExPrdSize> _CrlExPrdSize;

        private EntityRef<CrlPrdMst> _CrlPrdMst;

        private EntitySet<CrlStkInDet> _CrlStkInDets;

        private EntitySet<CrlStkOutDet> _CrlStkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnBlockIdChanging(System.Nullable<long> value);
        partial void OnBlockIdChanged();
        partial void OnBlockDetailIdChanging(string value);
        partial void OnBlockDetailIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnTaxIdChanging(System.Nullable<long> value);
        partial void OnTaxIdChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnAdhocCaseChanging(System.Nullable<int> value);
        partial void OnAdhocCaseChanged();
        #endregion

        public CrlPrd()
        {
            this.Initialize();
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlDeptStks = new EntitySet<CrlDeptStk>(new Action<CrlDeptStk>(this.attach_CrlDeptStks), new Action<CrlDeptStk>(this.detach_CrlDeptStks));
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlMnStks = new EntitySet<CrlMnStk>(new Action<CrlMnStk>(this.attach_CrlMnStks), new Action<CrlMnStk>(this.detach_CrlMnStks));
            this._CrlMnStkHis = new EntitySet<CrlMnStkHis>(new Action<CrlMnStkHis>(this.attach_CrlMnStkHis), new Action<CrlMnStkHis>(this.detach_CrlMnStkHis));
            this._CrlExPrdColor  = default(EntityRef<CrlExPrdColor>);
            this._CrlExPrdSize  = default(EntityRef<CrlExPrdSize>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            this._CrlStkInDets = new EntitySet<CrlStkInDet>(new Action<CrlStkInDet>(this.attach_CrlStkInDets), new Action<CrlStkInDet>(this.detach_CrlStkInDets));
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=2)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", DbType = "nvarchar(10)")]
        [DataMember(Order=4)]
        public string BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=14)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    if (this._CrlExPrdColor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=15)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    if (this._CrlExPrdSize.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=16)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "nvarchar(20)")]
        [DataMember(Order=19)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdhocCase in the schema.
        /// </summary>
        [Column(Name = @"ADHOC_CASE", Storage = "_AdhocCase", DbType = "int")]
        [DataMember(Order=20)]
        public System.Nullable<int> AdhocCase
        {
            get
            {
                return this._AdhocCase;
            }
            set
            {
                if (this._AdhocCase != value)
                {
                    this.OnAdhocCaseChanging(value);
                    this.SendPropertyChanging();
                    this._AdhocCase = value;
                    this.SendPropertyChanged("AdhocCase");
                    this.OnAdhocCaseChanged();
                }
            }
        }

        [Association(Name="CrlPrd_CrlDeptPoDet", Storage="_CrlDeptPoDets", OtherKey="ProductId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<CrlDeptPoDet> CrlDeptPoDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptPoDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptPoDets;
            }
            set
            {
                this._CrlDeptPoDets.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlDeptStk", Storage="_CrlDeptStks", OtherKey="ProductId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStk> CrlDeptStks
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStks;
            }
            set
            {
                this._CrlDeptStks.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlDeptStkInDet", Storage="_CrlDeptStkInDets", OtherKey="ProductId")]
        [DataMember(Order=23, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkInDet> CrlDeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkInDets;
            }
            set
            {
                this._CrlDeptStkInDets.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlDeptStkOutDet", Storage="_CrlDeptStkOutDets", OtherKey="ProductId")]
        [DataMember(Order=24, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOutDet> CrlDeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOutDets;
            }
            set
            {
                this._CrlDeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlMnStk", Storage="_CrlMnStks", OtherKey="ProductId")]
        [DataMember(Order=25, EmitDefaultValue=false)]
        public EntitySet<CrlMnStk> CrlMnStks
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlMnStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlMnStks;
            }
            set
            {
                this._CrlMnStks.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlMnStkHis", Storage="_CrlMnStkHis", OtherKey="ProductId")]
        [DataMember(Order=26, EmitDefaultValue=false)]
        public EntitySet<CrlMnStkHis> CrlMnStkHis
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlMnStkHis.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlMnStkHis;
            }
            set
            {
                this._CrlMnStkHis.Assign(value);
            }
        }

        [Association(Name="CrlExPrdColor_CrlPrd", Storage="_CrlExPrdColor", ThisKey="ExFld1", IsForeignKey=true)]
        public CrlExPrdColor CrlExPrdColor
        {
            get
            {
                return this._CrlExPrdColor.Entity;
            }
            set
            {
                CrlExPrdColor previousValue = this._CrlExPrdColor.Entity;
                if ((previousValue != value) || (this._CrlExPrdColor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlExPrdColor.Entity = null;
                        previousValue.CrlPrds.Remove(this);
                    }
                    this._CrlExPrdColor.Entity = value;
                    if (value != null)
                    {
                        value.CrlPrds.Add(this);
                        this._ExFld1 = value.ColorId;
                    }
                    else
                    {
                        this._ExFld1 = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("CrlExPrdColor");
                }
            }
        }

        [Association(Name="CrlExPrdSize_CrlPrd", Storage="_CrlExPrdSize", ThisKey="ExFld2", IsForeignKey=true)]
        public CrlExPrdSize CrlExPrdSize
        {
            get
            {
                return this._CrlExPrdSize.Entity;
            }
            set
            {
                CrlExPrdSize previousValue = this._CrlExPrdSize.Entity;
                if ((previousValue != value) || (this._CrlExPrdSize.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlExPrdSize.Entity = null;
                        previousValue.CrlPrds.Remove(this);
                    }
                    this._CrlExPrdSize.Entity = value;
                    if (value != null)
                    {
                        value.CrlPrds.Add(this);
                        this._ExFld2 = value.SizeId;
                    }
                    else
                    {
                        this._ExFld2 = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("CrlExPrdSize");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlPrd", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlPrds.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlPrds.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }

        [Association(Name="CrlPrd_CrlStkInDet", Storage="_CrlStkInDets", OtherKey="ProductId")]
        [DataMember(Order=27, EmitDefaultValue=false)]
        public EntitySet<CrlStkInDet> CrlStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkInDets;
            }
            set
            {
                this._CrlStkInDets.Assign(value);
            }
        }

        [Association(Name="CrlPrd_CrlStkOutDet", Storage="_CrlStkOutDets", OtherKey="ProductId")]
        [DataMember(Order=28, EmitDefaultValue=false)]
        public EntitySet<CrlStkOutDet> CrlStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkOutDets;
            }
            set
            {
                this._CrlStkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlPrd = null;
        }

        private void attach_CrlDeptStks(CrlDeptStk entity)
        {
            this.SendPropertyChanging("CrlDeptStks");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlDeptStks(CrlDeptStk entity)
        {
            this.SendPropertyChanging("CrlDeptStks");
            entity.CrlPrd = null;
        }

        private void attach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlPrd = null;
        }

        private void attach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlPrd = null;
        }

        private void attach_CrlMnStks(CrlMnStk entity)
        {
            this.SendPropertyChanging("CrlMnStks");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlMnStks(CrlMnStk entity)
        {
            this.SendPropertyChanging("CrlMnStks");
            entity.CrlPrd = null;
        }

        private void attach_CrlMnStkHis(CrlMnStkHis entity)
        {
            this.SendPropertyChanging("CrlMnStkHis");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlMnStkHis(CrlMnStkHis entity)
        {
            this.SendPropertyChanging("CrlMnStkHis");
            entity.CrlPrd = null;
        }

        private void attach_CrlStkInDets(CrlStkInDet entity)
        {
            this.SendPropertyChanging("CrlStkInDets");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlStkInDets(CrlStkInDet entity)
        {
            this.SendPropertyChanging("CrlStkInDets");
            entity.CrlPrd = null;
        }

        private void attach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlPrd = this;
        }
    
        private void detach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlPrd = null;
        }

        private void Initialize()
        {
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlDeptStks = new EntitySet<CrlDeptStk>(new Action<CrlDeptStk>(this.attach_CrlDeptStks), new Action<CrlDeptStk>(this.detach_CrlDeptStks));
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlMnStks = new EntitySet<CrlMnStk>(new Action<CrlMnStk>(this.attach_CrlMnStks), new Action<CrlMnStk>(this.detach_CrlMnStks));
            this._CrlMnStkHis = new EntitySet<CrlMnStkHis>(new Action<CrlMnStkHis>(this.attach_CrlMnStkHis), new Action<CrlMnStkHis>(this.detach_CrlMnStkHis));
            this._CrlExPrdColor = default(EntityRef<CrlExPrdColor>);
            this._CrlExPrdSize = default(EntityRef<CrlExPrdSize>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            this._CrlStkInDets = new EntitySet<CrlStkInDet>(new Action<CrlStkInDet>(this.attach_CrlStkInDets), new Action<CrlStkInDet>(this.detach_CrlStkInDets));
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlPrdMst in the schema.
    /// </summary>
    [Table(Name = @"crl_prd_mst")]
    [DataContract()]
    public partial class CrlPrdMst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductMasterId;

        private string _ProductName;

        private string _Description;

        private string _ImagePath;

        private System.Nullable<long> _CategoryId;

        private System.Nullable<long> _CountryId;

        private System.Nullable<long> _UnitId;

        private System.Nullable<long> _TypeId;

        private System.Nullable<long> _ManufacturerId;

        private System.Nullable<long> _SupplierId;

        private System.Nullable<long> _PackagerId;

        private System.Nullable<long> _DistributorId;

        private string _Barcode;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<int> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlDeptPoDet> _CrlDeptPoDets;

        private EntitySet<CrlDeptStk> _CrlDeptStks;

        private EntitySet<CrlDeptStkInDet> _CrlDeptStkInDets;

        private EntitySet<CrlDeptStkOutDet> _CrlDeptStkOutDets;

        private EntitySet<CrlMnPrice> _CrlMnPrices;

        private EntitySet<CrlMnStk> _CrlMnStks;

        private EntitySet<CrlMnStkHis> _CrlMnStkHis;

        private EntitySet<CrlPrd> _CrlPrds;

        private EntityRef<CrlCat> _CrlCat;

        private EntityRef<CrlPrdTyp> _CrlPrdTyp;

        private EntitySet<CrlStkInDet> _CrlStkInDets;

        private EntitySet<CrlStkOutDet> _CrlStkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnImagePathChanging(string value);
        partial void OnImagePathChanged();
        partial void OnCategoryIdChanging(System.Nullable<long> value);
        partial void OnCategoryIdChanged();
        partial void OnCountryIdChanging(System.Nullable<long> value);
        partial void OnCountryIdChanged();
        partial void OnUnitIdChanging(System.Nullable<long> value);
        partial void OnUnitIdChanged();
        partial void OnTypeIdChanging(System.Nullable<long> value);
        partial void OnTypeIdChanged();
        partial void OnManufacturerIdChanging(System.Nullable<long> value);
        partial void OnManufacturerIdChanged();
        partial void OnSupplierIdChanging(System.Nullable<long> value);
        partial void OnSupplierIdChanged();
        partial void OnPackagerIdChanging(System.Nullable<long> value);
        partial void OnPackagerIdChanged();
        partial void OnDistributorIdChanging(System.Nullable<long> value);
        partial void OnDistributorIdChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<int> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPrdMst()
        {
            this.Initialize();
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlDeptStks = new EntitySet<CrlDeptStk>(new Action<CrlDeptStk>(this.attach_CrlDeptStks), new Action<CrlDeptStk>(this.detach_CrlDeptStks));
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlMnPrices = new EntitySet<CrlMnPrice>(new Action<CrlMnPrice>(this.attach_CrlMnPrices), new Action<CrlMnPrice>(this.detach_CrlMnPrices));
            this._CrlMnStks = new EntitySet<CrlMnStk>(new Action<CrlMnStk>(this.attach_CrlMnStks), new Action<CrlMnStk>(this.detach_CrlMnStks));
            this._CrlMnStkHis = new EntitySet<CrlMnStkHis>(new Action<CrlMnStkHis>(this.attach_CrlMnStkHis), new Action<CrlMnStkHis>(this.detach_CrlMnStkHis));
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            this._CrlCat  = default(EntityRef<CrlCat>);
            this._CrlPrdTyp  = default(EntityRef<CrlPrdTyp>);
            this._CrlStkInDets = new EntitySet<CrlStkInDet>(new Action<CrlStkInDet>(this.attach_CrlStkInDets), new Action<CrlStkInDet>(this.detach_CrlStkInDets));
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_NAME", Storage = "_ProductName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagePath in the schema.
        /// </summary>
        [Column(Name = @"IMAGE_PATH", Storage = "_ImagePath", DbType = "nvarchar(500)")]
        [DataMember(Order=4)]
        public string ImagePath
        {
            get
            {
                return this._ImagePath;
            }
            set
            {
                if (this._ImagePath != value)
                {
                    this.OnImagePathChanging(value);
                    this.SendPropertyChanging();
                    this._ImagePath = value;
                    this.SendPropertyChanged("ImagePath");
                    this.OnImagePathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._CrlCat.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitId in the schema.
        /// </summary>
        [Column(Name = @"UNIT_ID", Storage = "_UnitId", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> UnitId
        {
            get
            {
                return this._UnitId;
            }
            set
            {
                if (this._UnitId != value)
                {
                    this.OnUnitIdChanging(value);
                    this.SendPropertyChanging();
                    this._UnitId = value;
                    this.SendPropertyChanged("UnitId");
                    this.OnUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._CrlPrdTyp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_ID", Storage = "_ManufacturerId", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_ID", Storage = "_DistributorId", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "nvarchar(13)")]
        [DataMember(Order=13)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=14)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=15)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=17)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "int")]
        [DataMember(Order=19)]
        public System.Nullable<int> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=20)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=21)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=22)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=23)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=24)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptPoDet", Storage="_CrlDeptPoDets", OtherKey="ProductMasterId")]
        [DataMember(Order=25, EmitDefaultValue=false)]
        public EntitySet<CrlDeptPoDet> CrlDeptPoDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptPoDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptPoDets;
            }
            set
            {
                this._CrlDeptPoDets.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStk", Storage="_CrlDeptStks", OtherKey="ProductMasterId")]
        [DataMember(Order=26, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStk> CrlDeptStks
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStks;
            }
            set
            {
                this._CrlDeptStks.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStkInDet", Storage="_CrlDeptStkInDets", OtherKey="ProductMasterId")]
        [DataMember(Order=27, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkInDet> CrlDeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkInDets;
            }
            set
            {
                this._CrlDeptStkInDets.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlDeptStkOutDet", Storage="_CrlDeptStkOutDets", OtherKey="ProductMasterId")]
        [DataMember(Order=28, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOutDet> CrlDeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOutDets;
            }
            set
            {
                this._CrlDeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlMnPrice", Storage="_CrlMnPrices", OtherKey="ProductMasterId")]
        [DataMember(Order=29, EmitDefaultValue=false)]
        public EntitySet<CrlMnPrice> CrlMnPrices
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlMnPrices.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlMnPrices;
            }
            set
            {
                this._CrlMnPrices.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlMnStk", Storage="_CrlMnStks", OtherKey="ProductMasterId")]
        [DataMember(Order=30, EmitDefaultValue=false)]
        public EntitySet<CrlMnStk> CrlMnStks
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlMnStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlMnStks;
            }
            set
            {
                this._CrlMnStks.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlMnStkHis", Storage="_CrlMnStkHis", OtherKey="ProductMasterId")]
        [DataMember(Order=31, EmitDefaultValue=false)]
        public EntitySet<CrlMnStkHis> CrlMnStkHis
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlMnStkHis.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlMnStkHis;
            }
            set
            {
                this._CrlMnStkHis.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlPrd", Storage="_CrlPrds", OtherKey="ProductMasterId")]
        [DataMember(Order=32, EmitDefaultValue=false)]
        public EntitySet<CrlPrd> CrlPrds
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlPrds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlPrds;
            }
            set
            {
                this._CrlPrds.Assign(value);
            }
        }

        [Association(Name="CrlCat_CrlPrdMst", Storage="_CrlCat", ThisKey="CategoryId", IsForeignKey=true)]
        public CrlCat CrlCat
        {
            get
            {
                return this._CrlCat.Entity;
            }
            set
            {
                CrlCat previousValue = this._CrlCat.Entity;
                if ((previousValue != value) || (this._CrlCat.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlCat.Entity = null;
                        previousValue.CrlPrdMsts.Remove(this);
                    }
                    this._CrlCat.Entity = value;
                    if (value != null)
                    {
                        value.CrlPrdMsts.Add(this);
                        this._CategoryId = value.CategoryId;
                    }
                    else
                    {
                        this._CategoryId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlCat");
                }
            }
        }

        [Association(Name="CrlPrdTyp_CrlPrdMst", Storage="_CrlPrdTyp", ThisKey="TypeId", IsForeignKey=true)]
        public CrlPrdTyp CrlPrdTyp
        {
            get
            {
                return this._CrlPrdTyp.Entity;
            }
            set
            {
                CrlPrdTyp previousValue = this._CrlPrdTyp.Entity;
                if ((previousValue != value) || (this._CrlPrdTyp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdTyp.Entity = null;
                        previousValue.CrlPrdMsts.Remove(this);
                    }
                    this._CrlPrdTyp.Entity = value;
                    if (value != null)
                    {
                        value.CrlPrdMsts.Add(this);
                        this._TypeId = value.TypeId;
                    }
                    else
                    {
                        this._TypeId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlPrdTyp");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlStkInDet", Storage="_CrlStkInDets", OtherKey="ProductMasterId")]
        [DataMember(Order=33, EmitDefaultValue=false)]
        public EntitySet<CrlStkInDet> CrlStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkInDets;
            }
            set
            {
                this._CrlStkInDets.Assign(value);
            }
        }

        [Association(Name="CrlPrdMst_CrlStkOutDet", Storage="_CrlStkOutDets", OtherKey="ProductMasterId")]
        [DataMember(Order=34, EmitDefaultValue=false)]
        public EntitySet<CrlStkOutDet> CrlStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkOutDets;
            }
            set
            {
                this._CrlStkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlDeptPoDets(CrlDeptPoDet entity)
        {
            this.SendPropertyChanging("CrlDeptPoDets");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlDeptStks(CrlDeptStk entity)
        {
            this.SendPropertyChanging("CrlDeptStks");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlDeptStks(CrlDeptStk entity)
        {
            this.SendPropertyChanging("CrlDeptStks");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlDeptStkInDets(CrlDeptStkInDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkInDets");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlDeptStkOutDets(CrlDeptStkOutDet entity)
        {
            this.SendPropertyChanging("CrlDeptStkOutDets");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlMnPrices(CrlMnPrice entity)
        {
            this.SendPropertyChanging("CrlMnPrices");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlMnPrices(CrlMnPrice entity)
        {
            this.SendPropertyChanging("CrlMnPrices");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlMnStks(CrlMnStk entity)
        {
            this.SendPropertyChanging("CrlMnStks");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlMnStks(CrlMnStk entity)
        {
            this.SendPropertyChanging("CrlMnStks");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlMnStkHis(CrlMnStkHis entity)
        {
            this.SendPropertyChanging("CrlMnStkHis");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlMnStkHis(CrlMnStkHis entity)
        {
            this.SendPropertyChanging("CrlMnStkHis");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlPrds(CrlPrd entity)
        {
            this.SendPropertyChanging("CrlPrds");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlStkInDets(CrlStkInDet entity)
        {
            this.SendPropertyChanging("CrlStkInDets");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlStkInDets(CrlStkInDet entity)
        {
            this.SendPropertyChanging("CrlStkInDets");
            entity.CrlPrdMst = null;
        }

        private void attach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlPrdMst = this;
        }
    
        private void detach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlPrdMst = null;
        }

        private void Initialize()
        {
            this._CrlDeptPoDets = new EntitySet<CrlDeptPoDet>(new Action<CrlDeptPoDet>(this.attach_CrlDeptPoDets), new Action<CrlDeptPoDet>(this.detach_CrlDeptPoDets));
            this._CrlDeptStks = new EntitySet<CrlDeptStk>(new Action<CrlDeptStk>(this.attach_CrlDeptStks), new Action<CrlDeptStk>(this.detach_CrlDeptStks));
            this._CrlDeptStkInDets = new EntitySet<CrlDeptStkInDet>(new Action<CrlDeptStkInDet>(this.attach_CrlDeptStkInDets), new Action<CrlDeptStkInDet>(this.detach_CrlDeptStkInDets));
            this._CrlDeptStkOutDets = new EntitySet<CrlDeptStkOutDet>(new Action<CrlDeptStkOutDet>(this.attach_CrlDeptStkOutDets), new Action<CrlDeptStkOutDet>(this.detach_CrlDeptStkOutDets));
            this._CrlMnPrices = new EntitySet<CrlMnPrice>(new Action<CrlMnPrice>(this.attach_CrlMnPrices), new Action<CrlMnPrice>(this.detach_CrlMnPrices));
            this._CrlMnStks = new EntitySet<CrlMnStk>(new Action<CrlMnStk>(this.attach_CrlMnStks), new Action<CrlMnStk>(this.detach_CrlMnStks));
            this._CrlMnStkHis = new EntitySet<CrlMnStkHis>(new Action<CrlMnStkHis>(this.attach_CrlMnStkHis), new Action<CrlMnStkHis>(this.detach_CrlMnStkHis));
            this._CrlPrds = new EntitySet<CrlPrd>(new Action<CrlPrd>(this.attach_CrlPrds), new Action<CrlPrd>(this.detach_CrlPrds));
            this._CrlCat = default(EntityRef<CrlCat>);
            this._CrlPrdTyp = default(EntityRef<CrlPrdTyp>);
            this._CrlStkInDets = new EntitySet<CrlStkInDet>(new Action<CrlStkInDet>(this.attach_CrlStkInDets), new Action<CrlStkInDet>(this.detach_CrlStkInDets));
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlPrdTyp in the schema.
    /// </summary>
    [Table(Name = @"crl_prd_typ")]
    [DataContract()]
    public partial class CrlPrdTyp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TypeId;

        private string _TypeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CrlPrdMst> _CrlPrdMsts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(long value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPrdTyp()
        {
            this.Initialize();
            this._CrlPrdMsts = new EntitySet<CrlPrdMst>(new Action<CrlPrdMst>(this.attach_CrlPrdMsts), new Action<CrlPrdMst>(this.detach_CrlPrdMsts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"TYPE_NAME", Storage = "_TypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=9)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=10)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=11)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlPrdTyp_CrlPrdMst", Storage="_CrlPrdMsts", OtherKey="TypeId")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<CrlPrdMst> CrlPrdMsts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlPrdMsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlPrdMsts;
            }
            set
            {
                this._CrlPrdMsts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlPrdMsts(CrlPrdMst entity)
        {
            this.SendPropertyChanging("CrlPrdMsts");
            entity.CrlPrdTyp = this;
        }
    
        private void detach_CrlPrdMsts(CrlPrdMst entity)
        {
            this.SendPropertyChanging("CrlPrdMsts");
            entity.CrlPrdTyp = null;
        }

        private void Initialize()
        {
            this._CrlPrdMsts = new EntitySet<CrlPrdMst>(new Action<CrlPrdMst>(this.attach_CrlPrdMsts), new Action<CrlPrdMst>(this.detach_CrlPrdMsts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlPrdUnit in the schema.
    /// </summary>
    [Table(Name = @"crl_prd_unit")]
    [DataContract()]
    public partial class CrlPrdUnit : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _UnitId;

        private string _UnitName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<int> _ExclusiveKey;

        private System.Nullable<int> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUnitIdChanging(int value);
        partial void OnUnitIdChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<int> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<int> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPrdUnit()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UnitId in the schema.
        /// </summary>
        [Column(Name = @"UNIT_ID", Storage = "_UnitId", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public int UnitId
        {
            get
            {
                return this._UnitId;
            }
            set
            {
                if (this._UnitId != value)
                {
                    this.OnUnitIdChanging(value);
                    this.SendPropertyChanging();
                    this._UnitId = value;
                    this.SendPropertyChanged("UnitId");
                    this.OnUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitName in the schema.
        /// </summary>
        [Column(Name = @"UNIT_NAME", Storage = "_UnitName", DbType = "nvarchar(30)")]
        [DataMember(Order=2)]
        public string UnitName
        {
            get
            {
                return this._UnitName;
            }
            set
            {
                if (this._UnitName != value)
                {
                    this.OnUnitNameChanging(value);
                    this.SendPropertyChanging();
                    this._UnitName = value;
                    this.SendPropertyChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(20)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(20)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "int")]
        [DataMember(Order=7)]
        public System.Nullable<int> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "int")]
        [DataMember(Order=8)]
        public System.Nullable<int> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlPromo in the schema.
    /// </summary>
    [Table(Name = @"crl_promo")]
    [DataContract()]
    public partial class CrlPromo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PromotionId;

        private string _PromotionName;

        private System.Nullable<long> _DiscountPrice;

        private System.Nullable<long> _DiscountPercent;

        private System.Nullable<long> _PromotionType;

        private System.Nullable<long> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPromotionIdChanging(long value);
        partial void OnPromotionIdChanged();
        partial void OnPromotionNameChanging(string value);
        partial void OnPromotionNameChanged();
        partial void OnDiscountPriceChanging(System.Nullable<long> value);
        partial void OnDiscountPriceChanged();
        partial void OnDiscountPercentChanging(System.Nullable<long> value);
        partial void OnDiscountPercentChanged();
        partial void OnPromotionTypeChanging(System.Nullable<long> value);
        partial void OnPromotionTypeChanged();
        partial void OnGiftProductIdChanging(System.Nullable<long> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlPromo()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PromotionId in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_ID", Storage = "_PromotionId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long PromotionId
        {
            get
            {
                return this._PromotionId;
            }
            set
            {
                if (this._PromotionId != value)
                {
                    this.OnPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionId = value;
                    this.SendPropertyChanged("PromotionId");
                    this.OnPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionName in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_NAME", Storage = "_PromotionName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string PromotionName
        {
            get
            {
                return this._PromotionName;
            }
            set
            {
                if (this._PromotionName != value)
                {
                    this.OnPromotionNameChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionName = value;
                    this.SendPropertyChanged("PromotionName");
                    this.OnPromotionNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPrice in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PRICE", Storage = "_DiscountPrice", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> DiscountPrice
        {
            get
            {
                return this._DiscountPrice;
            }
            set
            {
                if (this._DiscountPrice != value)
                {
                    this.OnDiscountPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPrice = value;
                    this.SendPropertyChanged("DiscountPrice");
                    this.OnDiscountPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPercent in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PERCENT", Storage = "_DiscountPercent", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> DiscountPercent
        {
            get
            {
                return this._DiscountPercent;
            }
            set
            {
                if (this._DiscountPercent != value)
                {
                    this.OnDiscountPercentChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPercent = value;
                    this.SendPropertyChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionType in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_TYPE", Storage = "_PromotionType", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> PromotionType
        {
            get
            {
                return this._PromotionType;
            }
            set
            {
                if (this._PromotionType != value)
                {
                    this.OnPromotionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionType = value;
                    this.SendPropertyChanged("PromotionType");
                    this.OnPromotionTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlReicpt in the schema.
    /// </summary>
    [Table(Name = @"crl_reicpt")]
    [DataContract()]
    public partial class CrlReicpt : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ReceiptId;

        private long _DepartmentId;

        private string _PurchaseOrderId;

        private string _ReceiptName;

        private string _ReceiptNumber;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<CrlDept> _CrlDept;

        private EntityRef<CrlDeptPo> _CrlDeptPo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptIdChanging(string value);
        partial void OnReceiptIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnReceiptNameChanging(string value);
        partial void OnReceiptNameChanged();
        partial void OnReceiptNumberChanging(string value);
        partial void OnReceiptNumberChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlReicpt()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlDeptPo  = default(EntityRef<CrlDeptPo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_ID", Storage = "_ReceiptId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ReceiptId
        {
            get
            {
                return this._ReceiptId;
            }
            set
            {
                if (this._ReceiptId != value)
                {
                    this.OnReceiptIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptId = value;
                    this.SendPropertyChanged("ReceiptId");
                    this.OnReceiptIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=3)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._CrlDeptPo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptName in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_NAME", Storage = "_ReceiptName", DbType = "nvarchar(500)")]
        [DataMember(Order=4)]
        public string ReceiptName
        {
            get
            {
                return this._ReceiptName;
            }
            set
            {
                if (this._ReceiptName != value)
                {
                    this.OnReceiptNameChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptName = value;
                    this.SendPropertyChanged("ReceiptName");
                    this.OnReceiptNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptNumber in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_NUMBER", Storage = "_ReceiptNumber", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ReceiptNumber
        {
            get
            {
                return this._ReceiptNumber;
            }
            set
            {
                if (this._ReceiptNumber != value)
                {
                    this.OnReceiptNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptNumber = value;
                    this.SendPropertyChanged("ReceiptNumber");
                    this.OnReceiptNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CrlDept_CrlReicpt", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlReicpts.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlReicpts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlDeptPo_CrlReicpt", Storage="_CrlDeptPo", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId", IsForeignKey=true)]
        public CrlDeptPo CrlDeptPo
        {
            get
            {
                return this._CrlDeptPo.Entity;
            }
            set
            {
                CrlDeptPo previousValue = this._CrlDeptPo.Entity;
                if ((previousValue != value) || (this._CrlDeptPo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDeptPo.Entity = null;
                        previousValue.CrlReicpts.Remove(this);
                    }
                    this._CrlDeptPo.Entity = value;
                    if (value != null)
                    {
                        value.CrlReicpts.Add(this);
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._PurchaseOrderId = default(string);
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDeptPo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlDeptPo = default(EntityRef<CrlDeptPo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlReicptOut in the schema.
    /// </summary>
    [Table(Name = @"crl_reicpt_out")]
    [DataContract()]
    public partial class CrlReicptOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReceiptOutId;

        private long _DepartmentId;

        private System.Nullable<long> _ReceiptOutName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptOutIdChanging(long value);
        partial void OnReceiptOutIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnReceiptOutNameChanging(System.Nullable<long> value);
        partial void OnReceiptOutNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlReicptOut()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_ID", Storage = "_ReceiptOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long ReceiptOutId
        {
            get
            {
                return this._ReceiptOutId;
            }
            set
            {
                if (this._ReceiptOutId != value)
                {
                    this.OnReceiptOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutId = value;
                    this.SendPropertyChanged("ReceiptOutId");
                    this.OnReceiptOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutName in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_NAME", Storage = "_ReceiptOutName", DbType = "bigint")]
        [DataMember(Order=3)]
        public System.Nullable<long> ReceiptOutName
        {
            get
            {
                return this._ReceiptOutName;
            }
            set
            {
                if (this._ReceiptOutName != value)
                {
                    this.OnReceiptOutNameChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutName = value;
                    this.SendPropertyChanged("ReceiptOutName");
                    this.OnReceiptOutNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlReicptOutCst in the schema.
    /// </summary>
    [Table(Name = @"crl_reicpt_out_cst")]
    [DataContract()]
    public partial class CrlReicptOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReceiptOutId;

        private long _DepartmentId;

        private long _CostType;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptOutIdChanging(long value);
        partial void OnReceiptOutIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlReicptOutCst()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_ID", Storage = "_ReceiptOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long ReceiptOutId
        {
            get
            {
                return this._ReceiptOutId;
            }
            set
            {
                if (this._ReceiptOutId != value)
                {
                    this.OnReceiptOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutId = value;
                    this.SendPropertyChanged("ReceiptOutId");
                    this.OnReceiptOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlRetBlkIn in the schema.
    /// </summary>
    [Table(Name = @"crl_ret_blk_in")]
    [DataContract()]
    public partial class CrlRetBlkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BlockInId;

        private long _BlockDetailId;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockInIdChanging(long value);
        partial void OnBlockInIdChanged();
        partial void OnBlockDetailIdChanging(long value);
        partial void OnBlockDetailIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlRetBlkIn()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockInId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_IN_ID", Storage = "_BlockInId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long BlockInId
        {
            get
            {
                return this._BlockInId;
            }
            set
            {
                if (this._BlockInId != value)
                {
                    this.OnBlockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockInId = value;
                    this.SendPropertyChanged("BlockInId");
                    this.OnBlockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=3)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlRetPrd in the schema.
    /// </summary>
    [Table(Name = @"crl_ret_prd")]
    [DataContract()]
    public partial class CrlRetPrd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReturnProductId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _Quantity;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReturnProductIdChanging(long value);
        partial void OnReturnProductIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDescriptionChanging(System.Nullable<long> value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        #endregion

        public CrlRetPrd()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnProductId in the schema.
        /// </summary>
        [Column(Name = @"RETURN_PRODUCT_ID", Storage = "_ReturnProductId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long ReturnProductId
        {
            get
            {
                return this._ReturnProductId;
            }
            set
            {
                if (this._ReturnProductId != value)
                {
                    this.OnReturnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnProductId = value;
                    this.SendPropertyChanged("ReturnProductId");
                    this.OnReturnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlRetTran in the schema.
    /// </summary>
    [Table(Name = @"crl_ret_trans")]
    [DataContract()]
    public partial class CrlRetTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ReturnTransactionId;

        private string _TransactionId;

        private string _PosTransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private string _CustomerId;

        private string _PurchaseOrderId;

        private string _ReturnId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReturnTransactionIdChanging(string value);
        partial void OnReturnTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnReturnIdChanging(string value);
        partial void OnReturnIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlRetTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnTransactionId in the schema.
        /// </summary>
        [Column(Name = @"Return_Transaction_Id", Storage = "_ReturnTransactionId", CanBeNull = false, DbType = "nvarchar(15) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ReturnTransactionId
        {
            get
            {
                return this._ReturnTransactionId;
            }
            set
            {
                if (this._ReturnTransactionId != value)
                {
                    this.OnReturnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnTransactionId = value;
                    this.SendPropertyChanged("ReturnTransactionId");
                    this.OnReturnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Id", Storage = "_TransactionId", CanBeNull = false, DbType = "nvarchar(12) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_Transaction_Id", Storage = "_PosTransactionId", CanBeNull = false, DbType = "nvarchar(10) NOT NULL")]
        [DataMember(Order=3)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"Store_Id", Storage = "_StoreId", CanBeNull = false, DbType = "nvarchar(5) NOT NULL")]
        [DataMember(Order=4)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"Register_Id", Storage = "_RegisterId", CanBeNull = false, DbType = "nvarchar(2) NOT NULL")]
        [DataMember(Order=5)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"Cashier_Id", Storage = "_CashierId", CanBeNull = false, DbType = "nvarchar(6) NOT NULL")]
        [DataMember(Order=6)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"Customer_Id", Storage = "_CustomerId", DbType = "nvarchar(15)")]
        [DataMember(Order=7)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"Purchase_Order_Id", Storage = "_PurchaseOrderId", DbType = "nvarchar(15)")]
        [DataMember(Order=8)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnId in the schema.
        /// </summary>
        [Column(Name = @"Return_Id", Storage = "_ReturnId", DbType = "nvarchar(15)")]
        [DataMember(Order=9)]
        public string ReturnId
        {
            get
            {
                return this._ReturnId;
            }
            set
            {
                if (this._ReturnId != value)
                {
                    this.OnReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnId = value;
                    this.SendPropertyChanged("ReturnId");
                    this.OnReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=16)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=17)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=18)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlRole in the schema.
    /// </summary>
    [Table(Name = @"crl_role")]
    [DataContract()]
    public partial class CrlRole : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private EntitySet<CrlUsrRole> _CrlUsrRoles;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public CrlRole()
        {
            this.Initialize();
            this._CrlUsrRoles = new EntitySet<CrlUsrRole>(new Action<CrlUsrRole>(this.attach_CrlUsrRoles), new Action<CrlUsrRole>(this.detach_CrlUsrRoles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "nvarchar(50)")]
        [DataMember(Order=2)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Association(Name="CrlRole_CrlUsrRole", Storage="_CrlUsrRoles", OtherKey="Roleid")]
        [DataMember(Order=3, EmitDefaultValue=false)]
        public EntitySet<CrlUsrRole> CrlUsrRoles
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlUsrRoles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlUsrRoles;
            }
            set
            {
                this._CrlUsrRoles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlUsrRoles(CrlUsrRole entity)
        {
            this.SendPropertyChanging("CrlUsrRoles");
            entity.CrlRole = this;
        }
    
        private void detach_CrlUsrRoles(CrlUsrRole entity)
        {
            this.SendPropertyChanging("CrlUsrRoles");
            entity.CrlRole = null;
        }

        private void Initialize()
        {
            this._CrlUsrRoles = new EntitySet<CrlUsrRole>(new Action<CrlUsrRole>(this.attach_CrlUsrRoles), new Action<CrlUsrRole>(this.detach_CrlUsrRoles));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlSaleTran in the schema.
    /// </summary>
    [Table(Name = @"crl_sale_trans")]
    [DataContract()]
    public partial class CrlSaleTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _SaleTransactionId;

        private string _TransactionId;

        private string _PosTransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private string _PurchaseOrderId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSaleTransactionIdChanging(string value);
        partial void OnSaleTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlSaleTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SaleTransactionId in the schema.
        /// </summary>
        [Column(Name = @"Sale_Transaction_Id", Storage = "_SaleTransactionId", CanBeNull = false, DbType = "nvarchar(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string SaleTransactionId
        {
            get
            {
                return this._SaleTransactionId;
            }
            set
            {
                if (this._SaleTransactionId != value)
                {
                    this.OnSaleTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._SaleTransactionId = value;
                    this.SendPropertyChanged("SaleTransactionId");
                    this.OnSaleTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Id", Storage = "_TransactionId", CanBeNull = false, DbType = "nvarchar(12) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_Transaction_Id", Storage = "_PosTransactionId", CanBeNull = false, DbType = "nvarchar(10) NOT NULL")]
        [DataMember(Order=3)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"Store_Id", Storage = "_StoreId", CanBeNull = false, DbType = "nvarchar(5) NOT NULL")]
        [DataMember(Order=4)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"Register_Id", Storage = "_RegisterId", CanBeNull = false, DbType = "nvarchar(2) NOT NULL")]
        [DataMember(Order=5)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"Cashier_Id", Storage = "_CashierId", CanBeNull = false, DbType = "nvarchar(6) NOT NULL")]
        [DataMember(Order=6)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"Purchase_Order_Id", Storage = "_PurchaseOrderId", DbType = "nvarchar(15)")]
        [DataMember(Order=7)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=14)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=15)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=16)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlScheTmplate in the schema.
    /// </summary>
    [Table(Name = @"crl_sche_tmplate")]
    [DataContract()]
    public partial class CrlScheTmplate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private long _ScheduleId;

        private long _DepartmentId;

        private System.Nullable<long> _Monday;

        private System.Nullable<long> _Tuesday;

        private System.Nullable<long> _Wednesday;

        private System.Nullable<long> _Thursday;

        private System.Nullable<long> _Friday;

        private System.Nullable<long> _Saturday;

        private System.Nullable<long> _Sunday;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnScheduleIdChanging(long value);
        partial void OnScheduleIdChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnMondayChanging(System.Nullable<long> value);
        partial void OnMondayChanged();
        partial void OnTuesdayChanging(System.Nullable<long> value);
        partial void OnTuesdayChanged();
        partial void OnWednesdayChanging(System.Nullable<long> value);
        partial void OnWednesdayChanged();
        partial void OnThursdayChanging(System.Nullable<long> value);
        partial void OnThursdayChanged();
        partial void OnFridayChanging(System.Nullable<long> value);
        partial void OnFridayChanged();
        partial void OnSaturdayChanging(System.Nullable<long> value);
        partial void OnSaturdayChanged();
        partial void OnSundayChanging(System.Nullable<long> value);
        partial void OnSundayChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        #endregion

        public CrlScheTmplate()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScheduleId in the schema.
        /// </summary>
        [Column(Name = @"SCHEDULE_ID", Storage = "_ScheduleId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long ScheduleId
        {
            get
            {
                return this._ScheduleId;
            }
            set
            {
                if (this._ScheduleId != value)
                {
                    this.OnScheduleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ScheduleId = value;
                    this.SendPropertyChanged("ScheduleId");
                    this.OnScheduleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Monday in the schema.
        /// </summary>
        [Column(Name = @"MONDAY", Storage = "_Monday", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Monday
        {
            get
            {
                return this._Monday;
            }
            set
            {
                if (this._Monday != value)
                {
                    this.OnMondayChanging(value);
                    this.SendPropertyChanging();
                    this._Monday = value;
                    this.SendPropertyChanged("Monday");
                    this.OnMondayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tuesday in the schema.
        /// </summary>
        [Column(Name = @"TUESDAY", Storage = "_Tuesday", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Tuesday
        {
            get
            {
                return this._Tuesday;
            }
            set
            {
                if (this._Tuesday != value)
                {
                    this.OnTuesdayChanging(value);
                    this.SendPropertyChanging();
                    this._Tuesday = value;
                    this.SendPropertyChanged("Tuesday");
                    this.OnTuesdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Wednesday in the schema.
        /// </summary>
        [Column(Name = @"WEDNESDAY", Storage = "_Wednesday", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Wednesday
        {
            get
            {
                return this._Wednesday;
            }
            set
            {
                if (this._Wednesday != value)
                {
                    this.OnWednesdayChanging(value);
                    this.SendPropertyChanging();
                    this._Wednesday = value;
                    this.SendPropertyChanged("Wednesday");
                    this.OnWednesdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thursday in the schema.
        /// </summary>
        [Column(Name = @"THURSDAY", Storage = "_Thursday", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> Thursday
        {
            get
            {
                return this._Thursday;
            }
            set
            {
                if (this._Thursday != value)
                {
                    this.OnThursdayChanging(value);
                    this.SendPropertyChanging();
                    this._Thursday = value;
                    this.SendPropertyChanged("Thursday");
                    this.OnThursdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Friday in the schema.
        /// </summary>
        [Column(Name = @"FRIDAY", Storage = "_Friday", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> Friday
        {
            get
            {
                return this._Friday;
            }
            set
            {
                if (this._Friday != value)
                {
                    this.OnFridayChanging(value);
                    this.SendPropertyChanging();
                    this._Friday = value;
                    this.SendPropertyChanged("Friday");
                    this.OnFridayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Saturday in the schema.
        /// </summary>
        [Column(Name = @"SATURDAY", Storage = "_Saturday", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> Saturday
        {
            get
            {
                return this._Saturday;
            }
            set
            {
                if (this._Saturday != value)
                {
                    this.OnSaturdayChanging(value);
                    this.SendPropertyChanging();
                    this._Saturday = value;
                    this.SendPropertyChanged("Saturday");
                    this.OnSaturdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sunday in the schema.
        /// </summary>
        [Column(Name = @"SUNDAY", Storage = "_Sunday", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> Sunday
        {
            get
            {
                return this._Sunday;
            }
            set
            {
                if (this._Sunday != value)
                {
                    this.OnSundayChanging(value);
                    this.SendPropertyChanging();
                    this._Sunday = value;
                    this.SendPropertyChanged("Sunday");
                    this.OnSundayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "datetime")]
        [DataMember(Order=17)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "datetime")]
        [DataMember(Order=18)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=19)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=20)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=21)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=22)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=23)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlSimPrd in the schema.
    /// </summary>
    [Table(Name = @"crl_sim_prd")]
    [DataContract()]
    public partial class CrlSimPrd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BaseProductId;

        private long _OtherProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBaseProductIdChanging(long value);
        partial void OnBaseProductIdChanged();
        partial void OnOtherProductIdChanging(long value);
        partial void OnOtherProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlSimPrd()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BaseProductId in the schema.
        /// </summary>
        [Column(Name = @"BASE_PRODUCT_ID", Storage = "_BaseProductId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long BaseProductId
        {
            get
            {
                return this._BaseProductId;
            }
            set
            {
                if (this._BaseProductId != value)
                {
                    this.OnBaseProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._BaseProductId = value;
                    this.SendPropertyChanged("BaseProductId");
                    this.OnBaseProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherProductId in the schema.
        /// </summary>
        [Column(Name = @"OTHER_PRODUCT_ID", Storage = "_OtherProductId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long OtherProductId
        {
            get
            {
                return this._OtherProductId;
            }
            set
            {
                if (this._OtherProductId != value)
                {
                    this.OnOtherProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._OtherProductId = value;
                    this.SendPropertyChanged("OtherProductId");
                    this.OnOtherProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlStkDefStat in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_def_stat")]
    [DataContract()]
    public partial class CrlStkDefStat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DefectStatusId;

        private string _DefectStatusName;

        private EntitySet<CrlDeptStkOut> _CrlDeptStkOuts;

        private EntitySet<CrlStkOut> _CrlStkOuts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDefectStatusIdChanging(long value);
        partial void OnDefectStatusIdChanged();
        partial void OnDefectStatusNameChanging(string value);
        partial void OnDefectStatusNameChanged();
        #endregion

        public CrlStkDefStat()
        {
            this.Initialize();
            this._CrlDeptStkOuts = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts));
            this._CrlStkOuts = new EntitySet<CrlStkOut>(new Action<CrlStkOut>(this.attach_CrlStkOuts), new Action<CrlStkOut>(this.detach_CrlStkOuts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusName in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_NAME", Storage = "_DefectStatusName", CanBeNull = false, DbType = "nvarchar(200) NOT NULL")]
        [DataMember(Order=2)]
        public string DefectStatusName
        {
            get
            {
                return this._DefectStatusName;
            }
            set
            {
                if (this._DefectStatusName != value)
                {
                    this.OnDefectStatusNameChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusName = value;
                    this.SendPropertyChanged("DefectStatusName");
                    this.OnDefectStatusNameChanged();
                }
            }
        }

        [Association(Name="CrlStkDefStat_CrlDeptStkOut", Storage="_CrlDeptStkOuts", OtherKey="DefectStatusId")]
        [DataMember(Order=3, EmitDefaultValue=false)]
        public EntitySet<CrlDeptStkOut> CrlDeptStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlDeptStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlDeptStkOuts;
            }
            set
            {
                this._CrlDeptStkOuts.Assign(value);
            }
        }

        [Association(Name="CrlStkDefStat_CrlStkOut", Storage="_CrlStkOuts", OtherKey="DefectStatusId")]
        [DataMember(Order=4, EmitDefaultValue=false)]
        public EntitySet<CrlStkOut> CrlStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkOuts;
            }
            set
            {
                this._CrlStkOuts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlDeptStkOuts(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts");
            entity.CrlStkDefStat = this;
        }
    
        private void detach_CrlDeptStkOuts(CrlDeptStkOut entity)
        {
            this.SendPropertyChanging("CrlDeptStkOuts");
            entity.CrlStkDefStat = null;
        }

        private void attach_CrlStkOuts(CrlStkOut entity)
        {
            this.SendPropertyChanging("CrlStkOuts");
            entity.CrlStkDefStat = this;
        }
    
        private void detach_CrlStkOuts(CrlStkOut entity)
        {
            this.SendPropertyChanging("CrlStkOuts");
            entity.CrlStkDefStat = null;
        }

        private void Initialize()
        {
            this._CrlDeptStkOuts = new EntitySet<CrlDeptStkOut>(new Action<CrlDeptStkOut>(this.attach_CrlDeptStkOuts), new Action<CrlDeptStkOut>(this.detach_CrlDeptStkOuts));
            this._CrlStkOuts = new EntitySet<CrlStkOut>(new Action<CrlStkOut>(this.attach_CrlStkOuts), new Action<CrlStkOut>(this.detach_CrlStkOuts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlStkIn in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_in")]
    [DataContract()]
    public partial class CrlStkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private System.Nullable<System.DateTime> _StockInDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _Description;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _StockInCost;

        private System.Nullable<long> _StockInType;

        private System.Nullable<long> _ConfirmFlg;

        private System.Nullable<long> _TotalQuantity;

        private System.Nullable<long> _SrcDepartmentId;

        private System.Nullable<long> _TotalAmount;

        private EntityRef<CrlDept> _CrlDept;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnStockInDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockInDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInCostChanging(System.Nullable<long> value);
        partial void OnStockInCostChanged();
        partial void OnStockInTypeChanging(System.Nullable<long> value);
        partial void OnStockInTypeChanged();
        partial void OnConfirmFlgChanging(System.Nullable<long> value);
        partial void OnConfirmFlgChanged();
        partial void OnTotalQuantityChanging(System.Nullable<long> value);
        partial void OnTotalQuantityChanged();
        partial void OnSrcDepartmentIdChanging(System.Nullable<long> value);
        partial void OnSrcDepartmentIdChanged();
        partial void OnTotalAmountChanging(System.Nullable<long> value);
        partial void OnTotalAmountChanged();
        #endregion

        public CrlStkIn()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(11) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_DATE", Storage = "_StockInDate", DbType = "datetime")]
        [DataMember(Order=2)]
        public System.Nullable<System.DateTime> StockInDate
        {
            get
            {
                return this._StockInDate;
            }
            set
            {
                if (this._StockInDate != value)
                {
                    this.OnStockInDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockInDate = value;
                    this.SendPropertyChanged("StockInDate");
                    this.OnStockInDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(2000)")]
        [DataMember(Order=4)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInCost in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_COST", Storage = "_StockInCost", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> StockInCost
        {
            get
            {
                return this._StockInCost;
            }
            set
            {
                if (this._StockInCost != value)
                {
                    this.OnStockInCostChanging(value);
                    this.SendPropertyChanging();
                    this._StockInCost = value;
                    this.SendPropertyChanged("StockInCost");
                    this.OnStockInCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SrcDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"SRC_DEPARTMENT_ID", Storage = "_SrcDepartmentId", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> SrcDepartmentId
        {
            get
            {
                return this._SrcDepartmentId;
            }
            set
            {
                if (this._SrcDepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSrcDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._SrcDepartmentId = value;
                    this.SendPropertyChanged("SrcDepartmentId");
                    this.OnSrcDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlStkIn", Storage="_CrlDept", ThisKey="SrcDepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlStkIns.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkIns.Add(this);
                        this._SrcDepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._SrcDepartmentId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlStkInDet in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_in_det")]
    [DataContract()]
    public partial class CrlStkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<long> _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _StockInType;

        private System.Nullable<long> _SellPrice;

        private EntityRef<CrlPrdMst> _CrlPrdMst;

        private EntityRef<CrlPrd> _CrlPrd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInTypeChanging(System.Nullable<long> value);
        partial void OnStockInTypeChanged();
        partial void OnSellPriceChanging(System.Nullable<long> value);
        partial void OnSellPriceChanged();
        #endregion

        public CrlStkInDet()
        {
            this.Initialize();
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "nvarchar(11) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=14)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SellPrice in the schema.
        /// </summary>
        [Column(Name = @"SELL_PRICE", Storage = "_SellPrice", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> SellPrice
        {
            get
            {
                return this._SellPrice;
            }
            set
            {
                if (this._SellPrice != value)
                {
                    this.OnSellPriceChanging(value);
                    this.SendPropertyChanging();
                    this._SellPrice = value;
                    this.SendPropertyChanged("SellPrice");
                    this.OnSellPriceChanged();
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlStkInDet", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlStkInDets.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkInDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }

        [Association(Name="CrlPrd_CrlStkInDet", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlStkInDets.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkInDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            this._CrlPrd = default(EntityRef<CrlPrd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlStkOut in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_out")]
    [DataContract()]
    public partial class CrlStkOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Nullable<System.DateTime> _StockOutDate;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _StockId;

        private System.Nullable<long> _DefectStatusId;

        private System.Nullable<long> _ConfirmFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _TotalQuantity;

        private string _Description;

        private System.Nullable<long> _TotalAmount;

        private long _StockOutId;

        private EntityRef<CrlDept> _CrlDept;

        private EntityRef<CrlStkDefStat> _CrlStkDefStat;

        private EntitySet<CrlStkOutDet> _CrlStkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnStockIdChanging(System.Nullable<long> value);
        partial void OnStockIdChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(System.Nullable<long> value);
        partial void OnConfirmFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnTotalQuantityChanging(System.Nullable<long> value);
        partial void OnTotalQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTotalAmountChanging(System.Nullable<long> value);
        partial void OnTotalAmountChanged();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        #endregion

        public CrlStkOut()
        {
            this.Initialize();
            this._CrlDept  = default(EntityRef<CrlDept>);
            this._CrlStkDefStat  = default(EntityRef<CrlStkDefStat>);
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "datetime")]
        [DataMember(Order=1)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=2)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._CrlDept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    if (this._CrlStkDefStat.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=12)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=13)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=14)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(200)")]
        [DataMember(Order=18)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=20)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

        [Association(Name="CrlDept_CrlStkOut", Storage="_CrlDept", ThisKey="DepartmentId", IsForeignKey=true)]
        public CrlDept CrlDept
        {
            get
            {
                return this._CrlDept.Entity;
            }
            set
            {
                CrlDept previousValue = this._CrlDept.Entity;
                if ((previousValue != value) || (this._CrlDept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlDept.Entity = null;
                        previousValue.CrlStkOuts.Remove(this);
                    }
                    this._CrlDept.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkOuts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(long);
                    }
                    this.SendPropertyChanged("CrlDept");
                }
            }
        }

        [Association(Name="CrlStkDefStat_CrlStkOut", Storage="_CrlStkDefStat", ThisKey="DefectStatusId", IsForeignKey=true)]
        public CrlStkDefStat CrlStkDefStat
        {
            get
            {
                return this._CrlStkDefStat.Entity;
            }
            set
            {
                CrlStkDefStat previousValue = this._CrlStkDefStat.Entity;
                if ((previousValue != value) || (this._CrlStkDefStat.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlStkDefStat.Entity = null;
                        previousValue.CrlStkOuts.Remove(this);
                    }
                    this._CrlStkDefStat.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkOuts.Add(this);
                        this._DefectStatusId = value.DefectStatusId;
                    }
                    else
                    {
                        this._DefectStatusId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CrlStkDefStat");
                }
            }
        }

        [Association(Name="CrlStkOut_CrlStkOutDet", Storage="_CrlStkOutDets", OtherKey="StockOutId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<CrlStkOutDet> CrlStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlStkOutDets;
            }
            set
            {
                this._CrlStkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlStkOut = this;
        }
    
        private void detach_CrlStkOutDets(CrlStkOutDet entity)
        {
            this.SendPropertyChanging("CrlStkOutDets");
            entity.CrlStkOut = null;
        }

        private void Initialize()
        {
            this._CrlDept = default(EntityRef<CrlDept>);
            this._CrlStkDefStat = default(EntityRef<CrlStkDefStat>);
            this._CrlStkOutDets = new EntitySet<CrlStkOutDet>(new Action<CrlStkOutDet>(this.attach_CrlStkOutDets), new Action<CrlStkOutDet>(this.detach_CrlStkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlStkOutCst in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_out_cst")]
    [DataContract()]
    public partial class CrlStkOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockOutId;

        private long _CostType;

        private long _StockoutId;

        private System.Nullable<long> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        partial void OnCostTypeChanging(long value);
        partial void OnCostTypeChanged();
        partial void OnStockoutIdChanging(long value);
        partial void OnStockoutIdChanged();
        partial void OnCostChanging(System.Nullable<long> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlStkOutCst()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public long CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockoutId in the schema.
        /// </summary>
        [Column(Name = @"STOCKOUT_ID", Storage = "_StockoutId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=3)]
        public long StockoutId
        {
            get
            {
                return this._StockoutId;
            }
            set
            {
                if (this._StockoutId != value)
                {
                    this.OnStockoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockoutId = value;
                    this.SendPropertyChanged("StockoutId");
                    this.OnStockoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlStkOutDet in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_out_det")]
    [DataContract()]
    public partial class CrlStkOutDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockOutDetailId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<long> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _DefectStatusId;

        private string _Description;

        private System.Nullable<long> _GoodQuantity;

        private System.Nullable<long> _ErrorQuantity;

        private System.Nullable<long> _DamageQuantity;

        private System.Nullable<long> _LostQuantity;

        private long _StockOutId;

        private EntityRef<CrlStkOut> _CrlStkOut;

        private EntityRef<CrlPrdMst> _CrlPrdMst;

        private EntityRef<CrlPrd> _CrlPrd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutDetailIdChanging(long value);
        partial void OnStockOutDetailIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<long> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodQuantityChanging(System.Nullable<long> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<long> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<long> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<long> value);
        partial void OnLostQuantityChanged();
        partial void OnStockOutIdChanging(long value);
        partial void OnStockOutIdChanged();
        #endregion

        public CrlStkOutDet()
        {
            this.Initialize();
            this._CrlStkOut  = default(EntityRef<CrlStkOut>);
            this._CrlPrdMst  = default(EntityRef<CrlPrdMst>);
            this._CrlPrd  = default(EntityRef<CrlPrd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutDetailId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DETAIL_ID", Storage = "_StockOutDetailId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long StockOutDetailId
        {
            get
            {
                return this._StockOutDetailId;
            }
            set
            {
                if (this._StockOutDetailId != value)
                {
                    this.OnStockOutDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDetailId = value;
                    this.SendPropertyChanged("StockOutDetailId");
                    this.OnStockOutDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._CrlPrd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "nvarchar(13)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._CrlPrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=13)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "nvarchar(500)")]
        [DataMember(Order=17)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "bigint")]
        [DataMember(Order=18)]
        public System.Nullable<long> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "bigint")]
        [DataMember(Order=19)]
        public System.Nullable<long> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "bigint")]
        [DataMember(Order=20)]
        public System.Nullable<long> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "bigint")]
        [DataMember(Order=21)]
        public System.Nullable<long> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=22)]
        public long StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    if (this._CrlStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

        [Association(Name="CrlStkOut_CrlStkOutDet", Storage="_CrlStkOut", ThisKey="StockOutId", IsForeignKey=true)]
        public CrlStkOut CrlStkOut
        {
            get
            {
                return this._CrlStkOut.Entity;
            }
            set
            {
                CrlStkOut previousValue = this._CrlStkOut.Entity;
                if ((previousValue != value) || (this._CrlStkOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlStkOut.Entity = null;
                        previousValue.CrlStkOutDets.Remove(this);
                    }
                    this._CrlStkOut.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkOutDets.Add(this);
                        this._StockOutId = value.StockOutId;
                    }
                    else
                    {
                        this._StockOutId = default(long);
                    }
                    this.SendPropertyChanged("CrlStkOut");
                }
            }
        }

        [Association(Name="CrlPrdMst_CrlStkOutDet", Storage="_CrlPrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public CrlPrdMst CrlPrdMst
        {
            get
            {
                return this._CrlPrdMst.Entity;
            }
            set
            {
                CrlPrdMst previousValue = this._CrlPrdMst.Entity;
                if ((previousValue != value) || (this._CrlPrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrdMst.Entity = null;
                        previousValue.CrlStkOutDets.Remove(this);
                    }
                    this._CrlPrdMst.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkOutDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrdMst");
                }
            }
        }

        [Association(Name="CrlPrd_CrlStkOutDet", Storage="_CrlPrd", ThisKey="ProductId", IsForeignKey=true)]
        public CrlPrd CrlPrd
        {
            get
            {
                return this._CrlPrd.Entity;
            }
            set
            {
                CrlPrd previousValue = this._CrlPrd.Entity;
                if ((previousValue != value) || (this._CrlPrd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlPrd.Entity = null;
                        previousValue.CrlStkOutDets.Remove(this);
                    }
                    this._CrlPrd.Entity = value;
                    if (value != null)
                    {
                        value.CrlStkOutDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("CrlPrd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlStkOut = default(EntityRef<CrlStkOut>);
            this._CrlPrdMst = default(EntityRef<CrlPrdMst>);
            this._CrlPrd = default(EntityRef<CrlPrd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlStkOutTmp in the schema.
    /// </summary>
    [Table(Name = @"crl_stk_out_tmp")]
    [DataContract()]
    public partial class CrlStkOutTmp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _StockoutId;

        private System.Nullable<System.DateTime> _StockOutDate;

        private long _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<long> _StockId;

        private System.Nullable<long> _DefectStatusId;

        private System.Nullable<long> _ConfirmFlg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockoutIdChanging(long value);
        partial void OnStockoutIdChanged();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockIdChanging(System.Nullable<long> value);
        partial void OnStockIdChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(System.Nullable<long> value);
        partial void OnConfirmFlgChanged();
        #endregion

        public CrlStkOutTmp()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockoutId in the schema.
        /// </summary>
        [Column(Name = @"STOCKOUT_ID", Storage = "_StockoutId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=1)]
        public long StockoutId
        {
            get
            {
                return this._StockoutId;
            }
            set
            {
                if (this._StockoutId != value)
                {
                    this.OnStockoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockoutId = value;
                    this.SendPropertyChanged("StockoutId");
                    this.OnStockoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "datetime")]
        [DataMember(Order=2)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=3)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=12)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", DbType = "bigint")]
        [DataMember(Order=15)]
        public System.Nullable<long> StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=16)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "bigint")]
        [DataMember(Order=17)]
        public System.Nullable<long> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlSup in the schema.
    /// </summary>
    [Table(Name = @"crl_sup")]
    [DataContract()]
    public partial class CrlSup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _SupplierId;

        private string _SupplierName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSupplierIdChanging(long value);
        partial void OnSupplierIdChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlSup()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierName in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_NAME", Storage = "_SupplierName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string SupplierName
        {
            get
            {
                return this._SupplierName;
            }
            set
            {
                if (this._SupplierName != value)
                {
                    this.OnSupplierNameChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierName = value;
                    this.SendPropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlSyncStatus in the schema.
    /// </summary>
    [Table(Name = @"crl_sync_status")]
    [DataContract()]
    public partial class CrlSyncStatus : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _LastSyncDate;

        private string _CreateId;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLastSyncDateChanging(System.DateTime value);
        partial void OnLastSyncDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        #endregion

        public CrlSyncStatus()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LastSyncDate in the schema.
        /// </summary>
        [Column(Name = @"LAST_SYNC_DATE", Storage = "_LastSyncDate", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public System.DateTime LastSyncDate
        {
            get
            {
                return this._LastSyncDate;
            }
            set
            {
                if (this._LastSyncDate != value)
                {
                    this.OnLastSyncDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastSyncDate = value;
                    this.SendPropertyChanged("LastSyncDate");
                    this.OnLastSyncDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(45)")]
        [DataMember(Order=2)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlTax in the schema.
    /// </summary>
    [Table(Name = @"crl_tax")]
    [DataContract()]
    public partial class CrlTax : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TaxId;

        private string _TaxName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<long> _ExFld1;

        private System.Nullable<long> _ExFld2;

        private System.Nullable<long> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTaxIdChanging(long value);
        partial void OnTaxIdChanged();
        partial void OnTaxNameChanging(string value);
        partial void OnTaxNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<long> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<long> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<long> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CrlTax()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public long TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxName in the schema.
        /// </summary>
        [Column(Name = @"TAX_NAME", Storage = "_TaxName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TaxName
        {
            get
            {
                return this._TaxName;
            }
            set
            {
                if (this._TaxName != value)
                {
                    this.OnTaxNameChanging(value);
                    this.SendPropertyChanging();
                    this._TaxName = value;
                    this.SendPropertyChanged("TaxName");
                    this.OnTaxNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=7)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=8)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "bigint")]
        [DataMember(Order=11)]
        public System.Nullable<long> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlTran in the schema.
    /// </summary>
    [Table(Name = @"crl_trans")]
    [DataContract()]
    public partial class CrlTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<long> _ExclusiveKey;

        private System.Nullable<long> _DelFlg;

        private System.Nullable<int> _ExFld1;

        private System.Nullable<int> _ExFld2;

        private System.Nullable<int> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private int _TransactionType;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<long> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<long> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<int> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<int> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<int> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnTransactionTypeChanging(int value);
        partial void OnTransactionTypeChanged();
        #endregion

        public CrlTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Id", Storage = "_TransactionId", CanBeNull = false, DbType = "nvarchar(12) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"Store_Id", Storage = "_StoreId", CanBeNull = false, DbType = "nvarchar(5) NOT NULL")]
        [DataMember(Order=2)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"Register_Id", Storage = "_RegisterId", CanBeNull = false, DbType = "nvarchar(2) NOT NULL")]
        [DataMember(Order=3)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"Cashier_Id", Storage = "_CashierId", CanBeNull = false, DbType = "nvarchar(6) NOT NULL")]
        [DataMember(Order=4)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "datetime")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "nvarchar(50)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "datetime")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "nvarchar(50)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "bigint")]
        [DataMember(Order=9)]
        public System.Nullable<long> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "bigint")]
        [DataMember(Order=10)]
        public System.Nullable<long> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "int")]
        [DataMember(Order=11)]
        public System.Nullable<int> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "int")]
        [DataMember(Order=12)]
        public System.Nullable<int> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "int")]
        [DataMember(Order=13)]
        public System.Nullable<int> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "nvarchar(45)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "nvarchar(45)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionType in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Type", Storage = "_TransactionType", CanBeNull = false, DbType = "int NOT NULL")]
        [DataMember(Order=16)]
        public int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CrlUsrInfo in the schema.
    /// </summary>
    [Table(Name = @"crl_usr_info")]
    [DataContract()]
    public partial class CrlUsrInfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Username;

        private string _Password;

        private string _EmployeeId;

        private System.Nullable<int> _DepartmentId;

        private System.Nullable<long> _Suspended;

        private System.Nullable<long> _Deleted;

        private EntitySet<CrlUsrRole> _CrlUsrRoles;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(System.Nullable<int> value);
        partial void OnDepartmentIdChanged();
        partial void OnSuspendedChanging(System.Nullable<long> value);
        partial void OnSuspendedChanged();
        partial void OnDeletedChanging(System.Nullable<long> value);
        partial void OnDeletedChanged();
        #endregion

        public CrlUsrInfo()
        {
            this.Initialize();
            this._CrlUsrRoles = new EntitySet<CrlUsrRole>(new Action<CrlUsrRole>(this.attach_CrlUsrRoles), new Action<CrlUsrRole>(this.detach_CrlUsrRoles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Storage = "_Username", CanBeNull = false, DbType = "nvarchar(50) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", DbType = "nvarchar(50)")]
        [DataMember(Order=2)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", DbType = "nvarchar(20)")]
        [DataMember(Order=3)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", DbType = "int")]
        [DataMember(Order=4)]
        public System.Nullable<int> DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suspended in the schema.
        /// </summary>
        [Column(Name = @"SUSPENDED", Storage = "_Suspended", DbType = "bigint")]
        [DataMember(Order=5)]
        public System.Nullable<long> Suspended
        {
            get
            {
                return this._Suspended;
            }
            set
            {
                if (this._Suspended != value)
                {
                    this.OnSuspendedChanging(value);
                    this.SendPropertyChanging();
                    this._Suspended = value;
                    this.SendPropertyChanged("Suspended");
                    this.OnSuspendedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"DELETED", Storage = "_Deleted", DbType = "bigint")]
        [DataMember(Order=6)]
        public System.Nullable<long> Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Association(Name="CrlUsrInfo_CrlUsrRole", Storage="_CrlUsrRoles", OtherKey="Userid")]
        [DataMember(Order=7, EmitDefaultValue=false)]
        public EntitySet<CrlUsrRole> CrlUsrRoles
        {
            get
            {
                if ((this.serializing 
                  && (this._CrlUsrRoles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CrlUsrRoles;
            }
            set
            {
                this._CrlUsrRoles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CrlUsrRoles(CrlUsrRole entity)
        {
            this.SendPropertyChanging("CrlUsrRoles");
            entity.CrlUsrInfo = this;
        }
    
        private void detach_CrlUsrRoles(CrlUsrRole entity)
        {
            this.SendPropertyChanging("CrlUsrRoles");
            entity.CrlUsrInfo = null;
        }

        private void Initialize()
        {
            this._CrlUsrRoles = new EntitySet<CrlUsrRole>(new Action<CrlUsrRole>(this.attach_CrlUsrRoles), new Action<CrlUsrRole>(this.detach_CrlUsrRoles));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CrlUsrRole in the schema.
    /// </summary>
    [Table(Name = @"crl_usr_role")]
    [DataContract()]
    public partial class CrlUsrRole : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Userid;

        private int _Roleid;

        private EntityRef<CrlRole> _CrlRole;

        private EntityRef<CrlUsrInfo> _CrlUsrInfo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(string value);
        partial void OnUseridChanged();
        partial void OnRoleidChanging(int value);
        partial void OnRoleidChanged();
        #endregion

        public CrlUsrRole()
        {
            this.Initialize();
            this._CrlRole  = default(EntityRef<CrlRole>);
            this._CrlUsrInfo  = default(EntityRef<CrlUsrInfo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Userid in the schema.
        /// </summary>
        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "nvarchar(50) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    if (this._CrlUsrInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Roleid in the schema.
        /// </summary>
        [Column(Name = @"roleid", Storage = "_Roleid", CanBeNull = false, DbType = "int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public int Roleid
        {
            get
            {
                return this._Roleid;
            }
            set
            {
                if (this._Roleid != value)
                {
                    if (this._CrlRole.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleidChanging(value);
                    this.SendPropertyChanging();
                    this._Roleid = value;
                    this.SendPropertyChanged("Roleid");
                    this.OnRoleidChanged();
                }
            }
        }

        [Association(Name="CrlRole_CrlUsrRole", Storage="_CrlRole", ThisKey="Roleid", IsForeignKey=true)]
        public CrlRole CrlRole
        {
            get
            {
                return this._CrlRole.Entity;
            }
            set
            {
                CrlRole previousValue = this._CrlRole.Entity;
                if ((previousValue != value) || (this._CrlRole.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlRole.Entity = null;
                        previousValue.CrlUsrRoles.Remove(this);
                    }
                    this._CrlRole.Entity = value;
                    if (value != null)
                    {
                        value.CrlUsrRoles.Add(this);
                        this._Roleid = value.Id;
                    }
                    else
                    {
                        this._Roleid = default(int);
                    }
                    this.SendPropertyChanged("CrlRole");
                }
            }
        }

        [Association(Name="CrlUsrInfo_CrlUsrRole", Storage="_CrlUsrInfo", ThisKey="Userid", IsForeignKey=true)]
        public CrlUsrInfo CrlUsrInfo
        {
            get
            {
                return this._CrlUsrInfo.Entity;
            }
            set
            {
                CrlUsrInfo previousValue = this._CrlUsrInfo.Entity;
                if ((previousValue != value) || (this._CrlUsrInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CrlUsrInfo.Entity = null;
                        previousValue.CrlUsrRoles.Remove(this);
                    }
                    this._CrlUsrInfo.Entity = value;
                    if (value != null)
                    {
                        value.CrlUsrRoles.Add(this);
                        this._Userid = value.Username;
                    }
                    else
                    {
                        this._Userid = default(string);
                    }
                    this.SendPropertyChanged("CrlUsrInfo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._CrlRole = default(EntityRef<CrlRole>);
            this._CrlUsrInfo = default(EntityRef<CrlUsrInfo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempDeptStockStatistic in the schema.
    /// </summary>
    [Table(Name = @"temp_dept_stock_statistics")]
    [DataContract()]
    public partial class TempDeptStockStatistic : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _DepartmentName;

        private string _TypeName;

        private string _ProductId;

        private string _ProductName;

        private string _ColorName;

        private string _SizeName;

        private System.Nullable<decimal> _PrestkQty;

        private System.Nullable<decimal> _InstockQty;

        private System.Nullable<decimal> _ErrorQty;

        private System.Nullable<decimal> _DmgQty;

        private System.Nullable<decimal> _StkoutQty;

        private System.Nullable<decimal> _TmpoutQty;

        private System.Nullable<decimal> _RtnQty;

        private System.Nullable<decimal> _DestroyQty;

        private System.Nullable<decimal> _Bkpro;

        private System.Nullable<decimal> _Realstock;

        private long _TempPriKey;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnPrestkQtyChanging(System.Nullable<decimal> value);
        partial void OnPrestkQtyChanged();
        partial void OnInstockQtyChanging(System.Nullable<decimal> value);
        partial void OnInstockQtyChanged();
        partial void OnErrorQtyChanging(System.Nullable<decimal> value);
        partial void OnErrorQtyChanged();
        partial void OnDmgQtyChanging(System.Nullable<decimal> value);
        partial void OnDmgQtyChanged();
        partial void OnStkoutQtyChanging(System.Nullable<decimal> value);
        partial void OnStkoutQtyChanged();
        partial void OnTmpoutQtyChanging(System.Nullable<decimal> value);
        partial void OnTmpoutQtyChanged();
        partial void OnRtnQtyChanging(System.Nullable<decimal> value);
        partial void OnRtnQtyChanged();
        partial void OnDestroyQtyChanging(System.Nullable<decimal> value);
        partial void OnDestroyQtyChanged();
        partial void OnBkproChanging(System.Nullable<decimal> value);
        partial void OnBkproChanged();
        partial void OnRealstockChanging(System.Nullable<decimal> value);
        partial void OnRealstockChanged();
        partial void OnTempPriKeyChanging(long value);
        partial void OnTempPriKeyChanged();
        #endregion

        public TempDeptStockStatistic()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"department_name", Storage = "_DepartmentName", DbType = "nvarchar(500)")]
        [DataMember(Order=1)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"type_name", Storage = "_TypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"product_name", Storage = "_ProductName", DbType = "nvarchar(500)")]
        [DataMember(Order=4)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"color_name", Storage = "_ColorName", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"size_name", Storage = "_SizeName", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrestkQty in the schema.
        /// </summary>
        [Column(Name = @"prestk_qty", Storage = "_PrestkQty", DbType = "numeric")]
        [DataMember(Order=7)]
        public System.Nullable<decimal> PrestkQty
        {
            get
            {
                return this._PrestkQty;
            }
            set
            {
                if (this._PrestkQty != value)
                {
                    this.OnPrestkQtyChanging(value);
                    this.SendPropertyChanging();
                    this._PrestkQty = value;
                    this.SendPropertyChanged("PrestkQty");
                    this.OnPrestkQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InstockQty in the schema.
        /// </summary>
        [Column(Name = @"instock_qty", Storage = "_InstockQty", DbType = "numeric")]
        [DataMember(Order=8)]
        public System.Nullable<decimal> InstockQty
        {
            get
            {
                return this._InstockQty;
            }
            set
            {
                if (this._InstockQty != value)
                {
                    this.OnInstockQtyChanging(value);
                    this.SendPropertyChanging();
                    this._InstockQty = value;
                    this.SendPropertyChanged("InstockQty");
                    this.OnInstockQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQty in the schema.
        /// </summary>
        [Column(Name = @"error_qty", Storage = "_ErrorQty", DbType = "numeric")]
        [DataMember(Order=9)]
        public System.Nullable<decimal> ErrorQty
        {
            get
            {
                return this._ErrorQty;
            }
            set
            {
                if (this._ErrorQty != value)
                {
                    this.OnErrorQtyChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQty = value;
                    this.SendPropertyChanged("ErrorQty");
                    this.OnErrorQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DmgQty in the schema.
        /// </summary>
        [Column(Name = @"dmg_qty", Storage = "_DmgQty", DbType = "numeric")]
        [DataMember(Order=10)]
        public System.Nullable<decimal> DmgQty
        {
            get
            {
                return this._DmgQty;
            }
            set
            {
                if (this._DmgQty != value)
                {
                    this.OnDmgQtyChanging(value);
                    this.SendPropertyChanging();
                    this._DmgQty = value;
                    this.SendPropertyChanged("DmgQty");
                    this.OnDmgQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StkoutQty in the schema.
        /// </summary>
        [Column(Name = @"stkout_qty", Storage = "_StkoutQty", DbType = "numeric")]
        [DataMember(Order=11)]
        public System.Nullable<decimal> StkoutQty
        {
            get
            {
                return this._StkoutQty;
            }
            set
            {
                if (this._StkoutQty != value)
                {
                    this.OnStkoutQtyChanging(value);
                    this.SendPropertyChanging();
                    this._StkoutQty = value;
                    this.SendPropertyChanged("StkoutQty");
                    this.OnStkoutQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TmpoutQty in the schema.
        /// </summary>
        [Column(Name = @"tmpout_qty", Storage = "_TmpoutQty", DbType = "numeric")]
        [DataMember(Order=12)]
        public System.Nullable<decimal> TmpoutQty
        {
            get
            {
                return this._TmpoutQty;
            }
            set
            {
                if (this._TmpoutQty != value)
                {
                    this.OnTmpoutQtyChanging(value);
                    this.SendPropertyChanging();
                    this._TmpoutQty = value;
                    this.SendPropertyChanged("TmpoutQty");
                    this.OnTmpoutQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RtnQty in the schema.
        /// </summary>
        [Column(Name = @"rtn_qty", Storage = "_RtnQty", DbType = "numeric")]
        [DataMember(Order=13)]
        public System.Nullable<decimal> RtnQty
        {
            get
            {
                return this._RtnQty;
            }
            set
            {
                if (this._RtnQty != value)
                {
                    this.OnRtnQtyChanging(value);
                    this.SendPropertyChanging();
                    this._RtnQty = value;
                    this.SendPropertyChanged("RtnQty");
                    this.OnRtnQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DestroyQty in the schema.
        /// </summary>
        [Column(Name = @"destroy_qty", Storage = "_DestroyQty", DbType = "numeric")]
        [DataMember(Order=14)]
        public System.Nullable<decimal> DestroyQty
        {
            get
            {
                return this._DestroyQty;
            }
            set
            {
                if (this._DestroyQty != value)
                {
                    this.OnDestroyQtyChanging(value);
                    this.SendPropertyChanging();
                    this._DestroyQty = value;
                    this.SendPropertyChanged("DestroyQty");
                    this.OnDestroyQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Bkpro in the schema.
        /// </summary>
        [Column(Name = @"bkpro", Storage = "_Bkpro", DbType = "numeric")]
        [DataMember(Order=15)]
        public System.Nullable<decimal> Bkpro
        {
            get
            {
                return this._Bkpro;
            }
            set
            {
                if (this._Bkpro != value)
                {
                    this.OnBkproChanging(value);
                    this.SendPropertyChanging();
                    this._Bkpro = value;
                    this.SendPropertyChanged("Bkpro");
                    this.OnBkproChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Realstock in the schema.
        /// </summary>
        [Column(Name = @"realstock", Storage = "_Realstock", DbType = "numeric")]
        [DataMember(Order=16)]
        public System.Nullable<decimal> Realstock
        {
            get
            {
                return this._Realstock;
            }
            set
            {
                if (this._Realstock != value)
                {
                    this.OnRealstockChanging(value);
                    this.SendPropertyChanging();
                    this._Realstock = value;
                    this.SendPropertyChanged("Realstock");
                    this.OnRealstockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TempPriKey in the schema.
        /// </summary>
        [Column(Name = @"temp_pri_key", Storage = "_TempPriKey", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [DataMember(Order=17)]
        public long TempPriKey
        {
            get
            {
                return this._TempPriKey;
            }
            set
            {
                if (this._TempPriKey != value)
                {
                    this.OnTempPriKeyChanging(value);
                    this.SendPropertyChanging();
                    this._TempPriKey = value;
                    this.SendPropertyChanged("TempPriKey");
                    this.OnTempPriKeyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempDeptstock in the schema.
    /// </summary>
    [Table(Name = @"temp_deptstock")]
    [DataContract()]
    public partial class TempDeptstock : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TypeId;

        private string _TypeName;

        private string _ProductMasterId;

        private string _ProductId;

        private string _ProductName;

        private string _ColorName;

        private string _SizeName;

        private int _Price;

        private string _DepartmentName;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(long value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnPriceChanging(int value);
        partial void OnPriceChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        #endregion

        public TempDeptstock()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=1)]
        public long TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"TYPE_NAME", Storage = "_TypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_NAME", Storage = "_ProductName", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"COLOR_NAME", Storage = "_ColorName", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"SIZE_NAME", Storage = "_SizeName", DbType = "nvarchar(500)")]
        [DataMember(Order=7)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", CanBeNull = false, DbType = "int NOT NULL")]
        [DataMember(Order=8)]
        public int Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"department_name", Storage = "_DepartmentName", DbType = "nvarchar(500)")]
        [DataMember(Order=9)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempDeptstockMaxTemp in the schema.
    /// </summary>
    [Table(Name = @"temp_deptstock_max_temp")]
    [DataContract()]
    public partial class TempDeptstockMaxTemp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductId;

        private System.Nullable<int> _GoodQty;

        private System.Nullable<int> _PerrorQty;

        private System.Nullable<long> _Predmg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnGoodQtyChanging(System.Nullable<int> value);
        partial void OnGoodQtyChanged();
        partial void OnPerrorQtyChanging(System.Nullable<int> value);
        partial void OnPerrorQtyChanged();
        partial void OnPredmgChanging(System.Nullable<long> value);
        partial void OnPredmgChanged();
        #endregion

        public TempDeptstockMaxTemp()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=1)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQty in the schema.
        /// </summary>
        [Column(Name = @"good_qty", Storage = "_GoodQty", DbType = "int")]
        [DataMember(Order=2)]
        public System.Nullable<int> GoodQty
        {
            get
            {
                return this._GoodQty;
            }
            set
            {
                if (this._GoodQty != value)
                {
                    this.OnGoodQtyChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQty = value;
                    this.SendPropertyChanged("GoodQty");
                    this.OnGoodQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PerrorQty in the schema.
        /// </summary>
        [Column(Name = @"perror_qty", Storage = "_PerrorQty", DbType = "int")]
        [DataMember(Order=3)]
        public System.Nullable<int> PerrorQty
        {
            get
            {
                return this._PerrorQty;
            }
            set
            {
                if (this._PerrorQty != value)
                {
                    this.OnPerrorQtyChanging(value);
                    this.SendPropertyChanging();
                    this._PerrorQty = value;
                    this.SendPropertyChanged("PerrorQty");
                    this.OnPerrorQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Predmg in the schema.
        /// </summary>
        [Column(Name = @"predmg", Storage = "_Predmg", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Predmg
        {
            get
            {
                return this._Predmg;
            }
            set
            {
                if (this._Predmg != value)
                {
                    this.OnPredmgChanging(value);
                    this.SendPropertyChanging();
                    this._Predmg = value;
                    this.SendPropertyChanged("Predmg");
                    this.OnPredmgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempDpStockout in the schema.
    /// </summary>
    [Table(Name = @"temp_dp_stockout")]
    [DataContract()]
    public partial class TempDpStockout : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _DepartmentId;

        private System.Nullable<long> _DefectStatusId;

        private string _ProductId;

        private System.Nullable<decimal> _Quantity;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(long value);
        partial void OnDepartmentIdChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<long> value);
        partial void OnDefectStatusIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(System.Nullable<decimal> value);
        partial void OnQuantityChanged();
        #endregion

        public TempDpStockout()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=1)]
        public long DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "bigint")]
        [DataMember(Order=2)]
        public System.Nullable<long> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", DbType = "numeric")]
        [DataMember(Order=4)]
        public System.Nullable<decimal> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempPr in the schema.
    /// </summary>
    [Table(Name = @"temp_pr")]
    [DataContract()]
    public partial class TempPr : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TypeId;

        private string _TypeName;

        private string _ProductMasterId;

        private string _ProductId;

        private string _ProductName;

        private string _ColorName;

        private string _SizeName;

        private int _Price;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(long value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnPriceChanging(int value);
        partial void OnPriceChanged();
        #endregion

        public TempPr()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=1)]
        public long TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"TYPE_NAME", Storage = "_TypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_NAME", Storage = "_ProductName", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"COLOR_NAME", Storage = "_ColorName", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"SIZE_NAME", Storage = "_SizeName", DbType = "nvarchar(500)")]
        [DataMember(Order=7)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", CanBeNull = false, DbType = "int NOT NULL")]
        [DataMember(Order=8)]
        public int Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempProduct in the schema.
    /// </summary>
    [Table(Name = @"temp_product")]
    [DataContract()]
    public partial class TempProduct : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TypeId;

        private string _TypeName;

        private string _ProductMasterId;

        private string _ProductId;

        private string _ProductName;

        private string _ColorName;

        private string _SizeName;

        private int _Price;

        private string _DepartmentName;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(long value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnPriceChanging(int value);
        partial void OnPriceChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        #endregion

        public TempProduct()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", CanBeNull = false, DbType = "bigint NOT NULL")]
        [DataMember(Order=1)]
        public long TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"TYPE_NAME", Storage = "_TypeName", DbType = "nvarchar(500)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "nvarchar(13) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "nvarchar(20) NOT NULL")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_NAME", Storage = "_ProductName", DbType = "nvarchar(500)")]
        [DataMember(Order=5)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"COLOR_NAME", Storage = "_ColorName", DbType = "nvarchar(500)")]
        [DataMember(Order=6)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"SIZE_NAME", Storage = "_SizeName", DbType = "nvarchar(500)")]
        [DataMember(Order=7)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", CanBeNull = false, DbType = "int NOT NULL")]
        [DataMember(Order=8)]
        public int Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"department_name", Storage = "_DepartmentName", DbType = "nvarchar(500)")]
        [DataMember(Order=9)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for TempStkHis in the schema.
    /// </summary>
    [Table(Name = @"temp_stk_his")]
    [DataContract()]
    public partial class TempStkHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductId;

        private System.Nullable<int> _GoodQty;

        private System.Nullable<int> _PerrorQty;

        private System.Nullable<long> _Predmg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnGoodQtyChanging(System.Nullable<int> value);
        partial void OnGoodQtyChanged();
        partial void OnPerrorQtyChanging(System.Nullable<int> value);
        partial void OnPerrorQtyChanged();
        partial void OnPredmgChanging(System.Nullable<long> value);
        partial void OnPredmgChanged();
        #endregion

        public TempStkHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "nvarchar(20)")]
        [DataMember(Order=1)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQty in the schema.
        /// </summary>
        [Column(Name = @"good_qty", Storage = "_GoodQty", DbType = "int")]
        [DataMember(Order=2)]
        public System.Nullable<int> GoodQty
        {
            get
            {
                return this._GoodQty;
            }
            set
            {
                if (this._GoodQty != value)
                {
                    this.OnGoodQtyChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQty = value;
                    this.SendPropertyChanged("GoodQty");
                    this.OnGoodQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PerrorQty in the schema.
        /// </summary>
        [Column(Name = @"perror_qty", Storage = "_PerrorQty", DbType = "int")]
        [DataMember(Order=3)]
        public System.Nullable<int> PerrorQty
        {
            get
            {
                return this._PerrorQty;
            }
            set
            {
                if (this._PerrorQty != value)
                {
                    this.OnPerrorQtyChanging(value);
                    this.SendPropertyChanging();
                    this._PerrorQty = value;
                    this.SendPropertyChanged("PerrorQty");
                    this.OnPerrorQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Predmg in the schema.
        /// </summary>
        [Column(Name = @"predmg", Storage = "_Predmg", DbType = "bigint")]
        [DataMember(Order=4)]
        public System.Nullable<long> Predmg
        {
            get
            {
                return this._Predmg;
            }
            set
            {
                if (this._Predmg != value)
                {
                    this.OnPredmgChanging(value);
                    this.SendPropertyChanging();
                    this._Predmg = value;
                    this.SendPropertyChanged("Predmg");
                    this.OnPredmgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }
}
