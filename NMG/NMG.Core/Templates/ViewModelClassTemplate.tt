<#@ template hostspecific="true" language="C#v3.5" #>
<#@ property name="ClassName" type="System.String" 
			 processor="PropertyProcessor" #>
<#@ property name="NamespaceName" type="System.String" 
             processor="PropertyProcessor" #>
			 
<#@ property name="FieldNames" type="System.Collections.ArrayList" 
             processor="PropertyProcessor" #>
<#@ property name="MethodNames" type="System.Collections.ArrayList" 
             processor="PropertyProcessor" #>

<#@ property name="DetailList" type="System.Collections.ArrayList" 
             processor="PropertyProcessor" #>
<#@ property name="ListNames" type="System.Collections.ArrayList" 
             processor="PropertyProcessor" #>			 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using AppFrame.Base;
using Caliburn.Core;
using Caliburn.Core.IoC;
using Caliburn.Core.Metadata;
using Caliburn.PresentationFramework.ApplicationModel;
using Caliburn.PresentationFramework.Screens;



namespace <#= NamespaceName #>
{
    [PerRequest(typeof(I<#= ClassName #>))]
    public class <#= ClassName #> : PosViewModel,I<#= ClassName #>  
    {

        private IShellViewModel _startViewModel;
        public <#= ClassName #>(IShellViewModel startViewModel)
        {
            _startViewModel = startViewModel; 
        }
		
		#region Fields
		<# 
			foreach(string fieldName in FieldNames)
			{
				char lower = char.ToLower(fieldName[0]);
            	string fieldLower = fieldName.Remove(0, 1);
            	fieldLower = lower + fieldLower;
            
		#>        
        private string _<#=fieldLower  #>;
        public string <#= fieldName #>
        {
            get
            {
                return _<#=fieldLower  #>;
            }
            set
            {
                _<#=fieldLower  #> = value;
                NotifyOfPropertyChange(() => <#= fieldName #>);
            }
        }
		<# 
			}
		#>
		#endregion
		
		#region List use to fetch object for view
		<# 
			foreach(string listName in ListNames)
			{
				char lower = char.ToLower(listName[0]);
            	string listLower = listName.Remove(0, 1);
            	listLower = lower + listLower;
            
		#>        
        private IList _<#=listLower  #>;
        public IList <#= listName #>
        {
            get
            {
                return _<#=listLower  #>;
            }
            set
            {
                _<#=listLower  #> = value;
                NotifyOfPropertyChange(() => <#= listName #>);
            }
        }
		<# 
			}
		#>
		#endregion
		
		#region List which just using in Data Grid
		<# 
			foreach(string detailName in DetailList)
			{
				char lower = char.ToLower(detailName[0]);
            	string detailLower = detailName.Remove(0, 1);
            	detailLower = lower + detailLower;
            
		#>        
        private IList _<#=detailLower  #>;
        public IList <#= detailName #>
        {
            get
            {
                return _<#=detailLower  #>;
            }
            set
            {
                _<#=detailLower  #> = value;
                NotifyOfPropertyChange(() => <#= detailName #>);
            }
        }
		<# 
			}
		#>
		#endregion
		
		#region Methods
		<# 
			foreach(string methodName in MethodNames)
			{			
            
		#>        
        public void <#= methodName #>()
        {
            
        }
		<# 
			}
		#>
		#endregion
		
        
        
    }
}