<#@ template language="C#" #>
<#@ property name="ClassName" type="System.String" 
			 processor="PropertyProcessor" #>
<#@ property name="NamespaceName" type="System.String" 
			 processor="PropertyProcessor" #>
<#@ property name="ModelNamespaceName" type="System.String" 
			 processor="PropertyProcessor" #>
<#@ property name="DaoNamespaceName" type="System.String" 
			 processor="PropertyProcessor" #>			 


using System.Collections;
using System.Collections.Generic;
using Spring.Transaction.Interceptor;
using System.Linq.Expressions;
using AppFrame.DataLayer;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.LambdaExtensions;
using NHibernate.Linq.Expressions;
using Spring.Data.NHibernate;
using  <#= ModelNamespaceName #>;
using  <#= DaoNamespaceName #>;

namespace <#= NamespaceName #>
{
	public class <#= ClassName #>Logic : I<#= ClassName #>Logic
	{
		private I<#= ClassName #>Dao _innerDao;
		public I<#= ClassName #>Dao <#= ClassName #>Dao
		{
			get 
			{ 
				return _innerDao; 
			}
			set 
			{ 
				_innerDao = value; 
			}
		}
		
		/// <summary>
		/// Find <#= ClassName #> object by id. Return null if nothing is found
		/// </summary>
		/// <param name="id">Id of <#= ClassName #></param>
		/// <returns></returns>
		public <#= ClassName #> FindById(object id)
		{
			return <#= ClassName #>Dao.FindById(id);
		}
		
		/// <summary>
		/// Add <#= ClassName #> to database.
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		[Transaction(ReadOnly=false)]
		public <#= ClassName #> Add(<#= ClassName #> data)
		{
			<#= ClassName #>Dao.Add(data);
			return data;
		}
		
		/// <summary>
		/// Update <#= ClassName #> to database.
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		[Transaction(ReadOnly=false)]
		public void Update(<#= ClassName #> data)
		{
			<#= ClassName #>Dao.Update(data);
		}
		
		/// <summary>
		/// Delete <#= ClassName #> from database.
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		[Transaction(ReadOnly=false)]
		public void Delete(<#= ClassName #> data)
		{
			<#= ClassName #>Dao.Delete(data);
		}
		
		/// <summary>
		/// Delete <#= ClassName #> from database.
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		[Transaction(ReadOnly=false)]
		public void DeleteById(object id)
		{
			<#= ClassName #>Dao.DeleteById(id);
		}
		
		/// <summary>
		/// Find all <#= ClassName #> from database. No pagination.
		/// </summary>
		/// <param name="criteria"></param>
		/// <returns></returns>
		public IList<<#= ClassName #>> FindAll(ObjectCriteria<<#= ClassName #>> criteria)
		{
			return <#= ClassName #>Dao.FindAll(criteria);
		}
		
		/// <summary>
		/// Find all <#= ClassName #> from database. Has pagination.
		/// </summary>
		/// <param name="criteria"></param>
		/// <returns></returns>
		public QueryResult FindPaging(ObjectCriteria<<#= ClassName #>> criteria)
		{
			return <#= ClassName #>Dao.FindPaging(criteria);
		}
	}
}