//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 5/7/2010 8:15:24 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace BonSoChinContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "4so9")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class BonSoChinDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertAdcategory(Adcategory instance);
        partial void UpdateAdcategory(Adcategory instance);
        partial void DeleteAdcategory(Adcategory instance);
        partial void InsertAds(Ads instance);
        partial void UpdateAds(Ads instance);
        partial void DeleteAds(Ads instance);
        partial void InsertArticlecategory(Articlecategory instance);
        partial void UpdateArticlecategory(Articlecategory instance);
        partial void DeleteArticlecategory(Articlecategory instance);
        partial void InsertArticlerate(Articlerate instance);
        partial void UpdateArticlerate(Articlerate instance);
        partial void DeleteArticlerate(Articlerate instance);
        partial void InsertArticle(Article instance);
        partial void UpdateArticle(Article instance);
        partial void DeleteArticle(Article instance);
        partial void InsertClubstatuse(Clubstatuse instance);
        partial void UpdateClubstatuse(Clubstatuse instance);
        partial void DeleteClubstatuse(Clubstatuse instance);
        partial void InsertConfig(Config instance);
        partial void UpdateConfig(Config instance);
        partial void DeleteConfig(Config instance);
        partial void InsertEmailbanned(Emailbanned instance);
        partial void UpdateEmailbanned(Emailbanned instance);
        partial void DeleteEmailbanned(Emailbanned instance);
        partial void InsertEmailcomponent(Emailcomponent instance);
        partial void UpdateEmailcomponent(Emailcomponent instance);
        partial void DeleteEmailcomponent(Emailcomponent instance);
        partial void InsertEmail(Email instance);
        partial void UpdateEmail(Email instance);
        partial void DeleteEmail(Email instance);
        partial void InsertEventregistration(Eventregistration instance);
        partial void UpdateEventregistration(Eventregistration instance);
        partial void DeleteEventregistration(Eventregistration instance);
        partial void InsertEvent(Event instance);
        partial void UpdateEvent(Event instance);
        partial void DeleteEvent(Event instance);
        partial void InsertForum(Forum instance);
        partial void UpdateForum(Forum instance);
        partial void DeleteForum(Forum instance);
        partial void InsertLinkcategory(Linkcategory instance);
        partial void UpdateLinkcategory(Linkcategory instance);
        partial void DeleteLinkcategory(Linkcategory instance);
        partial void InsertLink(Link instance);
        partial void UpdateLink(Link instance);
        partial void DeleteLink(Link instance);
        partial void InsertLookupcountry(Lookupcountry instance);
        partial void UpdateLookupcountry(Lookupcountry instance);
        partial void DeleteLookupcountry(Lookupcountry instance);
        partial void InsertLookupstate(Lookupstate instance);
        partial void UpdateLookupstate(Lookupstate instance);
        partial void DeleteLookupstate(Lookupstate instance);
        partial void InsertMember(Member instance);
        partial void UpdateMember(Member instance);
        partial void DeleteMember(Member instance);
        partial void InsertMessage(Message instance);
        partial void UpdateMessage(Message instance);
        partial void DeleteMessage(Message instance);
        partial void InsertMessagesvote(Messagesvote instance);
        partial void UpdateMessagesvote(Messagesvote instance);
        partial void DeleteMessagesvote(Messagesvote instance);
        partial void InsertNew(New instance);
        partial void UpdateNew(New instance);
        partial void DeleteNew(New instance);
        partial void InsertNewslettersubscription(Newslettersubscription instance);
        partial void UpdateNewslettersubscription(Newslettersubscription instance);
        partial void DeleteNewslettersubscription(Newslettersubscription instance);
        partial void InsertNewsletter(Newsletter instance);
        partial void UpdateNewsletter(Newsletter instance);
        partial void DeleteNewsletter(Newsletter instance);
        partial void InsertPollanswer(Pollanswer instance);
        partial void UpdatePollanswer(Pollanswer instance);
        partial void DeletePollanswer(Pollanswer instance);
        partial void InsertPollvote(Pollvote instance);
        partial void UpdatePollvote(Pollvote instance);
        partial void DeletePollvote(Pollvote instance);
        partial void InsertPoll(Poll instance);
        partial void UpdatePoll(Poll instance);
        partial void DeletePoll(Poll instance);
        partial void InsertRating(Rating instance);
        partial void UpdateRating(Rating instance);
        partial void DeleteRating(Rating instance);
        partial void InsertStatday(Statday instance);
        partial void UpdateStatday(Statday instance);
        partial void DeleteStatday(Statday instance);
        partial void InsertStatvisit(Statvisit instance);
        partial void UpdateStatvisit(Statvisit instance);
        partial void DeleteStatvisit(Statvisit instance);
        partial void InsertTgwhosonline(Tgwhosonline instance);
        partial void UpdateTgwhosonline(Tgwhosonline instance);
        partial void DeleteTgwhosonline(Tgwhosonline instance);
        #endregion

        public BonSoChinDataContext() :
        base(@"User Id=root;Password=admin;Host=localhost;Database=4so9;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public BonSoChinDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonSoChinDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonSoChinDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonSoChinDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Adcategory> Adcategories
        {
            get
            {
                return this.GetTable<Adcategory>();
            }
        }

        public Devart.Data.Linq.Table<Ads> Ads
        {
            get
            {
                return this.GetTable<Ads>();
            }
        }

        public Devart.Data.Linq.Table<Articlecategory> Articlecategories
        {
            get
            {
                return this.GetTable<Articlecategory>();
            }
        }

        public Devart.Data.Linq.Table<Articlerate> Articlerates
        {
            get
            {
                return this.GetTable<Articlerate>();
            }
        }

        public Devart.Data.Linq.Table<Article> Articles
        {
            get
            {
                return this.GetTable<Article>();
            }
        }

        public Devart.Data.Linq.Table<Clubstatuse> Clubstatuses
        {
            get
            {
                return this.GetTable<Clubstatuse>();
            }
        }

        public Devart.Data.Linq.Table<Config> Configs
        {
            get
            {
                return this.GetTable<Config>();
            }
        }

        public Devart.Data.Linq.Table<Emailbanned> Emailbanneds
        {
            get
            {
                return this.GetTable<Emailbanned>();
            }
        }

        public Devart.Data.Linq.Table<Emailcomponent> Emailcomponents
        {
            get
            {
                return this.GetTable<Emailcomponent>();
            }
        }

        public Devart.Data.Linq.Table<Email> Emails
        {
            get
            {
                return this.GetTable<Email>();
            }
        }

        public Devart.Data.Linq.Table<Eventregistration> Eventregistrations
        {
            get
            {
                return this.GetTable<Eventregistration>();
            }
        }

        public Devart.Data.Linq.Table<Event> Events
        {
            get
            {
                return this.GetTable<Event>();
            }
        }

        public Devart.Data.Linq.Table<Forum> Forums
        {
            get
            {
                return this.GetTable<Forum>();
            }
        }

        public Devart.Data.Linq.Table<Linkcategory> Linkcategories
        {
            get
            {
                return this.GetTable<Linkcategory>();
            }
        }

        public Devart.Data.Linq.Table<Link> Links
        {
            get
            {
                return this.GetTable<Link>();
            }
        }

        public Devart.Data.Linq.Table<Lookupcountry> Lookupcountries
        {
            get
            {
                return this.GetTable<Lookupcountry>();
            }
        }

        public Devart.Data.Linq.Table<Lookupstate> Lookupstates
        {
            get
            {
                return this.GetTable<Lookupstate>();
            }
        }

        public Devart.Data.Linq.Table<Member> Members
        {
            get
            {
                return this.GetTable<Member>();
            }
        }

        public Devart.Data.Linq.Table<Message> Messages
        {
            get
            {
                return this.GetTable<Message>();
            }
        }

        public Devart.Data.Linq.Table<Messagesvote> Messagesvotes
        {
            get
            {
                return this.GetTable<Messagesvote>();
            }
        }

        public Devart.Data.Linq.Table<New> News
        {
            get
            {
                return this.GetTable<New>();
            }
        }

        public Devart.Data.Linq.Table<Newslettersubscription> Newslettersubscriptions
        {
            get
            {
                return this.GetTable<Newslettersubscription>();
            }
        }

        public Devart.Data.Linq.Table<Newsletter> Newsletters
        {
            get
            {
                return this.GetTable<Newsletter>();
            }
        }

        public Devart.Data.Linq.Table<Pollanswer> Pollanswers
        {
            get
            {
                return this.GetTable<Pollanswer>();
            }
        }

        public Devart.Data.Linq.Table<Pollvote> Pollvotes
        {
            get
            {
                return this.GetTable<Pollvote>();
            }
        }

        public Devart.Data.Linq.Table<Poll> Polls
        {
            get
            {
                return this.GetTable<Poll>();
            }
        }

        public Devart.Data.Linq.Table<Rating> Ratings
        {
            get
            {
                return this.GetTable<Rating>();
            }
        }

        public Devart.Data.Linq.Table<Statday> Statdays
        {
            get
            {
                return this.GetTable<Statday>();
            }
        }

        public Devart.Data.Linq.Table<Statvisit> Statvisits
        {
            get
            {
                return this.GetTable<Statvisit>();
            }
        }

        public Devart.Data.Linq.Table<Tgwhosonline> Tgwhosonlines
        {
            get
            {
                return this.GetTable<Tgwhosonline>();
            }
        }
    }

    [Table(Name = @"`4so9`.ad_categories")]
    public partial class Adcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Adcategoryid;

        private string _Adcategory1;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdcategoryidChanging(int value);
        partial void OnAdcategoryidChanged();
        partial void OnAdcategory1Changing(string value);
        partial void OnAdcategory1Changed();
        #endregion

        public Adcategory()
        {
            OnCreated();
        }

        [Column(Name = @"ad_category_id", Storage = "_Adcategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Adcategoryid
        {
            get
            {
                return this._Adcategoryid;
            }
            set
            {
                if (this._Adcategoryid != value)
                {
                    this.OnAdcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Adcategoryid = value;
                    this.SendPropertyChanged("Adcategoryid");
                    this.OnAdcategoryidChanged();
                }
            }
        }

        [Column(Name = @"ad_category", Storage = "_Adcategory1", DbType = "char(50)")]
        public string Adcategory1
        {
            get
            {
                return this._Adcategory1;
            }
            set
            {
                if (this._Adcategory1 != value)
                {
                    this.OnAdcategory1Changing(value);
                    this.SendPropertyChanging();
                    this._Adcategory1 = value;
                    this.SendPropertyChanged("Adcategory1");
                    this.OnAdcategory1Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.ads")]
    public partial class Ads : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Adid;

        private System.Nullable<int> _Adcategoryid;

        private string _Adtitle;

        private string _Adtext;

        private string _Adlocation;

        private string _Adcontact;

        private System.Nullable<int> _Adprice;

        private System.Nullable<int> _Adaddedby;

        private System.Nullable<System.DateTime> _Addateposted;

        private System.Nullable<System.DateTime> _Addateexpires;

        private System.Nullable<byte> _Adactive;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdidChanging(int value);
        partial void OnAdidChanged();
        partial void OnAdcategoryidChanging(System.Nullable<int> value);
        partial void OnAdcategoryidChanged();
        partial void OnAdtitleChanging(string value);
        partial void OnAdtitleChanged();
        partial void OnAdtextChanging(string value);
        partial void OnAdtextChanged();
        partial void OnAdlocationChanging(string value);
        partial void OnAdlocationChanged();
        partial void OnAdcontactChanging(string value);
        partial void OnAdcontactChanged();
        partial void OnAdpriceChanging(System.Nullable<int> value);
        partial void OnAdpriceChanged();
        partial void OnAdaddedbyChanging(System.Nullable<int> value);
        partial void OnAdaddedbyChanged();
        partial void OnAddatepostedChanging(System.Nullable<System.DateTime> value);
        partial void OnAddatepostedChanged();
        partial void OnAddateexpiresChanging(System.Nullable<System.DateTime> value);
        partial void OnAddateexpiresChanged();
        partial void OnAdactiveChanging(System.Nullable<byte> value);
        partial void OnAdactiveChanged();
        #endregion

        public Ads()
        {
            OnCreated();
        }

        [Column(Name = @"ad_id", Storage = "_Adid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Adid
        {
            get
            {
                return this._Adid;
            }
            set
            {
                if (this._Adid != value)
                {
                    this.OnAdidChanging(value);
                    this.SendPropertyChanging();
                    this._Adid = value;
                    this.SendPropertyChanged("Adid");
                    this.OnAdidChanged();
                }
            }
        }

        [Column(Name = @"ad_category_id", Storage = "_Adcategoryid", DbType = "int(11)")]
        public System.Nullable<int> Adcategoryid
        {
            get
            {
                return this._Adcategoryid;
            }
            set
            {
                if (this._Adcategoryid != value)
                {
                    this.OnAdcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Adcategoryid = value;
                    this.SendPropertyChanged("Adcategoryid");
                    this.OnAdcategoryidChanged();
                }
            }
        }

        [Column(Name = @"ad_title", Storage = "_Adtitle", DbType = "varchar(150)")]
        public string Adtitle
        {
            get
            {
                return this._Adtitle;
            }
            set
            {
                if (this._Adtitle != value)
                {
                    this.OnAdtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Adtitle = value;
                    this.SendPropertyChanged("Adtitle");
                    this.OnAdtitleChanged();
                }
            }
        }

        [Column(Name = @"ad_text", Storage = "_Adtext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Adtext
        {
            get
            {
                return this._Adtext;
            }
            set
            {
                if (this._Adtext != value)
                {
                    this.OnAdtextChanging(value);
                    this.SendPropertyChanging();
                    this._Adtext = value;
                    this.SendPropertyChanged("Adtext");
                    this.OnAdtextChanged();
                }
            }
        }

        [Column(Name = @"ad_location", Storage = "_Adlocation", DbType = "varchar(80)")]
        public string Adlocation
        {
            get
            {
                return this._Adlocation;
            }
            set
            {
                if (this._Adlocation != value)
                {
                    this.OnAdlocationChanging(value);
                    this.SendPropertyChanging();
                    this._Adlocation = value;
                    this.SendPropertyChanged("Adlocation");
                    this.OnAdlocationChanged();
                }
            }
        }

        [Column(Name = @"ad_contact", Storage = "_Adcontact", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Adcontact
        {
            get
            {
                return this._Adcontact;
            }
            set
            {
                if (this._Adcontact != value)
                {
                    this.OnAdcontactChanging(value);
                    this.SendPropertyChanging();
                    this._Adcontact = value;
                    this.SendPropertyChanged("Adcontact");
                    this.OnAdcontactChanged();
                }
            }
        }

        [Column(Name = @"ad_price", Storage = "_Adprice", DbType = "int(11)")]
        public System.Nullable<int> Adprice
        {
            get
            {
                return this._Adprice;
            }
            set
            {
                if (this._Adprice != value)
                {
                    this.OnAdpriceChanging(value);
                    this.SendPropertyChanging();
                    this._Adprice = value;
                    this.SendPropertyChanged("Adprice");
                    this.OnAdpriceChanged();
                }
            }
        }

        [Column(Name = @"ad_added_by", Storage = "_Adaddedby", DbType = "int(11)")]
        public System.Nullable<int> Adaddedby
        {
            get
            {
                return this._Adaddedby;
            }
            set
            {
                if (this._Adaddedby != value)
                {
                    this.OnAdaddedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Adaddedby = value;
                    this.SendPropertyChanged("Adaddedby");
                    this.OnAdaddedbyChanged();
                }
            }
        }

        [Column(Name = @"ad_date_posted", Storage = "_Addateposted", DbType = "datetime")]
        public System.Nullable<System.DateTime> Addateposted
        {
            get
            {
                return this._Addateposted;
            }
            set
            {
                if (this._Addateposted != value)
                {
                    this.OnAddatepostedChanging(value);
                    this.SendPropertyChanging();
                    this._Addateposted = value;
                    this.SendPropertyChanged("Addateposted");
                    this.OnAddatepostedChanged();
                }
            }
        }

        [Column(Name = @"ad_date_expires", Storage = "_Addateexpires", DbType = "datetime")]
        public System.Nullable<System.DateTime> Addateexpires
        {
            get
            {
                return this._Addateexpires;
            }
            set
            {
                if (this._Addateexpires != value)
                {
                    this.OnAddateexpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Addateexpires = value;
                    this.SendPropertyChanged("Addateexpires");
                    this.OnAddateexpiresChanged();
                }
            }
        }

        [Column(Name = @"ad_active", Storage = "_Adactive", DbType = "tinyint(3)")]
        public System.Nullable<byte> Adactive
        {
            get
            {
                return this._Adactive;
            }
            set
            {
                if (this._Adactive != value)
                {
                    this.OnAdactiveChanging(value);
                    this.SendPropertyChanging();
                    this._Adactive = value;
                    this.SendPropertyChanged("Adactive");
                    this.OnAdactiveChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.article_categories")]
    public partial class Articlecategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Articlecategoryid;

        private string _Articlecategory1;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnArticlecategoryidChanging(int value);
        partial void OnArticlecategoryidChanged();
        partial void OnArticlecategory1Changing(string value);
        partial void OnArticlecategory1Changed();
        #endregion

        public Articlecategory()
        {
            OnCreated();
        }

        [Column(Name = @"article_category_id", Storage = "_Articlecategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Articlecategoryid
        {
            get
            {
                return this._Articlecategoryid;
            }
            set
            {
                if (this._Articlecategoryid != value)
                {
                    this.OnArticlecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Articlecategoryid = value;
                    this.SendPropertyChanged("Articlecategoryid");
                    this.OnArticlecategoryidChanged();
                }
            }
        }

        [Column(Name = @"article_category", Storage = "_Articlecategory1", DbType = "char(50)")]
        public string Articlecategory1
        {
            get
            {
                return this._Articlecategory1;
            }
            set
            {
                if (this._Articlecategory1 != value)
                {
                    this.OnArticlecategory1Changing(value);
                    this.SendPropertyChanging();
                    this._Articlecategory1 = value;
                    this.SendPropertyChanged("Articlecategory1");
                    this.OnArticlecategory1Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.article_rate")]
    public partial class Articlerate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Tutid;

        private int _Tutrating;

        private System.Nullable<int> _Tutnumvotes;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTutidChanging(string value);
        partial void OnTutidChanged();
        partial void OnTutratingChanging(int value);
        partial void OnTutratingChanged();
        partial void OnTutnumvotesChanging(System.Nullable<int> value);
        partial void OnTutnumvotesChanged();
        #endregion

        public Articlerate()
        {
            OnCreated();
        }

        [Column(Name = @"tut_id", Storage = "_Tutid", CanBeNull = false, DbType = "varchar(128) NOT NULL", IsPrimaryKey = true)]
        public string Tutid
        {
            get
            {
                return this._Tutid;
            }
            set
            {
                if (this._Tutid != value)
                {
                    this.OnTutidChanging(value);
                    this.SendPropertyChanging();
                    this._Tutid = value;
                    this.SendPropertyChanged("Tutid");
                    this.OnTutidChanged();
                }
            }
        }

        [Column(Name = @"tut_rating", Storage = "_Tutrating", CanBeNull = false, DbType = "int(11) NOT NULL", IsPrimaryKey = true)]
        public int Tutrating
        {
            get
            {
                return this._Tutrating;
            }
            set
            {
                if (this._Tutrating != value)
                {
                    this.OnTutratingChanging(value);
                    this.SendPropertyChanging();
                    this._Tutrating = value;
                    this.SendPropertyChanged("Tutrating");
                    this.OnTutratingChanged();
                }
            }
        }

        [Column(Name = @"tut_num_votes", Storage = "_Tutnumvotes", DbType = "int(11)")]
        public System.Nullable<int> Tutnumvotes
        {
            get
            {
                return this._Tutnumvotes;
            }
            set
            {
                if (this._Tutnumvotes != value)
                {
                    this.OnTutnumvotesChanging(value);
                    this.SendPropertyChanging();
                    this._Tutnumvotes = value;
                    this.SendPropertyChanged("Tutnumvotes");
                    this.OnTutnumvotesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.articles")]
    public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Articleid;

        private System.Nullable<int> _Articlecategoryid;

        private string _Articletitle;

        private string _Articledesc;

        private string _Articlecontent;

        private string _Articlelinkto;

        private System.Nullable<System.DateTime> _Articledateposted;

        private System.Nullable<int> _Articlepostedby;

        private System.Nullable<int> _Articleorder;

        private System.Nullable<byte> _Articleisactive;

        private System.Nullable<byte> _Onmainpage;

        private System.Nullable<byte> _Onsurvey;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnArticleidChanging(int value);
        partial void OnArticleidChanged();
        partial void OnArticlecategoryidChanging(System.Nullable<int> value);
        partial void OnArticlecategoryidChanged();
        partial void OnArticletitleChanging(string value);
        partial void OnArticletitleChanged();
        partial void OnArticledescChanging(string value);
        partial void OnArticledescChanged();
        partial void OnArticlecontentChanging(string value);
        partial void OnArticlecontentChanged();
        partial void OnArticlelinktoChanging(string value);
        partial void OnArticlelinktoChanged();
        partial void OnArticledatepostedChanging(System.Nullable<System.DateTime> value);
        partial void OnArticledatepostedChanged();
        partial void OnArticlepostedbyChanging(System.Nullable<int> value);
        partial void OnArticlepostedbyChanged();
        partial void OnArticleorderChanging(System.Nullable<int> value);
        partial void OnArticleorderChanged();
        partial void OnArticleisactiveChanging(System.Nullable<byte> value);
        partial void OnArticleisactiveChanged();
        partial void OnOnmainpageChanging(System.Nullable<byte> value);
        partial void OnOnmainpageChanged();
        partial void OnOnsurveyChanging(System.Nullable<byte> value);
        partial void OnOnsurveyChanged();
        #endregion

        public Article()
        {
            OnCreated();
        }

        [Column(Name = @"article_id", Storage = "_Articleid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Articleid
        {
            get
            {
                return this._Articleid;
            }
            set
            {
                if (this._Articleid != value)
                {
                    this.OnArticleidChanging(value);
                    this.SendPropertyChanging();
                    this._Articleid = value;
                    this.SendPropertyChanged("Articleid");
                    this.OnArticleidChanged();
                }
            }
        }

        [Column(Name = @"article_category_id", Storage = "_Articlecategoryid", DbType = "int(11)")]
        public System.Nullable<int> Articlecategoryid
        {
            get
            {
                return this._Articlecategoryid;
            }
            set
            {
                if (this._Articlecategoryid != value)
                {
                    this.OnArticlecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Articlecategoryid = value;
                    this.SendPropertyChanged("Articlecategoryid");
                    this.OnArticlecategoryidChanged();
                }
            }
        }

        [Column(Name = @"article_title", Storage = "_Articletitle", DbType = "varchar(255)")]
        public string Articletitle
        {
            get
            {
                return this._Articletitle;
            }
            set
            {
                if (this._Articletitle != value)
                {
                    this.OnArticletitleChanging(value);
                    this.SendPropertyChanging();
                    this._Articletitle = value;
                    this.SendPropertyChanged("Articletitle");
                    this.OnArticletitleChanged();
                }
            }
        }

        [Column(Name = @"article_desc", Storage = "_Articledesc", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Articledesc
        {
            get
            {
                return this._Articledesc;
            }
            set
            {
                if (this._Articledesc != value)
                {
                    this.OnArticledescChanging(value);
                    this.SendPropertyChanging();
                    this._Articledesc = value;
                    this.SendPropertyChanged("Articledesc");
                    this.OnArticledescChanged();
                }
            }
        }

        [Column(Name = @"article_content", Storage = "_Articlecontent", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Articlecontent
        {
            get
            {
                return this._Articlecontent;
            }
            set
            {
                if (this._Articlecontent != value)
                {
                    this.OnArticlecontentChanging(value);
                    this.SendPropertyChanging();
                    this._Articlecontent = value;
                    this.SendPropertyChanged("Articlecontent");
                    this.OnArticlecontentChanged();
                }
            }
        }

        [Column(Name = @"article_linkto", Storage = "_Articlelinkto", DbType = "varchar(150)")]
        public string Articlelinkto
        {
            get
            {
                return this._Articlelinkto;
            }
            set
            {
                if (this._Articlelinkto != value)
                {
                    this.OnArticlelinktoChanging(value);
                    this.SendPropertyChanging();
                    this._Articlelinkto = value;
                    this.SendPropertyChanged("Articlelinkto");
                    this.OnArticlelinktoChanged();
                }
            }
        }

        [Column(Name = @"article_date_posted", Storage = "_Articledateposted", DbType = "datetime")]
        public System.Nullable<System.DateTime> Articledateposted
        {
            get
            {
                return this._Articledateposted;
            }
            set
            {
                if (this._Articledateposted != value)
                {
                    this.OnArticledatepostedChanging(value);
                    this.SendPropertyChanging();
                    this._Articledateposted = value;
                    this.SendPropertyChanged("Articledateposted");
                    this.OnArticledatepostedChanged();
                }
            }
        }

        [Column(Name = @"article_posted_by", Storage = "_Articlepostedby", DbType = "int(11)")]
        public System.Nullable<int> Articlepostedby
        {
            get
            {
                return this._Articlepostedby;
            }
            set
            {
                if (this._Articlepostedby != value)
                {
                    this.OnArticlepostedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Articlepostedby = value;
                    this.SendPropertyChanged("Articlepostedby");
                    this.OnArticlepostedbyChanged();
                }
            }
        }

        [Column(Name = @"article_order", Storage = "_Articleorder", DbType = "int(11)")]
        public System.Nullable<int> Articleorder
        {
            get
            {
                return this._Articleorder;
            }
            set
            {
                if (this._Articleorder != value)
                {
                    this.OnArticleorderChanging(value);
                    this.SendPropertyChanging();
                    this._Articleorder = value;
                    this.SendPropertyChanged("Articleorder");
                    this.OnArticleorderChanged();
                }
            }
        }

        [Column(Name = @"article_is_active", Storage = "_Articleisactive", DbType = "tinyint(3)")]
        public System.Nullable<byte> Articleisactive
        {
            get
            {
                return this._Articleisactive;
            }
            set
            {
                if (this._Articleisactive != value)
                {
                    this.OnArticleisactiveChanging(value);
                    this.SendPropertyChanging();
                    this._Articleisactive = value;
                    this.SendPropertyChanged("Articleisactive");
                    this.OnArticleisactiveChanged();
                }
            }
        }

        [Column(Name = @"on_main_page", Storage = "_Onmainpage", DbType = "tinyint(3)")]
        public System.Nullable<byte> Onmainpage
        {
            get
            {
                return this._Onmainpage;
            }
            set
            {
                if (this._Onmainpage != value)
                {
                    this.OnOnmainpageChanging(value);
                    this.SendPropertyChanging();
                    this._Onmainpage = value;
                    this.SendPropertyChanged("Onmainpage");
                    this.OnOnmainpageChanged();
                }
            }
        }

        [Column(Name = @"on_survey", Storage = "_Onsurvey", DbType = "tinyint(3)")]
        public System.Nullable<byte> Onsurvey
        {
            get
            {
                return this._Onsurvey;
            }
            set
            {
                if (this._Onsurvey != value)
                {
                    this.OnOnsurveyChanging(value);
                    this.SendPropertyChanging();
                    this._Onsurvey = value;
                    this.SendPropertyChanged("Onsurvey");
                    this.OnOnsurveyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.club_statuses")]
    public partial class Clubstatuse : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Clubstatusid;

        private string _Clubstatusname;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnClubstatusidChanging(int value);
        partial void OnClubstatusidChanged();
        partial void OnClubstatusnameChanging(string value);
        partial void OnClubstatusnameChanged();
        #endregion

        public Clubstatuse()
        {
            OnCreated();
        }

        [Column(Name = @"club_status_id", Storage = "_Clubstatusid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Clubstatusid
        {
            get
            {
                return this._Clubstatusid;
            }
            set
            {
                if (this._Clubstatusid != value)
                {
                    this.OnClubstatusidChanging(value);
                    this.SendPropertyChanging();
                    this._Clubstatusid = value;
                    this.SendPropertyChanged("Clubstatusid");
                    this.OnClubstatusidChanged();
                }
            }
        }

        [Column(Name = @"club_status_name", Storage = "_Clubstatusname", DbType = "char(25)")]
        public string Clubstatusname
        {
            get
            {
                return this._Clubstatusname;
            }
            set
            {
                if (this._Clubstatusname != value)
                {
                    this.OnClubstatusnameChanging(value);
                    this.SendPropertyChanging();
                    this._Clubstatusname = value;
                    this.SendPropertyChanged("Clubstatusname");
                    this.OnClubstatusnameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.config")]
    public partial class Config : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Configid;

        private string _Configvariable;

        private string _Configvalue;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnConfigidChanging(int value);
        partial void OnConfigidChanged();
        partial void OnConfigvariableChanging(string value);
        partial void OnConfigvariableChanged();
        partial void OnConfigvalueChanging(string value);
        partial void OnConfigvalueChanged();
        #endregion

        public Config()
        {
            OnCreated();
        }

        [Column(Name = @"config_id", Storage = "_Configid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Configid
        {
            get
            {
                return this._Configid;
            }
            set
            {
                if (this._Configid != value)
                {
                    this.OnConfigidChanging(value);
                    this.SendPropertyChanging();
                    this._Configid = value;
                    this.SendPropertyChanged("Configid");
                    this.OnConfigidChanged();
                }
            }
        }

        [Column(Name = @"config_variable", Storage = "_Configvariable", DbType = "char(100)")]
        public string Configvariable
        {
            get
            {
                return this._Configvariable;
            }
            set
            {
                if (this._Configvariable != value)
                {
                    this.OnConfigvariableChanging(value);
                    this.SendPropertyChanging();
                    this._Configvariable = value;
                    this.SendPropertyChanged("Configvariable");
                    this.OnConfigvariableChanged();
                }
            }
        }

        [Column(Name = @"config_value", Storage = "_Configvalue", DbType = "char(255)")]
        public string Configvalue
        {
            get
            {
                return this._Configvalue;
            }
            set
            {
                if (this._Configvalue != value)
                {
                    this.OnConfigvalueChanging(value);
                    this.SendPropertyChanging();
                    this._Configvalue = value;
                    this.SendPropertyChanged("Configvalue");
                    this.OnConfigvalueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.email_banned")]
    public partial class Emailbanned : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Email;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        #endregion

        public Emailbanned()
        {
            OnCreated();
        }

        [Column(Name = @"email", Storage = "_Email", DbType = "varchar(128)")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.email_components")]
    public partial class Emailcomponent : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Componentid;

        private string _Componentname;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnComponentidChanging(int value);
        partial void OnComponentidChanged();
        partial void OnComponentnameChanging(string value);
        partial void OnComponentnameChanged();
        #endregion

        public Emailcomponent()
        {
            OnCreated();
        }

        [Column(Name = @"component_id", Storage = "_Componentid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Componentid
        {
            get
            {
                return this._Componentid;
            }
            set
            {
                if (this._Componentid != value)
                {
                    this.OnComponentidChanging(value);
                    this.SendPropertyChanging();
                    this._Componentid = value;
                    this.SendPropertyChanged("Componentid");
                    this.OnComponentidChanged();
                }
            }
        }

        [Column(Name = @"component_name", Storage = "_Componentname", DbType = "char(50)")]
        public string Componentname
        {
            get
            {
                return this._Componentname;
            }
            set
            {
                if (this._Componentname != value)
                {
                    this.OnComponentnameChanging(value);
                    this.SendPropertyChanging();
                    this._Componentname = value;
                    this.SendPropertyChanged("Componentname");
                    this.OnComponentnameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.emails")]
    public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Emailid;

        private string _Emailfrom;

        private string _Emailsubject;

        private string _Emailbody;

        private System.Nullable<int> _Clubstatusid;

        private System.Nullable<System.DateTime> _Emaildatesent;

        private System.Nullable<int> _Emailsentby;

        private System.Nullable<int> _Newsletterid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmailidChanging(int value);
        partial void OnEmailidChanged();
        partial void OnEmailfromChanging(string value);
        partial void OnEmailfromChanged();
        partial void OnEmailsubjectChanging(string value);
        partial void OnEmailsubjectChanged();
        partial void OnEmailbodyChanging(string value);
        partial void OnEmailbodyChanged();
        partial void OnClubstatusidChanging(System.Nullable<int> value);
        partial void OnClubstatusidChanged();
        partial void OnEmaildatesentChanging(System.Nullable<System.DateTime> value);
        partial void OnEmaildatesentChanged();
        partial void OnEmailsentbyChanging(System.Nullable<int> value);
        partial void OnEmailsentbyChanged();
        partial void OnNewsletteridChanging(System.Nullable<int> value);
        partial void OnNewsletteridChanged();
        #endregion

        public Email()
        {
            OnCreated();
        }

        [Column(Name = @"email_id", Storage = "_Emailid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Emailid
        {
            get
            {
                return this._Emailid;
            }
            set
            {
                if (this._Emailid != value)
                {
                    this.OnEmailidChanging(value);
                    this.SendPropertyChanging();
                    this._Emailid = value;
                    this.SendPropertyChanged("Emailid");
                    this.OnEmailidChanged();
                }
            }
        }

        [Column(Name = @"email_from", Storage = "_Emailfrom", DbType = "varchar(50)")]
        public string Emailfrom
        {
            get
            {
                return this._Emailfrom;
            }
            set
            {
                if (this._Emailfrom != value)
                {
                    this.OnEmailfromChanging(value);
                    this.SendPropertyChanging();
                    this._Emailfrom = value;
                    this.SendPropertyChanged("Emailfrom");
                    this.OnEmailfromChanged();
                }
            }
        }

        [Column(Name = @"email_subject", Storage = "_Emailsubject", DbType = "varchar(100)")]
        public string Emailsubject
        {
            get
            {
                return this._Emailsubject;
            }
            set
            {
                if (this._Emailsubject != value)
                {
                    this.OnEmailsubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Emailsubject = value;
                    this.SendPropertyChanged("Emailsubject");
                    this.OnEmailsubjectChanged();
                }
            }
        }

        [Column(Name = @"email_body", Storage = "_Emailbody", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Emailbody
        {
            get
            {
                return this._Emailbody;
            }
            set
            {
                if (this._Emailbody != value)
                {
                    this.OnEmailbodyChanging(value);
                    this.SendPropertyChanging();
                    this._Emailbody = value;
                    this.SendPropertyChanged("Emailbody");
                    this.OnEmailbodyChanged();
                }
            }
        }

        [Column(Name = @"club_status_id", Storage = "_Clubstatusid", DbType = "int(11)")]
        public System.Nullable<int> Clubstatusid
        {
            get
            {
                return this._Clubstatusid;
            }
            set
            {
                if (this._Clubstatusid != value)
                {
                    this.OnClubstatusidChanging(value);
                    this.SendPropertyChanging();
                    this._Clubstatusid = value;
                    this.SendPropertyChanged("Clubstatusid");
                    this.OnClubstatusidChanged();
                }
            }
        }

        [Column(Name = @"email_date_sent", Storage = "_Emaildatesent", DbType = "datetime")]
        public System.Nullable<System.DateTime> Emaildatesent
        {
            get
            {
                return this._Emaildatesent;
            }
            set
            {
                if (this._Emaildatesent != value)
                {
                    this.OnEmaildatesentChanging(value);
                    this.SendPropertyChanging();
                    this._Emaildatesent = value;
                    this.SendPropertyChanged("Emaildatesent");
                    this.OnEmaildatesentChanged();
                }
            }
        }

        [Column(Name = @"email_sent_by", Storage = "_Emailsentby", DbType = "int(11)")]
        public System.Nullable<int> Emailsentby
        {
            get
            {
                return this._Emailsentby;
            }
            set
            {
                if (this._Emailsentby != value)
                {
                    this.OnEmailsentbyChanging(value);
                    this.SendPropertyChanging();
                    this._Emailsentby = value;
                    this.SendPropertyChanged("Emailsentby");
                    this.OnEmailsentbyChanged();
                }
            }
        }

        [Column(Name = @"newsletter_id", Storage = "_Newsletterid", DbType = "int(11)")]
        public System.Nullable<int> Newsletterid
        {
            get
            {
                return this._Newsletterid;
            }
            set
            {
                if (this._Newsletterid != value)
                {
                    this.OnNewsletteridChanging(value);
                    this.SendPropertyChanging();
                    this._Newsletterid = value;
                    this.SendPropertyChanged("Newsletterid");
                    this.OnNewsletteridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.event_registrations")]
    public partial class Eventregistration : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Regid;

        private System.Nullable<int> _Eventid;

        private System.Nullable<int> _Memberid;

        private string _Regfirstname;

        private string _Reglastname;

        private string _Regcomments;

        private string _Regphone;

        private string _Regemail;

        private System.Nullable<short> _Regcount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRegidChanging(int value);
        partial void OnRegidChanged();
        partial void OnEventidChanging(System.Nullable<int> value);
        partial void OnEventidChanged();
        partial void OnMemberidChanging(System.Nullable<int> value);
        partial void OnMemberidChanged();
        partial void OnRegfirstnameChanging(string value);
        partial void OnRegfirstnameChanged();
        partial void OnReglastnameChanging(string value);
        partial void OnReglastnameChanged();
        partial void OnRegcommentsChanging(string value);
        partial void OnRegcommentsChanged();
        partial void OnRegphoneChanging(string value);
        partial void OnRegphoneChanged();
        partial void OnRegemailChanging(string value);
        partial void OnRegemailChanged();
        partial void OnRegcountChanging(System.Nullable<short> value);
        partial void OnRegcountChanged();
        #endregion

        public Eventregistration()
        {
            OnCreated();
        }

        [Column(Name = @"reg_id", Storage = "_Regid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Regid
        {
            get
            {
                return this._Regid;
            }
            set
            {
                if (this._Regid != value)
                {
                    this.OnRegidChanging(value);
                    this.SendPropertyChanging();
                    this._Regid = value;
                    this.SendPropertyChanged("Regid");
                    this.OnRegidChanged();
                }
            }
        }

        [Column(Name = @"event_id", Storage = "_Eventid", DbType = "int(11)")]
        public System.Nullable<int> Eventid
        {
            get
            {
                return this._Eventid;
            }
            set
            {
                if (this._Eventid != value)
                {
                    this.OnEventidChanging(value);
                    this.SendPropertyChanging();
                    this._Eventid = value;
                    this.SendPropertyChanged("Eventid");
                    this.OnEventidChanged();
                }
            }
        }

        [Column(Name = @"member_id", Storage = "_Memberid", DbType = "int(11)")]
        public System.Nullable<int> Memberid
        {
            get
            {
                return this._Memberid;
            }
            set
            {
                if (this._Memberid != value)
                {
                    this.OnMemberidChanging(value);
                    this.SendPropertyChanging();
                    this._Memberid = value;
                    this.SendPropertyChanged("Memberid");
                    this.OnMemberidChanged();
                }
            }
        }

        [Column(Name = @"reg_first_name", Storage = "_Regfirstname", DbType = "varchar(255)")]
        public string Regfirstname
        {
            get
            {
                return this._Regfirstname;
            }
            set
            {
                if (this._Regfirstname != value)
                {
                    this.OnRegfirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Regfirstname = value;
                    this.SendPropertyChanged("Regfirstname");
                    this.OnRegfirstnameChanged();
                }
            }
        }

        [Column(Name = @"reg_last_name", Storage = "_Reglastname", DbType = "varchar(255)")]
        public string Reglastname
        {
            get
            {
                return this._Reglastname;
            }
            set
            {
                if (this._Reglastname != value)
                {
                    this.OnReglastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Reglastname = value;
                    this.SendPropertyChanged("Reglastname");
                    this.OnReglastnameChanged();
                }
            }
        }

        [Column(Name = @"reg_comments", Storage = "_Regcomments", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Regcomments
        {
            get
            {
                return this._Regcomments;
            }
            set
            {
                if (this._Regcomments != value)
                {
                    this.OnRegcommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Regcomments = value;
                    this.SendPropertyChanged("Regcomments");
                    this.OnRegcommentsChanged();
                }
            }
        }

        [Column(Name = @"reg_phone", Storage = "_Regphone", DbType = "varchar(255)")]
        public string Regphone
        {
            get
            {
                return this._Regphone;
            }
            set
            {
                if (this._Regphone != value)
                {
                    this.OnRegphoneChanging(value);
                    this.SendPropertyChanging();
                    this._Regphone = value;
                    this.SendPropertyChanged("Regphone");
                    this.OnRegphoneChanged();
                }
            }
        }

        [Column(Name = @"reg_email", Storage = "_Regemail", DbType = "varchar(255)")]
        public string Regemail
        {
            get
            {
                return this._Regemail;
            }
            set
            {
                if (this._Regemail != value)
                {
                    this.OnRegemailChanging(value);
                    this.SendPropertyChanging();
                    this._Regemail = value;
                    this.SendPropertyChanged("Regemail");
                    this.OnRegemailChanged();
                }
            }
        }

        [Column(Name = @"reg_count", Storage = "_Regcount", DbType = "tinyint(4)")]
        public System.Nullable<short> Regcount
        {
            get
            {
                return this._Regcount;
            }
            set
            {
                if (this._Regcount != value)
                {
                    this.OnRegcountChanging(value);
                    this.SendPropertyChanging();
                    this._Regcount = value;
                    this.SendPropertyChanged("Regcount");
                    this.OnRegcountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.events")]
    public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Eventid;

        private System.Nullable<System.DateTime> _Eventdatestart;

        private System.Nullable<System.DateTime> _Eventdateend;

        private string _Eventname;

        private string _Eventdesc;

        private string _Eventpicturesurl;

        private string _Eventlocation;

        private string _Eventlocationurl;

        private string _Eventfee;

        private System.Nullable<int> _Eventaddedby;

        private System.Nullable<System.DateTime> _Eventdateadded;

        private System.Nullable<int> _Eventpaypalenabled;

        private string _Eventpaypalemail;

        private System.Nullable<float> _Eventpaypalamount;

        private System.Nullable<int> _Eventallowregistrations;

        private System.Nullable<int> _Eventisapproved;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEventidChanging(int value);
        partial void OnEventidChanged();
        partial void OnEventdatestartChanging(System.Nullable<System.DateTime> value);
        partial void OnEventdatestartChanged();
        partial void OnEventdateendChanging(System.Nullable<System.DateTime> value);
        partial void OnEventdateendChanged();
        partial void OnEventnameChanging(string value);
        partial void OnEventnameChanged();
        partial void OnEventdescChanging(string value);
        partial void OnEventdescChanged();
        partial void OnEventpicturesurlChanging(string value);
        partial void OnEventpicturesurlChanged();
        partial void OnEventlocationChanging(string value);
        partial void OnEventlocationChanged();
        partial void OnEventlocationurlChanging(string value);
        partial void OnEventlocationurlChanged();
        partial void OnEventfeeChanging(string value);
        partial void OnEventfeeChanged();
        partial void OnEventaddedbyChanging(System.Nullable<int> value);
        partial void OnEventaddedbyChanged();
        partial void OnEventdateaddedChanging(System.Nullable<System.DateTime> value);
        partial void OnEventdateaddedChanged();
        partial void OnEventpaypalenabledChanging(System.Nullable<int> value);
        partial void OnEventpaypalenabledChanged();
        partial void OnEventpaypalemailChanging(string value);
        partial void OnEventpaypalemailChanged();
        partial void OnEventpaypalamountChanging(System.Nullable<float> value);
        partial void OnEventpaypalamountChanged();
        partial void OnEventallowregistrationsChanging(System.Nullable<int> value);
        partial void OnEventallowregistrationsChanged();
        partial void OnEventisapprovedChanging(System.Nullable<int> value);
        partial void OnEventisapprovedChanged();
        #endregion

        public Event()
        {
            OnCreated();
        }

        [Column(Name = @"event_id", Storage = "_Eventid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Eventid
        {
            get
            {
                return this._Eventid;
            }
            set
            {
                if (this._Eventid != value)
                {
                    this.OnEventidChanging(value);
                    this.SendPropertyChanging();
                    this._Eventid = value;
                    this.SendPropertyChanged("Eventid");
                    this.OnEventidChanged();
                }
            }
        }

        [Column(Name = @"event_date_start", Storage = "_Eventdatestart", DbType = "datetime")]
        public System.Nullable<System.DateTime> Eventdatestart
        {
            get
            {
                return this._Eventdatestart;
            }
            set
            {
                if (this._Eventdatestart != value)
                {
                    this.OnEventdatestartChanging(value);
                    this.SendPropertyChanging();
                    this._Eventdatestart = value;
                    this.SendPropertyChanged("Eventdatestart");
                    this.OnEventdatestartChanged();
                }
            }
        }

        [Column(Name = @"event_date_end", Storage = "_Eventdateend", DbType = "datetime")]
        public System.Nullable<System.DateTime> Eventdateend
        {
            get
            {
                return this._Eventdateend;
            }
            set
            {
                if (this._Eventdateend != value)
                {
                    this.OnEventdateendChanging(value);
                    this.SendPropertyChanging();
                    this._Eventdateend = value;
                    this.SendPropertyChanged("Eventdateend");
                    this.OnEventdateendChanged();
                }
            }
        }

        [Column(Name = @"event_name", Storage = "_Eventname", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Eventname
        {
            get
            {
                return this._Eventname;
            }
            set
            {
                if (this._Eventname != value)
                {
                    this.OnEventnameChanging(value);
                    this.SendPropertyChanging();
                    this._Eventname = value;
                    this.SendPropertyChanged("Eventname");
                    this.OnEventnameChanged();
                }
            }
        }

        [Column(Name = @"event_desc", Storage = "_Eventdesc", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Eventdesc
        {
            get
            {
                return this._Eventdesc;
            }
            set
            {
                if (this._Eventdesc != value)
                {
                    this.OnEventdescChanging(value);
                    this.SendPropertyChanging();
                    this._Eventdesc = value;
                    this.SendPropertyChanged("Eventdesc");
                    this.OnEventdescChanged();
                }
            }
        }

        [Column(Name = @"event_pictures_url", Storage = "_Eventpicturesurl", DbType = "varchar(100)")]
        public string Eventpicturesurl
        {
            get
            {
                return this._Eventpicturesurl;
            }
            set
            {
                if (this._Eventpicturesurl != value)
                {
                    this.OnEventpicturesurlChanging(value);
                    this.SendPropertyChanging();
                    this._Eventpicturesurl = value;
                    this.SendPropertyChanged("Eventpicturesurl");
                    this.OnEventpicturesurlChanged();
                }
            }
        }

        [Column(Name = @"event_location", Storage = "_Eventlocation", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Eventlocation
        {
            get
            {
                return this._Eventlocation;
            }
            set
            {
                if (this._Eventlocation != value)
                {
                    this.OnEventlocationChanging(value);
                    this.SendPropertyChanging();
                    this._Eventlocation = value;
                    this.SendPropertyChanged("Eventlocation");
                    this.OnEventlocationChanged();
                }
            }
        }

        [Column(Name = @"event_location_url", Storage = "_Eventlocationurl", DbType = "varchar(100)")]
        public string Eventlocationurl
        {
            get
            {
                return this._Eventlocationurl;
            }
            set
            {
                if (this._Eventlocationurl != value)
                {
                    this.OnEventlocationurlChanging(value);
                    this.SendPropertyChanging();
                    this._Eventlocationurl = value;
                    this.SendPropertyChanged("Eventlocationurl");
                    this.OnEventlocationurlChanged();
                }
            }
        }

        [Column(Name = @"event_fee", Storage = "_Eventfee", DbType = "varchar(255)")]
        public string Eventfee
        {
            get
            {
                return this._Eventfee;
            }
            set
            {
                if (this._Eventfee != value)
                {
                    this.OnEventfeeChanging(value);
                    this.SendPropertyChanging();
                    this._Eventfee = value;
                    this.SendPropertyChanged("Eventfee");
                    this.OnEventfeeChanged();
                }
            }
        }

        [Column(Name = @"event_added_by", Storage = "_Eventaddedby", DbType = "int(11)")]
        public System.Nullable<int> Eventaddedby
        {
            get
            {
                return this._Eventaddedby;
            }
            set
            {
                if (this._Eventaddedby != value)
                {
                    this.OnEventaddedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Eventaddedby = value;
                    this.SendPropertyChanged("Eventaddedby");
                    this.OnEventaddedbyChanged();
                }
            }
        }

        [Column(Name = @"event_date_added", Storage = "_Eventdateadded", DbType = "datetime")]
        public System.Nullable<System.DateTime> Eventdateadded
        {
            get
            {
                return this._Eventdateadded;
            }
            set
            {
                if (this._Eventdateadded != value)
                {
                    this.OnEventdateaddedChanging(value);
                    this.SendPropertyChanging();
                    this._Eventdateadded = value;
                    this.SendPropertyChanged("Eventdateadded");
                    this.OnEventdateaddedChanged();
                }
            }
        }

        [Column(Name = @"event_paypal_enabled", Storage = "_Eventpaypalenabled", DbType = "int(11)")]
        public System.Nullable<int> Eventpaypalenabled
        {
            get
            {
                return this._Eventpaypalenabled;
            }
            set
            {
                if (this._Eventpaypalenabled != value)
                {
                    this.OnEventpaypalenabledChanging(value);
                    this.SendPropertyChanging();
                    this._Eventpaypalenabled = value;
                    this.SendPropertyChanged("Eventpaypalenabled");
                    this.OnEventpaypalenabledChanged();
                }
            }
        }

        [Column(Name = @"event_paypal_email", Storage = "_Eventpaypalemail", DbType = "varchar(200)")]
        public string Eventpaypalemail
        {
            get
            {
                return this._Eventpaypalemail;
            }
            set
            {
                if (this._Eventpaypalemail != value)
                {
                    this.OnEventpaypalemailChanging(value);
                    this.SendPropertyChanging();
                    this._Eventpaypalemail = value;
                    this.SendPropertyChanged("Eventpaypalemail");
                    this.OnEventpaypalemailChanged();
                }
            }
        }

        [Column(Name = @"event_paypal_amount", Storage = "_Eventpaypalamount", DbType = "float")]
        public System.Nullable<float> Eventpaypalamount
        {
            get
            {
                return this._Eventpaypalamount;
            }
            set
            {
                if (this._Eventpaypalamount != value)
                {
                    this.OnEventpaypalamountChanging(value);
                    this.SendPropertyChanging();
                    this._Eventpaypalamount = value;
                    this.SendPropertyChanged("Eventpaypalamount");
                    this.OnEventpaypalamountChanged();
                }
            }
        }

        [Column(Name = @"event_allow_registrations", Storage = "_Eventallowregistrations", DbType = "int(11)")]
        public System.Nullable<int> Eventallowregistrations
        {
            get
            {
                return this._Eventallowregistrations;
            }
            set
            {
                if (this._Eventallowregistrations != value)
                {
                    this.OnEventallowregistrationsChanging(value);
                    this.SendPropertyChanging();
                    this._Eventallowregistrations = value;
                    this.SendPropertyChanged("Eventallowregistrations");
                    this.OnEventallowregistrationsChanged();
                }
            }
        }

        [Column(Name = @"event_is_approved", Storage = "_Eventisapproved", DbType = "int(11)")]
        public System.Nullable<int> Eventisapproved
        {
            get
            {
                return this._Eventisapproved;
            }
            set
            {
                if (this._Eventisapproved != value)
                {
                    this.OnEventisapprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Eventisapproved = value;
                    this.SendPropertyChanged("Eventisapproved");
                    this.OnEventisapprovedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.forums")]
    public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Forumid;

        private string _Forumname;

        private string _Forumdescription;

        private System.Nullable<int> _Memberidmoderator;

        private string _Forumimage;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnForumnameChanging(string value);
        partial void OnForumnameChanged();
        partial void OnForumdescriptionChanging(string value);
        partial void OnForumdescriptionChanged();
        partial void OnMemberidmoderatorChanging(System.Nullable<int> value);
        partial void OnMemberidmoderatorChanged();
        partial void OnForumimageChanging(string value);
        partial void OnForumimageChanged();
        #endregion

        public Forum()
        {
            OnCreated();
        }

        [Column(Name = @"forum_id", Storage = "_Forumid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"forum_name", Storage = "_Forumname", DbType = "varchar(128)")]
        public string Forumname
        {
            get
            {
                return this._Forumname;
            }
            set
            {
                if (this._Forumname != value)
                {
                    this.OnForumnameChanging(value);
                    this.SendPropertyChanging();
                    this._Forumname = value;
                    this.SendPropertyChanged("Forumname");
                    this.OnForumnameChanged();
                }
            }
        }

        [Column(Name = @"forum_description", Storage = "_Forumdescription", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Forumdescription
        {
            get
            {
                return this._Forumdescription;
            }
            set
            {
                if (this._Forumdescription != value)
                {
                    this.OnForumdescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Forumdescription = value;
                    this.SendPropertyChanged("Forumdescription");
                    this.OnForumdescriptionChanged();
                }
            }
        }

        [Column(Name = @"member_id_moderator", Storage = "_Memberidmoderator", DbType = "int(11)")]
        public System.Nullable<int> Memberidmoderator
        {
            get
            {
                return this._Memberidmoderator;
            }
            set
            {
                if (this._Memberidmoderator != value)
                {
                    this.OnMemberidmoderatorChanging(value);
                    this.SendPropertyChanging();
                    this._Memberidmoderator = value;
                    this.SendPropertyChanged("Memberidmoderator");
                    this.OnMemberidmoderatorChanged();
                }
            }
        }

        [Column(Name = @"forum_image", Storage = "_Forumimage", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Forumimage
        {
            get
            {
                return this._Forumimage;
            }
            set
            {
                if (this._Forumimage != value)
                {
                    this.OnForumimageChanging(value);
                    this.SendPropertyChanging();
                    this._Forumimage = value;
                    this.SendPropertyChanged("Forumimage");
                    this.OnForumimageChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.link_categories")]
    public partial class Linkcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Linkcategoryid;

        private string _Linkcategorydesc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLinkcategoryidChanging(int value);
        partial void OnLinkcategoryidChanged();
        partial void OnLinkcategorydescChanging(string value);
        partial void OnLinkcategorydescChanged();
        #endregion

        public Linkcategory()
        {
            OnCreated();
        }

        [Column(Name = @"link_category_id", Storage = "_Linkcategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Linkcategoryid
        {
            get
            {
                return this._Linkcategoryid;
            }
            set
            {
                if (this._Linkcategoryid != value)
                {
                    this.OnLinkcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Linkcategoryid = value;
                    this.SendPropertyChanged("Linkcategoryid");
                    this.OnLinkcategoryidChanged();
                }
            }
        }

        [Column(Name = @"link_category_desc", Storage = "_Linkcategorydesc", DbType = "char(50)")]
        public string Linkcategorydesc
        {
            get
            {
                return this._Linkcategorydesc;
            }
            set
            {
                if (this._Linkcategorydesc != value)
                {
                    this.OnLinkcategorydescChanging(value);
                    this.SendPropertyChanging();
                    this._Linkcategorydesc = value;
                    this.SendPropertyChanged("Linkcategorydesc");
                    this.OnLinkcategorydescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.links")]
    public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Linkid;

        private string _Linkname;

        private string _Linkurl;

        private string _Linkdesc;

        private string _Linkaddress;

        private System.Nullable<int> _Linkcategoryid;

        private System.Nullable<int> _Linkaddedby;

        private System.Nullable<System.DateTime> _Linkdateadded;

        private System.Nullable<int> _Linkisapproved;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLinkidChanging(int value);
        partial void OnLinkidChanged();
        partial void OnLinknameChanging(string value);
        partial void OnLinknameChanged();
        partial void OnLinkurlChanging(string value);
        partial void OnLinkurlChanged();
        partial void OnLinkdescChanging(string value);
        partial void OnLinkdescChanged();
        partial void OnLinkaddressChanging(string value);
        partial void OnLinkaddressChanged();
        partial void OnLinkcategoryidChanging(System.Nullable<int> value);
        partial void OnLinkcategoryidChanged();
        partial void OnLinkaddedbyChanging(System.Nullable<int> value);
        partial void OnLinkaddedbyChanged();
        partial void OnLinkdateaddedChanging(System.Nullable<System.DateTime> value);
        partial void OnLinkdateaddedChanged();
        partial void OnLinkisapprovedChanging(System.Nullable<int> value);
        partial void OnLinkisapprovedChanged();
        #endregion

        public Link()
        {
            OnCreated();
        }

        [Column(Name = @"link_id", Storage = "_Linkid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Linkid
        {
            get
            {
                return this._Linkid;
            }
            set
            {
                if (this._Linkid != value)
                {
                    this.OnLinkidChanging(value);
                    this.SendPropertyChanging();
                    this._Linkid = value;
                    this.SendPropertyChanged("Linkid");
                    this.OnLinkidChanged();
                }
            }
        }

        [Column(Name = @"link_name", Storage = "_Linkname", DbType = "varchar(100)")]
        public string Linkname
        {
            get
            {
                return this._Linkname;
            }
            set
            {
                if (this._Linkname != value)
                {
                    this.OnLinknameChanging(value);
                    this.SendPropertyChanging();
                    this._Linkname = value;
                    this.SendPropertyChanged("Linkname");
                    this.OnLinknameChanged();
                }
            }
        }

        [Column(Name = @"link_url", Storage = "_Linkurl", DbType = "varchar(100)")]
        public string Linkurl
        {
            get
            {
                return this._Linkurl;
            }
            set
            {
                if (this._Linkurl != value)
                {
                    this.OnLinkurlChanging(value);
                    this.SendPropertyChanging();
                    this._Linkurl = value;
                    this.SendPropertyChanged("Linkurl");
                    this.OnLinkurlChanged();
                }
            }
        }

        [Column(Name = @"link_desc", Storage = "_Linkdesc", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Linkdesc
        {
            get
            {
                return this._Linkdesc;
            }
            set
            {
                if (this._Linkdesc != value)
                {
                    this.OnLinkdescChanging(value);
                    this.SendPropertyChanging();
                    this._Linkdesc = value;
                    this.SendPropertyChanged("Linkdesc");
                    this.OnLinkdescChanged();
                }
            }
        }

        [Column(Name = @"link_address", Storage = "_Linkaddress", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Linkaddress
        {
            get
            {
                return this._Linkaddress;
            }
            set
            {
                if (this._Linkaddress != value)
                {
                    this.OnLinkaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Linkaddress = value;
                    this.SendPropertyChanged("Linkaddress");
                    this.OnLinkaddressChanged();
                }
            }
        }

        [Column(Name = @"link_category_id", Storage = "_Linkcategoryid", DbType = "int(11)")]
        public System.Nullable<int> Linkcategoryid
        {
            get
            {
                return this._Linkcategoryid;
            }
            set
            {
                if (this._Linkcategoryid != value)
                {
                    this.OnLinkcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Linkcategoryid = value;
                    this.SendPropertyChanged("Linkcategoryid");
                    this.OnLinkcategoryidChanged();
                }
            }
        }

        [Column(Name = @"link_added_by", Storage = "_Linkaddedby", DbType = "int(11)")]
        public System.Nullable<int> Linkaddedby
        {
            get
            {
                return this._Linkaddedby;
            }
            set
            {
                if (this._Linkaddedby != value)
                {
                    this.OnLinkaddedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Linkaddedby = value;
                    this.SendPropertyChanged("Linkaddedby");
                    this.OnLinkaddedbyChanged();
                }
            }
        }

        [Column(Name = @"link_date_added", Storage = "_Linkdateadded", DbType = "datetime")]
        public System.Nullable<System.DateTime> Linkdateadded
        {
            get
            {
                return this._Linkdateadded;
            }
            set
            {
                if (this._Linkdateadded != value)
                {
                    this.OnLinkdateaddedChanging(value);
                    this.SendPropertyChanging();
                    this._Linkdateadded = value;
                    this.SendPropertyChanged("Linkdateadded");
                    this.OnLinkdateaddedChanged();
                }
            }
        }

        [Column(Name = @"link_is_approved", Storage = "_Linkisapproved", DbType = "int(11)")]
        public System.Nullable<int> Linkisapproved
        {
            get
            {
                return this._Linkisapproved;
            }
            set
            {
                if (this._Linkisapproved != value)
                {
                    this.OnLinkisapprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Linkisapproved = value;
                    this.SendPropertyChanged("Linkisapproved");
                    this.OnLinkisapprovedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.lookup_countries")]
    public partial class Lookupcountry : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Countryid;

        private string _Countrydesc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCountryidChanging(int value);
        partial void OnCountryidChanged();
        partial void OnCountrydescChanging(string value);
        partial void OnCountrydescChanged();
        #endregion

        public Lookupcountry()
        {
            OnCreated();
        }

        [Column(Name = @"country_id", Storage = "_Countryid", CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true)]
        public int Countryid
        {
            get
            {
                return this._Countryid;
            }
            set
            {
                if (this._Countryid != value)
                {
                    this.OnCountryidChanging(value);
                    this.SendPropertyChanging();
                    this._Countryid = value;
                    this.SendPropertyChanged("Countryid");
                    this.OnCountryidChanged();
                }
            }
        }

        [Column(Name = @"country_desc", Storage = "_Countrydesc", DbType = "char(40)")]
        public string Countrydesc
        {
            get
            {
                return this._Countrydesc;
            }
            set
            {
                if (this._Countrydesc != value)
                {
                    this.OnCountrydescChanging(value);
                    this.SendPropertyChanging();
                    this._Countrydesc = value;
                    this.SendPropertyChanged("Countrydesc");
                    this.OnCountrydescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.lookup_states")]
    public partial class Lookupstate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Stateid;

        private string _Statedesc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStateidChanging(string value);
        partial void OnStateidChanged();
        partial void OnStatedescChanging(string value);
        partial void OnStatedescChanged();
        #endregion

        public Lookupstate()
        {
            OnCreated();
        }

        [Column(Name = @"state_id", Storage = "_Stateid", CanBeNull = false, DbType = "char(2) NOT NULL", IsPrimaryKey = true)]
        public string Stateid
        {
            get
            {
                return this._Stateid;
            }
            set
            {
                if (this._Stateid != value)
                {
                    this.OnStateidChanging(value);
                    this.SendPropertyChanging();
                    this._Stateid = value;
                    this.SendPropertyChanged("Stateid");
                    this.OnStateidChanged();
                }
            }
        }

        [Column(Name = @"state_desc", Storage = "_Statedesc", DbType = "char(25)")]
        public string Statedesc
        {
            get
            {
                return this._Statedesc;
            }
            set
            {
                if (this._Statedesc != value)
                {
                    this.OnStatedescChanging(value);
                    this.SendPropertyChanging();
                    this._Statedesc = value;
                    this.SendPropertyChanged("Statedesc");
                    this.OnStatedescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.members")]
    public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Memberid;

        private string _Memberfirstname;

        private string _Memberlastname;

        private string _Memberlogin;

        private string _Memberpassword;

        private string _Memberemail;

        private System.Nullable<int> _Countryid;

        private string _Stateid;

        private string _Membercity;

        private string _Memberzip;

        private string _Memberaddress1;

        private string _Memberaddress2;

        private string _Memberaddress3;

        private string _Memberphwork;

        private string _Memberphworkext;

        private string _Memberphonehome;

        private string _Memberphoneaddl;

        private string _Memberfax;

        private string _Pictureurl;

        private string _Websiteurl;

        private System.Nullable<byte> _Clubstatusid;

        private System.Nullable<System.DateTime> _Memberdateadded;

        private System.Nullable<short> _Securitylevelid;

        private string _Memberimage;

        private System.Nullable<byte> _Rank;

        private string _Ranktext;

        private string _Rankadminedited;

        private System.Nullable<int> _Numberofmessages;

        private int _Admingivenrank;

        private System.Nullable<System.DateTime> _Spamlock;

        private string _Spamlockreason;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMemberidChanging(int value);
        partial void OnMemberidChanged();
        partial void OnMemberfirstnameChanging(string value);
        partial void OnMemberfirstnameChanged();
        partial void OnMemberlastnameChanging(string value);
        partial void OnMemberlastnameChanged();
        partial void OnMemberloginChanging(string value);
        partial void OnMemberloginChanged();
        partial void OnMemberpasswordChanging(string value);
        partial void OnMemberpasswordChanged();
        partial void OnMemberemailChanging(string value);
        partial void OnMemberemailChanged();
        partial void OnCountryidChanging(System.Nullable<int> value);
        partial void OnCountryidChanged();
        partial void OnStateidChanging(string value);
        partial void OnStateidChanged();
        partial void OnMembercityChanging(string value);
        partial void OnMembercityChanged();
        partial void OnMemberzipChanging(string value);
        partial void OnMemberzipChanged();
        partial void OnMemberaddress1Changing(string value);
        partial void OnMemberaddress1Changed();
        partial void OnMemberaddress2Changing(string value);
        partial void OnMemberaddress2Changed();
        partial void OnMemberaddress3Changing(string value);
        partial void OnMemberaddress3Changed();
        partial void OnMemberphworkChanging(string value);
        partial void OnMemberphworkChanged();
        partial void OnMemberphworkextChanging(string value);
        partial void OnMemberphworkextChanged();
        partial void OnMemberphonehomeChanging(string value);
        partial void OnMemberphonehomeChanged();
        partial void OnMemberphoneaddlChanging(string value);
        partial void OnMemberphoneaddlChanged();
        partial void OnMemberfaxChanging(string value);
        partial void OnMemberfaxChanged();
        partial void OnPictureurlChanging(string value);
        partial void OnPictureurlChanged();
        partial void OnWebsiteurlChanging(string value);
        partial void OnWebsiteurlChanged();
        partial void OnClubstatusidChanging(System.Nullable<byte> value);
        partial void OnClubstatusidChanged();
        partial void OnMemberdateaddedChanging(System.Nullable<System.DateTime> value);
        partial void OnMemberdateaddedChanged();
        partial void OnSecuritylevelidChanging(System.Nullable<short> value);
        partial void OnSecuritylevelidChanged();
        partial void OnMemberimageChanging(string value);
        partial void OnMemberimageChanged();
        partial void OnRankChanging(System.Nullable<byte> value);
        partial void OnRankChanged();
        partial void OnRanktextChanging(string value);
        partial void OnRanktextChanged();
        partial void OnRankadmineditedChanging(string value);
        partial void OnRankadmineditedChanged();
        partial void OnNumberofmessagesChanging(System.Nullable<int> value);
        partial void OnNumberofmessagesChanged();
        partial void OnAdmingivenrankChanging(int value);
        partial void OnAdmingivenrankChanged();
        partial void OnSpamlockChanging(System.Nullable<System.DateTime> value);
        partial void OnSpamlockChanged();
        partial void OnSpamlockreasonChanging(string value);
        partial void OnSpamlockreasonChanged();
        #endregion

        public Member()
        {
            OnCreated();
        }

        [Column(Name = @"member_id", Storage = "_Memberid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Memberid
        {
            get
            {
                return this._Memberid;
            }
            set
            {
                if (this._Memberid != value)
                {
                    this.OnMemberidChanging(value);
                    this.SendPropertyChanging();
                    this._Memberid = value;
                    this.SendPropertyChanged("Memberid");
                    this.OnMemberidChanged();
                }
            }
        }

        [Column(Name = @"member_first_name", Storage = "_Memberfirstname", DbType = "varchar(20)")]
        public string Memberfirstname
        {
            get
            {
                return this._Memberfirstname;
            }
            set
            {
                if (this._Memberfirstname != value)
                {
                    this.OnMemberfirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Memberfirstname = value;
                    this.SendPropertyChanged("Memberfirstname");
                    this.OnMemberfirstnameChanged();
                }
            }
        }

        [Column(Name = @"member_last_name", Storage = "_Memberlastname", DbType = "varchar(20)")]
        public string Memberlastname
        {
            get
            {
                return this._Memberlastname;
            }
            set
            {
                if (this._Memberlastname != value)
                {
                    this.OnMemberlastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Memberlastname = value;
                    this.SendPropertyChanged("Memberlastname");
                    this.OnMemberlastnameChanged();
                }
            }
        }

        [Column(Name = @"member_login", Storage = "_Memberlogin", DbType = "varchar(15)")]
        public string Memberlogin
        {
            get
            {
                return this._Memberlogin;
            }
            set
            {
                if (this._Memberlogin != value)
                {
                    this.OnMemberloginChanging(value);
                    this.SendPropertyChanging();
                    this._Memberlogin = value;
                    this.SendPropertyChanged("Memberlogin");
                    this.OnMemberloginChanged();
                }
            }
        }

        [Column(Name = @"member_password", Storage = "_Memberpassword", DbType = "varchar(15)")]
        public string Memberpassword
        {
            get
            {
                return this._Memberpassword;
            }
            set
            {
                if (this._Memberpassword != value)
                {
                    this.OnMemberpasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Memberpassword = value;
                    this.SendPropertyChanged("Memberpassword");
                    this.OnMemberpasswordChanged();
                }
            }
        }

        [Column(Name = @"member_email", Storage = "_Memberemail", DbType = "varchar(30)")]
        public string Memberemail
        {
            get
            {
                return this._Memberemail;
            }
            set
            {
                if (this._Memberemail != value)
                {
                    this.OnMemberemailChanging(value);
                    this.SendPropertyChanging();
                    this._Memberemail = value;
                    this.SendPropertyChanged("Memberemail");
                    this.OnMemberemailChanged();
                }
            }
        }

        [Column(Name = @"country_id", Storage = "_Countryid", DbType = "int(11)")]
        public System.Nullable<int> Countryid
        {
            get
            {
                return this._Countryid;
            }
            set
            {
                if (this._Countryid != value)
                {
                    this.OnCountryidChanging(value);
                    this.SendPropertyChanging();
                    this._Countryid = value;
                    this.SendPropertyChanged("Countryid");
                    this.OnCountryidChanged();
                }
            }
        }

        [Column(Name = @"state_id", Storage = "_Stateid", DbType = "char(2)")]
        public string Stateid
        {
            get
            {
                return this._Stateid;
            }
            set
            {
                if (this._Stateid != value)
                {
                    this.OnStateidChanging(value);
                    this.SendPropertyChanging();
                    this._Stateid = value;
                    this.SendPropertyChanged("Stateid");
                    this.OnStateidChanged();
                }
            }
        }

        [Column(Name = @"member_city", Storage = "_Membercity", DbType = "varchar(30)")]
        public string Membercity
        {
            get
            {
                return this._Membercity;
            }
            set
            {
                if (this._Membercity != value)
                {
                    this.OnMembercityChanging(value);
                    this.SendPropertyChanging();
                    this._Membercity = value;
                    this.SendPropertyChanged("Membercity");
                    this.OnMembercityChanged();
                }
            }
        }

        [Column(Name = @"member_zip", Storage = "_Memberzip", DbType = "varchar(10)")]
        public string Memberzip
        {
            get
            {
                return this._Memberzip;
            }
            set
            {
                if (this._Memberzip != value)
                {
                    this.OnMemberzipChanging(value);
                    this.SendPropertyChanging();
                    this._Memberzip = value;
                    this.SendPropertyChanged("Memberzip");
                    this.OnMemberzipChanged();
                }
            }
        }

        [Column(Name = @"member_address1", Storage = "_Memberaddress1", DbType = "varchar(50)")]
        public string Memberaddress1
        {
            get
            {
                return this._Memberaddress1;
            }
            set
            {
                if (this._Memberaddress1 != value)
                {
                    this.OnMemberaddress1Changing(value);
                    this.SendPropertyChanging();
                    this._Memberaddress1 = value;
                    this.SendPropertyChanged("Memberaddress1");
                    this.OnMemberaddress1Changed();
                }
            }
        }

        [Column(Name = @"member_address2", Storage = "_Memberaddress2", DbType = "varchar(50)")]
        public string Memberaddress2
        {
            get
            {
                return this._Memberaddress2;
            }
            set
            {
                if (this._Memberaddress2 != value)
                {
                    this.OnMemberaddress2Changing(value);
                    this.SendPropertyChanging();
                    this._Memberaddress2 = value;
                    this.SendPropertyChanged("Memberaddress2");
                    this.OnMemberaddress2Changed();
                }
            }
        }

        [Column(Name = @"member_address3", Storage = "_Memberaddress3", DbType = "varchar(50)")]
        public string Memberaddress3
        {
            get
            {
                return this._Memberaddress3;
            }
            set
            {
                if (this._Memberaddress3 != value)
                {
                    this.OnMemberaddress3Changing(value);
                    this.SendPropertyChanging();
                    this._Memberaddress3 = value;
                    this.SendPropertyChanged("Memberaddress3");
                    this.OnMemberaddress3Changed();
                }
            }
        }

        [Column(Name = @"member_ph_work", Storage = "_Memberphwork", DbType = "varchar(20)")]
        public string Memberphwork
        {
            get
            {
                return this._Memberphwork;
            }
            set
            {
                if (this._Memberphwork != value)
                {
                    this.OnMemberphworkChanging(value);
                    this.SendPropertyChanging();
                    this._Memberphwork = value;
                    this.SendPropertyChanged("Memberphwork");
                    this.OnMemberphworkChanged();
                }
            }
        }

        [Column(Name = @"member_ph_work_ext", Storage = "_Memberphworkext", DbType = "varchar(10)")]
        public string Memberphworkext
        {
            get
            {
                return this._Memberphworkext;
            }
            set
            {
                if (this._Memberphworkext != value)
                {
                    this.OnMemberphworkextChanging(value);
                    this.SendPropertyChanging();
                    this._Memberphworkext = value;
                    this.SendPropertyChanged("Memberphworkext");
                    this.OnMemberphworkextChanged();
                }
            }
        }

        [Column(Name = @"member_phone_home", Storage = "_Memberphonehome", DbType = "varchar(20)")]
        public string Memberphonehome
        {
            get
            {
                return this._Memberphonehome;
            }
            set
            {
                if (this._Memberphonehome != value)
                {
                    this.OnMemberphonehomeChanging(value);
                    this.SendPropertyChanging();
                    this._Memberphonehome = value;
                    this.SendPropertyChanged("Memberphonehome");
                    this.OnMemberphonehomeChanged();
                }
            }
        }

        [Column(Name = @"member_phone_addl", Storage = "_Memberphoneaddl", DbType = "varchar(20)")]
        public string Memberphoneaddl
        {
            get
            {
                return this._Memberphoneaddl;
            }
            set
            {
                if (this._Memberphoneaddl != value)
                {
                    this.OnMemberphoneaddlChanging(value);
                    this.SendPropertyChanging();
                    this._Memberphoneaddl = value;
                    this.SendPropertyChanged("Memberphoneaddl");
                    this.OnMemberphoneaddlChanged();
                }
            }
        }

        [Column(Name = @"member_fax", Storage = "_Memberfax", DbType = "varchar(20)")]
        public string Memberfax
        {
            get
            {
                return this._Memberfax;
            }
            set
            {
                if (this._Memberfax != value)
                {
                    this.OnMemberfaxChanging(value);
                    this.SendPropertyChanging();
                    this._Memberfax = value;
                    this.SendPropertyChanged("Memberfax");
                    this.OnMemberfaxChanged();
                }
            }
        }

        [Column(Name = @"picture_url", Storage = "_Pictureurl", DbType = "varchar(100)")]
        public string Pictureurl
        {
            get
            {
                return this._Pictureurl;
            }
            set
            {
                if (this._Pictureurl != value)
                {
                    this.OnPictureurlChanging(value);
                    this.SendPropertyChanging();
                    this._Pictureurl = value;
                    this.SendPropertyChanged("Pictureurl");
                    this.OnPictureurlChanged();
                }
            }
        }

        [Column(Name = @"website_url", Storage = "_Websiteurl", DbType = "varchar(100)")]
        public string Websiteurl
        {
            get
            {
                return this._Websiteurl;
            }
            set
            {
                if (this._Websiteurl != value)
                {
                    this.OnWebsiteurlChanging(value);
                    this.SendPropertyChanging();
                    this._Websiteurl = value;
                    this.SendPropertyChanged("Websiteurl");
                    this.OnWebsiteurlChanged();
                }
            }
        }

        [Column(Name = @"club_status_id", Storage = "_Clubstatusid", DbType = "tinyint(3)")]
        public System.Nullable<byte> Clubstatusid
        {
            get
            {
                return this._Clubstatusid;
            }
            set
            {
                if (this._Clubstatusid != value)
                {
                    this.OnClubstatusidChanging(value);
                    this.SendPropertyChanging();
                    this._Clubstatusid = value;
                    this.SendPropertyChanged("Clubstatusid");
                    this.OnClubstatusidChanged();
                }
            }
        }

        [Column(Name = @"member_date_added", Storage = "_Memberdateadded", DbType = "datetime")]
        public System.Nullable<System.DateTime> Memberdateadded
        {
            get
            {
                return this._Memberdateadded;
            }
            set
            {
                if (this._Memberdateadded != value)
                {
                    this.OnMemberdateaddedChanging(value);
                    this.SendPropertyChanging();
                    this._Memberdateadded = value;
                    this.SendPropertyChanged("Memberdateadded");
                    this.OnMemberdateaddedChanged();
                }
            }
        }

        [Column(Name = @"security_level_id", Storage = "_Securitylevelid", DbType = "smallint(6)")]
        public System.Nullable<short> Securitylevelid
        {
            get
            {
                return this._Securitylevelid;
            }
            set
            {
                if (this._Securitylevelid != value)
                {
                    this.OnSecuritylevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Securitylevelid = value;
                    this.SendPropertyChanged("Securitylevelid");
                    this.OnSecuritylevelidChanged();
                }
            }
        }

        [Column(Name = @"member_image", Storage = "_Memberimage", DbType = "varchar(32)")]
        public string Memberimage
        {
            get
            {
                return this._Memberimage;
            }
            set
            {
                if (this._Memberimage != value)
                {
                    this.OnMemberimageChanging(value);
                    this.SendPropertyChanging();
                    this._Memberimage = value;
                    this.SendPropertyChanged("Memberimage");
                    this.OnMemberimageChanged();
                }
            }
        }

        [Column(Name = @"rank", Storage = "_Rank", DbType = "tinyint(11)")]
        public System.Nullable<byte> Rank
        {
            get
            {
                return this._Rank;
            }
            set
            {
                if (this._Rank != value)
                {
                    this.OnRankChanging(value);
                    this.SendPropertyChanging();
                    this._Rank = value;
                    this.SendPropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }

        [Column(Name = @"rank_text", Storage = "_Ranktext", DbType = "varchar(255)")]
        public string Ranktext
        {
            get
            {
                return this._Ranktext;
            }
            set
            {
                if (this._Ranktext != value)
                {
                    this.OnRanktextChanging(value);
                    this.SendPropertyChanging();
                    this._Ranktext = value;
                    this.SendPropertyChanged("Ranktext");
                    this.OnRanktextChanged();
                }
            }
        }

        [Column(Name = @"rank_admin_edited", Storage = "_Rankadminedited", DbType = "char(1)")]
        public string Rankadminedited
        {
            get
            {
                return this._Rankadminedited;
            }
            set
            {
                if (this._Rankadminedited != value)
                {
                    this.OnRankadmineditedChanging(value);
                    this.SendPropertyChanging();
                    this._Rankadminedited = value;
                    this.SendPropertyChanged("Rankadminedited");
                    this.OnRankadmineditedChanged();
                }
            }
        }

        [Column(Name = @"number_of_messages", Storage = "_Numberofmessages", DbType = "int(11)")]
        public System.Nullable<int> Numberofmessages
        {
            get
            {
                return this._Numberofmessages;
            }
            set
            {
                if (this._Numberofmessages != value)
                {
                    this.OnNumberofmessagesChanging(value);
                    this.SendPropertyChanging();
                    this._Numberofmessages = value;
                    this.SendPropertyChanged("Numberofmessages");
                    this.OnNumberofmessagesChanged();
                }
            }
        }

        [Column(Name = @"admin_given_rank", Storage = "_Admingivenrank", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Admingivenrank
        {
            get
            {
                return this._Admingivenrank;
            }
            set
            {
                if (this._Admingivenrank != value)
                {
                    this.OnAdmingivenrankChanging(value);
                    this.SendPropertyChanging();
                    this._Admingivenrank = value;
                    this.SendPropertyChanged("Admingivenrank");
                    this.OnAdmingivenrankChanged();
                }
            }
        }

        [Column(Name = @"spam_lock", Storage = "_Spamlock", DbType = "datetime")]
        public System.Nullable<System.DateTime> Spamlock
        {
            get
            {
                return this._Spamlock;
            }
            set
            {
                if (this._Spamlock != value)
                {
                    this.OnSpamlockChanging(value);
                    this.SendPropertyChanging();
                    this._Spamlock = value;
                    this.SendPropertyChanged("Spamlock");
                    this.OnSpamlockChanged();
                }
            }
        }

        [Column(Name = @"spam_lock_reason", Storage = "_Spamlockreason", DbType = "varchar(255)")]
        public string Spamlockreason
        {
            get
            {
                return this._Spamlockreason;
            }
            set
            {
                if (this._Spamlockreason != value)
                {
                    this.OnSpamlockreasonChanging(value);
                    this.SendPropertyChanging();
                    this._Spamlockreason = value;
                    this.SendPropertyChanged("Spamlockreason");
                    this.OnSpamlockreasonChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.messages")]
    public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Messageid;

        private System.Nullable<int> _Messageparentid;

        private string _Messagetopic;

        private string _Messageauthor;

        private string _Messagecontent;

        private System.Nullable<System.DateTime> _Messagedateentered;

        private System.Nullable<System.DateTime> _Messagelastreplydate;

        private System.Nullable<int> _Messagechildcount;

        private System.Nullable<int> _Forumid;

        private System.Nullable<int> _Memberidauthor;

        private string _Messageauthoremail;

        private System.Nullable<int> _Messagenotify;

        private string _Msgicon;

        private System.Nullable<short> _Messageapproved;

        private System.Nullable<int> _Remoteip;

        private string _Remotehost;

        private string _Remoteproxy;

        private System.Nullable<short> _Messageclosed;

        private System.Nullable<short> _Sticky;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMessageidChanging(int value);
        partial void OnMessageidChanged();
        partial void OnMessageparentidChanging(System.Nullable<int> value);
        partial void OnMessageparentidChanged();
        partial void OnMessagetopicChanging(string value);
        partial void OnMessagetopicChanged();
        partial void OnMessageauthorChanging(string value);
        partial void OnMessageauthorChanged();
        partial void OnMessagecontentChanging(string value);
        partial void OnMessagecontentChanged();
        partial void OnMessagedateenteredChanging(System.Nullable<System.DateTime> value);
        partial void OnMessagedateenteredChanged();
        partial void OnMessagelastreplydateChanging(System.Nullable<System.DateTime> value);
        partial void OnMessagelastreplydateChanged();
        partial void OnMessagechildcountChanging(System.Nullable<int> value);
        partial void OnMessagechildcountChanged();
        partial void OnForumidChanging(System.Nullable<int> value);
        partial void OnForumidChanged();
        partial void OnMemberidauthorChanging(System.Nullable<int> value);
        partial void OnMemberidauthorChanged();
        partial void OnMessageauthoremailChanging(string value);
        partial void OnMessageauthoremailChanged();
        partial void OnMessagenotifyChanging(System.Nullable<int> value);
        partial void OnMessagenotifyChanged();
        partial void OnMsgiconChanging(string value);
        partial void OnMsgiconChanged();
        partial void OnMessageapprovedChanging(System.Nullable<short> value);
        partial void OnMessageapprovedChanged();
        partial void OnRemoteipChanging(System.Nullable<int> value);
        partial void OnRemoteipChanged();
        partial void OnRemotehostChanging(string value);
        partial void OnRemotehostChanged();
        partial void OnRemoteproxyChanging(string value);
        partial void OnRemoteproxyChanged();
        partial void OnMessageclosedChanging(System.Nullable<short> value);
        partial void OnMessageclosedChanged();
        partial void OnStickyChanging(System.Nullable<short> value);
        partial void OnStickyChanged();
        #endregion

        public Message()
        {
            OnCreated();
        }

        [Column(Name = @"message_id", Storage = "_Messageid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Messageid
        {
            get
            {
                return this._Messageid;
            }
            set
            {
                if (this._Messageid != value)
                {
                    this.OnMessageidChanging(value);
                    this.SendPropertyChanging();
                    this._Messageid = value;
                    this.SendPropertyChanged("Messageid");
                    this.OnMessageidChanged();
                }
            }
        }

        [Column(Name = @"message_parent_id", Storage = "_Messageparentid", DbType = "int(11)")]
        public System.Nullable<int> Messageparentid
        {
            get
            {
                return this._Messageparentid;
            }
            set
            {
                if (this._Messageparentid != value)
                {
                    this.OnMessageparentidChanging(value);
                    this.SendPropertyChanging();
                    this._Messageparentid = value;
                    this.SendPropertyChanged("Messageparentid");
                    this.OnMessageparentidChanged();
                }
            }
        }

        [Column(Name = @"message_topic", Storage = "_Messagetopic", DbType = "varchar(255)")]
        public string Messagetopic
        {
            get
            {
                return this._Messagetopic;
            }
            set
            {
                if (this._Messagetopic != value)
                {
                    this.OnMessagetopicChanging(value);
                    this.SendPropertyChanging();
                    this._Messagetopic = value;
                    this.SendPropertyChanged("Messagetopic");
                    this.OnMessagetopicChanged();
                }
            }
        }

        [Column(Name = @"message_author", Storage = "_Messageauthor", DbType = "varchar(255)")]
        public string Messageauthor
        {
            get
            {
                return this._Messageauthor;
            }
            set
            {
                if (this._Messageauthor != value)
                {
                    this.OnMessageauthorChanging(value);
                    this.SendPropertyChanging();
                    this._Messageauthor = value;
                    this.SendPropertyChanged("Messageauthor");
                    this.OnMessageauthorChanged();
                }
            }
        }

        [Column(Name = @"message_content", Storage = "_Messagecontent", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Messagecontent
        {
            get
            {
                return this._Messagecontent;
            }
            set
            {
                if (this._Messagecontent != value)
                {
                    this.OnMessagecontentChanging(value);
                    this.SendPropertyChanging();
                    this._Messagecontent = value;
                    this.SendPropertyChanged("Messagecontent");
                    this.OnMessagecontentChanged();
                }
            }
        }

        [Column(Name = @"message_date_entered", Storage = "_Messagedateentered", DbType = "datetime")]
        public System.Nullable<System.DateTime> Messagedateentered
        {
            get
            {
                return this._Messagedateentered;
            }
            set
            {
                if (this._Messagedateentered != value)
                {
                    this.OnMessagedateenteredChanging(value);
                    this.SendPropertyChanging();
                    this._Messagedateentered = value;
                    this.SendPropertyChanged("Messagedateentered");
                    this.OnMessagedateenteredChanged();
                }
            }
        }

        [Column(Name = @"message_last_reply_date", Storage = "_Messagelastreplydate", DbType = "datetime")]
        public System.Nullable<System.DateTime> Messagelastreplydate
        {
            get
            {
                return this._Messagelastreplydate;
            }
            set
            {
                if (this._Messagelastreplydate != value)
                {
                    this.OnMessagelastreplydateChanging(value);
                    this.SendPropertyChanging();
                    this._Messagelastreplydate = value;
                    this.SendPropertyChanged("Messagelastreplydate");
                    this.OnMessagelastreplydateChanged();
                }
            }
        }

        [Column(Name = @"message_child_count", Storage = "_Messagechildcount", DbType = "int(11)")]
        public System.Nullable<int> Messagechildcount
        {
            get
            {
                return this._Messagechildcount;
            }
            set
            {
                if (this._Messagechildcount != value)
                {
                    this.OnMessagechildcountChanging(value);
                    this.SendPropertyChanging();
                    this._Messagechildcount = value;
                    this.SendPropertyChanged("Messagechildcount");
                    this.OnMessagechildcountChanged();
                }
            }
        }

        [Column(Name = @"forum_id", Storage = "_Forumid", DbType = "int(11)")]
        public System.Nullable<int> Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"member_id_author", Storage = "_Memberidauthor", DbType = "int(11)")]
        public System.Nullable<int> Memberidauthor
        {
            get
            {
                return this._Memberidauthor;
            }
            set
            {
                if (this._Memberidauthor != value)
                {
                    this.OnMemberidauthorChanging(value);
                    this.SendPropertyChanging();
                    this._Memberidauthor = value;
                    this.SendPropertyChanged("Memberidauthor");
                    this.OnMemberidauthorChanged();
                }
            }
        }

        [Column(Name = @"message_author_email", Storage = "_Messageauthoremail", DbType = "varchar(100)")]
        public string Messageauthoremail
        {
            get
            {
                return this._Messageauthoremail;
            }
            set
            {
                if (this._Messageauthoremail != value)
                {
                    this.OnMessageauthoremailChanging(value);
                    this.SendPropertyChanging();
                    this._Messageauthoremail = value;
                    this.SendPropertyChanged("Messageauthoremail");
                    this.OnMessageauthoremailChanged();
                }
            }
        }

        [Column(Name = @"message_notify", Storage = "_Messagenotify", DbType = "int(11)")]
        public System.Nullable<int> Messagenotify
        {
            get
            {
                return this._Messagenotify;
            }
            set
            {
                if (this._Messagenotify != value)
                {
                    this.OnMessagenotifyChanging(value);
                    this.SendPropertyChanging();
                    this._Messagenotify = value;
                    this.SendPropertyChanged("Messagenotify");
                    this.OnMessagenotifyChanged();
                }
            }
        }

        [Column(Name = @"msg_icon", Storage = "_Msgicon", DbType = "varchar(32)")]
        public string Msgicon
        {
            get
            {
                return this._Msgicon;
            }
            set
            {
                if (this._Msgicon != value)
                {
                    this.OnMsgiconChanging(value);
                    this.SendPropertyChanging();
                    this._Msgicon = value;
                    this.SendPropertyChanged("Msgicon");
                    this.OnMsgiconChanged();
                }
            }
        }

        [Column(Name = @"message_approved", Storage = "_Messageapproved", DbType = "tinyint(2)")]
        public System.Nullable<short> Messageapproved
        {
            get
            {
                return this._Messageapproved;
            }
            set
            {
                if (this._Messageapproved != value)
                {
                    this.OnMessageapprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Messageapproved = value;
                    this.SendPropertyChanged("Messageapproved");
                    this.OnMessageapprovedChanged();
                }
            }
        }

        [Column(Name = @"remote_ip", Storage = "_Remoteip", DbType = "int(11)")]
        public System.Nullable<int> Remoteip
        {
            get
            {
                return this._Remoteip;
            }
            set
            {
                if (this._Remoteip != value)
                {
                    this.OnRemoteipChanging(value);
                    this.SendPropertyChanging();
                    this._Remoteip = value;
                    this.SendPropertyChanged("Remoteip");
                    this.OnRemoteipChanged();
                }
            }
        }

        [Column(Name = @"remote_host", Storage = "_Remotehost", DbType = "varchar(255)")]
        public string Remotehost
        {
            get
            {
                return this._Remotehost;
            }
            set
            {
                if (this._Remotehost != value)
                {
                    this.OnRemotehostChanging(value);
                    this.SendPropertyChanging();
                    this._Remotehost = value;
                    this.SendPropertyChanged("Remotehost");
                    this.OnRemotehostChanged();
                }
            }
        }

        [Column(Name = @"remote_proxy", Storage = "_Remoteproxy", DbType = "varchar(255)")]
        public string Remoteproxy
        {
            get
            {
                return this._Remoteproxy;
            }
            set
            {
                if (this._Remoteproxy != value)
                {
                    this.OnRemoteproxyChanging(value);
                    this.SendPropertyChanging();
                    this._Remoteproxy = value;
                    this.SendPropertyChanged("Remoteproxy");
                    this.OnRemoteproxyChanged();
                }
            }
        }

        [Column(Name = @"message_closed", Storage = "_Messageclosed", DbType = "tinyint(11)")]
        public System.Nullable<short> Messageclosed
        {
            get
            {
                return this._Messageclosed;
            }
            set
            {
                if (this._Messageclosed != value)
                {
                    this.OnMessageclosedChanging(value);
                    this.SendPropertyChanging();
                    this._Messageclosed = value;
                    this.SendPropertyChanged("Messageclosed");
                    this.OnMessageclosedChanged();
                }
            }
        }

        [Column(Name = @"sticky", Storage = "_Sticky", DbType = "tinyint(11)")]
        public System.Nullable<short> Sticky
        {
            get
            {
                return this._Sticky;
            }
            set
            {
                if (this._Sticky != value)
                {
                    this.OnStickyChanging(value);
                    this.SendPropertyChanging();
                    this._Sticky = value;
                    this.SendPropertyChanged("Sticky");
                    this.OnStickyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.messages_votes")]
    public partial class Messagesvote : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Messageid;

        private int _Messageauthorid;

        private int _Voteauthorid;

        private string _Voteauthorip;

        private System.DateTime _Votedatetime;

        private int _Votestars;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMessageidChanging(int value);
        partial void OnMessageidChanged();
        partial void OnMessageauthoridChanging(int value);
        partial void OnMessageauthoridChanged();
        partial void OnVoteauthoridChanging(int value);
        partial void OnVoteauthoridChanged();
        partial void OnVoteauthoripChanging(string value);
        partial void OnVoteauthoripChanged();
        partial void OnVotedatetimeChanging(System.DateTime value);
        partial void OnVotedatetimeChanged();
        partial void OnVotestarsChanging(int value);
        partial void OnVotestarsChanged();
        #endregion

        public Messagesvote()
        {
            OnCreated();
        }

        [Column(Name = @"message_id", Storage = "_Messageid", CanBeNull = false, DbType = "int(11) NOT NULL", IsPrimaryKey = true)]
        public int Messageid
        {
            get
            {
                return this._Messageid;
            }
            set
            {
                if (this._Messageid != value)
                {
                    this.OnMessageidChanging(value);
                    this.SendPropertyChanging();
                    this._Messageid = value;
                    this.SendPropertyChanged("Messageid");
                    this.OnMessageidChanged();
                }
            }
        }

        [Column(Name = @"message_author_id", Storage = "_Messageauthorid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Messageauthorid
        {
            get
            {
                return this._Messageauthorid;
            }
            set
            {
                if (this._Messageauthorid != value)
                {
                    this.OnMessageauthoridChanging(value);
                    this.SendPropertyChanging();
                    this._Messageauthorid = value;
                    this.SendPropertyChanged("Messageauthorid");
                    this.OnMessageauthoridChanged();
                }
            }
        }

        [Column(Name = @"vote_author_id", Storage = "_Voteauthorid", CanBeNull = false, DbType = "int(11) NOT NULL", IsPrimaryKey = true)]
        public int Voteauthorid
        {
            get
            {
                return this._Voteauthorid;
            }
            set
            {
                if (this._Voteauthorid != value)
                {
                    this.OnVoteauthoridChanging(value);
                    this.SendPropertyChanging();
                    this._Voteauthorid = value;
                    this.SendPropertyChanged("Voteauthorid");
                    this.OnVoteauthoridChanged();
                }
            }
        }

        [Column(Name = @"vote_author_ip", Storage = "_Voteauthorip", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Voteauthorip
        {
            get
            {
                return this._Voteauthorip;
            }
            set
            {
                if (this._Voteauthorip != value)
                {
                    this.OnVoteauthoripChanging(value);
                    this.SendPropertyChanging();
                    this._Voteauthorip = value;
                    this.SendPropertyChanged("Voteauthorip");
                    this.OnVoteauthoripChanged();
                }
            }
        }

        [Column(Name = @"vote_date_time", Storage = "_Votedatetime", CanBeNull = false, DbType = "datetime NOT NULL")]
        public System.DateTime Votedatetime
        {
            get
            {
                return this._Votedatetime;
            }
            set
            {
                if (this._Votedatetime != value)
                {
                    this.OnVotedatetimeChanging(value);
                    this.SendPropertyChanging();
                    this._Votedatetime = value;
                    this.SendPropertyChanged("Votedatetime");
                    this.OnVotedatetimeChanged();
                }
            }
        }

        [Column(Name = @"vote_stars", Storage = "_Votestars", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Votestars
        {
            get
            {
                return this._Votestars;
            }
            set
            {
                if (this._Votestars != value)
                {
                    this.OnVotestarsChanging(value);
                    this.SendPropertyChanging();
                    this._Votestars = value;
                    this.SendPropertyChanged("Votestars");
                    this.OnVotestarsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.news")]
    public partial class New : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Newsid;

        private string _Newshtml;

        private string _Authorname;

        private string _Authoremail;

        private string _Authorphone;

        private System.Nullable<System.DateTime> _Authornewsdate;

        private string _Newshtmlheader;

        private System.Nullable<short> _Newsapproved;

        private System.Nullable<double> _Payment;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNewsidChanging(int value);
        partial void OnNewsidChanged();
        partial void OnNewshtmlChanging(string value);
        partial void OnNewshtmlChanged();
        partial void OnAuthornameChanging(string value);
        partial void OnAuthornameChanged();
        partial void OnAuthoremailChanging(string value);
        partial void OnAuthoremailChanged();
        partial void OnAuthorphoneChanging(string value);
        partial void OnAuthorphoneChanged();
        partial void OnAuthornewsdateChanging(System.Nullable<System.DateTime> value);
        partial void OnAuthornewsdateChanged();
        partial void OnNewshtmlheaderChanging(string value);
        partial void OnNewshtmlheaderChanged();
        partial void OnNewsapprovedChanging(System.Nullable<short> value);
        partial void OnNewsapprovedChanged();
        partial void OnPaymentChanging(System.Nullable<double> value);
        partial void OnPaymentChanged();
        #endregion

        public New()
        {
            OnCreated();
        }

        [Column(Name = @"news_id", Storage = "_Newsid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Newsid
        {
            get
            {
                return this._Newsid;
            }
            set
            {
                if (this._Newsid != value)
                {
                    this.OnNewsidChanging(value);
                    this.SendPropertyChanging();
                    this._Newsid = value;
                    this.SendPropertyChanged("Newsid");
                    this.OnNewsidChanged();
                }
            }
        }

        [Column(Name = @"news_html", Storage = "_Newshtml", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Newshtml
        {
            get
            {
                return this._Newshtml;
            }
            set
            {
                if (this._Newshtml != value)
                {
                    this.OnNewshtmlChanging(value);
                    this.SendPropertyChanging();
                    this._Newshtml = value;
                    this.SendPropertyChanged("Newshtml");
                    this.OnNewshtmlChanged();
                }
            }
        }

        [Column(Name = @"author_name", Storage = "_Authorname", DbType = "varchar(128)")]
        public string Authorname
        {
            get
            {
                return this._Authorname;
            }
            set
            {
                if (this._Authorname != value)
                {
                    this.OnAuthornameChanging(value);
                    this.SendPropertyChanging();
                    this._Authorname = value;
                    this.SendPropertyChanged("Authorname");
                    this.OnAuthornameChanged();
                }
            }
        }

        [Column(Name = @"author_email", Storage = "_Authoremail", DbType = "varchar(128)")]
        public string Authoremail
        {
            get
            {
                return this._Authoremail;
            }
            set
            {
                if (this._Authoremail != value)
                {
                    this.OnAuthoremailChanging(value);
                    this.SendPropertyChanging();
                    this._Authoremail = value;
                    this.SendPropertyChanged("Authoremail");
                    this.OnAuthoremailChanged();
                }
            }
        }

        [Column(Name = @"author_phone", Storage = "_Authorphone", DbType = "varchar(32)")]
        public string Authorphone
        {
            get
            {
                return this._Authorphone;
            }
            set
            {
                if (this._Authorphone != value)
                {
                    this.OnAuthorphoneChanging(value);
                    this.SendPropertyChanging();
                    this._Authorphone = value;
                    this.SendPropertyChanged("Authorphone");
                    this.OnAuthorphoneChanged();
                }
            }
        }

        [Column(Name = @"author_news_date", Storage = "_Authornewsdate", DbType = "date")]
        public System.Nullable<System.DateTime> Authornewsdate
        {
            get
            {
                return this._Authornewsdate;
            }
            set
            {
                if (this._Authornewsdate != value)
                {
                    this.OnAuthornewsdateChanging(value);
                    this.SendPropertyChanging();
                    this._Authornewsdate = value;
                    this.SendPropertyChanged("Authornewsdate");
                    this.OnAuthornewsdateChanged();
                }
            }
        }

        [Column(Name = @"news_html_header", Storage = "_Newshtmlheader", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Newshtmlheader
        {
            get
            {
                return this._Newshtmlheader;
            }
            set
            {
                if (this._Newshtmlheader != value)
                {
                    this.OnNewshtmlheaderChanging(value);
                    this.SendPropertyChanging();
                    this._Newshtmlheader = value;
                    this.SendPropertyChanged("Newshtmlheader");
                    this.OnNewshtmlheaderChanged();
                }
            }
        }

        [Column(Name = @"news_approved", Storage = "_Newsapproved", DbType = "tinyint(1)")]
        public System.Nullable<short> Newsapproved
        {
            get
            {
                return this._Newsapproved;
            }
            set
            {
                if (this._Newsapproved != value)
                {
                    this.OnNewsapprovedChanging(value);
                    this.SendPropertyChanging();
                    this._Newsapproved = value;
                    this.SendPropertyChanged("Newsapproved");
                    this.OnNewsapprovedChanged();
                }
            }
        }

        [Column(Name = @"payment", Storage = "_Payment", DbType = "double(12,3)")]
        public System.Nullable<double> Payment
        {
            get
            {
                return this._Payment;
            }
            set
            {
                if (this._Payment != value)
                {
                    this.OnPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._Payment = value;
                    this.SendPropertyChanged("Payment");
                    this.OnPaymentChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.newsletter_subscriptions")]
    public partial class Newslettersubscription : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Subscid;

        private System.Nullable<int> _Memberid;

        private System.Nullable<int> _Newsletterid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscidChanging(int value);
        partial void OnSubscidChanged();
        partial void OnMemberidChanging(System.Nullable<int> value);
        partial void OnMemberidChanged();
        partial void OnNewsletteridChanging(System.Nullable<int> value);
        partial void OnNewsletteridChanged();
        #endregion

        public Newslettersubscription()
        {
            OnCreated();
        }

        [Column(Name = @"subsc_id", Storage = "_Subscid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Subscid
        {
            get
            {
                return this._Subscid;
            }
            set
            {
                if (this._Subscid != value)
                {
                    this.OnSubscidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscid = value;
                    this.SendPropertyChanged("Subscid");
                    this.OnSubscidChanged();
                }
            }
        }

        [Column(Name = @"member_id", Storage = "_Memberid", DbType = "int(11)")]
        public System.Nullable<int> Memberid
        {
            get
            {
                return this._Memberid;
            }
            set
            {
                if (this._Memberid != value)
                {
                    this.OnMemberidChanging(value);
                    this.SendPropertyChanging();
                    this._Memberid = value;
                    this.SendPropertyChanged("Memberid");
                    this.OnMemberidChanged();
                }
            }
        }

        [Column(Name = @"newsletter_id", Storage = "_Newsletterid", DbType = "int(11)")]
        public System.Nullable<int> Newsletterid
        {
            get
            {
                return this._Newsletterid;
            }
            set
            {
                if (this._Newsletterid != value)
                {
                    this.OnNewsletteridChanging(value);
                    this.SendPropertyChanging();
                    this._Newsletterid = value;
                    this.SendPropertyChanged("Newsletterid");
                    this.OnNewsletteridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.newsletters")]
    public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Newsletterid;

        private string _Newslettername;

        private System.Nullable<System.DateTime> _Newsletterlastsent;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNewsletteridChanging(int value);
        partial void OnNewsletteridChanged();
        partial void OnNewsletternameChanging(string value);
        partial void OnNewsletternameChanged();
        partial void OnNewsletterlastsentChanging(System.Nullable<System.DateTime> value);
        partial void OnNewsletterlastsentChanged();
        #endregion

        public Newsletter()
        {
            OnCreated();
        }

        [Column(Name = @"newsletter_id", Storage = "_Newsletterid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Newsletterid
        {
            get
            {
                return this._Newsletterid;
            }
            set
            {
                if (this._Newsletterid != value)
                {
                    this.OnNewsletteridChanging(value);
                    this.SendPropertyChanging();
                    this._Newsletterid = value;
                    this.SendPropertyChanged("Newsletterid");
                    this.OnNewsletteridChanged();
                }
            }
        }

        [Column(Name = @"newsletter_name", Storage = "_Newslettername", DbType = "char(150)")]
        public string Newslettername
        {
            get
            {
                return this._Newslettername;
            }
            set
            {
                if (this._Newslettername != value)
                {
                    this.OnNewsletternameChanging(value);
                    this.SendPropertyChanging();
                    this._Newslettername = value;
                    this.SendPropertyChanged("Newslettername");
                    this.OnNewsletternameChanged();
                }
            }
        }

        [Column(Name = @"newsletter_last_sent", Storage = "_Newsletterlastsent", DbType = "datetime")]
        public System.Nullable<System.DateTime> Newsletterlastsent
        {
            get
            {
                return this._Newsletterlastsent;
            }
            set
            {
                if (this._Newsletterlastsent != value)
                {
                    this.OnNewsletterlastsentChanging(value);
                    this.SendPropertyChanging();
                    this._Newsletterlastsent = value;
                    this.SendPropertyChanged("Newsletterlastsent");
                    this.OnNewsletterlastsentChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.poll_answers")]
    public partial class Pollanswer : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Answerid;

        private System.Nullable<int> _Pollid;

        private string _Answercontent;

        private System.Nullable<int> _Answercount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnsweridChanging(int value);
        partial void OnAnsweridChanged();
        partial void OnPollidChanging(System.Nullable<int> value);
        partial void OnPollidChanged();
        partial void OnAnswercontentChanging(string value);
        partial void OnAnswercontentChanged();
        partial void OnAnswercountChanging(System.Nullable<int> value);
        partial void OnAnswercountChanged();
        #endregion

        public Pollanswer()
        {
            OnCreated();
        }

        [Column(Name = @"answer_id", Storage = "_Answerid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Answerid
        {
            get
            {
                return this._Answerid;
            }
            set
            {
                if (this._Answerid != value)
                {
                    this.OnAnsweridChanging(value);
                    this.SendPropertyChanging();
                    this._Answerid = value;
                    this.SendPropertyChanged("Answerid");
                    this.OnAnsweridChanged();
                }
            }
        }

        [Column(Name = @"poll_id", Storage = "_Pollid", DbType = "int(11)")]
        public System.Nullable<int> Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"answer_content", Storage = "_Answercontent", DbType = "char(50)")]
        public string Answercontent
        {
            get
            {
                return this._Answercontent;
            }
            set
            {
                if (this._Answercontent != value)
                {
                    this.OnAnswercontentChanging(value);
                    this.SendPropertyChanging();
                    this._Answercontent = value;
                    this.SendPropertyChanged("Answercontent");
                    this.OnAnswercontentChanged();
                }
            }
        }

        [Column(Name = @"answer_count", Storage = "_Answercount", DbType = "int(11)")]
        public System.Nullable<int> Answercount
        {
            get
            {
                return this._Answercount;
            }
            set
            {
                if (this._Answercount != value)
                {
                    this.OnAnswercountChanging(value);
                    this.SendPropertyChanging();
                    this._Answercount = value;
                    this.SendPropertyChanged("Answercount");
                    this.OnAnswercountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.poll_votes")]
    public partial class Pollvote : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Voteid;

        private System.Nullable<int> _Pollid;

        private System.Nullable<int> _Answerid;

        private System.Nullable<int> _Userid;

        private string _Voteip;

        private System.Nullable<System.DateTime> _Votedate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVoteidChanging(int value);
        partial void OnVoteidChanged();
        partial void OnPollidChanging(System.Nullable<int> value);
        partial void OnPollidChanged();
        partial void OnAnsweridChanging(System.Nullable<int> value);
        partial void OnAnsweridChanged();
        partial void OnUseridChanging(System.Nullable<int> value);
        partial void OnUseridChanged();
        partial void OnVoteipChanging(string value);
        partial void OnVoteipChanged();
        partial void OnVotedateChanging(System.Nullable<System.DateTime> value);
        partial void OnVotedateChanged();
        #endregion

        public Pollvote()
        {
            OnCreated();
        }

        [Column(Name = @"vote_id", Storage = "_Voteid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Voteid
        {
            get
            {
                return this._Voteid;
            }
            set
            {
                if (this._Voteid != value)
                {
                    this.OnVoteidChanging(value);
                    this.SendPropertyChanging();
                    this._Voteid = value;
                    this.SendPropertyChanged("Voteid");
                    this.OnVoteidChanged();
                }
            }
        }

        [Column(Name = @"poll_id", Storage = "_Pollid", DbType = "int(11)")]
        public System.Nullable<int> Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"answer_id", Storage = "_Answerid", DbType = "int(11)")]
        public System.Nullable<int> Answerid
        {
            get
            {
                return this._Answerid;
            }
            set
            {
                if (this._Answerid != value)
                {
                    this.OnAnsweridChanging(value);
                    this.SendPropertyChanging();
                    this._Answerid = value;
                    this.SendPropertyChanged("Answerid");
                    this.OnAnsweridChanged();
                }
            }
        }

        [Column(Name = @"user_id", Storage = "_Userid", DbType = "int(11)")]
        public System.Nullable<int> Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"vote_ip", Storage = "_Voteip", DbType = "char(50)")]
        public string Voteip
        {
            get
            {
                return this._Voteip;
            }
            set
            {
                if (this._Voteip != value)
                {
                    this.OnVoteipChanging(value);
                    this.SendPropertyChanging();
                    this._Voteip = value;
                    this.SendPropertyChanged("Voteip");
                    this.OnVoteipChanged();
                }
            }
        }

        [Column(Name = @"vote_date", Storage = "_Votedate", DbType = "datetime")]
        public System.Nullable<System.DateTime> Votedate
        {
            get
            {
                return this._Votedate;
            }
            set
            {
                if (this._Votedate != value)
                {
                    this.OnVotedateChanging(value);
                    this.SendPropertyChanging();
                    this._Votedate = value;
                    this.SendPropertyChanged("Votedate");
                    this.OnVotedateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.polls")]
    public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Pollid;

        private string _Pollquestion;

        private System.Nullable<System.DateTime> _Polldate;

        private System.Nullable<int> _Pollactive;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPollidChanging(int value);
        partial void OnPollidChanged();
        partial void OnPollquestionChanging(string value);
        partial void OnPollquestionChanged();
        partial void OnPolldateChanging(System.Nullable<System.DateTime> value);
        partial void OnPolldateChanged();
        partial void OnPollactiveChanging(System.Nullable<int> value);
        partial void OnPollactiveChanged();
        #endregion

        public Poll()
        {
            OnCreated();
        }

        [Column(Name = @"poll_id", Storage = "_Pollid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"poll_question", Storage = "_Pollquestion", DbType = "char(255)")]
        public string Pollquestion
        {
            get
            {
                return this._Pollquestion;
            }
            set
            {
                if (this._Pollquestion != value)
                {
                    this.OnPollquestionChanging(value);
                    this.SendPropertyChanging();
                    this._Pollquestion = value;
                    this.SendPropertyChanged("Pollquestion");
                    this.OnPollquestionChanged();
                }
            }
        }

        [Column(Name = @"poll_date", Storage = "_Polldate", DbType = "datetime")]
        public System.Nullable<System.DateTime> Polldate
        {
            get
            {
                return this._Polldate;
            }
            set
            {
                if (this._Polldate != value)
                {
                    this.OnPolldateChanging(value);
                    this.SendPropertyChanging();
                    this._Polldate = value;
                    this.SendPropertyChanged("Polldate");
                    this.OnPolldateChanged();
                }
            }
        }

        [Column(Name = @"poll_active", Storage = "_Pollactive", DbType = "int(11)")]
        public System.Nullable<int> Pollactive
        {
            get
            {
                return this._Pollactive;
            }
            set
            {
                if (this._Pollactive != value)
                {
                    this.OnPollactiveChanging(value);
                    this.SendPropertyChanging();
                    this._Pollactive = value;
                    this.SendPropertyChanged("Pollactive");
                    this.OnPollactiveChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.ratings")]
    public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private int _Article;

        private int _Rate;

        private string _Ip;

        private System.DateTime _Datum;

        private string _Votermemberlogin;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnArticleChanging(int value);
        partial void OnArticleChanged();
        partial void OnRateChanging(int value);
        partial void OnRateChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnDatumChanging(System.DateTime value);
        partial void OnDatumChanged();
        partial void OnVotermemberloginChanging(string value);
        partial void OnVotermemberloginChanged();
        #endregion

        public Rating()
        {
            OnCreated();
        }

        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Name = @"article", Storage = "_Article", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Article
        {
            get
            {
                return this._Article;
            }
            set
            {
                if (this._Article != value)
                {
                    this.OnArticleChanging(value);
                    this.SendPropertyChanging();
                    this._Article = value;
                    this.SendPropertyChanged("Article");
                    this.OnArticleChanged();
                }
            }
        }

        [Column(Name = @"rate", Storage = "_Rate", CanBeNull = false, DbType = "int(2) NOT NULL")]
        public int Rate
        {
            get
            {
                return this._Rate;
            }
            set
            {
                if (this._Rate != value)
                {
                    this.OnRateChanging(value);
                    this.SendPropertyChanging();
                    this._Rate = value;
                    this.SendPropertyChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }

        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

        [Column(Name = @"datum", Storage = "_Datum", CanBeNull = false, DbType = "timestamp NOT NULL")]
        public System.DateTime Datum
        {
            get
            {
                return this._Datum;
            }
            set
            {
                if (this._Datum != value)
                {
                    this.OnDatumChanging(value);
                    this.SendPropertyChanging();
                    this._Datum = value;
                    this.SendPropertyChanged("Datum");
                    this.OnDatumChanged();
                }
            }
        }

        [Column(Name = @"voter_member_login", Storage = "_Votermemberlogin", DbType = "varchar(255)")]
        public string Votermemberlogin
        {
            get
            {
                return this._Votermemberlogin;
            }
            set
            {
                if (this._Votermemberlogin != value)
                {
                    this.OnVotermemberloginChanging(value);
                    this.SendPropertyChanging();
                    this._Votermemberlogin = value;
                    this.SendPropertyChanged("Votermemberlogin");
                    this.OnVotermemberloginChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.stat_days")]
    public partial class Statday : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Dayid;

        private System.Nullable<System.DateTime> _Daydate;

        private System.Nullable<int> _Dayvisits;

        private System.Nullable<int> _Daypages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDayidChanging(int value);
        partial void OnDayidChanged();
        partial void OnDaydateChanging(System.Nullable<System.DateTime> value);
        partial void OnDaydateChanged();
        partial void OnDayvisitsChanging(System.Nullable<int> value);
        partial void OnDayvisitsChanged();
        partial void OnDaypagesChanging(System.Nullable<int> value);
        partial void OnDaypagesChanged();
        #endregion

        public Statday()
        {
            OnCreated();
        }

        [Column(Name = @"day_id", Storage = "_Dayid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Dayid
        {
            get
            {
                return this._Dayid;
            }
            set
            {
                if (this._Dayid != value)
                {
                    this.OnDayidChanging(value);
                    this.SendPropertyChanging();
                    this._Dayid = value;
                    this.SendPropertyChanged("Dayid");
                    this.OnDayidChanged();
                }
            }
        }

        [Column(Name = @"day_date", Storage = "_Daydate", DbType = "datetime")]
        public System.Nullable<System.DateTime> Daydate
        {
            get
            {
                return this._Daydate;
            }
            set
            {
                if (this._Daydate != value)
                {
                    this.OnDaydateChanging(value);
                    this.SendPropertyChanging();
                    this._Daydate = value;
                    this.SendPropertyChanged("Daydate");
                    this.OnDaydateChanged();
                }
            }
        }

        [Column(Name = @"day_visits", Storage = "_Dayvisits", DbType = "int(11)")]
        public System.Nullable<int> Dayvisits
        {
            get
            {
                return this._Dayvisits;
            }
            set
            {
                if (this._Dayvisits != value)
                {
                    this.OnDayvisitsChanging(value);
                    this.SendPropertyChanging();
                    this._Dayvisits = value;
                    this.SendPropertyChanged("Dayvisits");
                    this.OnDayvisitsChanged();
                }
            }
        }

        [Column(Name = @"day_pages", Storage = "_Daypages", DbType = "int(11)")]
        public System.Nullable<int> Daypages
        {
            get
            {
                return this._Daypages;
            }
            set
            {
                if (this._Daypages != value)
                {
                    this.OnDaypagesChanging(value);
                    this.SendPropertyChanging();
                    this._Daypages = value;
                    this.SendPropertyChanged("Daypages");
                    this.OnDaypagesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.stat_visits")]
    public partial class Statvisit : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Visitid;

        private string _Visiturl;

        private string _Visitip;

        private System.Nullable<System.DateTime> _Visitdate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVisitidChanging(int value);
        partial void OnVisitidChanged();
        partial void OnVisiturlChanging(string value);
        partial void OnVisiturlChanged();
        partial void OnVisitipChanging(string value);
        partial void OnVisitipChanged();
        partial void OnVisitdateChanging(System.Nullable<System.DateTime> value);
        partial void OnVisitdateChanged();
        #endregion

        public Statvisit()
        {
            OnCreated();
        }

        [Column(Name = @"visit_id", Storage = "_Visitid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Visitid
        {
            get
            {
                return this._Visitid;
            }
            set
            {
                if (this._Visitid != value)
                {
                    this.OnVisitidChanging(value);
                    this.SendPropertyChanging();
                    this._Visitid = value;
                    this.SendPropertyChanged("Visitid");
                    this.OnVisitidChanged();
                }
            }
        }

        [Column(Name = @"visit_url", Storage = "_Visiturl", DbType = "char(255)")]
        public string Visiturl
        {
            get
            {
                return this._Visiturl;
            }
            set
            {
                if (this._Visiturl != value)
                {
                    this.OnVisiturlChanging(value);
                    this.SendPropertyChanging();
                    this._Visiturl = value;
                    this.SendPropertyChanged("Visiturl");
                    this.OnVisiturlChanged();
                }
            }
        }

        [Column(Name = @"visit_ip", Storage = "_Visitip", DbType = "char(16)")]
        public string Visitip
        {
            get
            {
                return this._Visitip;
            }
            set
            {
                if (this._Visitip != value)
                {
                    this.OnVisitipChanging(value);
                    this.SendPropertyChanging();
                    this._Visitip = value;
                    this.SendPropertyChanged("Visitip");
                    this.OnVisitipChanged();
                }
            }
        }

        [Column(Name = @"visit_date", Storage = "_Visitdate", DbType = "datetime")]
        public System.Nullable<System.DateTime> Visitdate
        {
            get
            {
                return this._Visitdate;
            }
            set
            {
                if (this._Visitdate != value)
                {
                    this.OnVisitdateChanging(value);
                    this.SendPropertyChanging();
                    this._Visitdate = value;
                    this.SendPropertyChanged("Visitdate");
                    this.OnVisitdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"`4so9`.tg_whos_online")]
    public partial class Tgwhosonline : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private int _Timestamp;

        private string _Ip;

        private string _File;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnTimestampChanging(int value);
        partial void OnTimestampChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnFileChanging(string value);
        partial void OnFileChanged();
        #endregion

        public Tgwhosonline()
        {
            OnCreated();
        }

        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Name = @"timestamp", Storage = "_Timestamp", CanBeNull = false, DbType = "int(15) NOT NULL")]
        public int Timestamp
        {
            get
            {
                return this._Timestamp;
            }
            set
            {
                if (this._Timestamp != value)
                {
                    this.OnTimestampChanging(value);
                    this.SendPropertyChanging();
                    this._Timestamp = value;
                    this.SendPropertyChanged("Timestamp");
                    this.OnTimestampChanged();
                }
            }
        }

        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "varchar(40) NOT NULL")]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

        [Column(Name = @"file", Storage = "_File", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string File
        {
            get
            {
                return this._File;
            }
            set
            {
                if (this._File != value)
                {
                    this.OnFileChanging(value);
                    this.SendPropertyChanging();
                    this._File = value;
                    this.SendPropertyChanged("File");
                    this.OnFileChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
