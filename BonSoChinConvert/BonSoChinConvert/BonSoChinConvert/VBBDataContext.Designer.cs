//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 5/7/2010 8:13:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace VBBContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "forum")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class VBBDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertAccess(Access instance);
        partial void UpdateAccess(Access instance);
        partial void DeleteAccess(Access instance);
        partial void InsertAction(Action instance);
        partial void UpdateAction(Action instance);
        partial void DeleteAction(Action instance);
        partial void InsertAd(Ad instance);
        partial void UpdateAd(Ad instance);
        partial void DeleteAd(Ad instance);
        partial void InsertAdcriteria(Adcriteria instance);
        partial void UpdateAdcriteria(Adcriteria instance);
        partial void DeleteAdcriteria(Adcriteria instance);
        partial void InsertAdminhelp(Adminhelp instance);
        partial void UpdateAdminhelp(Adminhelp instance);
        partial void DeleteAdminhelp(Adminhelp instance);
        partial void InsertAdministrator(Administrator instance);
        partial void UpdateAdministrator(Administrator instance);
        partial void DeleteAdministrator(Administrator instance);
        partial void InsertAdminlog(Adminlog instance);
        partial void UpdateAdminlog(Adminlog instance);
        partial void DeleteAdminlog(Adminlog instance);
        partial void InsertAdminmessage(Adminmessage instance);
        partial void UpdateAdminmessage(Adminmessage instance);
        partial void DeleteAdminmessage(Adminmessage instance);
        partial void InsertAdminutil(Adminutil instance);
        partial void UpdateAdminutil(Adminutil instance);
        partial void DeleteAdminutil(Adminutil instance);
        partial void InsertAlbum(Album instance);
        partial void UpdateAlbum(Album instance);
        partial void DeleteAlbum(Album instance);
        partial void InsertAlbumupdate(Albumupdate instance);
        partial void UpdateAlbumupdate(Albumupdate instance);
        partial void DeleteAlbumupdate(Albumupdate instance);
        partial void InsertAnnouncement(Announcement instance);
        partial void UpdateAnnouncement(Announcement instance);
        partial void DeleteAnnouncement(Announcement instance);
        partial void InsertAnnouncementread(Announcementread instance);
        partial void UpdateAnnouncementread(Announcementread instance);
        partial void DeleteAnnouncementread(Announcementread instance);
        partial void InsertAttachment(Attachment instance);
        partial void UpdateAttachment(Attachment instance);
        partial void DeleteAttachment(Attachment instance);
        partial void InsertAttachmentcategory(Attachmentcategory instance);
        partial void UpdateAttachmentcategory(Attachmentcategory instance);
        partial void DeleteAttachmentcategory(Attachmentcategory instance);
        partial void InsertAttachmentcategoryuser(Attachmentcategoryuser instance);
        partial void UpdateAttachmentcategoryuser(Attachmentcategoryuser instance);
        partial void DeleteAttachmentcategoryuser(Attachmentcategoryuser instance);
        partial void InsertAttachmentpermission(Attachmentpermission instance);
        partial void UpdateAttachmentpermission(Attachmentpermission instance);
        partial void DeleteAttachmentpermission(Attachmentpermission instance);
        partial void InsertAttachmenttype(Attachmenttype instance);
        partial void UpdateAttachmenttype(Attachmenttype instance);
        partial void DeleteAttachmenttype(Attachmenttype instance);
        partial void InsertAttachmentview(Attachmentview instance);
        partial void UpdateAttachmentview(Attachmentview instance);
        partial void DeleteAttachmentview(Attachmentview instance);
        partial void InsertAvatar(Avatar instance);
        partial void UpdateAvatar(Avatar instance);
        partial void DeleteAvatar(Avatar instance);
        partial void InsertBbcode(Bbcode instance);
        partial void UpdateBbcode(Bbcode instance);
        partial void DeleteBbcode(Bbcode instance);
        partial void InsertBbcodevideo(Bbcodevideo instance);
        partial void UpdateBbcodevideo(Bbcodevideo instance);
        partial void DeleteBbcodevideo(Bbcodevideo instance);
        partial void InsertBlock(Block instance);
        partial void UpdateBlock(Block instance);
        partial void DeleteBlock(Block instance);
        partial void InsertBlockconfig(Blockconfig instance);
        partial void UpdateBlockconfig(Blockconfig instance);
        partial void DeleteBlockconfig(Blockconfig instance);
        partial void InsertBlocktype(Blocktype instance);
        partial void UpdateBlocktype(Blocktype instance);
        partial void DeleteBlocktype(Blocktype instance);
        partial void InsertBlog(Blog instance);
        partial void UpdateBlog(Blog instance);
        partial void DeleteBlog(Blog instance);
        partial void InsertBlogattachment(Blogattachment instance);
        partial void UpdateBlogattachment(Blogattachment instance);
        partial void DeleteBlogattachment(Blogattachment instance);
        partial void InsertBlogattachmentview(Blogattachmentview instance);
        partial void UpdateBlogattachmentview(Blogattachmentview instance);
        partial void DeleteBlogattachmentview(Blogattachmentview instance);
        partial void InsertBlogcategory(Blogcategory instance);
        partial void UpdateBlogcategory(Blogcategory instance);
        partial void DeleteBlogcategory(Blogcategory instance);
        partial void InsertBlogcategorypermission(Blogcategorypermission instance);
        partial void UpdateBlogcategorypermission(Blogcategorypermission instance);
        partial void DeleteBlogcategorypermission(Blogcategorypermission instance);
        partial void InsertBlogcategoryuser(Blogcategoryuser instance);
        partial void UpdateBlogcategoryuser(Blogcategoryuser instance);
        partial void DeleteBlogcategoryuser(Blogcategoryuser instance);
        partial void InsertBlogcustomblock(Blogcustomblock instance);
        partial void UpdateBlogcustomblock(Blogcustomblock instance);
        partial void DeleteBlogcustomblock(Blogcustomblock instance);
        partial void InsertBlogcustomblockparsed(Blogcustomblockparsed instance);
        partial void UpdateBlogcustomblockparsed(Blogcustomblockparsed instance);
        partial void DeleteBlogcustomblockparsed(Blogcustomblockparsed instance);
        partial void InsertBlogdeletionlog(Blogdeletionlog instance);
        partial void UpdateBlogdeletionlog(Blogdeletionlog instance);
        partial void DeleteBlogdeletionlog(Blogdeletionlog instance);
        partial void InsertBlogeditlog(Blogeditlog instance);
        partial void UpdateBlogeditlog(Blogeditlog instance);
        partial void DeleteBlogeditlog(Blogeditlog instance);
        partial void InsertBlogfeatured(Blogfeatured instance);
        partial void UpdateBlogfeatured(Blogfeatured instance);
        partial void DeleteBlogfeatured(Blogfeatured instance);
        partial void InsertBloggroupmembership(Bloggroupmembership instance);
        partial void UpdateBloggroupmembership(Bloggroupmembership instance);
        partial void DeleteBloggroupmembership(Bloggroupmembership instance);
        partial void InsertBloggrouppermission(Bloggrouppermission instance);
        partial void UpdateBloggrouppermission(Bloggrouppermission instance);
        partial void DeleteBloggrouppermission(Bloggrouppermission instance);
        partial void InsertBloghash(Bloghash instance);
        partial void UpdateBloghash(Bloghash instance);
        partial void DeleteBloghash(Bloghash instance);
        partial void InsertBlogmoderation(Blogmoderation instance);
        partial void UpdateBlogmoderation(Blogmoderation instance);
        partial void DeleteBlogmoderation(Blogmoderation instance);
        partial void InsertBlogmoderator(Blogmoderator instance);
        partial void UpdateBlogmoderator(Blogmoderator instance);
        partial void DeleteBlogmoderator(Blogmoderator instance);
        partial void InsertBlogpinghistory(Blogpinghistory instance);
        partial void UpdateBlogpinghistory(Blogpinghistory instance);
        partial void DeleteBlogpinghistory(Blogpinghistory instance);
        partial void InsertBlograte(Blograte instance);
        partial void UpdateBlograte(Blograte instance);
        partial void DeleteBlograte(Blograte instance);
        partial void InsertBlogread(Blogread instance);
        partial void UpdateBlogread(Blogread instance);
        partial void DeleteBlogread(Blogread instance);
        partial void InsertBlogrelationship(Blogrelationship instance);
        partial void UpdateBlogrelationship(Blogrelationship instance);
        partial void DeleteBlogrelationship(Blogrelationship instance);
        partial void InsertBlogsearch(Blogsearch instance);
        partial void UpdateBlogsearch(Blogsearch instance);
        partial void DeleteBlogsearch(Blogsearch instance);
        partial void InsertBlogsearchresult(Blogsearchresult instance);
        partial void UpdateBlogsearchresult(Blogsearchresult instance);
        partial void DeleteBlogsearchresult(Blogsearchresult instance);
        partial void InsertBlogsubscribeentry(Blogsubscribeentry instance);
        partial void UpdateBlogsubscribeentry(Blogsubscribeentry instance);
        partial void DeleteBlogsubscribeentry(Blogsubscribeentry instance);
        partial void InsertBlogsubscribeuser(Blogsubscribeuser instance);
        partial void UpdateBlogsubscribeuser(Blogsubscribeuser instance);
        partial void DeleteBlogsubscribeuser(Blogsubscribeuser instance);
        partial void InsertBlogsummarystat(Blogsummarystat instance);
        partial void UpdateBlogsummarystat(Blogsummarystat instance);
        partial void DeleteBlogsummarystat(Blogsummarystat instance);
        partial void InsertBlogtachyentry(Blogtachyentry instance);
        partial void UpdateBlogtachyentry(Blogtachyentry instance);
        partial void DeleteBlogtachyentry(Blogtachyentry instance);
        partial void InsertBlogtext(Blogtext instance);
        partial void UpdateBlogtext(Blogtext instance);
        partial void DeleteBlogtext(Blogtext instance);
        partial void InsertBlogtextparsed(Blogtextparsed instance);
        partial void UpdateBlogtextparsed(Blogtextparsed instance);
        partial void DeleteBlogtextparsed(Blogtextparsed instance);
        partial void InsertBlogtrackback(Blogtrackback instance);
        partial void UpdateBlogtrackback(Blogtrackback instance);
        partial void DeleteBlogtrackback(Blogtrackback instance);
        partial void InsertBlogtrackbacklog(Blogtrackbacklog instance);
        partial void UpdateBlogtrackbacklog(Blogtrackbacklog instance);
        partial void DeleteBlogtrackbacklog(Blogtrackbacklog instance);
        partial void InsertBloguser(Bloguser instance);
        partial void UpdateBloguser(Bloguser instance);
        partial void DeleteBloguser(Bloguser instance);
        partial void InsertBlogusercss(Blogusercss instance);
        partial void UpdateBlogusercss(Blogusercss instance);
        partial void DeleteBlogusercss(Blogusercss instance);
        partial void InsertBlogusercsscache(Blogusercsscache instance);
        partial void UpdateBlogusercsscache(Blogusercsscache instance);
        partial void DeleteBlogusercsscache(Blogusercsscache instance);
        partial void InsertBloguserread(Bloguserread instance);
        partial void UpdateBloguserread(Bloguserread instance);
        partial void DeleteBloguserread(Bloguserread instance);
        partial void InsertBloguserstat(Bloguserstat instance);
        partial void UpdateBloguserstat(Bloguserstat instance);
        partial void DeleteBloguserstat(Bloguserstat instance);
        partial void InsertBlogview(Blogview instance);
        partial void UpdateBlogview(Blogview instance);
        partial void DeleteBlogview(Blogview instance);
        partial void InsertBlogvisitor(Blogvisitor instance);
        partial void UpdateBlogvisitor(Blogvisitor instance);
        partial void DeleteBlogvisitor(Blogvisitor instance);
        partial void InsertBookmarksite(Bookmarksite instance);
        partial void UpdateBookmarksite(Bookmarksite instance);
        partial void DeleteBookmarksite(Bookmarksite instance);
        partial void InsertCache(Cache instance);
        partial void UpdateCache(Cache instance);
        partial void DeleteCache(Cache instance);
        partial void InsertCacheevent(Cacheevent instance);
        partial void UpdateCacheevent(Cacheevent instance);
        partial void DeleteCacheevent(Cacheevent instance);
        partial void InsertCalendar(Calendar instance);
        partial void UpdateCalendar(Calendar instance);
        partial void DeleteCalendar(Calendar instance);
        partial void InsertCalendarcustomfield(Calendarcustomfield instance);
        partial void UpdateCalendarcustomfield(Calendarcustomfield instance);
        partial void DeleteCalendarcustomfield(Calendarcustomfield instance);
        partial void InsertCalendarmoderator(Calendarmoderator instance);
        partial void UpdateCalendarmoderator(Calendarmoderator instance);
        partial void DeleteCalendarmoderator(Calendarmoderator instance);
        partial void InsertCalendarpermission(Calendarpermission instance);
        partial void UpdateCalendarpermission(Calendarpermission instance);
        partial void DeleteCalendarpermission(Calendarpermission instance);
        partial void InsertCmsarticle(Cmsarticle instance);
        partial void UpdateCmsarticle(Cmsarticle instance);
        partial void DeleteCmsarticle(Cmsarticle instance);
        partial void InsertCmscategory(Cmscategory instance);
        partial void UpdateCmscategory(Cmscategory instance);
        partial void DeleteCmscategory(Cmscategory instance);
        partial void InsertCmsgrid(Cmsgrid instance);
        partial void UpdateCmsgrid(Cmsgrid instance);
        partial void DeleteCmsgrid(Cmsgrid instance);
        partial void InsertCmslayout(Cmslayout instance);
        partial void UpdateCmslayout(Cmslayout instance);
        partial void DeleteCmslayout(Cmslayout instance);
        partial void InsertCmslayoutwidget(Cmslayoutwidget instance);
        partial void UpdateCmslayoutwidget(Cmslayoutwidget instance);
        partial void DeleteCmslayoutwidget(Cmslayoutwidget instance);
        partial void InsertCmsnavigation(Cmsnavigation instance);
        partial void UpdateCmsnavigation(Cmsnavigation instance);
        partial void DeleteCmsnavigation(Cmsnavigation instance);
        partial void InsertCmsnode(Cmsnode instance);
        partial void UpdateCmsnode(Cmsnode instance);
        partial void DeleteCmsnode(Cmsnode instance);
        partial void InsertCmsnodecategory(Cmsnodecategory instance);
        partial void UpdateCmsnodecategory(Cmsnodecategory instance);
        partial void DeleteCmsnodecategory(Cmsnodecategory instance);
        partial void InsertCmsnodeconfig(Cmsnodeconfig instance);
        partial void UpdateCmsnodeconfig(Cmsnodeconfig instance);
        partial void DeleteCmsnodeconfig(Cmsnodeconfig instance);
        partial void InsertCmsnodeinfo(Cmsnodeinfo instance);
        partial void UpdateCmsnodeinfo(Cmsnodeinfo instance);
        partial void DeleteCmsnodeinfo(Cmsnodeinfo instance);
        partial void InsertCmspermission(Cmspermission instance);
        partial void UpdateCmspermission(Cmspermission instance);
        partial void DeleteCmspermission(Cmspermission instance);
        partial void InsertCmsrate(Cmsrate instance);
        partial void UpdateCmsrate(Cmsrate instance);
        partial void DeleteCmsrate(Cmsrate instance);
        partial void InsertCmssectionorder(Cmssectionorder instance);
        partial void UpdateCmssectionorder(Cmssectionorder instance);
        partial void DeleteCmssectionorder(Cmssectionorder instance);
        partial void InsertCmswidget(Cmswidget instance);
        partial void UpdateCmswidget(Cmswidget instance);
        partial void DeleteCmswidget(Cmswidget instance);
        partial void InsertCmswidgetconfig(Cmswidgetconfig instance);
        partial void UpdateCmswidgetconfig(Cmswidgetconfig instance);
        partial void DeleteCmswidgetconfig(Cmswidgetconfig instance);
        partial void InsertCmswidgettype(Cmswidgettype instance);
        partial void UpdateCmswidgettype(Cmswidgettype instance);
        partial void DeleteCmswidgettype(Cmswidgettype instance);
        partial void InsertContentpriority(Contentpriority instance);
        partial void UpdateContentpriority(Contentpriority instance);
        partial void DeleteContentpriority(Contentpriority instance);
        partial void InsertContenttype(Contenttype instance);
        partial void UpdateContenttype(Contenttype instance);
        partial void DeleteContenttype(Contenttype instance);
        partial void InsertCpsession(Cpsession instance);
        partial void UpdateCpsession(Cpsession instance);
        partial void DeleteCpsession(Cpsession instance);
        partial void InsertCron(Cron instance);
        partial void UpdateCron(Cron instance);
        partial void DeleteCron(Cron instance);
        partial void InsertCronlog(Cronlog instance);
        partial void UpdateCronlog(Cronlog instance);
        partial void DeleteCronlog(Cronlog instance);
        partial void InsertCustomavatar(Customavatar instance);
        partial void UpdateCustomavatar(Customavatar instance);
        partial void DeleteCustomavatar(Customavatar instance);
        partial void InsertCustomprofilepic(Customprofilepic instance);
        partial void UpdateCustomprofilepic(Customprofilepic instance);
        partial void DeleteCustomprofilepic(Customprofilepic instance);
        partial void InsertDatastore(Datastore instance);
        partial void UpdateDatastore(Datastore instance);
        partial void DeleteDatastore(Datastore instance);
        partial void InsertDeletionlog(Deletionlog instance);
        partial void UpdateDeletionlog(Deletionlog instance);
        partial void DeleteDeletionlog(Deletionlog instance);
        partial void InsertDiscussion(Discussion instance);
        partial void UpdateDiscussion(Discussion instance);
        partial void DeleteDiscussion(Discussion instance);
        partial void InsertDiscussionread(Discussionread instance);
        partial void UpdateDiscussionread(Discussionread instance);
        partial void DeleteDiscussionread(Discussionread instance);
        partial void InsertEditlog(Editlog instance);
        partial void UpdateEditlog(Editlog instance);
        partial void DeleteEditlog(Editlog instance);
        partial void InsertEvent(Event instance);
        partial void UpdateEvent(Event instance);
        partial void DeleteEvent(Event instance);
        partial void InsertExternalcache(Externalcache instance);
        partial void UpdateExternalcache(Externalcache instance);
        partial void DeleteExternalcache(Externalcache instance);
        partial void InsertFaq(Faq instance);
        partial void UpdateFaq(Faq instance);
        partial void DeleteFaq(Faq instance);
        partial void InsertFiledata(Filedata instance);
        partial void UpdateFiledata(Filedata instance);
        partial void DeleteFiledata(Filedata instance);
        partial void InsertForum(Forum instance);
        partial void UpdateForum(Forum instance);
        partial void DeleteForum(Forum instance);
        partial void InsertForumpermission(Forumpermission instance);
        partial void UpdateForumpermission(Forumpermission instance);
        partial void DeleteForumpermission(Forumpermission instance);
        partial void InsertForumprefixset(Forumprefixset instance);
        partial void UpdateForumprefixset(Forumprefixset instance);
        partial void DeleteForumprefixset(Forumprefixset instance);
        partial void InsertForumread(Forumread instance);
        partial void UpdateForumread(Forumread instance);
        partial void DeleteForumread(Forumread instance);
        partial void InsertGroupmessage(Groupmessage instance);
        partial void UpdateGroupmessage(Groupmessage instance);
        partial void DeleteGroupmessage(Groupmessage instance);
        partial void InsertGroupmessagehash(Groupmessagehash instance);
        partial void UpdateGroupmessagehash(Groupmessagehash instance);
        partial void DeleteGroupmessagehash(Groupmessagehash instance);
        partial void InsertGroupread(Groupread instance);
        partial void UpdateGroupread(Groupread instance);
        partial void DeleteGroupread(Groupread instance);
        partial void InsertHoliday(Holiday instance);
        partial void UpdateHoliday(Holiday instance);
        partial void DeleteHoliday(Holiday instance);
        partial void InsertHumanverify(Humanverify instance);
        partial void UpdateHumanverify(Humanverify instance);
        partial void DeleteHumanverify(Humanverify instance);
        partial void InsertHvanswer(Hvanswer instance);
        partial void UpdateHvanswer(Hvanswer instance);
        partial void DeleteHvanswer(Hvanswer instance);
        partial void InsertHvquestion(Hvquestion instance);
        partial void UpdateHvquestion(Hvquestion instance);
        partial void DeleteHvquestion(Hvquestion instance);
        partial void InsertIcon(Icon instance);
        partial void UpdateIcon(Icon instance);
        partial void DeleteIcon(Icon instance);
        partial void InsertImagecategory(Imagecategory instance);
        partial void UpdateImagecategory(Imagecategory instance);
        partial void DeleteImagecategory(Imagecategory instance);
        partial void InsertImagecategorypermission(Imagecategorypermission instance);
        partial void UpdateImagecategorypermission(Imagecategorypermission instance);
        partial void DeleteImagecategorypermission(Imagecategorypermission instance);
        partial void InsertIndexqueue(Indexqueue instance);
        partial void UpdateIndexqueue(Indexqueue instance);
        partial void DeleteIndexqueue(Indexqueue instance);
        partial void InsertInfraction(Infraction instance);
        partial void UpdateInfraction(Infraction instance);
        partial void DeleteInfraction(Infraction instance);
        partial void InsertInfractionban(Infractionban instance);
        partial void UpdateInfractionban(Infractionban instance);
        partial void DeleteInfractionban(Infractionban instance);
        partial void InsertInfractiongroup(Infractiongroup instance);
        partial void UpdateInfractiongroup(Infractiongroup instance);
        partial void DeleteInfractiongroup(Infractiongroup instance);
        partial void InsertInfractionlevel(Infractionlevel instance);
        partial void UpdateInfractionlevel(Infractionlevel instance);
        partial void DeleteInfractionlevel(Infractionlevel instance);
        partial void InsertLanguage(Language instance);
        partial void UpdateLanguage(Language instance);
        partial void DeleteLanguage(Language instance);
        partial void InsertMailqueue(Mailqueue instance);
        partial void UpdateMailqueue(Mailqueue instance);
        partial void DeleteMailqueue(Mailqueue instance);
        partial void InsertModeration(Moderation instance);
        partial void UpdateModeration(Moderation instance);
        partial void DeleteModeration(Moderation instance);
        partial void InsertModerator(Moderator instance);
        partial void UpdateModerator(Moderator instance);
        partial void DeleteModerator(Moderator instance);
        partial void InsertModeratorlog(Moderatorlog instance);
        partial void UpdateModeratorlog(Moderatorlog instance);
        partial void DeleteModeratorlog(Moderatorlog instance);
        partial void InsertNotice(Notice instance);
        partial void UpdateNotice(Notice instance);
        partial void DeleteNotice(Notice instance);
        partial void InsertNoticecriteria(Noticecriteria instance);
        partial void UpdateNoticecriteria(Noticecriteria instance);
        partial void DeleteNoticecriteria(Noticecriteria instance);
        partial void InsertNoticedismissed(Noticedismissed instance);
        partial void UpdateNoticedismissed(Noticedismissed instance);
        partial void DeleteNoticedismissed(Noticedismissed instance);
        partial void InsertPackage(Package instance);
        partial void UpdatePackage(Package instance);
        partial void DeletePackage(Package instance);
        partial void InsertPasswordhistory(Passwordhistory instance);
        partial void UpdatePasswordhistory(Passwordhistory instance);
        partial void DeletePasswordhistory(Passwordhistory instance);
        partial void InsertPaymentapi(Paymentapi instance);
        partial void UpdatePaymentapi(Paymentapi instance);
        partial void DeletePaymentapi(Paymentapi instance);
        partial void InsertPaymentinfo(Paymentinfo instance);
        partial void UpdatePaymentinfo(Paymentinfo instance);
        partial void DeletePaymentinfo(Paymentinfo instance);
        partial void InsertPaymenttransaction(Paymenttransaction instance);
        partial void UpdatePaymenttransaction(Paymenttransaction instance);
        partial void DeletePaymenttransaction(Paymenttransaction instance);
        partial void InsertPhrase(Phrase instance);
        partial void UpdatePhrase(Phrase instance);
        partial void DeletePhrase(Phrase instance);
        partial void InsertPhrasetype(Phrasetype instance);
        partial void UpdatePhrasetype(Phrasetype instance);
        partial void DeletePhrasetype(Phrasetype instance);
        partial void InsertPicturecomment(Picturecomment instance);
        partial void UpdatePicturecomment(Picturecomment instance);
        partial void DeletePicturecomment(Picturecomment instance);
        partial void InsertPicturecommenthash(Picturecommenthash instance);
        partial void UpdatePicturecommenthash(Picturecommenthash instance);
        partial void DeletePicturecommenthash(Picturecommenthash instance);
        partial void InsertPicturelegacy(Picturelegacy instance);
        partial void UpdatePicturelegacy(Picturelegacy instance);
        partial void DeletePicturelegacy(Picturelegacy instance);
        partial void InsertPlugin(Plugin instance);
        partial void UpdatePlugin(Plugin instance);
        partial void DeletePlugin(Plugin instance);
        partial void InsertPm(Pm instance);
        partial void UpdatePm(Pm instance);
        partial void DeletePm(Pm instance);
        partial void InsertPmreceipt(Pmreceipt instance);
        partial void UpdatePmreceipt(Pmreceipt instance);
        partial void DeletePmreceipt(Pmreceipt instance);
        partial void InsertPmtext(Pmtext instance);
        partial void UpdatePmtext(Pmtext instance);
        partial void DeletePmtext(Pmtext instance);
        partial void InsertPmthrottle(Pmthrottle instance);
        partial void UpdatePmthrottle(Pmthrottle instance);
        partial void DeletePmthrottle(Pmthrottle instance);
        partial void InsertPodcast(Podcast instance);
        partial void UpdatePodcast(Podcast instance);
        partial void DeletePodcast(Podcast instance);
        partial void InsertPodcastitem(Podcastitem instance);
        partial void UpdatePodcastitem(Podcastitem instance);
        partial void DeletePodcastitem(Podcastitem instance);
        partial void InsertPoll(Poll instance);
        partial void UpdatePoll(Poll instance);
        partial void DeletePoll(Poll instance);
        partial void InsertPollvote(Pollvote instance);
        partial void UpdatePollvote(Pollvote instance);
        partial void DeletePollvote(Pollvote instance);
        partial void InsertPost(Post instance);
        partial void UpdatePost(Post instance);
        partial void DeletePost(Post instance);
        partial void InsertPostedithistory(Postedithistory instance);
        partial void UpdatePostedithistory(Postedithistory instance);
        partial void DeletePostedithistory(Postedithistory instance);
        partial void InsertPosthash(Posthash instance);
        partial void UpdatePosthash(Posthash instance);
        partial void DeletePosthash(Posthash instance);
        partial void InsertPostlog(Postlog instance);
        partial void UpdatePostlog(Postlog instance);
        partial void DeletePostlog(Postlog instance);
        partial void InsertPostparsed(Postparsed instance);
        partial void UpdatePostparsed(Postparsed instance);
        partial void DeletePostparsed(Postparsed instance);
        partial void InsertPrefix(Prefix instance);
        partial void UpdatePrefix(Prefix instance);
        partial void DeletePrefix(Prefix instance);
        partial void InsertPrefixpermission(Prefixpermission instance);
        partial void UpdatePrefixpermission(Prefixpermission instance);
        partial void DeletePrefixpermission(Prefixpermission instance);
        partial void InsertPrefixset(Prefixset instance);
        partial void UpdatePrefixset(Prefixset instance);
        partial void DeletePrefixset(Prefixset instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductcode(Productcode instance);
        partial void UpdateProductcode(Productcode instance);
        partial void DeleteProductcode(Productcode instance);
        partial void InsertProductdependency(Productdependency instance);
        partial void UpdateProductdependency(Productdependency instance);
        partial void DeleteProductdependency(Productdependency instance);
        partial void InsertProfileblockprivacy(Profileblockprivacy instance);
        partial void UpdateProfileblockprivacy(Profileblockprivacy instance);
        partial void DeleteProfileblockprivacy(Profileblockprivacy instance);
        partial void InsertProfilefield(Profilefield instance);
        partial void UpdateProfilefield(Profilefield instance);
        partial void DeleteProfilefield(Profilefield instance);
        partial void InsertProfilefieldcategory(Profilefieldcategory instance);
        partial void UpdateProfilefieldcategory(Profilefieldcategory instance);
        partial void DeleteProfilefieldcategory(Profilefieldcategory instance);
        partial void InsertProfilevisitor(Profilevisitor instance);
        partial void UpdateProfilevisitor(Profilevisitor instance);
        partial void DeleteProfilevisitor(Profilevisitor instance);
        partial void InsertRank(Rank instance);
        partial void UpdateRank(Rank instance);
        partial void DeleteRank(Rank instance);
        partial void InsertReminder(Reminder instance);
        partial void UpdateReminder(Reminder instance);
        partial void DeleteReminder(Reminder instance);
        partial void InsertReputation(Reputation instance);
        partial void UpdateReputation(Reputation instance);
        partial void DeleteReputation(Reputation instance);
        partial void InsertReputationlevel(Reputationlevel instance);
        partial void UpdateReputationlevel(Reputationlevel instance);
        partial void DeleteReputationlevel(Reputationlevel instance);
        partial void InsertRoute(Route instance);
        partial void UpdateRoute(Route instance);
        partial void DeleteRoute(Route instance);
        partial void InsertRssfeed(Rssfeed instance);
        partial void UpdateRssfeed(Rssfeed instance);
        partial void DeleteRssfeed(Rssfeed instance);
        partial void InsertRsslog(Rsslog instance);
        partial void UpdateRsslog(Rsslog instance);
        partial void DeleteRsslog(Rsslog instance);
        partial void InsertSearchcore(Searchcore instance);
        partial void UpdateSearchcore(Searchcore instance);
        partial void DeleteSearchcore(Searchcore instance);
        partial void InsertSearchcoretext(Searchcoretext instance);
        partial void UpdateSearchcoretext(Searchcoretext instance);
        partial void DeleteSearchcoretext(Searchcoretext instance);
        partial void InsertSearchgroup(Searchgroup instance);
        partial void UpdateSearchgroup(Searchgroup instance);
        partial void DeleteSearchgroup(Searchgroup instance);
        partial void InsertSearchgrouptext(Searchgrouptext instance);
        partial void UpdateSearchgrouptext(Searchgrouptext instance);
        partial void DeleteSearchgrouptext(Searchgrouptext instance);
        partial void InsertSearchlog(Searchlog instance);
        partial void UpdateSearchlog(Searchlog instance);
        partial void DeleteSearchlog(Searchlog instance);
        partial void InsertSession(Session instance);
        partial void UpdateSession(Session instance);
        partial void DeleteSession(Session instance);
        partial void InsertSetting(Setting instance);
        partial void UpdateSetting(Setting instance);
        partial void DeleteSetting(Setting instance);
        partial void InsertSettinggroup(Settinggroup instance);
        partial void UpdateSettinggroup(Settinggroup instance);
        partial void DeleteSettinggroup(Settinggroup instance);
        partial void InsertSigparsed(Sigparsed instance);
        partial void UpdateSigparsed(Sigparsed instance);
        partial void DeleteSigparsed(Sigparsed instance);
        partial void InsertSigpic(Sigpic instance);
        partial void UpdateSigpic(Sigpic instance);
        partial void DeleteSigpic(Sigpic instance);
        partial void InsertSmilie(Smilie instance);
        partial void UpdateSmilie(Smilie instance);
        partial void DeleteSmilie(Smilie instance);
        partial void InsertSocialgroup(Socialgroup instance);
        partial void UpdateSocialgroup(Socialgroup instance);
        partial void DeleteSocialgroup(Socialgroup instance);
        partial void InsertSocialgroupcategory(Socialgroupcategory instance);
        partial void UpdateSocialgroupcategory(Socialgroupcategory instance);
        partial void DeleteSocialgroupcategory(Socialgroupcategory instance);
        partial void InsertSocialgroupicon(Socialgroupicon instance);
        partial void UpdateSocialgroupicon(Socialgroupicon instance);
        partial void DeleteSocialgroupicon(Socialgroupicon instance);
        partial void InsertSocialgroupmember(Socialgroupmember instance);
        partial void UpdateSocialgroupmember(Socialgroupmember instance);
        partial void DeleteSocialgroupmember(Socialgroupmember instance);
        partial void InsertSpamlog(Spamlog instance);
        partial void UpdateSpamlog(Spamlog instance);
        partial void DeleteSpamlog(Spamlog instance);
        partial void InsertStat(Stat instance);
        partial void UpdateStat(Stat instance);
        partial void DeleteStat(Stat instance);
        partial void InsertStrike(Strike instance);
        partial void UpdateStrike(Strike instance);
        partial void DeleteStrike(Strike instance);
        partial void InsertStyle(Style instance);
        partial void UpdateStyle(Style instance);
        partial void DeleteStyle(Style instance);
        partial void InsertStylevar(Stylevar instance);
        partial void UpdateStylevar(Stylevar instance);
        partial void DeleteStylevar(Stylevar instance);
        partial void InsertStylevardfn(Stylevardfn instance);
        partial void UpdateStylevardfn(Stylevardfn instance);
        partial void DeleteStylevardfn(Stylevardfn instance);
        partial void InsertSubscribediscussion(Subscribediscussion instance);
        partial void UpdateSubscribediscussion(Subscribediscussion instance);
        partial void DeleteSubscribediscussion(Subscribediscussion instance);
        partial void InsertSubscribeevent(Subscribeevent instance);
        partial void UpdateSubscribeevent(Subscribeevent instance);
        partial void DeleteSubscribeevent(Subscribeevent instance);
        partial void InsertSubscribeforum(Subscribeforum instance);
        partial void UpdateSubscribeforum(Subscribeforum instance);
        partial void DeleteSubscribeforum(Subscribeforum instance);
        partial void InsertSubscribegroup(Subscribegroup instance);
        partial void UpdateSubscribegroup(Subscribegroup instance);
        partial void DeleteSubscribegroup(Subscribegroup instance);
        partial void InsertSubscribethread(Subscribethread instance);
        partial void UpdateSubscribethread(Subscribethread instance);
        partial void DeleteSubscribethread(Subscribethread instance);
        partial void InsertSubscription(Subscription instance);
        partial void UpdateSubscription(Subscription instance);
        partial void DeleteSubscription(Subscription instance);
        partial void InsertSubscriptionlog(Subscriptionlog instance);
        partial void UpdateSubscriptionlog(Subscriptionlog instance);
        partial void DeleteSubscriptionlog(Subscriptionlog instance);
        partial void InsertSubscriptionpermission(Subscriptionpermission instance);
        partial void UpdateSubscriptionpermission(Subscriptionpermission instance);
        partial void DeleteSubscriptionpermission(Subscriptionpermission instance);
        partial void InsertTachyforumcounter(Tachyforumcounter instance);
        partial void UpdateTachyforumcounter(Tachyforumcounter instance);
        partial void DeleteTachyforumcounter(Tachyforumcounter instance);
        partial void InsertTachyforumpost(Tachyforumpost instance);
        partial void UpdateTachyforumpost(Tachyforumpost instance);
        partial void DeleteTachyforumpost(Tachyforumpost instance);
        partial void InsertTachythreadcounter(Tachythreadcounter instance);
        partial void UpdateTachythreadcounter(Tachythreadcounter instance);
        partial void DeleteTachythreadcounter(Tachythreadcounter instance);
        partial void InsertTachythreadpost(Tachythreadpost instance);
        partial void UpdateTachythreadpost(Tachythreadpost instance);
        partial void DeleteTachythreadpost(Tachythreadpost instance);
        partial void InsertTag(Tag instance);
        partial void UpdateTag(Tag instance);
        partial void DeleteTag(Tag instance);
        partial void InsertTagcontent(Tagcontent instance);
        partial void UpdateTagcontent(Tagcontent instance);
        partial void DeleteTagcontent(Tagcontent instance);
        partial void InsertTagsearch(Tagsearch instance);
        partial void UpdateTagsearch(Tagsearch instance);
        partial void DeleteTagsearch(Tagsearch instance);
        partial void InsertTemplate(Template instance);
        partial void UpdateTemplate(Template instance);
        partial void DeleteTemplate(Template instance);
        partial void InsertTemplatehistory(Templatehistory instance);
        partial void UpdateTemplatehistory(Templatehistory instance);
        partial void DeleteTemplatehistory(Templatehistory instance);
        partial void InsertTemplatemerge(Templatemerge instance);
        partial void UpdateTemplatemerge(Templatemerge instance);
        partial void DeleteTemplatemerge(Templatemerge instance);
        partial void InsertThread(Thread instance);
        partial void UpdateThread(Thread instance);
        partial void DeleteThread(Thread instance);
        partial void InsertThreadrate(Threadrate instance);
        partial void UpdateThreadrate(Threadrate instance);
        partial void DeleteThreadrate(Threadrate instance);
        partial void InsertThreadread(Threadread instance);
        partial void UpdateThreadread(Threadread instance);
        partial void DeleteThreadread(Threadread instance);
        partial void InsertThreadredirect(Threadredirect instance);
        partial void UpdateThreadredirect(Threadredirect instance);
        partial void DeleteThreadredirect(Threadredirect instance);
        partial void InsertThreadview(Threadview instance);
        partial void UpdateThreadview(Threadview instance);
        partial void DeleteThreadview(Threadview instance);
        partial void InsertUpgradelog(Upgradelog instance);
        partial void UpdateUpgradelog(Upgradelog instance);
        partial void DeleteUpgradelog(Upgradelog instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertUseractivation(Useractivation instance);
        partial void UpdateUseractivation(Useractivation instance);
        partial void DeleteUseractivation(Useractivation instance);
        partial void InsertUserban(Userban instance);
        partial void UpdateUserban(Userban instance);
        partial void DeleteUserban(Userban instance);
        partial void InsertUserchangelog(Userchangelog instance);
        partial void UpdateUserchangelog(Userchangelog instance);
        partial void DeleteUserchangelog(Userchangelog instance);
        partial void InsertUsercss(Usercss instance);
        partial void UpdateUsercss(Usercss instance);
        partial void DeleteUsercss(Usercss instance);
        partial void InsertUsercsscache(Usercsscache instance);
        partial void UpdateUsercsscache(Usercsscache instance);
        partial void DeleteUsercsscache(Usercsscache instance);
        partial void InsertUserfield(Userfield instance);
        partial void UpdateUserfield(Userfield instance);
        partial void DeleteUserfield(Userfield instance);
        partial void InsertUsergroup(Usergroup instance);
        partial void UpdateUsergroup(Usergroup instance);
        partial void DeleteUsergroup(Usergroup instance);
        partial void InsertUsergroupleader(Usergroupleader instance);
        partial void UpdateUsergroupleader(Usergroupleader instance);
        partial void DeleteUsergroupleader(Usergroupleader instance);
        partial void InsertUsergrouprequest(Usergrouprequest instance);
        partial void UpdateUsergrouprequest(Usergrouprequest instance);
        partial void DeleteUsergrouprequest(Usergrouprequest instance);
        partial void InsertUserlist(Userlist instance);
        partial void UpdateUserlist(Userlist instance);
        partial void DeleteUserlist(Userlist instance);
        partial void InsertUsernote(Usernote instance);
        partial void UpdateUsernote(Usernote instance);
        partial void DeleteUsernote(Usernote instance);
        partial void InsertUserpromotion(Userpromotion instance);
        partial void UpdateUserpromotion(Userpromotion instance);
        partial void DeleteUserpromotion(Userpromotion instance);
        partial void InsertUsertextfield(Usertextfield instance);
        partial void UpdateUsertextfield(Usertextfield instance);
        partial void DeleteUsertextfield(Usertextfield instance);
        partial void InsertUsertitle(Usertitle instance);
        partial void UpdateUsertitle(Usertitle instance);
        partial void DeleteUsertitle(Usertitle instance);
        partial void InsertVisitormessage(Visitormessage instance);
        partial void UpdateVisitormessage(Visitormessage instance);
        partial void DeleteVisitormessage(Visitormessage instance);
        partial void InsertVisitormessagehash(Visitormessagehash instance);
        partial void UpdateVisitormessagehash(Visitormessagehash instance);
        partial void DeleteVisitormessagehash(Visitormessagehash instance);
        #endregion

        public VBBDataContext() :
        base(@"User Id=root;Password=admin;Host=localhost;Database=forum;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public VBBDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VBBDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VBBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VBBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Access> Access
        {
            get
            {
                return this.GetTable<Access>();
            }
        }

        public Devart.Data.Linq.Table<Action> Actions
        {
            get
            {
                return this.GetTable<Action>();
            }
        }

        public Devart.Data.Linq.Table<Ad> Ad
        {
            get
            {
                return this.GetTable<Ad>();
            }
        }

        public Devart.Data.Linq.Table<Adcriteria> Adcriterias
        {
            get
            {
                return this.GetTable<Adcriteria>();
            }
        }

        public Devart.Data.Linq.Table<Adminhelp> Adminhelps
        {
            get
            {
                return this.GetTable<Adminhelp>();
            }
        }

        public Devart.Data.Linq.Table<Administrator> Administrators
        {
            get
            {
                return this.GetTable<Administrator>();
            }
        }

        public Devart.Data.Linq.Table<Adminlog> Adminlogs
        {
            get
            {
                return this.GetTable<Adminlog>();
            }
        }

        public Devart.Data.Linq.Table<Adminmessage> Adminmessages
        {
            get
            {
                return this.GetTable<Adminmessage>();
            }
        }

        public Devart.Data.Linq.Table<Adminutil> Adminutils
        {
            get
            {
                return this.GetTable<Adminutil>();
            }
        }

        public Devart.Data.Linq.Table<Album> Albums
        {
            get
            {
                return this.GetTable<Album>();
            }
        }

        public Devart.Data.Linq.Table<Albumupdate> Albumupdates
        {
            get
            {
                return this.GetTable<Albumupdate>();
            }
        }

        public Devart.Data.Linq.Table<Announcement> Announcements
        {
            get
            {
                return this.GetTable<Announcement>();
            }
        }

        public Devart.Data.Linq.Table<Announcementread> Announcementreads
        {
            get
            {
                return this.GetTable<Announcementread>();
            }
        }

        public Devart.Data.Linq.Table<Attachment> Attachments
        {
            get
            {
                return this.GetTable<Attachment>();
            }
        }

        public Devart.Data.Linq.Table<Attachmentcategory> Attachmentcategories
        {
            get
            {
                return this.GetTable<Attachmentcategory>();
            }
        }

        public Devart.Data.Linq.Table<Attachmentcategoryuser> Attachmentcategoryusers
        {
            get
            {
                return this.GetTable<Attachmentcategoryuser>();
            }
        }

        public Devart.Data.Linq.Table<Attachmentpermission> Attachmentpermissions
        {
            get
            {
                return this.GetTable<Attachmentpermission>();
            }
        }

        public Devart.Data.Linq.Table<Attachmenttype> Attachmenttypes
        {
            get
            {
                return this.GetTable<Attachmenttype>();
            }
        }

        public Devart.Data.Linq.Table<Attachmentview> Attachmentviews
        {
            get
            {
                return this.GetTable<Attachmentview>();
            }
        }

        public Devart.Data.Linq.Table<Avatar> Avatars
        {
            get
            {
                return this.GetTable<Avatar>();
            }
        }

        public Devart.Data.Linq.Table<Bbcode> Bbcodes
        {
            get
            {
                return this.GetTable<Bbcode>();
            }
        }

        public Devart.Data.Linq.Table<Bbcodevideo> Bbcodevideos
        {
            get
            {
                return this.GetTable<Bbcodevideo>();
            }
        }

        public Devart.Data.Linq.Table<Block> Blocks
        {
            get
            {
                return this.GetTable<Block>();
            }
        }

        public Devart.Data.Linq.Table<Blockconfig> Blockconfigs
        {
            get
            {
                return this.GetTable<Blockconfig>();
            }
        }

        public Devart.Data.Linq.Table<Blocktype> Blocktypes
        {
            get
            {
                return this.GetTable<Blocktype>();
            }
        }

        public Devart.Data.Linq.Table<Blog> Blogs
        {
            get
            {
                return this.GetTable<Blog>();
            }
        }

        public Devart.Data.Linq.Table<Blogattachment> Blogattachments
        {
            get
            {
                return this.GetTable<Blogattachment>();
            }
        }

        public Devart.Data.Linq.Table<Blogattachmentview> Blogattachmentviews
        {
            get
            {
                return this.GetTable<Blogattachmentview>();
            }
        }

        public Devart.Data.Linq.Table<Blogcategory> Blogcategories
        {
            get
            {
                return this.GetTable<Blogcategory>();
            }
        }

        public Devart.Data.Linq.Table<Blogcategorypermission> Blogcategorypermissions
        {
            get
            {
                return this.GetTable<Blogcategorypermission>();
            }
        }

        public Devart.Data.Linq.Table<Blogcategoryuser> Blogcategoryusers
        {
            get
            {
                return this.GetTable<Blogcategoryuser>();
            }
        }

        public Devart.Data.Linq.Table<Blogcustomblock> Blogcustomblocks
        {
            get
            {
                return this.GetTable<Blogcustomblock>();
            }
        }

        public Devart.Data.Linq.Table<Blogcustomblockparsed> Blogcustomblockparseds
        {
            get
            {
                return this.GetTable<Blogcustomblockparsed>();
            }
        }

        public Devart.Data.Linq.Table<Blogdeletionlog> Blogdeletionlogs
        {
            get
            {
                return this.GetTable<Blogdeletionlog>();
            }
        }

        public Devart.Data.Linq.Table<Blogeditlog> Blogeditlogs
        {
            get
            {
                return this.GetTable<Blogeditlog>();
            }
        }

        public Devart.Data.Linq.Table<Blogfeatured> Blogfeatureds
        {
            get
            {
                return this.GetTable<Blogfeatured>();
            }
        }

        public Devart.Data.Linq.Table<Bloggroupmembership> Bloggroupmemberships
        {
            get
            {
                return this.GetTable<Bloggroupmembership>();
            }
        }

        public Devart.Data.Linq.Table<Bloggrouppermission> Bloggrouppermissions
        {
            get
            {
                return this.GetTable<Bloggrouppermission>();
            }
        }

        public Devart.Data.Linq.Table<Bloghash> Bloghashes
        {
            get
            {
                return this.GetTable<Bloghash>();
            }
        }

        public Devart.Data.Linq.Table<Blogmoderation> Blogmoderations
        {
            get
            {
                return this.GetTable<Blogmoderation>();
            }
        }

        public Devart.Data.Linq.Table<Blogmoderator> Blogmoderators
        {
            get
            {
                return this.GetTable<Blogmoderator>();
            }
        }

        public Devart.Data.Linq.Table<Blogpinghistory> Blogpinghistories
        {
            get
            {
                return this.GetTable<Blogpinghistory>();
            }
        }

        public Devart.Data.Linq.Table<Blograte> Blogrates
        {
            get
            {
                return this.GetTable<Blograte>();
            }
        }

        public Devart.Data.Linq.Table<Blogread> Blogreads
        {
            get
            {
                return this.GetTable<Blogread>();
            }
        }

        public Devart.Data.Linq.Table<Blogrelationship> Blogrelationships
        {
            get
            {
                return this.GetTable<Blogrelationship>();
            }
        }

        public Devart.Data.Linq.Table<Blogsearch> Blogsearches
        {
            get
            {
                return this.GetTable<Blogsearch>();
            }
        }

        public Devart.Data.Linq.Table<Blogsearchresult> Blogsearchresults
        {
            get
            {
                return this.GetTable<Blogsearchresult>();
            }
        }

        public Devart.Data.Linq.Table<Blogsubscribeentry> Blogsubscribeentries
        {
            get
            {
                return this.GetTable<Blogsubscribeentry>();
            }
        }

        public Devart.Data.Linq.Table<Blogsubscribeuser> Blogsubscribeusers
        {
            get
            {
                return this.GetTable<Blogsubscribeuser>();
            }
        }

        public Devart.Data.Linq.Table<Blogsummarystat> Blogsummarystats
        {
            get
            {
                return this.GetTable<Blogsummarystat>();
            }
        }

        public Devart.Data.Linq.Table<Blogtachyentry> Blogtachyentries
        {
            get
            {
                return this.GetTable<Blogtachyentry>();
            }
        }

        public Devart.Data.Linq.Table<Blogtext> Blogtexts
        {
            get
            {
                return this.GetTable<Blogtext>();
            }
        }

        public Devart.Data.Linq.Table<Blogtextparsed> Blogtextparseds
        {
            get
            {
                return this.GetTable<Blogtextparsed>();
            }
        }

        public Devart.Data.Linq.Table<Blogtrackback> Blogtrackbacks
        {
            get
            {
                return this.GetTable<Blogtrackback>();
            }
        }

        public Devart.Data.Linq.Table<Blogtrackbacklog> Blogtrackbacklogs
        {
            get
            {
                return this.GetTable<Blogtrackbacklog>();
            }
        }

        public Devart.Data.Linq.Table<Bloguser> Blogusers
        {
            get
            {
                return this.GetTable<Bloguser>();
            }
        }

        public Devart.Data.Linq.Table<Blogusercss> Blogusercss
        {
            get
            {
                return this.GetTable<Blogusercss>();
            }
        }

        public Devart.Data.Linq.Table<Blogusercsscache> Blogusercsscaches
        {
            get
            {
                return this.GetTable<Blogusercsscache>();
            }
        }

        public Devart.Data.Linq.Table<Bloguserread> Bloguserreads
        {
            get
            {
                return this.GetTable<Bloguserread>();
            }
        }

        public Devart.Data.Linq.Table<Bloguserstat> Bloguserstats
        {
            get
            {
                return this.GetTable<Bloguserstat>();
            }
        }

        public Devart.Data.Linq.Table<Blogview> Blogviews
        {
            get
            {
                return this.GetTable<Blogview>();
            }
        }

        public Devart.Data.Linq.Table<Blogvisitor> Blogvisitors
        {
            get
            {
                return this.GetTable<Blogvisitor>();
            }
        }

        public Devart.Data.Linq.Table<Bookmarksite> Bookmarksites
        {
            get
            {
                return this.GetTable<Bookmarksite>();
            }
        }

        public Devart.Data.Linq.Table<Cache> Caches
        {
            get
            {
                return this.GetTable<Cache>();
            }
        }

        public Devart.Data.Linq.Table<Cacheevent> Cacheevents
        {
            get
            {
                return this.GetTable<Cacheevent>();
            }
        }

        public Devart.Data.Linq.Table<Calendar> Calendars
        {
            get
            {
                return this.GetTable<Calendar>();
            }
        }

        public Devart.Data.Linq.Table<Calendarcustomfield> Calendarcustomfields
        {
            get
            {
                return this.GetTable<Calendarcustomfield>();
            }
        }

        public Devart.Data.Linq.Table<Calendarmoderator> Calendarmoderators
        {
            get
            {
                return this.GetTable<Calendarmoderator>();
            }
        }

        public Devart.Data.Linq.Table<Calendarpermission> Calendarpermissions
        {
            get
            {
                return this.GetTable<Calendarpermission>();
            }
        }

        public Devart.Data.Linq.Table<Cmsarticle> Cmsarticles
        {
            get
            {
                return this.GetTable<Cmsarticle>();
            }
        }

        public Devart.Data.Linq.Table<Cmscategory> Cmscategories
        {
            get
            {
                return this.GetTable<Cmscategory>();
            }
        }

        public Devart.Data.Linq.Table<Cmsgrid> Cmsgrids
        {
            get
            {
                return this.GetTable<Cmsgrid>();
            }
        }

        public Devart.Data.Linq.Table<Cmslayout> Cmslayouts
        {
            get
            {
                return this.GetTable<Cmslayout>();
            }
        }

        public Devart.Data.Linq.Table<Cmslayoutwidget> Cmslayoutwidgets
        {
            get
            {
                return this.GetTable<Cmslayoutwidget>();
            }
        }

        public Devart.Data.Linq.Table<Cmsnavigation> Cmsnavigations
        {
            get
            {
                return this.GetTable<Cmsnavigation>();
            }
        }

        public Devart.Data.Linq.Table<Cmsnode> Cmsnodes
        {
            get
            {
                return this.GetTable<Cmsnode>();
            }
        }

        public Devart.Data.Linq.Table<Cmsnodecategory> Cmsnodecategories
        {
            get
            {
                return this.GetTable<Cmsnodecategory>();
            }
        }

        public Devart.Data.Linq.Table<Cmsnodeconfig> Cmsnodeconfigs
        {
            get
            {
                return this.GetTable<Cmsnodeconfig>();
            }
        }

        public Devart.Data.Linq.Table<Cmsnodeinfo> Cmsnodeinfos
        {
            get
            {
                return this.GetTable<Cmsnodeinfo>();
            }
        }

        public Devart.Data.Linq.Table<Cmspermission> Cmspermissions
        {
            get
            {
                return this.GetTable<Cmspermission>();
            }
        }

        public Devart.Data.Linq.Table<Cmsrate> Cmsrates
        {
            get
            {
                return this.GetTable<Cmsrate>();
            }
        }

        public Devart.Data.Linq.Table<Cmssectionorder> Cmssectionorders
        {
            get
            {
                return this.GetTable<Cmssectionorder>();
            }
        }

        public Devart.Data.Linq.Table<Cmswidget> Cmswidgets
        {
            get
            {
                return this.GetTable<Cmswidget>();
            }
        }

        public Devart.Data.Linq.Table<Cmswidgetconfig> Cmswidgetconfigs
        {
            get
            {
                return this.GetTable<Cmswidgetconfig>();
            }
        }

        public Devart.Data.Linq.Table<Cmswidgettype> Cmswidgettypes
        {
            get
            {
                return this.GetTable<Cmswidgettype>();
            }
        }

        public Devart.Data.Linq.Table<Contentpriority> Contentpriorities
        {
            get
            {
                return this.GetTable<Contentpriority>();
            }
        }

        public Devart.Data.Linq.Table<Contenttype> Contenttypes
        {
            get
            {
                return this.GetTable<Contenttype>();
            }
        }

        public Devart.Data.Linq.Table<Cpsession> Cpsessions
        {
            get
            {
                return this.GetTable<Cpsession>();
            }
        }

        public Devart.Data.Linq.Table<Cron> Crons
        {
            get
            {
                return this.GetTable<Cron>();
            }
        }

        public Devart.Data.Linq.Table<Cronlog> Cronlogs
        {
            get
            {
                return this.GetTable<Cronlog>();
            }
        }

        public Devart.Data.Linq.Table<Customavatar> Customavatars
        {
            get
            {
                return this.GetTable<Customavatar>();
            }
        }

        public Devart.Data.Linq.Table<Customprofilepic> Customprofilepics
        {
            get
            {
                return this.GetTable<Customprofilepic>();
            }
        }

        public Devart.Data.Linq.Table<Datastore> Datastores
        {
            get
            {
                return this.GetTable<Datastore>();
            }
        }

        public Devart.Data.Linq.Table<Deletionlog> Deletionlogs
        {
            get
            {
                return this.GetTable<Deletionlog>();
            }
        }

        public Devart.Data.Linq.Table<Discussion> Discussions
        {
            get
            {
                return this.GetTable<Discussion>();
            }
        }

        public Devart.Data.Linq.Table<Discussionread> Discussionreads
        {
            get
            {
                return this.GetTable<Discussionread>();
            }
        }

        public Devart.Data.Linq.Table<Editlog> Editlogs
        {
            get
            {
                return this.GetTable<Editlog>();
            }
        }

        public Devart.Data.Linq.Table<Event> Events
        {
            get
            {
                return this.GetTable<Event>();
            }
        }

        public Devart.Data.Linq.Table<Externalcache> Externalcaches
        {
            get
            {
                return this.GetTable<Externalcache>();
            }
        }

        public Devart.Data.Linq.Table<Faq> Faqs
        {
            get
            {
                return this.GetTable<Faq>();
            }
        }

        public Devart.Data.Linq.Table<Filedata> Filedatas
        {
            get
            {
                return this.GetTable<Filedata>();
            }
        }

        public Devart.Data.Linq.Table<Forum> Forums
        {
            get
            {
                return this.GetTable<Forum>();
            }
        }

        public Devart.Data.Linq.Table<Forumpermission> Forumpermissions
        {
            get
            {
                return this.GetTable<Forumpermission>();
            }
        }

        public Devart.Data.Linq.Table<Forumprefixset> Forumprefixsets
        {
            get
            {
                return this.GetTable<Forumprefixset>();
            }
        }

        public Devart.Data.Linq.Table<Forumread> Forumreads
        {
            get
            {
                return this.GetTable<Forumread>();
            }
        }

        public Devart.Data.Linq.Table<Groupmessage> Groupmessages
        {
            get
            {
                return this.GetTable<Groupmessage>();
            }
        }

        public Devart.Data.Linq.Table<Groupmessagehash> Groupmessagehashes
        {
            get
            {
                return this.GetTable<Groupmessagehash>();
            }
        }

        public Devart.Data.Linq.Table<Groupread> Groupreads
        {
            get
            {
                return this.GetTable<Groupread>();
            }
        }

        public Devart.Data.Linq.Table<Holiday> Holidays
        {
            get
            {
                return this.GetTable<Holiday>();
            }
        }

        public Devart.Data.Linq.Table<Humanverify> Humanverifies
        {
            get
            {
                return this.GetTable<Humanverify>();
            }
        }

        public Devart.Data.Linq.Table<Hvanswer> Hvanswers
        {
            get
            {
                return this.GetTable<Hvanswer>();
            }
        }

        public Devart.Data.Linq.Table<Hvquestion> Hvquestions
        {
            get
            {
                return this.GetTable<Hvquestion>();
            }
        }

        public Devart.Data.Linq.Table<Icon> Icons
        {
            get
            {
                return this.GetTable<Icon>();
            }
        }

        public Devart.Data.Linq.Table<Imagecategory> Imagecategories
        {
            get
            {
                return this.GetTable<Imagecategory>();
            }
        }

        public Devart.Data.Linq.Table<Imagecategorypermission> Imagecategorypermissions
        {
            get
            {
                return this.GetTable<Imagecategorypermission>();
            }
        }

        public Devart.Data.Linq.Table<Indexqueue> Indexqueues
        {
            get
            {
                return this.GetTable<Indexqueue>();
            }
        }

        public Devart.Data.Linq.Table<Infraction> Infractions
        {
            get
            {
                return this.GetTable<Infraction>();
            }
        }

        public Devart.Data.Linq.Table<Infractionban> Infractionbans
        {
            get
            {
                return this.GetTable<Infractionban>();
            }
        }

        public Devart.Data.Linq.Table<Infractiongroup> Infractiongroups
        {
            get
            {
                return this.GetTable<Infractiongroup>();
            }
        }

        public Devart.Data.Linq.Table<Infractionlevel> Infractionlevels
        {
            get
            {
                return this.GetTable<Infractionlevel>();
            }
        }

        public Devart.Data.Linq.Table<Language> Languages
        {
            get
            {
                return this.GetTable<Language>();
            }
        }

        public Devart.Data.Linq.Table<Mailqueue> Mailqueues
        {
            get
            {
                return this.GetTable<Mailqueue>();
            }
        }

        public Devart.Data.Linq.Table<Moderation> Moderations
        {
            get
            {
                return this.GetTable<Moderation>();
            }
        }

        public Devart.Data.Linq.Table<Moderator> Moderators
        {
            get
            {
                return this.GetTable<Moderator>();
            }
        }

        public Devart.Data.Linq.Table<Moderatorlog> Moderatorlogs
        {
            get
            {
                return this.GetTable<Moderatorlog>();
            }
        }

        public Devart.Data.Linq.Table<Notice> Notices
        {
            get
            {
                return this.GetTable<Notice>();
            }
        }

        public Devart.Data.Linq.Table<Noticecriteria> Noticecriterias
        {
            get
            {
                return this.GetTable<Noticecriteria>();
            }
        }

        public Devart.Data.Linq.Table<Noticedismissed> Noticedismisseds
        {
            get
            {
                return this.GetTable<Noticedismissed>();
            }
        }

        public Devart.Data.Linq.Table<Package> Packages
        {
            get
            {
                return this.GetTable<Package>();
            }
        }

        public Devart.Data.Linq.Table<Passwordhistory> Passwordhistories
        {
            get
            {
                return this.GetTable<Passwordhistory>();
            }
        }

        public Devart.Data.Linq.Table<Paymentapi> Paymentapis
        {
            get
            {
                return this.GetTable<Paymentapi>();
            }
        }

        public Devart.Data.Linq.Table<Paymentinfo> Paymentinfos
        {
            get
            {
                return this.GetTable<Paymentinfo>();
            }
        }

        public Devart.Data.Linq.Table<Paymenttransaction> Paymenttransactions
        {
            get
            {
                return this.GetTable<Paymenttransaction>();
            }
        }

        public Devart.Data.Linq.Table<Phrase> Phrases
        {
            get
            {
                return this.GetTable<Phrase>();
            }
        }

        public Devart.Data.Linq.Table<Phrasetype> Phrasetypes
        {
            get
            {
                return this.GetTable<Phrasetype>();
            }
        }

        public Devart.Data.Linq.Table<Picturecomment> Picturecomments
        {
            get
            {
                return this.GetTable<Picturecomment>();
            }
        }

        public Devart.Data.Linq.Table<Picturecommenthash> Picturecommenthashes
        {
            get
            {
                return this.GetTable<Picturecommenthash>();
            }
        }

        public Devart.Data.Linq.Table<Picturelegacy> Picturelegacies
        {
            get
            {
                return this.GetTable<Picturelegacy>();
            }
        }

        public Devart.Data.Linq.Table<Plugin> Plugins
        {
            get
            {
                return this.GetTable<Plugin>();
            }
        }

        public Devart.Data.Linq.Table<Pm> Pm
        {
            get
            {
                return this.GetTable<Pm>();
            }
        }

        public Devart.Data.Linq.Table<Pmreceipt> Pmreceipts
        {
            get
            {
                return this.GetTable<Pmreceipt>();
            }
        }

        public Devart.Data.Linq.Table<Pmtext> Pmtexts
        {
            get
            {
                return this.GetTable<Pmtext>();
            }
        }

        public Devart.Data.Linq.Table<Pmthrottle> Pmthrottles
        {
            get
            {
                return this.GetTable<Pmthrottle>();
            }
        }

        public Devart.Data.Linq.Table<Podcast> Podcasts
        {
            get
            {
                return this.GetTable<Podcast>();
            }
        }

        public Devart.Data.Linq.Table<Podcastitem> Podcastitems
        {
            get
            {
                return this.GetTable<Podcastitem>();
            }
        }

        public Devart.Data.Linq.Table<Poll> Polls
        {
            get
            {
                return this.GetTable<Poll>();
            }
        }

        public Devart.Data.Linq.Table<Pollvote> Pollvotes
        {
            get
            {
                return this.GetTable<Pollvote>();
            }
        }

        public Devart.Data.Linq.Table<Post> Posts
        {
            get
            {
                return this.GetTable<Post>();
            }
        }

        public Devart.Data.Linq.Table<Postedithistory> Postedithistories
        {
            get
            {
                return this.GetTable<Postedithistory>();
            }
        }

        public Devart.Data.Linq.Table<Posthash> Posthashes
        {
            get
            {
                return this.GetTable<Posthash>();
            }
        }

        public Devart.Data.Linq.Table<Postlog> Postlogs
        {
            get
            {
                return this.GetTable<Postlog>();
            }
        }

        public Devart.Data.Linq.Table<Postparsed> Postparseds
        {
            get
            {
                return this.GetTable<Postparsed>();
            }
        }

        public Devart.Data.Linq.Table<Prefix> Prefixes
        {
            get
            {
                return this.GetTable<Prefix>();
            }
        }

        public Devart.Data.Linq.Table<Prefixpermission> Prefixpermissions
        {
            get
            {
                return this.GetTable<Prefixpermission>();
            }
        }

        public Devart.Data.Linq.Table<Prefixset> Prefixsets
        {
            get
            {
                return this.GetTable<Prefixset>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<Productcode> Productcodes
        {
            get
            {
                return this.GetTable<Productcode>();
            }
        }

        public Devart.Data.Linq.Table<Productdependency> Productdependencies
        {
            get
            {
                return this.GetTable<Productdependency>();
            }
        }

        public Devart.Data.Linq.Table<Profileblockprivacy> Profileblockprivacies
        {
            get
            {
                return this.GetTable<Profileblockprivacy>();
            }
        }

        public Devart.Data.Linq.Table<Profilefield> Profilefields
        {
            get
            {
                return this.GetTable<Profilefield>();
            }
        }

        public Devart.Data.Linq.Table<Profilefieldcategory> Profilefieldcategories
        {
            get
            {
                return this.GetTable<Profilefieldcategory>();
            }
        }

        public Devart.Data.Linq.Table<Profilevisitor> Profilevisitors
        {
            get
            {
                return this.GetTable<Profilevisitor>();
            }
        }

        public Devart.Data.Linq.Table<Rank> Ranks
        {
            get
            {
                return this.GetTable<Rank>();
            }
        }

        public Devart.Data.Linq.Table<Reminder> Reminders
        {
            get
            {
                return this.GetTable<Reminder>();
            }
        }

        public Devart.Data.Linq.Table<Reputation> Reputations
        {
            get
            {
                return this.GetTable<Reputation>();
            }
        }

        public Devart.Data.Linq.Table<Reputationlevel> Reputationlevels
        {
            get
            {
                return this.GetTable<Reputationlevel>();
            }
        }

        public Devart.Data.Linq.Table<Route> Routes
        {
            get
            {
                return this.GetTable<Route>();
            }
        }

        public Devart.Data.Linq.Table<Rssfeed> Rssfeeds
        {
            get
            {
                return this.GetTable<Rssfeed>();
            }
        }

        public Devart.Data.Linq.Table<Rsslog> Rsslogs
        {
            get
            {
                return this.GetTable<Rsslog>();
            }
        }

        public Devart.Data.Linq.Table<Searchcore> Searchcores
        {
            get
            {
                return this.GetTable<Searchcore>();
            }
        }

        public Devart.Data.Linq.Table<Searchcoretext> Searchcoretexts
        {
            get
            {
                return this.GetTable<Searchcoretext>();
            }
        }

        public Devart.Data.Linq.Table<Searchgroup> Searchgroups
        {
            get
            {
                return this.GetTable<Searchgroup>();
            }
        }

        public Devart.Data.Linq.Table<Searchgrouptext> Searchgrouptexts
        {
            get
            {
                return this.GetTable<Searchgrouptext>();
            }
        }

        public Devart.Data.Linq.Table<Searchlog> Searchlogs
        {
            get
            {
                return this.GetTable<Searchlog>();
            }
        }

        public Devart.Data.Linq.Table<Session> Sessions
        {
            get
            {
                return this.GetTable<Session>();
            }
        }

        public Devart.Data.Linq.Table<Setting> Settings
        {
            get
            {
                return this.GetTable<Setting>();
            }
        }

        public Devart.Data.Linq.Table<Settinggroup> Settinggroups
        {
            get
            {
                return this.GetTable<Settinggroup>();
            }
        }

        public Devart.Data.Linq.Table<Sigparsed> Sigparseds
        {
            get
            {
                return this.GetTable<Sigparsed>();
            }
        }

        public Devart.Data.Linq.Table<Sigpic> Sigpics
        {
            get
            {
                return this.GetTable<Sigpic>();
            }
        }

        public Devart.Data.Linq.Table<Smilie> Smilies
        {
            get
            {
                return this.GetTable<Smilie>();
            }
        }

        public Devart.Data.Linq.Table<Socialgroup> Socialgroups
        {
            get
            {
                return this.GetTable<Socialgroup>();
            }
        }

        public Devart.Data.Linq.Table<Socialgroupcategory> Socialgroupcategories
        {
            get
            {
                return this.GetTable<Socialgroupcategory>();
            }
        }

        public Devart.Data.Linq.Table<Socialgroupicon> Socialgroupicons
        {
            get
            {
                return this.GetTable<Socialgroupicon>();
            }
        }

        public Devart.Data.Linq.Table<Socialgroupmember> Socialgroupmembers
        {
            get
            {
                return this.GetTable<Socialgroupmember>();
            }
        }

        public Devart.Data.Linq.Table<Spamlog> Spamlogs
        {
            get
            {
                return this.GetTable<Spamlog>();
            }
        }

        public Devart.Data.Linq.Table<Stat> Stats
        {
            get
            {
                return this.GetTable<Stat>();
            }
        }

        public Devart.Data.Linq.Table<Strike> Strikes
        {
            get
            {
                return this.GetTable<Strike>();
            }
        }

        public Devart.Data.Linq.Table<Style> Styles
        {
            get
            {
                return this.GetTable<Style>();
            }
        }

        public Devart.Data.Linq.Table<Stylevar> Stylevars
        {
            get
            {
                return this.GetTable<Stylevar>();
            }
        }

        public Devart.Data.Linq.Table<Stylevardfn> Stylevardfns
        {
            get
            {
                return this.GetTable<Stylevardfn>();
            }
        }

        public Devart.Data.Linq.Table<Subscribediscussion> Subscribediscussions
        {
            get
            {
                return this.GetTable<Subscribediscussion>();
            }
        }

        public Devart.Data.Linq.Table<Subscribeevent> Subscribeevents
        {
            get
            {
                return this.GetTable<Subscribeevent>();
            }
        }

        public Devart.Data.Linq.Table<Subscribeforum> Subscribeforums
        {
            get
            {
                return this.GetTable<Subscribeforum>();
            }
        }

        public Devart.Data.Linq.Table<Subscribegroup> Subscribegroups
        {
            get
            {
                return this.GetTable<Subscribegroup>();
            }
        }

        public Devart.Data.Linq.Table<Subscribethread> Subscribethreads
        {
            get
            {
                return this.GetTable<Subscribethread>();
            }
        }

        public Devart.Data.Linq.Table<Subscription> Subscriptions
        {
            get
            {
                return this.GetTable<Subscription>();
            }
        }

        public Devart.Data.Linq.Table<Subscriptionlog> Subscriptionlogs
        {
            get
            {
                return this.GetTable<Subscriptionlog>();
            }
        }

        public Devart.Data.Linq.Table<Subscriptionpermission> Subscriptionpermissions
        {
            get
            {
                return this.GetTable<Subscriptionpermission>();
            }
        }

        public Devart.Data.Linq.Table<Tachyforumcounter> Tachyforumcounters
        {
            get
            {
                return this.GetTable<Tachyforumcounter>();
            }
        }

        public Devart.Data.Linq.Table<Tachyforumpost> Tachyforumposts
        {
            get
            {
                return this.GetTable<Tachyforumpost>();
            }
        }

        public Devart.Data.Linq.Table<Tachythreadcounter> Tachythreadcounters
        {
            get
            {
                return this.GetTable<Tachythreadcounter>();
            }
        }

        public Devart.Data.Linq.Table<Tachythreadpost> Tachythreadposts
        {
            get
            {
                return this.GetTable<Tachythreadpost>();
            }
        }

        public Devart.Data.Linq.Table<Tag> Tags
        {
            get
            {
                return this.GetTable<Tag>();
            }
        }

        public Devart.Data.Linq.Table<Tagcontent> Tagcontents
        {
            get
            {
                return this.GetTable<Tagcontent>();
            }
        }

        public Devart.Data.Linq.Table<Tagsearch> Tagsearches
        {
            get
            {
                return this.GetTable<Tagsearch>();
            }
        }

        public Devart.Data.Linq.Table<Template> Templates
        {
            get
            {
                return this.GetTable<Template>();
            }
        }

        public Devart.Data.Linq.Table<Templatehistory> Templatehistories
        {
            get
            {
                return this.GetTable<Templatehistory>();
            }
        }

        public Devart.Data.Linq.Table<Templatemerge> Templatemerges
        {
            get
            {
                return this.GetTable<Templatemerge>();
            }
        }

        public Devart.Data.Linq.Table<Thread> Threads
        {
            get
            {
                return this.GetTable<Thread>();
            }
        }

        public Devart.Data.Linq.Table<Threadrate> Threadrates
        {
            get
            {
                return this.GetTable<Threadrate>();
            }
        }

        public Devart.Data.Linq.Table<Threadread> Threadreads
        {
            get
            {
                return this.GetTable<Threadread>();
            }
        }

        public Devart.Data.Linq.Table<Threadredirect> Threadredirects
        {
            get
            {
                return this.GetTable<Threadredirect>();
            }
        }

        public Devart.Data.Linq.Table<Threadview> Threadviews
        {
            get
            {
                return this.GetTable<Threadview>();
            }
        }

        public Devart.Data.Linq.Table<Upgradelog> Upgradelogs
        {
            get
            {
                return this.GetTable<Upgradelog>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<Useractivation> Useractivations
        {
            get
            {
                return this.GetTable<Useractivation>();
            }
        }

        public Devart.Data.Linq.Table<Userban> Userbans
        {
            get
            {
                return this.GetTable<Userban>();
            }
        }

        public Devart.Data.Linq.Table<Userchangelog> Userchangelogs
        {
            get
            {
                return this.GetTable<Userchangelog>();
            }
        }

        public Devart.Data.Linq.Table<Usercss> Usercss
        {
            get
            {
                return this.GetTable<Usercss>();
            }
        }

        public Devart.Data.Linq.Table<Usercsscache> Usercsscaches
        {
            get
            {
                return this.GetTable<Usercsscache>();
            }
        }

        public Devart.Data.Linq.Table<Userfield> Userfields
        {
            get
            {
                return this.GetTable<Userfield>();
            }
        }

        public Devart.Data.Linq.Table<Usergroup> Usergroups
        {
            get
            {
                return this.GetTable<Usergroup>();
            }
        }

        public Devart.Data.Linq.Table<Usergroupleader> Usergroupleaders
        {
            get
            {
                return this.GetTable<Usergroupleader>();
            }
        }

        public Devart.Data.Linq.Table<Usergrouprequest> Usergrouprequests
        {
            get
            {
                return this.GetTable<Usergrouprequest>();
            }
        }

        public Devart.Data.Linq.Table<Userlist> Userlists
        {
            get
            {
                return this.GetTable<Userlist>();
            }
        }

        public Devart.Data.Linq.Table<Usernote> Usernotes
        {
            get
            {
                return this.GetTable<Usernote>();
            }
        }

        public Devart.Data.Linq.Table<Userpromotion> Userpromotions
        {
            get
            {
                return this.GetTable<Userpromotion>();
            }
        }

        public Devart.Data.Linq.Table<Usertextfield> Usertextfields
        {
            get
            {
                return this.GetTable<Usertextfield>();
            }
        }

        public Devart.Data.Linq.Table<Usertitle> Usertitles
        {
            get
            {
                return this.GetTable<Usertitle>();
            }
        }

        public Devart.Data.Linq.Table<Visitormessage> Visitormessages
        {
            get
            {
                return this.GetTable<Visitormessage>();
            }
        }

        public Devart.Data.Linq.Table<Visitormessagehash> Visitormessagehashes
        {
            get
            {
                return this.GetTable<Visitormessagehash>();
            }
        }
    }

    [Table(Name = @"forum.access")]
    public partial class Access : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Forumid;

        private int _Accessmask;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnAccessmaskChanging(int value);
        partial void OnAccessmaskChanged();
        #endregion

        public Access()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"accessmask", Storage = "_Accessmask", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Accessmask
        {
            get
            {
                return this._Accessmask;
            }
            set
            {
                if (this._Accessmask != value)
                {
                    this.OnAccessmaskChanging(value);
                    this.SendPropertyChanging();
                    this._Accessmask = value;
                    this.SendPropertyChanged("Accessmask");
                    this.OnAccessmaskChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.action")]
    public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Actionid;

        private long _Routeid;

        private long _Packageid;

        private string _Controller;

        private string _Useraction;

        private string _Classaction;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnActionidChanging(long value);
        partial void OnActionidChanged();
        partial void OnRouteidChanging(long value);
        partial void OnRouteidChanged();
        partial void OnPackageidChanging(long value);
        partial void OnPackageidChanged();
        partial void OnControllerChanging(string value);
        partial void OnControllerChanged();
        partial void OnUseractionChanging(string value);
        partial void OnUseractionChanged();
        partial void OnClassactionChanging(string value);
        partial void OnClassactionChanged();
        #endregion

        public Action()
        {
            OnCreated();
        }

        [Column(Name = @"actionid", Storage = "_Actionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Actionid
        {
            get
            {
                return this._Actionid;
            }
            set
            {
                if (this._Actionid != value)
                {
                    this.OnActionidChanging(value);
                    this.SendPropertyChanging();
                    this._Actionid = value;
                    this.SendPropertyChanged("Actionid");
                    this.OnActionidChanged();
                }
            }
        }

        [Column(Name = @"routeid", Storage = "_Routeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Routeid
        {
            get
            {
                return this._Routeid;
            }
            set
            {
                if (this._Routeid != value)
                {
                    this.OnRouteidChanging(value);
                    this.SendPropertyChanging();
                    this._Routeid = value;
                    this.SendPropertyChanged("Routeid");
                    this.OnRouteidChanged();
                }
            }
        }

        [Column(Name = @"packageid", Storage = "_Packageid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Packageid
        {
            get
            {
                return this._Packageid;
            }
            set
            {
                if (this._Packageid != value)
                {
                    this.OnPackageidChanging(value);
                    this.SendPropertyChanging();
                    this._Packageid = value;
                    this.SendPropertyChanged("Packageid");
                    this.OnPackageidChanged();
                }
            }
        }

        [Column(Name = @"controller", Storage = "_Controller", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Controller
        {
            get
            {
                return this._Controller;
            }
            set
            {
                if (this._Controller != value)
                {
                    this.OnControllerChanging(value);
                    this.SendPropertyChanging();
                    this._Controller = value;
                    this.SendPropertyChanged("Controller");
                    this.OnControllerChanged();
                }
            }
        }

        [Column(Name = @"useraction", Storage = "_Useraction", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Useraction
        {
            get
            {
                return this._Useraction;
            }
            set
            {
                if (this._Useraction != value)
                {
                    this.OnUseractionChanging(value);
                    this.SendPropertyChanging();
                    this._Useraction = value;
                    this.SendPropertyChanged("Useraction");
                    this.OnUseractionChanged();
                }
            }
        }

        [Column(Name = @"classaction", Storage = "_Classaction", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Classaction
        {
            get
            {
                return this._Classaction;
            }
            set
            {
                if (this._Classaction != value)
                {
                    this.OnClassactionChanging(value);
                    this.SendPropertyChanging();
                    this._Classaction = value;
                    this.SendPropertyChanged("Classaction");
                    this.OnClassactionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.ad")]
    public partial class Ad : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Adid;

        private string _Title;

        private string _Adlocation;

        private long _Displayorder;

        private int _Active;

        private string _Snippet;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdidChanging(long value);
        partial void OnAdidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnAdlocationChanging(string value);
        partial void OnAdlocationChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnActiveChanging(int value);
        partial void OnActiveChanged();
        partial void OnSnippetChanging(string value);
        partial void OnSnippetChanged();
        #endregion

        public Ad()
        {
            OnCreated();
        }

        [Column(Name = @"adid", Storage = "_Adid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Adid
        {
            get
            {
                return this._Adid;
            }
            set
            {
                if (this._Adid != value)
                {
                    this.OnAdidChanging(value);
                    this.SendPropertyChanging();
                    this._Adid = value;
                    this.SendPropertyChanged("Adid");
                    this.OnAdidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"adlocation", Storage = "_Adlocation", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Adlocation
        {
            get
            {
                return this._Adlocation;
            }
            set
            {
                if (this._Adlocation != value)
                {
                    this.OnAdlocationChanging(value);
                    this.SendPropertyChanging();
                    this._Adlocation = value;
                    this.SendPropertyChanged("Adlocation");
                    this.OnAdlocationChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"snippet", Storage = "_Snippet", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Snippet
        {
            get
            {
                return this._Snippet;
            }
            set
            {
                if (this._Snippet != value)
                {
                    this.OnSnippetChanging(value);
                    this.SendPropertyChanging();
                    this._Snippet = value;
                    this.SendPropertyChanged("Snippet");
                    this.OnSnippetChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.adcriteria")]
    public partial class Adcriteria : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Adid;

        private string _Criteriaid;

        private string _Condition1;

        private string _Condition2;

        private string _Condition3;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdidChanging(long value);
        partial void OnAdidChanged();
        partial void OnCriteriaidChanging(string value);
        partial void OnCriteriaidChanged();
        partial void OnCondition1Changing(string value);
        partial void OnCondition1Changed();
        partial void OnCondition2Changing(string value);
        partial void OnCondition2Changed();
        partial void OnCondition3Changing(string value);
        partial void OnCondition3Changed();
        #endregion

        public Adcriteria()
        {
            OnCreated();
        }

        [Column(Name = @"adid", Storage = "_Adid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Adid
        {
            get
            {
                return this._Adid;
            }
            set
            {
                if (this._Adid != value)
                {
                    this.OnAdidChanging(value);
                    this.SendPropertyChanging();
                    this._Adid = value;
                    this.SendPropertyChanged("Adid");
                    this.OnAdidChanged();
                }
            }
        }

        [Column(Name = @"criteriaid", Storage = "_Criteriaid", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Criteriaid
        {
            get
            {
                return this._Criteriaid;
            }
            set
            {
                if (this._Criteriaid != value)
                {
                    this.OnCriteriaidChanging(value);
                    this.SendPropertyChanging();
                    this._Criteriaid = value;
                    this.SendPropertyChanged("Criteriaid");
                    this.OnCriteriaidChanged();
                }
            }
        }

        [Column(Name = @"condition1", Storage = "_Condition1", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition1
        {
            get
            {
                return this._Condition1;
            }
            set
            {
                if (this._Condition1 != value)
                {
                    this.OnCondition1Changing(value);
                    this.SendPropertyChanging();
                    this._Condition1 = value;
                    this.SendPropertyChanged("Condition1");
                    this.OnCondition1Changed();
                }
            }
        }

        [Column(Name = @"condition2", Storage = "_Condition2", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition2
        {
            get
            {
                return this._Condition2;
            }
            set
            {
                if (this._Condition2 != value)
                {
                    this.OnCondition2Changing(value);
                    this.SendPropertyChanging();
                    this._Condition2 = value;
                    this.SendPropertyChanged("Condition2");
                    this.OnCondition2Changed();
                }
            }
        }

        [Column(Name = @"condition3", Storage = "_Condition3", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition3
        {
            get
            {
                return this._Condition3;
            }
            set
            {
                if (this._Condition3 != value)
                {
                    this.OnCondition3Changing(value);
                    this.SendPropertyChanging();
                    this._Condition3 = value;
                    this.SendPropertyChanged("Condition3");
                    this.OnCondition3Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.adminhelp")]
    public partial class Adminhelp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Adminhelpid;

        private string _Script;

        private string _Action;

        private string _Optionname;

        private int _Displayorder;

        private int _Volatile;

        private string _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdminhelpidChanging(long value);
        partial void OnAdminhelpidChanged();
        partial void OnScriptChanging(string value);
        partial void OnScriptChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnOptionnameChanging(string value);
        partial void OnOptionnameChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnVolatileChanging(int value);
        partial void OnVolatileChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        #endregion

        public Adminhelp()
        {
            OnCreated();
        }

        [Column(Name = @"adminhelpid", Storage = "_Adminhelpid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Adminhelpid
        {
            get
            {
                return this._Adminhelpid;
            }
            set
            {
                if (this._Adminhelpid != value)
                {
                    this.OnAdminhelpidChanging(value);
                    this.SendPropertyChanging();
                    this._Adminhelpid = value;
                    this.SendPropertyChanged("Adminhelpid");
                    this.OnAdminhelpidChanged();
                }
            }
        }

        [Column(Name = @"script", Storage = "_Script", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Script
        {
            get
            {
                return this._Script;
            }
            set
            {
                if (this._Script != value)
                {
                    this.OnScriptChanging(value);
                    this.SendPropertyChanging();
                    this._Script = value;
                    this.SendPropertyChanged("Script");
                    this.OnScriptChanged();
                }
            }
        }

        [Column(Name = @"action", Storage = "_Action", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [Column(Name = @"optionname", Storage = "_Optionname", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Optionname
        {
            get
            {
                return this._Optionname;
            }
            set
            {
                if (this._Optionname != value)
                {
                    this.OnOptionnameChanging(value);
                    this.SendPropertyChanging();
                    this._Optionname = value;
                    this.SendPropertyChanged("Optionname");
                    this.OnOptionnameChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"volatile", Storage = "_Volatile", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Volatile
        {
            get
            {
                return this._Volatile;
            }
            set
            {
                if (this._Volatile != value)
                {
                    this.OnVolatileChanging(value);
                    this.SendPropertyChanging();
                    this._Volatile = value;
                    this.SendPropertyChanged("Volatile");
                    this.OnVolatileChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.administrator")]
    public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Adminpermissions;

        private string _Navprefs;

        private string _Cssprefs;

        private string _Notes;

        private string _Dismissednews;

        private int _Languageid;

        private long _Blogpermissions;

        private long _Vbcmspermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnAdminpermissionsChanging(long value);
        partial void OnAdminpermissionsChanged();
        partial void OnNavprefsChanging(string value);
        partial void OnNavprefsChanged();
        partial void OnCssprefsChanging(string value);
        partial void OnCssprefsChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnDismissednewsChanging(string value);
        partial void OnDismissednewsChanged();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnBlogpermissionsChanging(long value);
        partial void OnBlogpermissionsChanged();
        partial void OnVbcmspermissionsChanging(long value);
        partial void OnVbcmspermissionsChanged();
        #endregion

        public Administrator()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"adminpermissions", Storage = "_Adminpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminpermissions
        {
            get
            {
                return this._Adminpermissions;
            }
            set
            {
                if (this._Adminpermissions != value)
                {
                    this.OnAdminpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Adminpermissions = value;
                    this.SendPropertyChanged("Adminpermissions");
                    this.OnAdminpermissionsChanged();
                }
            }
        }

        [Column(Name = @"navprefs", Storage = "_Navprefs", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Navprefs
        {
            get
            {
                return this._Navprefs;
            }
            set
            {
                if (this._Navprefs != value)
                {
                    this.OnNavprefsChanging(value);
                    this.SendPropertyChanging();
                    this._Navprefs = value;
                    this.SendPropertyChanged("Navprefs");
                    this.OnNavprefsChanged();
                }
            }
        }

        [Column(Name = @"cssprefs", Storage = "_Cssprefs", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Cssprefs
        {
            get
            {
                return this._Cssprefs;
            }
            set
            {
                if (this._Cssprefs != value)
                {
                    this.OnCssprefsChanging(value);
                    this.SendPropertyChanging();
                    this._Cssprefs = value;
                    this.SendPropertyChanged("Cssprefs");
                    this.OnCssprefsChanged();
                }
            }
        }

        [Column(Name = @"notes", Storage = "_Notes", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

        [Column(Name = @"dismissednews", Storage = "_Dismissednews", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Dismissednews
        {
            get
            {
                return this._Dismissednews;
            }
            set
            {
                if (this._Dismissednews != value)
                {
                    this.OnDismissednewsChanging(value);
                    this.SendPropertyChanging();
                    this._Dismissednews = value;
                    this.SendPropertyChanged("Dismissednews");
                    this.OnDismissednewsChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"blogpermissions", Storage = "_Blogpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogpermissions
        {
            get
            {
                return this._Blogpermissions;
            }
            set
            {
                if (this._Blogpermissions != value)
                {
                    this.OnBlogpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Blogpermissions = value;
                    this.SendPropertyChanged("Blogpermissions");
                    this.OnBlogpermissionsChanged();
                }
            }
        }

        [Column(Name = @"vbcmspermissions", Storage = "_Vbcmspermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbcmspermissions
        {
            get
            {
                return this._Vbcmspermissions;
            }
            set
            {
                if (this._Vbcmspermissions != value)
                {
                    this.OnVbcmspermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Vbcmspermissions = value;
                    this.SendPropertyChanged("Vbcmspermissions");
                    this.OnVbcmspermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.adminlog")]
    public partial class Adminlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Adminlogid;

        private long _Userid;

        private long _Dateline;

        private string _Script;

        private string _Action;

        private string _Extrainfo;

        private string _Ipaddress;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdminlogidChanging(long value);
        partial void OnAdminlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnScriptChanging(string value);
        partial void OnScriptChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnExtrainfoChanging(string value);
        partial void OnExtrainfoChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        #endregion

        public Adminlog()
        {
            OnCreated();
        }

        [Column(Name = @"adminlogid", Storage = "_Adminlogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Adminlogid
        {
            get
            {
                return this._Adminlogid;
            }
            set
            {
                if (this._Adminlogid != value)
                {
                    this.OnAdminlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Adminlogid = value;
                    this.SendPropertyChanged("Adminlogid");
                    this.OnAdminlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"script", Storage = "_Script", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Script
        {
            get
            {
                return this._Script;
            }
            set
            {
                if (this._Script != value)
                {
                    this.OnScriptChanging(value);
                    this.SendPropertyChanging();
                    this._Script = value;
                    this.SendPropertyChanged("Script");
                    this.OnScriptChanged();
                }
            }
        }

        [Column(Name = @"action", Storage = "_Action", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [Column(Name = @"extrainfo", Storage = "_Extrainfo", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Extrainfo
        {
            get
            {
                return this._Extrainfo;
            }
            set
            {
                if (this._Extrainfo != value)
                {
                    this.OnExtrainfoChanging(value);
                    this.SendPropertyChanging();
                    this._Extrainfo = value;
                    this.SendPropertyChanged("Extrainfo");
                    this.OnExtrainfoChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.adminmessage")]
    public partial class Adminmessage : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Adminmessageid;

        private string _Varname;

        private int _Dismissable;

        private string _Script;

        private string _Action;

        private string _Execurl;

        private string _Method;

        private long _Dateline;

        private string _Status;

        private long _Statususerid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAdminmessageidChanging(long value);
        partial void OnAdminmessageidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnDismissableChanging(int value);
        partial void OnDismissableChanged();
        partial void OnScriptChanging(string value);
        partial void OnScriptChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnExecurlChanging(string value);
        partial void OnExecurlChanged();
        partial void OnMethodChanging(string value);
        partial void OnMethodChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnStatususeridChanging(long value);
        partial void OnStatususeridChanged();
        #endregion

        public Adminmessage()
        {
            OnCreated();
        }

        [Column(Name = @"adminmessageid", Storage = "_Adminmessageid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Adminmessageid
        {
            get
            {
                return this._Adminmessageid;
            }
            set
            {
                if (this._Adminmessageid != value)
                {
                    this.OnAdminmessageidChanging(value);
                    this.SendPropertyChanging();
                    this._Adminmessageid = value;
                    this.SendPropertyChanged("Adminmessageid");
                    this.OnAdminmessageidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"dismissable", Storage = "_Dismissable", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Dismissable
        {
            get
            {
                return this._Dismissable;
            }
            set
            {
                if (this._Dismissable != value)
                {
                    this.OnDismissableChanging(value);
                    this.SendPropertyChanging();
                    this._Dismissable = value;
                    this.SendPropertyChanged("Dismissable");
                    this.OnDismissableChanged();
                }
            }
        }

        [Column(Name = @"script", Storage = "_Script", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Script
        {
            get
            {
                return this._Script;
            }
            set
            {
                if (this._Script != value)
                {
                    this.OnScriptChanging(value);
                    this.SendPropertyChanging();
                    this._Script = value;
                    this.SendPropertyChanged("Script");
                    this.OnScriptChanged();
                }
            }
        }

        [Column(Name = @"action", Storage = "_Action", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [Column(Name = @"execurl", Storage = "_Execurl", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Execurl
        {
            get
            {
                return this._Execurl;
            }
            set
            {
                if (this._Execurl != value)
                {
                    this.OnExecurlChanging(value);
                    this.SendPropertyChanging();
                    this._Execurl = value;
                    this.SendPropertyChanged("Execurl");
                    this.OnExecurlChanged();
                }
            }
        }

        [Column(Name = @"method", Storage = "_Method", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Method
        {
            get
            {
                return this._Method;
            }
            set
            {
                if (this._Method != value)
                {
                    this.OnMethodChanging(value);
                    this.SendPropertyChanging();
                    this._Method = value;
                    this.SendPropertyChanged("Method");
                    this.OnMethodChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"statususerid", Storage = "_Statususerid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Statususerid
        {
            get
            {
                return this._Statususerid;
            }
            set
            {
                if (this._Statususerid != value)
                {
                    this.OnStatususeridChanging(value);
                    this.SendPropertyChanging();
                    this._Statususerid = value;
                    this.SendPropertyChanged("Statususerid");
                    this.OnStatususeridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.adminutil")]
    public partial class Adminutil : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Title;

        private string _Text;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        #endregion

        public Adminutil()
        {
            OnCreated();
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(50) NOT NULL", IsPrimaryKey = true)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"text", Storage = "_Text", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.album")]
    public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Albumid;

        private long _Userid;

        private long _Createdate;

        private long _Lastpicturedate;

        private long _Visible;

        private long _Moderation;

        private string _Title;

        private string _Description;

        private string _State;

        private long _Coverattachmentid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAlbumidChanging(long value);
        partial void OnAlbumidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCreatedateChanging(long value);
        partial void OnCreatedateChanged();
        partial void OnLastpicturedateChanging(long value);
        partial void OnLastpicturedateChanged();
        partial void OnVisibleChanging(long value);
        partial void OnVisibleChanged();
        partial void OnModerationChanging(long value);
        partial void OnModerationChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnCoverattachmentidChanging(long value);
        partial void OnCoverattachmentidChanged();
        #endregion

        public Album()
        {
            OnCreated();
        }

        [Column(Name = @"albumid", Storage = "_Albumid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Albumid
        {
            get
            {
                return this._Albumid;
            }
            set
            {
                if (this._Albumid != value)
                {
                    this.OnAlbumidChanging(value);
                    this.SendPropertyChanging();
                    this._Albumid = value;
                    this.SendPropertyChanged("Albumid");
                    this.OnAlbumidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"createdate", Storage = "_Createdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Createdate
        {
            get
            {
                return this._Createdate;
            }
            set
            {
                if (this._Createdate != value)
                {
                    this.OnCreatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Createdate = value;
                    this.SendPropertyChanged("Createdate");
                    this.OnCreatedateChanged();
                }
            }
        }

        [Column(Name = @"lastpicturedate", Storage = "_Lastpicturedate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpicturedate
        {
            get
            {
                return this._Lastpicturedate;
            }
            set
            {
                if (this._Lastpicturedate != value)
                {
                    this.OnLastpicturedateChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpicturedate = value;
                    this.SendPropertyChanged("Lastpicturedate");
                    this.OnLastpicturedateChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"moderation", Storage = "_Moderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Moderation
        {
            get
            {
                return this._Moderation;
            }
            set
            {
                if (this._Moderation != value)
                {
                    this.OnModerationChanging(value);
                    this.SendPropertyChanging();
                    this._Moderation = value;
                    this.SendPropertyChanged("Moderation");
                    this.OnModerationChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"coverattachmentid", Storage = "_Coverattachmentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Coverattachmentid
        {
            get
            {
                return this._Coverattachmentid;
            }
            set
            {
                if (this._Coverattachmentid != value)
                {
                    this.OnCoverattachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Coverattachmentid = value;
                    this.SendPropertyChanged("Coverattachmentid");
                    this.OnCoverattachmentidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.albumupdate")]
    public partial class Albumupdate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Albumid;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAlbumidChanging(long value);
        partial void OnAlbumidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Albumupdate()
        {
            OnCreated();
        }

        [Column(Name = @"albumid", Storage = "_Albumid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Albumid
        {
            get
            {
                return this._Albumid;
            }
            set
            {
                if (this._Albumid != value)
                {
                    this.OnAlbumidChanging(value);
                    this.SendPropertyChanging();
                    this._Albumid = value;
                    this.SendPropertyChanged("Albumid");
                    this.OnAlbumidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.announcement")]
    public partial class Announcement : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Announcementid;

        private string _Title;

        private long _Userid;

        private long _Startdate;

        private long _Enddate;

        private string _Pagetext;

        private short _Forumid;

        private long _Views;

        private long _Announcementoptions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnnouncementidChanging(int value);
        partial void OnAnnouncementidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnStartdateChanging(long value);
        partial void OnStartdateChanged();
        partial void OnEnddateChanging(long value);
        partial void OnEnddateChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnForumidChanging(short value);
        partial void OnForumidChanged();
        partial void OnViewsChanging(long value);
        partial void OnViewsChanged();
        partial void OnAnnouncementoptionsChanging(long value);
        partial void OnAnnouncementoptionsChanged();
        #endregion

        public Announcement()
        {
            OnCreated();
        }

        [Column(Name = @"announcementid", Storage = "_Announcementid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Announcementid
        {
            get
            {
                return this._Announcementid;
            }
            set
            {
                if (this._Announcementid != value)
                {
                    this.OnAnnouncementidChanging(value);
                    this.SendPropertyChanging();
                    this._Announcementid = value;
                    this.SendPropertyChanged("Announcementid");
                    this.OnAnnouncementidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"startdate", Storage = "_Startdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Startdate
        {
            get
            {
                return this._Startdate;
            }
            set
            {
                if (this._Startdate != value)
                {
                    this.OnStartdateChanging(value);
                    this.SendPropertyChanging();
                    this._Startdate = value;
                    this.SendPropertyChanged("Startdate");
                    this.OnStartdateChanged();
                }
            }
        }

        [Column(Name = @"enddate", Storage = "_Enddate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Enddate
        {
            get
            {
                return this._Enddate;
            }
            set
            {
                if (this._Enddate != value)
                {
                    this.OnEnddateChanging(value);
                    this.SendPropertyChanging();
                    this._Enddate = value;
                    this.SendPropertyChanged("Enddate");
                    this.OnEnddateChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"views", Storage = "_Views", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Views
        {
            get
            {
                return this._Views;
            }
            set
            {
                if (this._Views != value)
                {
                    this.OnViewsChanging(value);
                    this.SendPropertyChanging();
                    this._Views = value;
                    this.SendPropertyChanged("Views");
                    this.OnViewsChanged();
                }
            }
        }

        [Column(Name = @"announcementoptions", Storage = "_Announcementoptions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Announcementoptions
        {
            get
            {
                return this._Announcementoptions;
            }
            set
            {
                if (this._Announcementoptions != value)
                {
                    this.OnAnnouncementoptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Announcementoptions = value;
                    this.SendPropertyChanged("Announcementoptions");
                    this.OnAnnouncementoptionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.announcementread")]
    public partial class Announcementread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Announcementid;

        private long _Userid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnnouncementidChanging(long value);
        partial void OnAnnouncementidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        #endregion

        public Announcementread()
        {
            OnCreated();
        }

        [Column(Name = @"announcementid", Storage = "_Announcementid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Announcementid
        {
            get
            {
                return this._Announcementid;
            }
            set
            {
                if (this._Announcementid != value)
                {
                    this.OnAnnouncementidChanging(value);
                    this.SendPropertyChanging();
                    this._Announcementid = value;
                    this.SendPropertyChanged("Announcementid");
                    this.OnAnnouncementidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachment")]
    public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Attachmentid;

        private long _Contenttypeid;

        private long _Contentid;

        private long _Userid;

        private long _Dateline;

        private long _Filedataid;

        private string _State;

        private long _Counter;

        private string _Posthash;

        private string _Filename;

        private string _Caption;

        private long _Reportthreadid;

        private string _Settings;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnContentidChanging(long value);
        partial void OnContentidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnFiledataidChanging(long value);
        partial void OnFiledataidChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnCounterChanging(long value);
        partial void OnCounterChanged();
        partial void OnPosthashChanging(string value);
        partial void OnPosthashChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnCaptionChanging(string value);
        partial void OnCaptionChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        partial void OnSettingsChanging(string value);
        partial void OnSettingsChanged();
        #endregion

        public Attachment()
        {
            OnCreated();
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"contentid", Storage = "_Contentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contentid
        {
            get
            {
                return this._Contentid;
            }
            set
            {
                if (this._Contentid != value)
                {
                    this.OnContentidChanging(value);
                    this.SendPropertyChanging();
                    this._Contentid = value;
                    this.SendPropertyChanged("Contentid");
                    this.OnContentidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"filedataid", Storage = "_Filedataid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filedataid
        {
            get
            {
                return this._Filedataid;
            }
            set
            {
                if (this._Filedataid != value)
                {
                    this.OnFiledataidChanging(value);
                    this.SendPropertyChanging();
                    this._Filedataid = value;
                    this.SendPropertyChanged("Filedataid");
                    this.OnFiledataidChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"counter", Storage = "_Counter", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Counter
        {
            get
            {
                return this._Counter;
            }
            set
            {
                if (this._Counter != value)
                {
                    this.OnCounterChanging(value);
                    this.SendPropertyChanging();
                    this._Counter = value;
                    this.SendPropertyChanged("Counter");
                    this.OnCounterChanged();
                }
            }
        }

        [Column(Name = @"posthash", Storage = "_Posthash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Posthash
        {
            get
            {
                return this._Posthash;
            }
            set
            {
                if (this._Posthash != value)
                {
                    this.OnPosthashChanging(value);
                    this.SendPropertyChanging();
                    this._Posthash = value;
                    this.SendPropertyChanged("Posthash");
                    this.OnPosthashChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"caption", Storage = "_Caption", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Caption
        {
            get
            {
                return this._Caption;
            }
            set
            {
                if (this._Caption != value)
                {
                    this.OnCaptionChanging(value);
                    this.SendPropertyChanging();
                    this._Caption = value;
                    this.SendPropertyChanged("Caption");
                    this.OnCaptionChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }

        [Column(Name = @"settings", Storage = "_Settings", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(value);
                    this.SendPropertyChanging();
                    this._Settings = value;
                    this.SendPropertyChanged("Settings");
                    this.OnSettingsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachmentcategory")]
    public partial class Attachmentcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Categoryid;

        private long _Userid;

        private string _Title;

        private long _Parentid;

        private long _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryidChanging(long value);
        partial void OnCategoryidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnParentidChanging(long value);
        partial void OnParentidChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        #endregion

        public Attachmentcategory()
        {
            OnCreated();
        }

        [Column(Name = @"categoryid", Storage = "_Categoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachmentcategoryuser")]
    public partial class Attachmentcategoryuser : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Filedataid;

        private long _Userid;

        private long _Categoryid;

        private string _Filename;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFiledataidChanging(long value);
        partial void OnFiledataidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCategoryidChanging(long value);
        partial void OnCategoryidChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Attachmentcategoryuser()
        {
            OnCreated();
        }

        [Column(Name = @"filedataid", Storage = "_Filedataid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Filedataid
        {
            get
            {
                return this._Filedataid;
            }
            set
            {
                if (this._Filedataid != value)
                {
                    this.OnFiledataidChanging(value);
                    this.SendPropertyChanging();
                    this._Filedataid = value;
                    this.SendPropertyChanged("Filedataid");
                    this.OnFiledataidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"categoryid", Storage = "_Categoryid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachmentpermission")]
    public partial class Attachmentpermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Attachmentpermissionid;

        private string _Extension;

        private long _Usergroupid;

        private long _Size;

        private int _Width;

        private int _Height;

        private long _Attachmentpermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAttachmentpermissionidChanging(long value);
        partial void OnAttachmentpermissionidChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnUsergroupidChanging(long value);
        partial void OnUsergroupidChanged();
        partial void OnSizeChanging(long value);
        partial void OnSizeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        partial void OnAttachmentpermissionsChanging(long value);
        partial void OnAttachmentpermissionsChanged();
        #endregion

        public Attachmentpermission()
        {
            OnCreated();
        }

        [Column(Name = @"attachmentpermissionid", Storage = "_Attachmentpermissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Attachmentpermissionid
        {
            get
            {
                return this._Attachmentpermissionid;
            }
            set
            {
                if (this._Attachmentpermissionid != value)
                {
                    this.OnAttachmentpermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentpermissionid = value;
                    this.SendPropertyChanged("Attachmentpermissionid");
                    this.OnAttachmentpermissionidChanged();
                }
            }
        }

        [Column(Name = @"extension", Storage = "_Extension", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"size", Storage = "_Size", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging();
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"attachmentpermissions", Storage = "_Attachmentpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachmentpermissions
        {
            get
            {
                return this._Attachmentpermissions;
            }
            set
            {
                if (this._Attachmentpermissions != value)
                {
                    this.OnAttachmentpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentpermissions = value;
                    this.SendPropertyChanged("Attachmentpermissions");
                    this.OnAttachmentpermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachmenttype")]
    public partial class Attachmenttype : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Extension;

        private string _Mimetype;

        private long _Size;

        private int _Width;

        private int _Height;

        private int _Display;

        private string _Contenttypes;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnMimetypeChanging(string value);
        partial void OnMimetypeChanged();
        partial void OnSizeChanging(long value);
        partial void OnSizeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        partial void OnDisplayChanging(int value);
        partial void OnDisplayChanged();
        partial void OnContenttypesChanging(string value);
        partial void OnContenttypesChanged();
        #endregion

        public Attachmenttype()
        {
            OnCreated();
        }

        [Column(Name = @"extension", Storage = "_Extension", CanBeNull = false, DbType = "char(20) NOT NULL", IsPrimaryKey = true)]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [Column(Name = @"mimetype", Storage = "_Mimetype", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Mimetype
        {
            get
            {
                return this._Mimetype;
            }
            set
            {
                if (this._Mimetype != value)
                {
                    this.OnMimetypeChanging(value);
                    this.SendPropertyChanging();
                    this._Mimetype = value;
                    this.SendPropertyChanged("Mimetype");
                    this.OnMimetypeChanged();
                }
            }
        }

        [Column(Name = @"size", Storage = "_Size", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging();
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"display", Storage = "_Display", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Display
        {
            get
            {
                return this._Display;
            }
            set
            {
                if (this._Display != value)
                {
                    this.OnDisplayChanging(value);
                    this.SendPropertyChanging();
                    this._Display = value;
                    this.SendPropertyChanged("Display");
                    this.OnDisplayChanged();
                }
            }
        }

        [Column(Name = @"contenttypes", Storage = "_Contenttypes", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Contenttypes
        {
            get
            {
                return this._Contenttypes;
            }
            set
            {
                if (this._Contenttypes != value)
                {
                    this.OnContenttypesChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypes = value;
                    this.SendPropertyChanged("Contenttypes");
                    this.OnContenttypesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.attachmentviews")]
    public partial class Attachmentview : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Attachmentid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        #endregion

        public Attachmentview()
        {
            OnCreated();
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.avatar")]
    public partial class Avatar : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Avatarid;

        private string _Title;

        private long _Minimumposts;

        private string _Avatarpath;

        private int _Imagecategoryid;

        private int _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAvataridChanging(int value);
        partial void OnAvataridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnMinimumpostsChanging(long value);
        partial void OnMinimumpostsChanged();
        partial void OnAvatarpathChanging(string value);
        partial void OnAvatarpathChanged();
        partial void OnImagecategoryidChanging(int value);
        partial void OnImagecategoryidChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        #endregion

        public Avatar()
        {
            OnCreated();
        }

        [Column(Name = @"avatarid", Storage = "_Avatarid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Avatarid
        {
            get
            {
                return this._Avatarid;
            }
            set
            {
                if (this._Avatarid != value)
                {
                    this.OnAvataridChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarid = value;
                    this.SendPropertyChanged("Avatarid");
                    this.OnAvataridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"minimumposts", Storage = "_Minimumposts", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Minimumposts
        {
            get
            {
                return this._Minimumposts;
            }
            set
            {
                if (this._Minimumposts != value)
                {
                    this.OnMinimumpostsChanging(value);
                    this.SendPropertyChanging();
                    this._Minimumposts = value;
                    this.SendPropertyChanged("Minimumposts");
                    this.OnMinimumpostsChanged();
                }
            }
        }

        [Column(Name = @"avatarpath", Storage = "_Avatarpath", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Avatarpath
        {
            get
            {
                return this._Avatarpath;
            }
            set
            {
                if (this._Avatarpath != value)
                {
                    this.OnAvatarpathChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarpath = value;
                    this.SendPropertyChanged("Avatarpath");
                    this.OnAvatarpathChanged();
                }
            }
        }

        [Column(Name = @"imagecategoryid", Storage = "_Imagecategoryid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Imagecategoryid
        {
            get
            {
                return this._Imagecategoryid;
            }
            set
            {
                if (this._Imagecategoryid != value)
                {
                    this.OnImagecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Imagecategoryid = value;
                    this.SendPropertyChanged("Imagecategoryid");
                    this.OnImagecategoryidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.bbcode")]
    public partial class Bbcode : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Bbcodeid;

        private string _Bbcodetag;

        private string _Bbcodereplacement;

        private string _Bbcodeexample;

        private string _Bbcodeexplanation;

        private short _Twoparams;

        private string _Title;

        private string _Buttonimage;

        private long _Options;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBbcodeidChanging(int value);
        partial void OnBbcodeidChanged();
        partial void OnBbcodetagChanging(string value);
        partial void OnBbcodetagChanged();
        partial void OnBbcodereplacementChanging(string value);
        partial void OnBbcodereplacementChanged();
        partial void OnBbcodeexampleChanging(string value);
        partial void OnBbcodeexampleChanged();
        partial void OnBbcodeexplanationChanging(string value);
        partial void OnBbcodeexplanationChanged();
        partial void OnTwoparamsChanging(short value);
        partial void OnTwoparamsChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnButtonimageChanging(string value);
        partial void OnButtonimageChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        #endregion

        public Bbcode()
        {
            OnCreated();
        }

        [Column(Name = @"bbcodeid", Storage = "_Bbcodeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Bbcodeid
        {
            get
            {
                return this._Bbcodeid;
            }
            set
            {
                if (this._Bbcodeid != value)
                {
                    this.OnBbcodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcodeid = value;
                    this.SendPropertyChanged("Bbcodeid");
                    this.OnBbcodeidChanged();
                }
            }
        }

        [Column(Name = @"bbcodetag", Storage = "_Bbcodetag", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Bbcodetag
        {
            get
            {
                return this._Bbcodetag;
            }
            set
            {
                if (this._Bbcodetag != value)
                {
                    this.OnBbcodetagChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcodetag = value;
                    this.SendPropertyChanged("Bbcodetag");
                    this.OnBbcodetagChanged();
                }
            }
        }

        [Column(Name = @"bbcodereplacement", Storage = "_Bbcodereplacement", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Bbcodereplacement
        {
            get
            {
                return this._Bbcodereplacement;
            }
            set
            {
                if (this._Bbcodereplacement != value)
                {
                    this.OnBbcodereplacementChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcodereplacement = value;
                    this.SendPropertyChanged("Bbcodereplacement");
                    this.OnBbcodereplacementChanged();
                }
            }
        }

        [Column(Name = @"bbcodeexample", Storage = "_Bbcodeexample", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Bbcodeexample
        {
            get
            {
                return this._Bbcodeexample;
            }
            set
            {
                if (this._Bbcodeexample != value)
                {
                    this.OnBbcodeexampleChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcodeexample = value;
                    this.SendPropertyChanged("Bbcodeexample");
                    this.OnBbcodeexampleChanged();
                }
            }
        }

        [Column(Name = @"bbcodeexplanation", Storage = "_Bbcodeexplanation", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Bbcodeexplanation
        {
            get
            {
                return this._Bbcodeexplanation;
            }
            set
            {
                if (this._Bbcodeexplanation != value)
                {
                    this.OnBbcodeexplanationChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcodeexplanation = value;
                    this.SendPropertyChanged("Bbcodeexplanation");
                    this.OnBbcodeexplanationChanged();
                }
            }
        }

        [Column(Name = @"twoparams", Storage = "_Twoparams", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Twoparams
        {
            get
            {
                return this._Twoparams;
            }
            set
            {
                if (this._Twoparams != value)
                {
                    this.OnTwoparamsChanging(value);
                    this.SendPropertyChanging();
                    this._Twoparams = value;
                    this.SendPropertyChanged("Twoparams");
                    this.OnTwoparamsChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"buttonimage", Storage = "_Buttonimage", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Buttonimage
        {
            get
            {
                return this._Buttonimage;
            }
            set
            {
                if (this._Buttonimage != value)
                {
                    this.OnButtonimageChanging(value);
                    this.SendPropertyChanging();
                    this._Buttonimage = value;
                    this.SendPropertyChanged("Buttonimage");
                    this.OnButtonimageChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.bbcode_video")]
    public partial class Bbcodevideo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Providerid;

        private string _Tagoption;

        private string _Provider;

        private string _Url;

        private string _Regexurl;

        private string _Regexscrape;

        private string _Embed;

        private long _Priority;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProvideridChanging(long value);
        partial void OnProvideridChanged();
        partial void OnTagoptionChanging(string value);
        partial void OnTagoptionChanged();
        partial void OnProviderChanging(string value);
        partial void OnProviderChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnRegexurlChanging(string value);
        partial void OnRegexurlChanged();
        partial void OnRegexscrapeChanging(string value);
        partial void OnRegexscrapeChanged();
        partial void OnEmbedChanging(string value);
        partial void OnEmbedChanged();
        partial void OnPriorityChanging(long value);
        partial void OnPriorityChanged();
        #endregion

        public Bbcodevideo()
        {
            OnCreated();
        }

        [Column(Name = @"providerid", Storage = "_Providerid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Providerid
        {
            get
            {
                return this._Providerid;
            }
            set
            {
                if (this._Providerid != value)
                {
                    this.OnProvideridChanging(value);
                    this.SendPropertyChanging();
                    this._Providerid = value;
                    this.SendPropertyChanged("Providerid");
                    this.OnProvideridChanged();
                }
            }
        }

        [Column(Name = @"tagoption", Storage = "_Tagoption", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Tagoption
        {
            get
            {
                return this._Tagoption;
            }
            set
            {
                if (this._Tagoption != value)
                {
                    this.OnTagoptionChanging(value);
                    this.SendPropertyChanging();
                    this._Tagoption = value;
                    this.SendPropertyChanged("Tagoption");
                    this.OnTagoptionChanged();
                }
            }
        }

        [Column(Name = @"provider", Storage = "_Provider", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Provider
        {
            get
            {
                return this._Provider;
            }
            set
            {
                if (this._Provider != value)
                {
                    this.OnProviderChanging(value);
                    this.SendPropertyChanging();
                    this._Provider = value;
                    this.SendPropertyChanged("Provider");
                    this.OnProviderChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"regex_url", Storage = "_Regexurl", CanBeNull = false, DbType = "varchar(254) NOT NULL")]
        public string Regexurl
        {
            get
            {
                return this._Regexurl;
            }
            set
            {
                if (this._Regexurl != value)
                {
                    this.OnRegexurlChanging(value);
                    this.SendPropertyChanging();
                    this._Regexurl = value;
                    this.SendPropertyChanged("Regexurl");
                    this.OnRegexurlChanged();
                }
            }
        }

        [Column(Name = @"regex_scrape", Storage = "_Regexscrape", CanBeNull = false, DbType = "varchar(254) NOT NULL")]
        public string Regexscrape
        {
            get
            {
                return this._Regexscrape;
            }
            set
            {
                if (this._Regexscrape != value)
                {
                    this.OnRegexscrapeChanging(value);
                    this.SendPropertyChanging();
                    this._Regexscrape = value;
                    this.SendPropertyChanged("Regexscrape");
                    this.OnRegexscrapeChanged();
                }
            }
        }

        [Column(Name = @"embed", Storage = "_Embed", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Embed
        {
            get
            {
                return this._Embed;
            }
            set
            {
                if (this._Embed != value)
                {
                    this.OnEmbedChanging(value);
                    this.SendPropertyChanging();
                    this._Embed = value;
                    this.SendPropertyChanged("Embed");
                    this.OnEmbedChanged();
                }
            }
        }

        [Column(Name = @"priority", Storage = "_Priority", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Priority
        {
            get
            {
                return this._Priority;
            }
            set
            {
                if (this._Priority != value)
                {
                    this.OnPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._Priority = value;
                    this.SendPropertyChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.block")]
    public partial class Block : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blockid;

        private int _Blocktypeid;

        private string _Title;

        private string _Description;

        private string _Url;

        private int _Cachettl;

        private short _Displayorder;

        private short _Active;

        private byte[] _Configcache;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockidChanging(long value);
        partial void OnBlockidChanged();
        partial void OnBlocktypeidChanging(int value);
        partial void OnBlocktypeidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnCachettlChanging(int value);
        partial void OnCachettlChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        partial void OnActiveChanging(short value);
        partial void OnActiveChanged();
        partial void OnConfigcacheChanging(byte[] value);
        partial void OnConfigcacheChanged();
        #endregion

        public Block()
        {
            OnCreated();
        }

        [Column(Name = @"blockid", Storage = "_Blockid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blockid
        {
            get
            {
                return this._Blockid;
            }
            set
            {
                if (this._Blockid != value)
                {
                    this.OnBlockidChanging(value);
                    this.SendPropertyChanging();
                    this._Blockid = value;
                    this.SendPropertyChanged("Blockid");
                    this.OnBlockidChanged();
                }
            }
        }

        [Column(Name = @"blocktypeid", Storage = "_Blocktypeid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Blocktypeid
        {
            get
            {
                return this._Blocktypeid;
            }
            set
            {
                if (this._Blocktypeid != value)
                {
                    this.OnBlocktypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Blocktypeid = value;
                    this.SendPropertyChanged("Blocktypeid");
                    this.OnBlocktypeidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"cachettl", Storage = "_Cachettl", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Cachettl
        {
            get
            {
                return this._Cachettl;
            }
            set
            {
                if (this._Cachettl != value)
                {
                    this.OnCachettlChanging(value);
                    this.SendPropertyChanging();
                    this._Cachettl = value;
                    this.SendPropertyChanged("Cachettl");
                    this.OnCachettlChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"configcache", Storage = "_Configcache", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Configcache
        {
            get
            {
                return this._Configcache;
            }
            set
            {
                if (this._Configcache != value)
                {
                    this.OnConfigcacheChanging(value);
                    this.SendPropertyChanging();
                    this._Configcache = value;
                    this.SendPropertyChanged("Configcache");
                    this.OnConfigcacheChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blockconfig")]
    public partial class Blockconfig : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blockid;

        private string _Name;

        private string _Value;

        private short _Serialized;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockidChanging(long value);
        partial void OnBlockidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnSerializedChanging(short value);
        partial void OnSerializedChanged();
        #endregion

        public Blockconfig()
        {
            OnCreated();
        }

        [Column(Name = @"blockid", Storage = "_Blockid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blockid
        {
            get
            {
                return this._Blockid;
            }
            set
            {
                if (this._Blockid != value)
                {
                    this.OnBlockidChanging(value);
                    this.SendPropertyChanging();
                    this._Blockid = value;
                    this.SendPropertyChanged("Blockid");
                    this.OnBlockidChanged();
                }
            }
        }

        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", IsPrimaryKey = true)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [Column(Name = @"serialized", Storage = "_Serialized", CanBeNull = false, DbType = "tinyint(4) NOT NULL")]
        public short Serialized
        {
            get
            {
                return this._Serialized;
            }
            set
            {
                if (this._Serialized != value)
                {
                    this.OnSerializedChanging(value);
                    this.SendPropertyChanging();
                    this._Serialized = value;
                    this.SendPropertyChanged("Serialized");
                    this.OnSerializedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blocktype")]
    public partial class Blocktype : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blocktypeid;

        private string _Productid;

        private string _Name;

        private string _Title;

        private string _Description;

        private short _Allowcache;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlocktypeidChanging(long value);
        partial void OnBlocktypeidChanged();
        partial void OnProductidChanging(string value);
        partial void OnProductidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAllowcacheChanging(short value);
        partial void OnAllowcacheChanged();
        #endregion

        public Blocktype()
        {
            OnCreated();
        }

        [Column(Name = @"blocktypeid", Storage = "_Blocktypeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blocktypeid
        {
            get
            {
                return this._Blocktypeid;
            }
            set
            {
                if (this._Blocktypeid != value)
                {
                    this.OnBlocktypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Blocktypeid = value;
                    this.SendPropertyChanged("Blocktypeid");
                    this.OnBlocktypeidChanged();
                }
            }
        }

        [Column(Name = @"productid", Storage = "_Productid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"allowcache", Storage = "_Allowcache", CanBeNull = false, DbType = "tinyint(4) NOT NULL")]
        public short Allowcache
        {
            get
            {
                return this._Allowcache;
            }
            set
            {
                if (this._Allowcache != value)
                {
                    this.OnAllowcacheChanging(value);
                    this.SendPropertyChanging();
                    this._Allowcache = value;
                    this.SendPropertyChanged("Allowcache");
                    this.OnAllowcacheChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog")]
    public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogid;

        private long _Firstblogtextid;

        private long _Userid;

        private long _Dateline;

        private long _Commentsvisible;

        private long _Commentsmoderation;

        private long _Commentsdeleted;

        private long _Attach;

        private long _Pending;

        private string _State;

        private long _Views;

        private string _Username;

        private string _Title;

        private long _Trackbackvisible;

        private long _Trackbackmoderation;

        private long _Options;

        private long _Lastcomment;

        private long _Lastblogtextid;

        private string _Lastcommenter;

        private long _Ratingnum;

        private long _Ratingtotal;

        private float _Rating;

        private string _Categories;

        private string _Taglist;

        private long _Postedbyuserid;

        private string _Postedbyusername;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnFirstblogtextidChanging(long value);
        partial void OnFirstblogtextidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnCommentsvisibleChanging(long value);
        partial void OnCommentsvisibleChanged();
        partial void OnCommentsmoderationChanging(long value);
        partial void OnCommentsmoderationChanged();
        partial void OnCommentsdeletedChanging(long value);
        partial void OnCommentsdeletedChanged();
        partial void OnAttachChanging(long value);
        partial void OnAttachChanged();
        partial void OnPendingChanging(long value);
        partial void OnPendingChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnViewsChanging(long value);
        partial void OnViewsChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTrackbackvisibleChanging(long value);
        partial void OnTrackbackvisibleChanged();
        partial void OnTrackbackmoderationChanging(long value);
        partial void OnTrackbackmoderationChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnLastcommentChanging(long value);
        partial void OnLastcommentChanged();
        partial void OnLastblogtextidChanging(long value);
        partial void OnLastblogtextidChanged();
        partial void OnLastcommenterChanging(string value);
        partial void OnLastcommenterChanged();
        partial void OnRatingnumChanging(long value);
        partial void OnRatingnumChanged();
        partial void OnRatingtotalChanging(long value);
        partial void OnRatingtotalChanged();
        partial void OnRatingChanging(float value);
        partial void OnRatingChanged();
        partial void OnCategoriesChanging(string value);
        partial void OnCategoriesChanged();
        partial void OnTaglistChanging(string value);
        partial void OnTaglistChanged();
        partial void OnPostedbyuseridChanging(long value);
        partial void OnPostedbyuseridChanged();
        partial void OnPostedbyusernameChanging(string value);
        partial void OnPostedbyusernameChanged();
        #endregion

        public Blog()
        {
            OnCreated();
        }

        [Column(Name = @"blogid", Storage = "_Blogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"firstblogtextid", Storage = "_Firstblogtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Firstblogtextid
        {
            get
            {
                return this._Firstblogtextid;
            }
            set
            {
                if (this._Firstblogtextid != value)
                {
                    this.OnFirstblogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Firstblogtextid = value;
                    this.SendPropertyChanged("Firstblogtextid");
                    this.OnFirstblogtextidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"comments_visible", Storage = "_Commentsvisible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Commentsvisible
        {
            get
            {
                return this._Commentsvisible;
            }
            set
            {
                if (this._Commentsvisible != value)
                {
                    this.OnCommentsvisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsvisible = value;
                    this.SendPropertyChanged("Commentsvisible");
                    this.OnCommentsvisibleChanged();
                }
            }
        }

        [Column(Name = @"comments_moderation", Storage = "_Commentsmoderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Commentsmoderation
        {
            get
            {
                return this._Commentsmoderation;
            }
            set
            {
                if (this._Commentsmoderation != value)
                {
                    this.OnCommentsmoderationChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsmoderation = value;
                    this.SendPropertyChanged("Commentsmoderation");
                    this.OnCommentsmoderationChanged();
                }
            }
        }

        [Column(Name = @"comments_deleted", Storage = "_Commentsdeleted", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Commentsdeleted
        {
            get
            {
                return this._Commentsdeleted;
            }
            set
            {
                if (this._Commentsdeleted != value)
                {
                    this.OnCommentsdeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsdeleted = value;
                    this.SendPropertyChanged("Commentsdeleted");
                    this.OnCommentsdeletedChanged();
                }
            }
        }

        [Column(Name = @"attach", Storage = "_Attach", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attach
        {
            get
            {
                return this._Attach;
            }
            set
            {
                if (this._Attach != value)
                {
                    this.OnAttachChanging(value);
                    this.SendPropertyChanging();
                    this._Attach = value;
                    this.SendPropertyChanged("Attach");
                    this.OnAttachChanged();
                }
            }
        }

        [Column(Name = @"pending", Storage = "_Pending", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pending
        {
            get
            {
                return this._Pending;
            }
            set
            {
                if (this._Pending != value)
                {
                    this.OnPendingChanging(value);
                    this.SendPropertyChanging();
                    this._Pending = value;
                    this.SendPropertyChanged("Pending");
                    this.OnPendingChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"views", Storage = "_Views", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Views
        {
            get
            {
                return this._Views;
            }
            set
            {
                if (this._Views != value)
                {
                    this.OnViewsChanging(value);
                    this.SendPropertyChanging();
                    this._Views = value;
                    this.SendPropertyChanged("Views");
                    this.OnViewsChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"trackback_visible", Storage = "_Trackbackvisible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Trackbackvisible
        {
            get
            {
                return this._Trackbackvisible;
            }
            set
            {
                if (this._Trackbackvisible != value)
                {
                    this.OnTrackbackvisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Trackbackvisible = value;
                    this.SendPropertyChanged("Trackbackvisible");
                    this.OnTrackbackvisibleChanged();
                }
            }
        }

        [Column(Name = @"trackback_moderation", Storage = "_Trackbackmoderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Trackbackmoderation
        {
            get
            {
                return this._Trackbackmoderation;
            }
            set
            {
                if (this._Trackbackmoderation != value)
                {
                    this.OnTrackbackmoderationChanging(value);
                    this.SendPropertyChanging();
                    this._Trackbackmoderation = value;
                    this.SendPropertyChanged("Trackbackmoderation");
                    this.OnTrackbackmoderationChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"lastcomment", Storage = "_Lastcomment", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastcomment
        {
            get
            {
                return this._Lastcomment;
            }
            set
            {
                if (this._Lastcomment != value)
                {
                    this.OnLastcommentChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcomment = value;
                    this.SendPropertyChanged("Lastcomment");
                    this.OnLastcommentChanged();
                }
            }
        }

        [Column(Name = @"lastblogtextid", Storage = "_Lastblogtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastblogtextid
        {
            get
            {
                return this._Lastblogtextid;
            }
            set
            {
                if (this._Lastblogtextid != value)
                {
                    this.OnLastblogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblogtextid = value;
                    this.SendPropertyChanged("Lastblogtextid");
                    this.OnLastblogtextidChanged();
                }
            }
        }

        [Column(Name = @"lastcommenter", Storage = "_Lastcommenter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastcommenter
        {
            get
            {
                return this._Lastcommenter;
            }
            set
            {
                if (this._Lastcommenter != value)
                {
                    this.OnLastcommenterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcommenter = value;
                    this.SendPropertyChanged("Lastcommenter");
                    this.OnLastcommenterChanged();
                }
            }
        }

        [Column(Name = @"ratingnum", Storage = "_Ratingnum", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingnum
        {
            get
            {
                return this._Ratingnum;
            }
            set
            {
                if (this._Ratingnum != value)
                {
                    this.OnRatingnumChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingnum = value;
                    this.SendPropertyChanged("Ratingnum");
                    this.OnRatingnumChanged();
                }
            }
        }

        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

        [Column(Name = @"rating", Storage = "_Rating", CanBeNull = false, DbType = "float NOT NULL")]
        public float Rating
        {
            get
            {
                return this._Rating;
            }
            set
            {
                if (this._Rating != value)
                {
                    this.OnRatingChanging(value);
                    this.SendPropertyChanging();
                    this._Rating = value;
                    this.SendPropertyChanged("Rating");
                    this.OnRatingChanged();
                }
            }
        }

        [Column(Name = @"categories", Storage = "_Categories", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Categories
        {
            get
            {
                return this._Categories;
            }
            set
            {
                if (this._Categories != value)
                {
                    this.OnCategoriesChanging(value);
                    this.SendPropertyChanging();
                    this._Categories = value;
                    this.SendPropertyChanged("Categories");
                    this.OnCategoriesChanged();
                }
            }
        }

        [Column(Name = @"taglist", Storage = "_Taglist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Taglist
        {
            get
            {
                return this._Taglist;
            }
            set
            {
                if (this._Taglist != value)
                {
                    this.OnTaglistChanging(value);
                    this.SendPropertyChanging();
                    this._Taglist = value;
                    this.SendPropertyChanged("Taglist");
                    this.OnTaglistChanged();
                }
            }
        }

        [Column(Name = @"postedby_userid", Storage = "_Postedbyuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postedbyuserid
        {
            get
            {
                return this._Postedbyuserid;
            }
            set
            {
                if (this._Postedbyuserid != value)
                {
                    this.OnPostedbyuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postedbyuserid = value;
                    this.SendPropertyChanged("Postedbyuserid");
                    this.OnPostedbyuseridChanged();
                }
            }
        }

        [Column(Name = @"postedby_username", Storage = "_Postedbyusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Postedbyusername
        {
            get
            {
                return this._Postedbyusername;
            }
            set
            {
                if (this._Postedbyusername != value)
                {
                    this.OnPostedbyusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Postedbyusername = value;
                    this.SendPropertyChanged("Postedbyusername");
                    this.OnPostedbyusernameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_attachment")]
    public partial class Blogattachment : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Attachmentid;

        private long _Blogid;

        private long _Userid;

        private string _Filename;

        private byte[] _Filedata;

        private long _Filesize;

        private string _Filehash;

        private string _Posthash;

        private string _Visible;

        private long _Counter;

        private long _Dateline;

        private byte[] _Thumbnail;

        private long _Thumbnaildateline;

        private long _Thumbnailfilesize;

        private string _Extension;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnFiledataChanging(byte[] value);
        partial void OnFiledataChanged();
        partial void OnFilesizeChanging(long value);
        partial void OnFilesizeChanged();
        partial void OnFilehashChanging(string value);
        partial void OnFilehashChanged();
        partial void OnPosthashChanging(string value);
        partial void OnPosthashChanged();
        partial void OnVisibleChanging(string value);
        partial void OnVisibleChanged();
        partial void OnCounterChanging(long value);
        partial void OnCounterChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnThumbnailChanging(byte[] value);
        partial void OnThumbnailChanged();
        partial void OnThumbnaildatelineChanging(long value);
        partial void OnThumbnaildatelineChanged();
        partial void OnThumbnailfilesizeChanging(long value);
        partial void OnThumbnailfilesizeChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        #endregion

        public Blogattachment()
        {
            OnCreated();
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata", CanBeNull = false, DbType = "mediumblob NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata
        {
            get
            {
                return this._Filedata;
            }
            set
            {
                if (this._Filedata != value)
                {
                    this.OnFiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Filedata = value;
                    this.SendPropertyChanged("Filedata");
                    this.OnFiledataChanged();
                }
            }
        }

        [Column(Name = @"filesize", Storage = "_Filesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filesize
        {
            get
            {
                return this._Filesize;
            }
            set
            {
                if (this._Filesize != value)
                {
                    this.OnFilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Filesize = value;
                    this.SendPropertyChanged("Filesize");
                    this.OnFilesizeChanged();
                }
            }
        }

        [Column(Name = @"filehash", Storage = "_Filehash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Filehash
        {
            get
            {
                return this._Filehash;
            }
            set
            {
                if (this._Filehash != value)
                {
                    this.OnFilehashChanging(value);
                    this.SendPropertyChanging();
                    this._Filehash = value;
                    this.SendPropertyChanged("Filehash");
                    this.OnFilehashChanged();
                }
            }
        }

        [Column(Name = @"posthash", Storage = "_Posthash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Posthash
        {
            get
            {
                return this._Posthash;
            }
            set
            {
                if (this._Posthash != value)
                {
                    this.OnPosthashChanging(value);
                    this.SendPropertyChanging();
                    this._Posthash = value;
                    this.SendPropertyChanged("Posthash");
                    this.OnPosthashChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"counter", Storage = "_Counter", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Counter
        {
            get
            {
                return this._Counter;
            }
            set
            {
                if (this._Counter != value)
                {
                    this.OnCounterChanging(value);
                    this.SendPropertyChanging();
                    this._Counter = value;
                    this.SendPropertyChanged("Counter");
                    this.OnCounterChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"thumbnail", Storage = "_Thumbnail", CanBeNull = false, DbType = "mediumblob NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Thumbnail
        {
            get
            {
                return this._Thumbnail;
            }
            set
            {
                if (this._Thumbnail != value)
                {
                    this.OnThumbnailChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnail = value;
                    this.SendPropertyChanged("Thumbnail");
                    this.OnThumbnailChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_dateline", Storage = "_Thumbnaildateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnaildateline
        {
            get
            {
                return this._Thumbnaildateline;
            }
            set
            {
                if (this._Thumbnaildateline != value)
                {
                    this.OnThumbnaildatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnaildateline = value;
                    this.SendPropertyChanged("Thumbnaildateline");
                    this.OnThumbnaildatelineChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_filesize", Storage = "_Thumbnailfilesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnailfilesize
        {
            get
            {
                return this._Thumbnailfilesize;
            }
            set
            {
                if (this._Thumbnailfilesize != value)
                {
                    this.OnThumbnailfilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailfilesize = value;
                    this.SendPropertyChanged("Thumbnailfilesize");
                    this.OnThumbnailfilesizeChanged();
                }
            }
        }

        [Column(Name = @"extension", Storage = "_Extension", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_attachmentviews")]
    public partial class Blogattachmentview : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Attachmentid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        #endregion

        public Blogattachmentview()
        {
            OnCreated();
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_category")]
    public partial class Blogcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogcategoryid;

        private long _Userid;

        private string _Title;

        private string _Description;

        private string _Parentlist;

        private string _Childlist;

        private long _Parentid;

        private long _Displayorder;

        private long _Entrycount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogcategoryidChanging(long value);
        partial void OnBlogcategoryidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnParentlistChanging(string value);
        partial void OnParentlistChanged();
        partial void OnChildlistChanging(string value);
        partial void OnChildlistChanged();
        partial void OnParentidChanging(long value);
        partial void OnParentidChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnEntrycountChanging(long value);
        partial void OnEntrycountChanged();
        #endregion

        public Blogcategory()
        {
            OnCreated();
        }

        [Column(Name = @"blogcategoryid", Storage = "_Blogcategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogcategoryid
        {
            get
            {
                return this._Blogcategoryid;
            }
            set
            {
                if (this._Blogcategoryid != value)
                {
                    this.OnBlogcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogcategoryid = value;
                    this.SendPropertyChanged("Blogcategoryid");
                    this.OnBlogcategoryidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"parentlist", Storage = "_Parentlist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Parentlist
        {
            get
            {
                return this._Parentlist;
            }
            set
            {
                if (this._Parentlist != value)
                {
                    this.OnParentlistChanging(value);
                    this.SendPropertyChanging();
                    this._Parentlist = value;
                    this.SendPropertyChanged("Parentlist");
                    this.OnParentlistChanged();
                }
            }
        }

        [Column(Name = @"childlist", Storage = "_Childlist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Childlist
        {
            get
            {
                return this._Childlist;
            }
            set
            {
                if (this._Childlist != value)
                {
                    this.OnChildlistChanging(value);
                    this.SendPropertyChanging();
                    this._Childlist = value;
                    this.SendPropertyChanged("Childlist");
                    this.OnChildlistChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"entrycount", Storage = "_Entrycount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Entrycount
        {
            get
            {
                return this._Entrycount;
            }
            set
            {
                if (this._Entrycount != value)
                {
                    this.OnEntrycountChanging(value);
                    this.SendPropertyChanging();
                    this._Entrycount = value;
                    this.SendPropertyChanged("Entrycount");
                    this.OnEntrycountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_categorypermission")]
    public partial class Blogcategorypermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Categorypermissionid;

        private long _Blogcategoryid;

        private long _Usergroupid;

        private long _Categorypermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategorypermissionidChanging(long value);
        partial void OnCategorypermissionidChanged();
        partial void OnBlogcategoryidChanging(long value);
        partial void OnBlogcategoryidChanged();
        partial void OnUsergroupidChanging(long value);
        partial void OnUsergroupidChanged();
        partial void OnCategorypermissionsChanging(long value);
        partial void OnCategorypermissionsChanged();
        #endregion

        public Blogcategorypermission()
        {
            OnCreated();
        }

        [Column(Name = @"categorypermissionid", Storage = "_Categorypermissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Categorypermissionid
        {
            get
            {
                return this._Categorypermissionid;
            }
            set
            {
                if (this._Categorypermissionid != value)
                {
                    this.OnCategorypermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Categorypermissionid = value;
                    this.SendPropertyChanged("Categorypermissionid");
                    this.OnCategorypermissionidChanged();
                }
            }
        }

        [Column(Name = @"blogcategoryid", Storage = "_Blogcategoryid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogcategoryid
        {
            get
            {
                return this._Blogcategoryid;
            }
            set
            {
                if (this._Blogcategoryid != value)
                {
                    this.OnBlogcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogcategoryid = value;
                    this.SendPropertyChanged("Blogcategoryid");
                    this.OnBlogcategoryidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"categorypermissions", Storage = "_Categorypermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Categorypermissions
        {
            get
            {
                return this._Categorypermissions;
            }
            set
            {
                if (this._Categorypermissions != value)
                {
                    this.OnCategorypermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Categorypermissions = value;
                    this.SendPropertyChanged("Categorypermissions");
                    this.OnCategorypermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_categoryuser")]
    public partial class Blogcategoryuser : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogcategoryid;

        private long _Blogid;

        private long _Userid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogcategoryidChanging(long value);
        partial void OnBlogcategoryidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        #endregion

        public Blogcategoryuser()
        {
            OnCreated();
        }

        [Column(Name = @"blogcategoryid", Storage = "_Blogcategoryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogcategoryid
        {
            get
            {
                return this._Blogcategoryid;
            }
            set
            {
                if (this._Blogcategoryid != value)
                {
                    this.OnBlogcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogcategoryid = value;
                    this.SendPropertyChanged("Blogcategoryid");
                    this.OnBlogcategoryidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_custom_block")]
    public partial class Blogcustomblock : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Customblockid;

        private long _Userid;

        private string _Title;

        private string _Pagetext;

        private long _Dateline;

        private int _Allowsmilie;

        private string _Type;

        private string _Location;

        private long _Displayorder;

        private long _Reportthreadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomblockidChanging(long value);
        partial void OnCustomblockidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        #endregion

        public Blogcustomblock()
        {
            OnCreated();
        }

        [Column(Name = @"customblockid", Storage = "_Customblockid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Customblockid
        {
            get
            {
                return this._Customblockid;
            }
            set
            {
                if (this._Customblockid != value)
                {
                    this.OnCustomblockidChanging(value);
                    this.SendPropertyChanging();
                    this._Customblockid = value;
                    this.SendPropertyChanged("Customblockid");
                    this.OnCustomblockidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"location", Storage = "_Location", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_custom_block_parsed")]
    public partial class Blogcustomblockparsed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Styleid;

        private long _Languageid;

        private string _Blocktext;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnStyleidChanging(long value);
        partial void OnStyleidChanged();
        partial void OnLanguageidChanging(long value);
        partial void OnLanguageidChanged();
        partial void OnBlocktextChanging(string value);
        partial void OnBlocktextChanged();
        #endregion

        public Blogcustomblockparsed()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"blocktext", Storage = "_Blocktext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Blocktext
        {
            get
            {
                return this._Blocktext;
            }
            set
            {
                if (this._Blocktext != value)
                {
                    this.OnBlocktextChanging(value);
                    this.SendPropertyChanging();
                    this._Blocktext = value;
                    this.SendPropertyChanged("Blocktext");
                    this.OnBlocktextChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_deletionlog")]
    public partial class Blogdeletionlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Primaryid;

        private string _Type;

        private long _Userid;

        private string _Username;

        private string _Reason;

        private long _Dateline;

        private int _Moddelete;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnModdeleteChanging(int value);
        partial void OnModdeleteChanged();
        #endregion

        public Blogdeletionlog()
        {
            OnCreated();
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(125) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"moddelete", Storage = "_Moddelete", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Moddelete
        {
            get
            {
                return this._Moddelete;
            }
            set
            {
                if (this._Moddelete != value)
                {
                    this.OnModdeleteChanging(value);
                    this.SendPropertyChanging();
                    this._Moddelete = value;
                    this.SendPropertyChanged("Moddelete");
                    this.OnModdeleteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_editlog")]
    public partial class Blogeditlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogtextid;

        private long _Userid;

        private string _Username;

        private long _Dateline;

        private string _Reason;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogtextidChanging(long value);
        partial void OnBlogtextidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        #endregion

        public Blogeditlog()
        {
            OnCreated();
        }

        [Column(Name = @"blogtextid", Storage = "_Blogtextid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogtextid
        {
            get
            {
                return this._Blogtextid;
            }
            set
            {
                if (this._Blogtextid != value)
                {
                    this.OnBlogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogtextid = value;
                    this.SendPropertyChanged("Blogtextid");
                    this.OnBlogtextidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_featured")]
    public partial class Blogfeatured : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Featureid;

        private string _Type;

        private long _Pusergroupid;

        private long _Susergroupid;

        private long _Userid;

        private long _Start;

        private long _End;

        private string _Timespan;

        private string _Refresh;

        private long _Blogid;

        private int _Displayorder;

        private int _Bbcode;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFeatureidChanging(long value);
        partial void OnFeatureidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnPusergroupidChanging(long value);
        partial void OnPusergroupidChanged();
        partial void OnSusergroupidChanging(long value);
        partial void OnSusergroupidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnStartChanging(long value);
        partial void OnStartChanged();
        partial void OnEndChanging(long value);
        partial void OnEndChanged();
        partial void OnTimespanChanging(string value);
        partial void OnTimespanChanged();
        partial void OnRefreshChanging(string value);
        partial void OnRefreshChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnBbcodeChanging(int value);
        partial void OnBbcodeChanged();
        #endregion

        public Blogfeatured()
        {
            OnCreated();
        }

        [Column(Name = @"featureid", Storage = "_Featureid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Featureid
        {
            get
            {
                return this._Featureid;
            }
            set
            {
                if (this._Featureid != value)
                {
                    this.OnFeatureidChanging(value);
                    this.SendPropertyChanging();
                    this._Featureid = value;
                    this.SendPropertyChanged("Featureid");
                    this.OnFeatureidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"pusergroupid", Storage = "_Pusergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pusergroupid
        {
            get
            {
                return this._Pusergroupid;
            }
            set
            {
                if (this._Pusergroupid != value)
                {
                    this.OnPusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Pusergroupid = value;
                    this.SendPropertyChanged("Pusergroupid");
                    this.OnPusergroupidChanged();
                }
            }
        }

        [Column(Name = @"susergroupid", Storage = "_Susergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Susergroupid
        {
            get
            {
                return this._Susergroupid;
            }
            set
            {
                if (this._Susergroupid != value)
                {
                    this.OnSusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Susergroupid = value;
                    this.SendPropertyChanged("Susergroupid");
                    this.OnSusergroupidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"start", Storage = "_Start", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Start
        {
            get
            {
                return this._Start;
            }
            set
            {
                if (this._Start != value)
                {
                    this.OnStartChanging(value);
                    this.SendPropertyChanging();
                    this._Start = value;
                    this.SendPropertyChanged("Start");
                    this.OnStartChanged();
                }
            }
        }

        [Column(Name = @"end", Storage = "_End", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long End
        {
            get
            {
                return this._End;
            }
            set
            {
                if (this._End != value)
                {
                    this.OnEndChanging(value);
                    this.SendPropertyChanging();
                    this._End = value;
                    this.SendPropertyChanged("End");
                    this.OnEndChanged();
                }
            }
        }

        [Column(Name = @"timespan", Storage = "_Timespan", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Timespan
        {
            get
            {
                return this._Timespan;
            }
            set
            {
                if (this._Timespan != value)
                {
                    this.OnTimespanChanging(value);
                    this.SendPropertyChanging();
                    this._Timespan = value;
                    this.SendPropertyChanged("Timespan");
                    this.OnTimespanChanged();
                }
            }
        }

        [Column(Name = @"refresh", Storage = "_Refresh", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Refresh
        {
            get
            {
                return this._Refresh;
            }
            set
            {
                if (this._Refresh != value)
                {
                    this.OnRefreshChanging(value);
                    this.SendPropertyChanging();
                    this._Refresh = value;
                    this.SendPropertyChanged("Refresh");
                    this.OnRefreshChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"bbcode", Storage = "_Bbcode", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Bbcode
        {
            get
            {
                return this._Bbcode;
            }
            set
            {
                if (this._Bbcode != value)
                {
                    this.OnBbcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Bbcode = value;
                    this.SendPropertyChanged("Bbcode");
                    this.OnBbcodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_groupmembership")]
    public partial class Bloggroupmembership : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Bloguserid;

        private long _Userid;

        private long _Permissions;

        private string _State;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Bloggroupmembership()
        {
            OnCreated();
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_grouppermission")]
    public partial class Bloggrouppermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Bloguserid;

        private long _Userid;

        private long _Permissions;

        private string _State;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Bloggrouppermission()
        {
            OnCreated();
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_hash")]
    public partial class Bloghash : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Blogid;

        private long _Blogtextid;

        private string _Dupehash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnBlogtextidChanging(long value);
        partial void OnBlogtextidChanged();
        partial void OnDupehashChanging(string value);
        partial void OnDupehashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Bloghash()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"blogtextid", Storage = "_Blogtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogtextid
        {
            get
            {
                return this._Blogtextid;
            }
            set
            {
                if (this._Blogtextid != value)
                {
                    this.OnBlogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogtextid = value;
                    this.SendPropertyChanged("Blogtextid");
                    this.OnBlogtextidChanged();
                }
            }
        }

        [Column(Name = @"dupehash", Storage = "_Dupehash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Dupehash
        {
            get
            {
                return this._Dupehash;
            }
            set
            {
                if (this._Dupehash != value)
                {
                    this.OnDupehashChanging(value);
                    this.SendPropertyChanging();
                    this._Dupehash = value;
                    this.SendPropertyChanged("Dupehash");
                    this.OnDupehashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_moderation")]
    public partial class Blogmoderation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Primaryid;

        private string _Type;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Blogmoderation()
        {
            OnCreated();
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_moderator")]
    public partial class Blogmoderator : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogmoderatorid;

        private long _Userid;

        private long _Permissions;

        private string _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogmoderatoridChanging(long value);
        partial void OnBlogmoderatoridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public Blogmoderator()
        {
            OnCreated();
        }

        [Column(Name = @"blogmoderatorid", Storage = "_Blogmoderatorid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogmoderatorid
        {
            get
            {
                return this._Blogmoderatorid;
            }
            set
            {
                if (this._Blogmoderatorid != value)
                {
                    this.OnBlogmoderatoridChanging(value);
                    this.SendPropertyChanging();
                    this._Blogmoderatorid = value;
                    this.SendPropertyChanged("Blogmoderatorid");
                    this.OnBlogmoderatoridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_pinghistory")]
    public partial class Blogpinghistory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogid;

        private string _Sourcemd5;

        private string _Sourceurl;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnSourcemd5Changing(string value);
        partial void OnSourcemd5Changed();
        partial void OnSourceurlChanging(string value);
        partial void OnSourceurlChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Blogpinghistory()
        {
            OnCreated();
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"sourcemd5", Storage = "_Sourcemd5", CanBeNull = false, DbType = "char(32) NOT NULL", IsPrimaryKey = true)]
        public string Sourcemd5
        {
            get
            {
                return this._Sourcemd5;
            }
            set
            {
                if (this._Sourcemd5 != value)
                {
                    this.OnSourcemd5Changing(value);
                    this.SendPropertyChanging();
                    this._Sourcemd5 = value;
                    this.SendPropertyChanged("Sourcemd5");
                    this.OnSourcemd5Changed();
                }
            }
        }

        [Column(Name = @"sourceurl", Storage = "_Sourceurl", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Sourceurl
        {
            get
            {
                return this._Sourceurl;
            }
            set
            {
                if (this._Sourceurl != value)
                {
                    this.OnSourceurlChanging(value);
                    this.SendPropertyChanging();
                    this._Sourceurl = value;
                    this.SendPropertyChanged("Sourceurl");
                    this.OnSourceurlChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_rate")]
    public partial class Blograte : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blograteid;

        private long _Blogid;

        private long _Userid;

        private long _Vote;

        private string _Ipaddress;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlograteidChanging(long value);
        partial void OnBlograteidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnVoteChanging(long value);
        partial void OnVoteChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        #endregion

        public Blograte()
        {
            OnCreated();
        }

        [Column(Name = @"blograteid", Storage = "_Blograteid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blograteid
        {
            get
            {
                return this._Blograteid;
            }
            set
            {
                if (this._Blograteid != value)
                {
                    this.OnBlograteidChanging(value);
                    this.SendPropertyChanging();
                    this._Blograteid = value;
                    this.SendPropertyChanged("Blograteid");
                    this.OnBlograteidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"vote", Storage = "_Vote", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vote
        {
            get
            {
                return this._Vote;
            }
            set
            {
                if (this._Vote != value)
                {
                    this.OnVoteChanging(value);
                    this.SendPropertyChanging();
                    this._Vote = value;
                    this.SendPropertyChanged("Vote");
                    this.OnVoteChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_read")]
    public partial class Blogread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Blogid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Blogread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_relationship")]
    public partial class Blogrelationship : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Relationshipid;

        private string _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnRelationshipidChanging(long value);
        partial void OnRelationshipidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public Blogrelationship()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"relationshipid", Storage = "_Relationshipid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Relationshipid
        {
            get
            {
                return this._Relationshipid;
            }
            set
            {
                if (this._Relationshipid != value)
                {
                    this.OnRelationshipidChanging(value);
                    this.SendPropertyChanging();
                    this._Relationshipid = value;
                    this.SendPropertyChanged("Relationshipid");
                    this.OnRelationshipidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_search")]
    public partial class Blogsearch : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogsearchid;

        private long _Userid;

        private long _Searchuserid;

        private string _Ipaddress;

        private string _Criteria;

        private string _Sortby;

        private string _Sortorder;

        private long _Searchtime;

        private long _Dateline;

        private int _Resultcount;

        private int _Completed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogsearchidChanging(long value);
        partial void OnBlogsearchidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnSearchuseridChanging(long value);
        partial void OnSearchuseridChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        partial void OnCriteriaChanging(string value);
        partial void OnCriteriaChanged();
        partial void OnSortbyChanging(string value);
        partial void OnSortbyChanged();
        partial void OnSortorderChanging(string value);
        partial void OnSortorderChanged();
        partial void OnSearchtimeChanging(long value);
        partial void OnSearchtimeChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnResultcountChanging(int value);
        partial void OnResultcountChanged();
        partial void OnCompletedChanging(int value);
        partial void OnCompletedChanged();
        #endregion

        public Blogsearch()
        {
            OnCreated();
        }

        [Column(Name = @"blogsearchid", Storage = "_Blogsearchid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogsearchid
        {
            get
            {
                return this._Blogsearchid;
            }
            set
            {
                if (this._Blogsearchid != value)
                {
                    this.OnBlogsearchidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogsearchid = value;
                    this.SendPropertyChanged("Blogsearchid");
                    this.OnBlogsearchidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"searchuserid", Storage = "_Searchuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Searchuserid
        {
            get
            {
                return this._Searchuserid;
            }
            set
            {
                if (this._Searchuserid != value)
                {
                    this.OnSearchuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Searchuserid = value;
                    this.SendPropertyChanged("Searchuserid");
                    this.OnSearchuseridChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"criteria", Storage = "_Criteria", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Criteria
        {
            get
            {
                return this._Criteria;
            }
            set
            {
                if (this._Criteria != value)
                {
                    this.OnCriteriaChanging(value);
                    this.SendPropertyChanging();
                    this._Criteria = value;
                    this.SendPropertyChanged("Criteria");
                    this.OnCriteriaChanged();
                }
            }
        }

        [Column(Name = @"sortby", Storage = "_Sortby", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Sortby
        {
            get
            {
                return this._Sortby;
            }
            set
            {
                if (this._Sortby != value)
                {
                    this.OnSortbyChanging(value);
                    this.SendPropertyChanging();
                    this._Sortby = value;
                    this.SendPropertyChanged("Sortby");
                    this.OnSortbyChanged();
                }
            }
        }

        [Column(Name = @"sortorder", Storage = "_Sortorder", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Sortorder
        {
            get
            {
                return this._Sortorder;
            }
            set
            {
                if (this._Sortorder != value)
                {
                    this.OnSortorderChanging(value);
                    this.SendPropertyChanging();
                    this._Sortorder = value;
                    this.SendPropertyChanged("Sortorder");
                    this.OnSortorderChanged();
                }
            }
        }

        [Column(Name = @"searchtime", Storage = "_Searchtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Searchtime
        {
            get
            {
                return this._Searchtime;
            }
            set
            {
                if (this._Searchtime != value)
                {
                    this.OnSearchtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Searchtime = value;
                    this.SendPropertyChanged("Searchtime");
                    this.OnSearchtimeChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"resultcount", Storage = "_Resultcount", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Resultcount
        {
            get
            {
                return this._Resultcount;
            }
            set
            {
                if (this._Resultcount != value)
                {
                    this.OnResultcountChanging(value);
                    this.SendPropertyChanging();
                    this._Resultcount = value;
                    this.SendPropertyChanged("Resultcount");
                    this.OnResultcountChanged();
                }
            }
        }

        [Column(Name = @"completed", Storage = "_Completed", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging();
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_searchresult")]
    public partial class Blogsearchresult : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogsearchid;

        private long _Id;

        private long _Offset;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogsearchidChanging(long value);
        partial void OnBlogsearchidChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnOffsetChanging(long value);
        partial void OnOffsetChanged();
        #endregion

        public Blogsearchresult()
        {
            OnCreated();
        }

        [Column(Name = @"blogsearchid", Storage = "_Blogsearchid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogsearchid
        {
            get
            {
                return this._Blogsearchid;
            }
            set
            {
                if (this._Blogsearchid != value)
                {
                    this.OnBlogsearchidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogsearchid = value;
                    this.SendPropertyChanged("Blogsearchid");
                    this.OnBlogsearchidChanged();
                }
            }
        }

        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Name = @"offset", Storage = "_Offset", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Offset
        {
            get
            {
                return this._Offset;
            }
            set
            {
                if (this._Offset != value)
                {
                    this.OnOffsetChanging(value);
                    this.SendPropertyChanging();
                    this._Offset = value;
                    this.SendPropertyChanged("Offset");
                    this.OnOffsetChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_subscribeentry")]
    public partial class Blogsubscribeentry : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogsubscribeentryid;

        private long _Blogid;

        private long _Userid;

        private long _Dateline;

        private string _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogsubscribeentryidChanging(long value);
        partial void OnBlogsubscribeentryidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public Blogsubscribeentry()
        {
            OnCreated();
        }

        [Column(Name = @"blogsubscribeentryid", Storage = "_Blogsubscribeentryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogsubscribeentryid
        {
            get
            {
                return this._Blogsubscribeentryid;
            }
            set
            {
                if (this._Blogsubscribeentryid != value)
                {
                    this.OnBlogsubscribeentryidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogsubscribeentryid = value;
                    this.SendPropertyChanged("Blogsubscribeentryid");
                    this.OnBlogsubscribeentryidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_subscribeuser")]
    public partial class Blogsubscribeuser : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogsubscribeuserid;

        private long _Bloguserid;

        private long _Userid;

        private long _Dateline;

        private string _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogsubscribeuseridChanging(long value);
        partial void OnBlogsubscribeuseridChanged();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public Blogsubscribeuser()
        {
            OnCreated();
        }

        [Column(Name = @"blogsubscribeuserid", Storage = "_Blogsubscribeuserid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogsubscribeuserid
        {
            get
            {
                return this._Blogsubscribeuserid;
            }
            set
            {
                if (this._Blogsubscribeuserid != value)
                {
                    this.OnBlogsubscribeuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Blogsubscribeuserid = value;
                    this.SendPropertyChanged("Blogsubscribeuserid");
                    this.OnBlogsubscribeuseridChanged();
                }
            }
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_summarystats")]
    public partial class Blogsummarystat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Dateline;

        private long _Users;

        private long _Comments;

        private long _Entries;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUsersChanging(long value);
        partial void OnUsersChanged();
        partial void OnCommentsChanging(long value);
        partial void OnCommentsChanged();
        partial void OnEntriesChanging(long value);
        partial void OnEntriesChanged();
        #endregion

        public Blogsummarystat()
        {
            OnCreated();
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"users", Storage = "_Users", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                if (this._Users != value)
                {
                    this.OnUsersChanging(value);
                    this.SendPropertyChanging();
                    this._Users = value;
                    this.SendPropertyChanged("Users");
                    this.OnUsersChanged();
                }
            }
        }

        [Column(Name = @"comments", Storage = "_Comments", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if (this._Comments != value)
                {
                    this.OnCommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }

        [Column(Name = @"entries", Storage = "_Entries", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Entries
        {
            get
            {
                return this._Entries;
            }
            set
            {
                if (this._Entries != value)
                {
                    this.OnEntriesChanging(value);
                    this.SendPropertyChanging();
                    this._Entries = value;
                    this.SendPropertyChanged("Entries");
                    this.OnEntriesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_tachyentry")]
    public partial class Blogtachyentry : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Blogid;

        private long _Lastcomment;

        private string _Lastcommenter;

        private long _Lastblogtextid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnLastcommentChanging(long value);
        partial void OnLastcommentChanged();
        partial void OnLastcommenterChanging(string value);
        partial void OnLastcommenterChanged();
        partial void OnLastblogtextidChanging(long value);
        partial void OnLastblogtextidChanged();
        #endregion

        public Blogtachyentry()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"lastcomment", Storage = "_Lastcomment", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastcomment
        {
            get
            {
                return this._Lastcomment;
            }
            set
            {
                if (this._Lastcomment != value)
                {
                    this.OnLastcommentChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcomment = value;
                    this.SendPropertyChanged("Lastcomment");
                    this.OnLastcommentChanged();
                }
            }
        }

        [Column(Name = @"lastcommenter", Storage = "_Lastcommenter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastcommenter
        {
            get
            {
                return this._Lastcommenter;
            }
            set
            {
                if (this._Lastcommenter != value)
                {
                    this.OnLastcommenterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcommenter = value;
                    this.SendPropertyChanged("Lastcommenter");
                    this.OnLastcommenterChanged();
                }
            }
        }

        [Column(Name = @"lastblogtextid", Storage = "_Lastblogtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastblogtextid
        {
            get
            {
                return this._Lastblogtextid;
            }
            set
            {
                if (this._Lastblogtextid != value)
                {
                    this.OnLastblogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblogtextid = value;
                    this.SendPropertyChanged("Lastblogtextid");
                    this.OnLastblogtextidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_text")]
    public partial class Blogtext : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogtextid;

        private long _Blogid;

        private long _Userid;

        private long _Bloguserid;

        private long _Dateline;

        private string _Pagetext;

        private string _Title;

        private string _State;

        private int _Allowsmilie;

        private string _Username;

        private long _Ipaddress;

        private long _Reportthreadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogtextidChanging(long value);
        partial void OnBlogtextidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        #endregion

        public Blogtext()
        {
            OnCreated();
        }

        [Column(Name = @"blogtextid", Storage = "_Blogtextid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogtextid
        {
            get
            {
                return this._Blogtextid;
            }
            set
            {
                if (this._Blogtextid != value)
                {
                    this.OnBlogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogtextid = value;
                    this.SendPropertyChanged("Blogtextid");
                    this.OnBlogtextidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_textparsed")]
    public partial class Blogtextparsed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogtextid;

        private long _Dateline;

        private int _Hasimages;

        private string _Pagetexthtml;

        private long _Styleid;

        private long _Languageid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogtextidChanging(long value);
        partial void OnBlogtextidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnHasimagesChanging(int value);
        partial void OnHasimagesChanged();
        partial void OnPagetexthtmlChanging(string value);
        partial void OnPagetexthtmlChanged();
        partial void OnStyleidChanging(long value);
        partial void OnStyleidChanged();
        partial void OnLanguageidChanging(long value);
        partial void OnLanguageidChanged();
        #endregion

        public Blogtextparsed()
        {
            OnCreated();
        }

        [Column(Name = @"blogtextid", Storage = "_Blogtextid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Blogtextid
        {
            get
            {
                return this._Blogtextid;
            }
            set
            {
                if (this._Blogtextid != value)
                {
                    this.OnBlogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogtextid = value;
                    this.SendPropertyChanged("Blogtextid");
                    this.OnBlogtextidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"hasimages", Storage = "_Hasimages", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Hasimages
        {
            get
            {
                return this._Hasimages;
            }
            set
            {
                if (this._Hasimages != value)
                {
                    this.OnHasimagesChanging(value);
                    this.SendPropertyChanging();
                    this._Hasimages = value;
                    this.SendPropertyChanged("Hasimages");
                    this.OnHasimagesChanged();
                }
            }
        }

        [Column(Name = @"pagetexthtml", Storage = "_Pagetexthtml", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pagetexthtml
        {
            get
            {
                return this._Pagetexthtml;
            }
            set
            {
                if (this._Pagetexthtml != value)
                {
                    this.OnPagetexthtmlChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetexthtml = value;
                    this.SendPropertyChanged("Pagetexthtml");
                    this.OnPagetexthtmlChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_trackback")]
    public partial class Blogtrackback : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogtrackbackid;

        private long _Blogid;

        private string _Title;

        private string _Snippet;

        private string _Url;

        private string _State;

        private long _Userid;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogtrackbackidChanging(long value);
        partial void OnBlogtrackbackidChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnSnippetChanging(string value);
        partial void OnSnippetChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Blogtrackback()
        {
            OnCreated();
        }

        [Column(Name = @"blogtrackbackid", Storage = "_Blogtrackbackid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Blogtrackbackid
        {
            get
            {
                return this._Blogtrackbackid;
            }
            set
            {
                if (this._Blogtrackbackid != value)
                {
                    this.OnBlogtrackbackidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogtrackbackid = value;
                    this.SendPropertyChanged("Blogtrackbackid");
                    this.OnBlogtrackbackidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"snippet", Storage = "_Snippet", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Snippet
        {
            get
            {
                return this._Snippet;
            }
            set
            {
                if (this._Snippet != value)
                {
                    this.OnSnippetChanging(value);
                    this.SendPropertyChanging();
                    this._Snippet = value;
                    this.SendPropertyChanged("Snippet");
                    this.OnSnippetChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_trackbacklog")]
    public partial class Blogtrackbacklog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Trackbacklogid;

        private string _System;

        private string _Type;

        private int _Status;

        private string _Message;

        private long _Blogid;

        private long _Userid;

        private long _Dateline;

        private long _Ipaddress;

        private string _Url;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTrackbacklogidChanging(long value);
        partial void OnTrackbacklogidChanged();
        partial void OnSystemChanging(string value);
        partial void OnSystemChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        #endregion

        public Blogtrackbacklog()
        {
            OnCreated();
        }

        [Column(Name = @"trackbacklogid", Storage = "_Trackbacklogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Trackbacklogid
        {
            get
            {
                return this._Trackbacklogid;
            }
            set
            {
                if (this._Trackbacklogid != value)
                {
                    this.OnTrackbacklogidChanging(value);
                    this.SendPropertyChanging();
                    this._Trackbacklogid = value;
                    this.SendPropertyChanged("Trackbacklogid");
                    this.OnTrackbacklogidChanged();
                }
            }
        }

        [Column(Name = @"system", Storage = "_System", CanBeNull = false, DbType = "enum NOT NULL")]
        public string System
        {
            get
            {
                return this._System;
            }
            set
            {
                if (this._System != value)
                {
                    this.OnSystemChanging(value);
                    this.SendPropertyChanging();
                    this._System = value;
                    this.SendPropertyChanged("System");
                    this.OnSystemChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"message", Storage = "_Message", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_user")]
    public partial class Bloguser : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Bloguserid;

        private string _Title;

        private string _Description;

        private int _Allowsmilie;

        private long _Options;

        private string _Viewoption;

        private long _Comments;

        private long _Lastblog;

        private long _Lastblogid;

        private string _Lastblogtitle;

        private long _Lastcomment;

        private string _Lastcommenter;

        private long _Lastblogtextid;

        private long _Entries;

        private long _Deleted;

        private long _Moderation;

        private long _Draft;

        private long _Pending;

        private long _Ratingnum;

        private long _Ratingtotal;

        private float _Rating;

        private string _Subscribeown;

        private string _Subscribeothers;

        private long _Uncatentries;

        private string _Akismetkey;

        private long _Optionsmember;

        private long _Optionsguest;

        private long _Optionsbuddy;

        private long _Optionsignore;

        private int _Isblogmoderator;

        private long _Commentsmoderation;

        private long _Commentsdeleted;

        private string _Categorycache;

        private string _Tagcloud;

        private string _Sidebar;

        private string _Custompages;

        private long _Customblocks;

        private string _Memberids;

        private string _Memberblogids;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnViewoptionChanging(string value);
        partial void OnViewoptionChanged();
        partial void OnCommentsChanging(long value);
        partial void OnCommentsChanged();
        partial void OnLastblogChanging(long value);
        partial void OnLastblogChanged();
        partial void OnLastblogidChanging(long value);
        partial void OnLastblogidChanged();
        partial void OnLastblogtitleChanging(string value);
        partial void OnLastblogtitleChanged();
        partial void OnLastcommentChanging(long value);
        partial void OnLastcommentChanged();
        partial void OnLastcommenterChanging(string value);
        partial void OnLastcommenterChanged();
        partial void OnLastblogtextidChanging(long value);
        partial void OnLastblogtextidChanged();
        partial void OnEntriesChanging(long value);
        partial void OnEntriesChanged();
        partial void OnDeletedChanging(long value);
        partial void OnDeletedChanged();
        partial void OnModerationChanging(long value);
        partial void OnModerationChanged();
        partial void OnDraftChanging(long value);
        partial void OnDraftChanged();
        partial void OnPendingChanging(long value);
        partial void OnPendingChanged();
        partial void OnRatingnumChanging(long value);
        partial void OnRatingnumChanged();
        partial void OnRatingtotalChanging(long value);
        partial void OnRatingtotalChanged();
        partial void OnRatingChanging(float value);
        partial void OnRatingChanged();
        partial void OnSubscribeownChanging(string value);
        partial void OnSubscribeownChanged();
        partial void OnSubscribeothersChanging(string value);
        partial void OnSubscribeothersChanged();
        partial void OnUncatentriesChanging(long value);
        partial void OnUncatentriesChanged();
        partial void OnAkismetkeyChanging(string value);
        partial void OnAkismetkeyChanged();
        partial void OnOptionsmemberChanging(long value);
        partial void OnOptionsmemberChanged();
        partial void OnOptionsguestChanging(long value);
        partial void OnOptionsguestChanged();
        partial void OnOptionsbuddyChanging(long value);
        partial void OnOptionsbuddyChanged();
        partial void OnOptionsignoreChanging(long value);
        partial void OnOptionsignoreChanged();
        partial void OnIsblogmoderatorChanging(int value);
        partial void OnIsblogmoderatorChanged();
        partial void OnCommentsmoderationChanging(long value);
        partial void OnCommentsmoderationChanged();
        partial void OnCommentsdeletedChanging(long value);
        partial void OnCommentsdeletedChanged();
        partial void OnCategorycacheChanging(string value);
        partial void OnCategorycacheChanged();
        partial void OnTagcloudChanging(string value);
        partial void OnTagcloudChanged();
        partial void OnSidebarChanging(string value);
        partial void OnSidebarChanged();
        partial void OnCustompagesChanging(string value);
        partial void OnCustompagesChanged();
        partial void OnCustomblocksChanging(long value);
        partial void OnCustomblocksChanged();
        partial void OnMemberidsChanging(string value);
        partial void OnMemberidsChanged();
        partial void OnMemberblogidsChanging(string value);
        partial void OnMemberblogidsChanged();
        #endregion

        public Bloguser()
        {
            OnCreated();
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"viewoption", Storage = "_Viewoption", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Viewoption
        {
            get
            {
                return this._Viewoption;
            }
            set
            {
                if (this._Viewoption != value)
                {
                    this.OnViewoptionChanging(value);
                    this.SendPropertyChanging();
                    this._Viewoption = value;
                    this.SendPropertyChanged("Viewoption");
                    this.OnViewoptionChanged();
                }
            }
        }

        [Column(Name = @"comments", Storage = "_Comments", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if (this._Comments != value)
                {
                    this.OnCommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }

        [Column(Name = @"lastblog", Storage = "_Lastblog", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastblog
        {
            get
            {
                return this._Lastblog;
            }
            set
            {
                if (this._Lastblog != value)
                {
                    this.OnLastblogChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblog = value;
                    this.SendPropertyChanged("Lastblog");
                    this.OnLastblogChanged();
                }
            }
        }

        [Column(Name = @"lastblogid", Storage = "_Lastblogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastblogid
        {
            get
            {
                return this._Lastblogid;
            }
            set
            {
                if (this._Lastblogid != value)
                {
                    this.OnLastblogidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblogid = value;
                    this.SendPropertyChanged("Lastblogid");
                    this.OnLastblogidChanged();
                }
            }
        }

        [Column(Name = @"lastblogtitle", Storage = "_Lastblogtitle", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Lastblogtitle
        {
            get
            {
                return this._Lastblogtitle;
            }
            set
            {
                if (this._Lastblogtitle != value)
                {
                    this.OnLastblogtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblogtitle = value;
                    this.SendPropertyChanged("Lastblogtitle");
                    this.OnLastblogtitleChanged();
                }
            }
        }

        [Column(Name = @"lastcomment", Storage = "_Lastcomment", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastcomment
        {
            get
            {
                return this._Lastcomment;
            }
            set
            {
                if (this._Lastcomment != value)
                {
                    this.OnLastcommentChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcomment = value;
                    this.SendPropertyChanged("Lastcomment");
                    this.OnLastcommentChanged();
                }
            }
        }

        [Column(Name = @"lastcommenter", Storage = "_Lastcommenter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastcommenter
        {
            get
            {
                return this._Lastcommenter;
            }
            set
            {
                if (this._Lastcommenter != value)
                {
                    this.OnLastcommenterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastcommenter = value;
                    this.SendPropertyChanged("Lastcommenter");
                    this.OnLastcommenterChanged();
                }
            }
        }

        [Column(Name = @"lastblogtextid", Storage = "_Lastblogtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastblogtextid
        {
            get
            {
                return this._Lastblogtextid;
            }
            set
            {
                if (this._Lastblogtextid != value)
                {
                    this.OnLastblogtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastblogtextid = value;
                    this.SendPropertyChanged("Lastblogtextid");
                    this.OnLastblogtextidChanged();
                }
            }
        }

        [Column(Name = @"entries", Storage = "_Entries", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Entries
        {
            get
            {
                return this._Entries;
            }
            set
            {
                if (this._Entries != value)
                {
                    this.OnEntriesChanging(value);
                    this.SendPropertyChanging();
                    this._Entries = value;
                    this.SendPropertyChanged("Entries");
                    this.OnEntriesChanged();
                }
            }
        }

        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Column(Name = @"moderation", Storage = "_Moderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Moderation
        {
            get
            {
                return this._Moderation;
            }
            set
            {
                if (this._Moderation != value)
                {
                    this.OnModerationChanging(value);
                    this.SendPropertyChanging();
                    this._Moderation = value;
                    this.SendPropertyChanged("Moderation");
                    this.OnModerationChanged();
                }
            }
        }

        [Column(Name = @"draft", Storage = "_Draft", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Draft
        {
            get
            {
                return this._Draft;
            }
            set
            {
                if (this._Draft != value)
                {
                    this.OnDraftChanging(value);
                    this.SendPropertyChanging();
                    this._Draft = value;
                    this.SendPropertyChanged("Draft");
                    this.OnDraftChanged();
                }
            }
        }

        [Column(Name = @"pending", Storage = "_Pending", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pending
        {
            get
            {
                return this._Pending;
            }
            set
            {
                if (this._Pending != value)
                {
                    this.OnPendingChanging(value);
                    this.SendPropertyChanging();
                    this._Pending = value;
                    this.SendPropertyChanged("Pending");
                    this.OnPendingChanged();
                }
            }
        }

        [Column(Name = @"ratingnum", Storage = "_Ratingnum", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingnum
        {
            get
            {
                return this._Ratingnum;
            }
            set
            {
                if (this._Ratingnum != value)
                {
                    this.OnRatingnumChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingnum = value;
                    this.SendPropertyChanged("Ratingnum");
                    this.OnRatingnumChanged();
                }
            }
        }

        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

        [Column(Name = @"rating", Storage = "_Rating", CanBeNull = false, DbType = "float NOT NULL")]
        public float Rating
        {
            get
            {
                return this._Rating;
            }
            set
            {
                if (this._Rating != value)
                {
                    this.OnRatingChanging(value);
                    this.SendPropertyChanging();
                    this._Rating = value;
                    this.SendPropertyChanged("Rating");
                    this.OnRatingChanged();
                }
            }
        }

        [Column(Name = @"subscribeown", Storage = "_Subscribeown", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Subscribeown
        {
            get
            {
                return this._Subscribeown;
            }
            set
            {
                if (this._Subscribeown != value)
                {
                    this.OnSubscribeownChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribeown = value;
                    this.SendPropertyChanged("Subscribeown");
                    this.OnSubscribeownChanged();
                }
            }
        }

        [Column(Name = @"subscribeothers", Storage = "_Subscribeothers", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Subscribeothers
        {
            get
            {
                return this._Subscribeothers;
            }
            set
            {
                if (this._Subscribeothers != value)
                {
                    this.OnSubscribeothersChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribeothers = value;
                    this.SendPropertyChanged("Subscribeothers");
                    this.OnSubscribeothersChanged();
                }
            }
        }

        [Column(Name = @"uncatentries", Storage = "_Uncatentries", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Uncatentries
        {
            get
            {
                return this._Uncatentries;
            }
            set
            {
                if (this._Uncatentries != value)
                {
                    this.OnUncatentriesChanging(value);
                    this.SendPropertyChanging();
                    this._Uncatentries = value;
                    this.SendPropertyChanged("Uncatentries");
                    this.OnUncatentriesChanged();
                }
            }
        }

        [Column(Name = @"akismet_key", Storage = "_Akismetkey", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Akismetkey
        {
            get
            {
                return this._Akismetkey;
            }
            set
            {
                if (this._Akismetkey != value)
                {
                    this.OnAkismetkeyChanging(value);
                    this.SendPropertyChanging();
                    this._Akismetkey = value;
                    this.SendPropertyChanged("Akismetkey");
                    this.OnAkismetkeyChanged();
                }
            }
        }

        [Column(Name = @"options_member", Storage = "_Optionsmember", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Optionsmember
        {
            get
            {
                return this._Optionsmember;
            }
            set
            {
                if (this._Optionsmember != value)
                {
                    this.OnOptionsmemberChanging(value);
                    this.SendPropertyChanging();
                    this._Optionsmember = value;
                    this.SendPropertyChanged("Optionsmember");
                    this.OnOptionsmemberChanged();
                }
            }
        }

        [Column(Name = @"options_guest", Storage = "_Optionsguest", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Optionsguest
        {
            get
            {
                return this._Optionsguest;
            }
            set
            {
                if (this._Optionsguest != value)
                {
                    this.OnOptionsguestChanging(value);
                    this.SendPropertyChanging();
                    this._Optionsguest = value;
                    this.SendPropertyChanged("Optionsguest");
                    this.OnOptionsguestChanged();
                }
            }
        }

        [Column(Name = @"options_buddy", Storage = "_Optionsbuddy", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Optionsbuddy
        {
            get
            {
                return this._Optionsbuddy;
            }
            set
            {
                if (this._Optionsbuddy != value)
                {
                    this.OnOptionsbuddyChanging(value);
                    this.SendPropertyChanging();
                    this._Optionsbuddy = value;
                    this.SendPropertyChanged("Optionsbuddy");
                    this.OnOptionsbuddyChanged();
                }
            }
        }

        [Column(Name = @"options_ignore", Storage = "_Optionsignore", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Optionsignore
        {
            get
            {
                return this._Optionsignore;
            }
            set
            {
                if (this._Optionsignore != value)
                {
                    this.OnOptionsignoreChanging(value);
                    this.SendPropertyChanging();
                    this._Optionsignore = value;
                    this.SendPropertyChanged("Optionsignore");
                    this.OnOptionsignoreChanged();
                }
            }
        }

        [Column(Name = @"isblogmoderator", Storage = "_Isblogmoderator", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Isblogmoderator
        {
            get
            {
                return this._Isblogmoderator;
            }
            set
            {
                if (this._Isblogmoderator != value)
                {
                    this.OnIsblogmoderatorChanging(value);
                    this.SendPropertyChanging();
                    this._Isblogmoderator = value;
                    this.SendPropertyChanged("Isblogmoderator");
                    this.OnIsblogmoderatorChanged();
                }
            }
        }

        [Column(Name = @"comments_moderation", Storage = "_Commentsmoderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Commentsmoderation
        {
            get
            {
                return this._Commentsmoderation;
            }
            set
            {
                if (this._Commentsmoderation != value)
                {
                    this.OnCommentsmoderationChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsmoderation = value;
                    this.SendPropertyChanged("Commentsmoderation");
                    this.OnCommentsmoderationChanged();
                }
            }
        }

        [Column(Name = @"comments_deleted", Storage = "_Commentsdeleted", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Commentsdeleted
        {
            get
            {
                return this._Commentsdeleted;
            }
            set
            {
                if (this._Commentsdeleted != value)
                {
                    this.OnCommentsdeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsdeleted = value;
                    this.SendPropertyChanged("Commentsdeleted");
                    this.OnCommentsdeletedChanged();
                }
            }
        }

        [Column(Name = @"categorycache", Storage = "_Categorycache", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Categorycache
        {
            get
            {
                return this._Categorycache;
            }
            set
            {
                if (this._Categorycache != value)
                {
                    this.OnCategorycacheChanging(value);
                    this.SendPropertyChanging();
                    this._Categorycache = value;
                    this.SendPropertyChanged("Categorycache");
                    this.OnCategorycacheChanged();
                }
            }
        }

        [Column(Name = @"tagcloud", Storage = "_Tagcloud", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Tagcloud
        {
            get
            {
                return this._Tagcloud;
            }
            set
            {
                if (this._Tagcloud != value)
                {
                    this.OnTagcloudChanging(value);
                    this.SendPropertyChanging();
                    this._Tagcloud = value;
                    this.SendPropertyChanged("Tagcloud");
                    this.OnTagcloudChanged();
                }
            }
        }

        [Column(Name = @"sidebar", Storage = "_Sidebar", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Sidebar
        {
            get
            {
                return this._Sidebar;
            }
            set
            {
                if (this._Sidebar != value)
                {
                    this.OnSidebarChanging(value);
                    this.SendPropertyChanging();
                    this._Sidebar = value;
                    this.SendPropertyChanged("Sidebar");
                    this.OnSidebarChanged();
                }
            }
        }

        [Column(Name = @"custompages", Storage = "_Custompages", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Custompages
        {
            get
            {
                return this._Custompages;
            }
            set
            {
                if (this._Custompages != value)
                {
                    this.OnCustompagesChanging(value);
                    this.SendPropertyChanging();
                    this._Custompages = value;
                    this.SendPropertyChanged("Custompages");
                    this.OnCustompagesChanged();
                }
            }
        }

        [Column(Name = @"customblocks", Storage = "_Customblocks", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Customblocks
        {
            get
            {
                return this._Customblocks;
            }
            set
            {
                if (this._Customblocks != value)
                {
                    this.OnCustomblocksChanging(value);
                    this.SendPropertyChanging();
                    this._Customblocks = value;
                    this.SendPropertyChanged("Customblocks");
                    this.OnCustomblocksChanged();
                }
            }
        }

        [Column(Name = @"memberids", Storage = "_Memberids", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Memberids
        {
            get
            {
                return this._Memberids;
            }
            set
            {
                if (this._Memberids != value)
                {
                    this.OnMemberidsChanging(value);
                    this.SendPropertyChanging();
                    this._Memberids = value;
                    this.SendPropertyChanged("Memberids");
                    this.OnMemberidsChanged();
                }
            }
        }

        [Column(Name = @"memberblogids", Storage = "_Memberblogids", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Memberblogids
        {
            get
            {
                return this._Memberblogids;
            }
            set
            {
                if (this._Memberblogids != value)
                {
                    this.OnMemberblogidsChanging(value);
                    this.SendPropertyChanging();
                    this._Memberblogids = value;
                    this.SendPropertyChanged("Memberblogids");
                    this.OnMemberblogidsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_usercss")]
    public partial class Blogusercss : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Selector;

        private string _Property;

        private string _Value;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnSelectorChanging(string value);
        partial void OnSelectorChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Blogusercss()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"selector", Storage = "_Selector", CanBeNull = false, DbType = "varchar(30) NOT NULL", IsPrimaryKey = true)]
        public string Selector
        {
            get
            {
                return this._Selector;
            }
            set
            {
                if (this._Selector != value)
                {
                    this.OnSelectorChanging(value);
                    this.SendPropertyChanging();
                    this._Selector = value;
                    this.SendPropertyChanged("Selector");
                    this.OnSelectorChanged();
                }
            }
        }

        [Column(Name = @"property", Storage = "_Property", CanBeNull = false, DbType = "varchar(30) NOT NULL", IsPrimaryKey = true)]
        public string Property
        {
            get
            {
                return this._Property;
            }
            set
            {
                if (this._Property != value)
                {
                    this.OnPropertyChanging(value);
                    this.SendPropertyChanging();
                    this._Property = value;
                    this.SendPropertyChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_usercsscache")]
    public partial class Blogusercsscache : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Cachedcss;

        private string _Csscolors;

        private long _Buildpermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCachedcssChanging(string value);
        partial void OnCachedcssChanged();
        partial void OnCsscolorsChanging(string value);
        partial void OnCsscolorsChanged();
        partial void OnBuildpermissionsChanging(long value);
        partial void OnBuildpermissionsChanged();
        #endregion

        public Blogusercsscache()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"cachedcss", Storage = "_Cachedcss", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Cachedcss
        {
            get
            {
                return this._Cachedcss;
            }
            set
            {
                if (this._Cachedcss != value)
                {
                    this.OnCachedcssChanging(value);
                    this.SendPropertyChanging();
                    this._Cachedcss = value;
                    this.SendPropertyChanged("Cachedcss");
                    this.OnCachedcssChanged();
                }
            }
        }

        [Column(Name = @"csscolors", Storage = "_Csscolors", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Csscolors
        {
            get
            {
                return this._Csscolors;
            }
            set
            {
                if (this._Csscolors != value)
                {
                    this.OnCsscolorsChanging(value);
                    this.SendPropertyChanging();
                    this._Csscolors = value;
                    this.SendPropertyChanged("Csscolors");
                    this.OnCsscolorsChanged();
                }
            }
        }

        [Column(Name = @"buildpermissions", Storage = "_Buildpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Buildpermissions
        {
            get
            {
                return this._Buildpermissions;
            }
            set
            {
                if (this._Buildpermissions != value)
                {
                    this.OnBuildpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Buildpermissions = value;
                    this.SendPropertyChanged("Buildpermissions");
                    this.OnBuildpermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_userread")]
    public partial class Bloguserread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Bloguserid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBloguseridChanging(long value);
        partial void OnBloguseridChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Bloguserread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"bloguserid", Storage = "_Bloguserid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Bloguserid
        {
            get
            {
                return this._Bloguserid;
            }
            set
            {
                if (this._Bloguserid != value)
                {
                    this.OnBloguseridChanging(value);
                    this.SendPropertyChanging();
                    this._Bloguserid = value;
                    this.SendPropertyChanged("Bloguserid");
                    this.OnBloguseridChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_userstats")]
    public partial class Bloguserstat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Dateline;

        private long _Userid;

        private long _Users;

        private long _Comments;

        private long _Entries;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsersChanging(long value);
        partial void OnUsersChanged();
        partial void OnCommentsChanging(long value);
        partial void OnCommentsChanged();
        partial void OnEntriesChanging(long value);
        partial void OnEntriesChanged();
        #endregion

        public Bloguserstat()
        {
            OnCreated();
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"users", Storage = "_Users", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                if (this._Users != value)
                {
                    this.OnUsersChanging(value);
                    this.SendPropertyChanging();
                    this._Users = value;
                    this.SendPropertyChanged("Users");
                    this.OnUsersChanged();
                }
            }
        }

        [Column(Name = @"comments", Storage = "_Comments", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if (this._Comments != value)
                {
                    this.OnCommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }

        [Column(Name = @"entries", Storage = "_Entries", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Entries
        {
            get
            {
                return this._Entries;
            }
            set
            {
                if (this._Entries != value)
                {
                    this.OnEntriesChanging(value);
                    this.SendPropertyChanging();
                    this._Entries = value;
                    this.SendPropertyChanged("Entries");
                    this.OnEntriesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_views")]
    public partial class Blogview : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Blogid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlogidChanging(long value);
        partial void OnBlogidChanged();
        #endregion

        public Blogview()
        {
            OnCreated();
        }

        [Column(Name = @"blogid", Storage = "_Blogid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.blog_visitor")]
    public partial class Blogvisitor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Visitorid;

        private long _Dateline;

        private long _Visible;

        private int _Day;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnVisitoridChanging(long value);
        partial void OnVisitoridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnVisibleChanging(long value);
        partial void OnVisibleChanged();
        partial void OnDayChanging(int value);
        partial void OnDayChanged();
        #endregion

        public Blogvisitor()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"visitorid", Storage = "_Visitorid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Visitorid
        {
            get
            {
                return this._Visitorid;
            }
            set
            {
                if (this._Visitorid != value)
                {
                    this.OnVisitoridChanging(value);
                    this.SendPropertyChanging();
                    this._Visitorid = value;
                    this.SendPropertyChanged("Visitorid");
                    this.OnVisitoridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"day", Storage = "_Day", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Day
        {
            get
            {
                return this._Day;
            }
            set
            {
                if (this._Day != value)
                {
                    this.OnDayChanging(value);
                    this.SendPropertyChanging();
                    this._Day = value;
                    this.SendPropertyChanged("Day");
                    this.OnDayChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.bookmarksite")]
    public partial class Bookmarksite : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Bookmarksiteid;

        private string _Title;

        private string _Iconpath;

        private int _Active;

        private long _Displayorder;

        private string _Url;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBookmarksiteidChanging(long value);
        partial void OnBookmarksiteidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnIconpathChanging(string value);
        partial void OnIconpathChanged();
        partial void OnActiveChanging(int value);
        partial void OnActiveChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        #endregion

        public Bookmarksite()
        {
            OnCreated();
        }

        [Column(Name = @"bookmarksiteid", Storage = "_Bookmarksiteid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Bookmarksiteid
        {
            get
            {
                return this._Bookmarksiteid;
            }
            set
            {
                if (this._Bookmarksiteid != value)
                {
                    this.OnBookmarksiteidChanging(value);
                    this.SendPropertyChanging();
                    this._Bookmarksiteid = value;
                    this.SendPropertyChanged("Bookmarksiteid");
                    this.OnBookmarksiteidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"iconpath", Storage = "_Iconpath", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Iconpath
        {
            get
            {
                return this._Iconpath;
            }
            set
            {
                if (this._Iconpath != value)
                {
                    this.OnIconpathChanging(value);
                    this.SendPropertyChanging();
                    this._Iconpath = value;
                    this.SendPropertyChanged("Iconpath");
                    this.OnIconpathChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cache")]
    public partial class Cache : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Cacheid;

        private long _Expires;

        private long _Created;

        private long _Locktime;

        private string _Serialized;

        private byte[] _Data;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCacheidChanging(string value);
        partial void OnCacheidChanged();
        partial void OnExpiresChanging(long value);
        partial void OnExpiresChanged();
        partial void OnCreatedChanging(long value);
        partial void OnCreatedChanged();
        partial void OnLocktimeChanging(long value);
        partial void OnLocktimeChanged();
        partial void OnSerializedChanging(string value);
        partial void OnSerializedChanged();
        partial void OnDataChanging(byte[] value);
        partial void OnDataChanged();
        #endregion

        public Cache()
        {
            OnCreated();
        }

        [Column(Name = @"cacheid", Storage = "_Cacheid", CanBeNull = false, DbType = "varbinary(64) NOT NULL", IsPrimaryKey = true)]
        public string Cacheid
        {
            get
            {
                return this._Cacheid;
            }
            set
            {
                if (this._Cacheid != value)
                {
                    this.OnCacheidChanging(value);
                    this.SendPropertyChanging();
                    this._Cacheid = value;
                    this.SendPropertyChanged("Cacheid");
                    this.OnCacheidChanged();
                }
            }
        }

        [Column(Name = @"expires", Storage = "_Expires", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Expires
        {
            get
            {
                return this._Expires;
            }
            set
            {
                if (this._Expires != value)
                {
                    this.OnExpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Expires = value;
                    this.SendPropertyChanged("Expires");
                    this.OnExpiresChanged();
                }
            }
        }

        [Column(Name = @"created", Storage = "_Created", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

        [Column(Name = @"locktime", Storage = "_Locktime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Locktime
        {
            get
            {
                return this._Locktime;
            }
            set
            {
                if (this._Locktime != value)
                {
                    this.OnLocktimeChanging(value);
                    this.SendPropertyChanging();
                    this._Locktime = value;
                    this.SendPropertyChanged("Locktime");
                    this.OnLocktimeChanged();
                }
            }
        }

        [Column(Name = @"serialized", Storage = "_Serialized", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Serialized
        {
            get
            {
                return this._Serialized;
            }
            set
            {
                if (this._Serialized != value)
                {
                    this.OnSerializedChanging(value);
                    this.SendPropertyChanging();
                    this._Serialized = value;
                    this.SendPropertyChanged("Serialized");
                    this.OnSerializedChanged();
                }
            }
        }

        [Column(Name = @"data", Storage = "_Data", DbType = "blob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cacheevent")]
    public partial class Cacheevent : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Cacheid;

        private string _Event;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCacheidChanging(string value);
        partial void OnCacheidChanged();
        partial void OnEventChanging(string value);
        partial void OnEventChanged();
        #endregion

        public Cacheevent()
        {
            OnCreated();
        }

        [Column(Name = @"cacheid", Storage = "_Cacheid", CanBeNull = false, DbType = "varbinary(64) NOT NULL", IsPrimaryKey = true)]
        public string Cacheid
        {
            get
            {
                return this._Cacheid;
            }
            set
            {
                if (this._Cacheid != value)
                {
                    this.OnCacheidChanging(value);
                    this.SendPropertyChanging();
                    this._Cacheid = value;
                    this.SendPropertyChanged("Cacheid");
                    this.OnCacheidChanged();
                }
            }
        }

        [Column(Name = @"event", Storage = "_Event", CanBeNull = false, DbType = "varbinary(50) NOT NULL", IsPrimaryKey = true)]
        public string Event
        {
            get
            {
                return this._Event;
            }
            set
            {
                if (this._Event != value)
                {
                    this.OnEventChanging(value);
                    this.SendPropertyChanging();
                    this._Event = value;
                    this.SendPropertyChanged("Event");
                    this.OnEventChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.calendar")]
    public partial class Calendar : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Calendarid;

        private string _Title;

        private string _Description;

        private short _Displayorder;

        private string _Neweventemail;

        private short _Moderatenew;

        private short _Startofweek;

        private long _Options;

        private int _Cutoff;

        private int _Eventcount;

        private int _Birthdaycount;

        private int _Startyear;

        private int _Endyear;

        private long _Holidays;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCalendaridChanging(long value);
        partial void OnCalendaridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        partial void OnNeweventemailChanging(string value);
        partial void OnNeweventemailChanged();
        partial void OnModeratenewChanging(short value);
        partial void OnModeratenewChanged();
        partial void OnStartofweekChanging(short value);
        partial void OnStartofweekChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnCutoffChanging(int value);
        partial void OnCutoffChanged();
        partial void OnEventcountChanging(int value);
        partial void OnEventcountChanged();
        partial void OnBirthdaycountChanging(int value);
        partial void OnBirthdaycountChanged();
        partial void OnStartyearChanging(int value);
        partial void OnStartyearChanged();
        partial void OnEndyearChanging(int value);
        partial void OnEndyearChanged();
        partial void OnHolidaysChanging(long value);
        partial void OnHolidaysChanged();
        #endregion

        public Calendar()
        {
            OnCreated();
        }

        [Column(Name = @"calendarid", Storage = "_Calendarid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Calendarid
        {
            get
            {
                return this._Calendarid;
            }
            set
            {
                if (this._Calendarid != value)
                {
                    this.OnCalendaridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarid = value;
                    this.SendPropertyChanged("Calendarid");
                    this.OnCalendaridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"neweventemail", Storage = "_Neweventemail", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Neweventemail
        {
            get
            {
                return this._Neweventemail;
            }
            set
            {
                if (this._Neweventemail != value)
                {
                    this.OnNeweventemailChanging(value);
                    this.SendPropertyChanging();
                    this._Neweventemail = value;
                    this.SendPropertyChanged("Neweventemail");
                    this.OnNeweventemailChanged();
                }
            }
        }

        [Column(Name = @"moderatenew", Storage = "_Moderatenew", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Moderatenew
        {
            get
            {
                return this._Moderatenew;
            }
            set
            {
                if (this._Moderatenew != value)
                {
                    this.OnModeratenewChanging(value);
                    this.SendPropertyChanging();
                    this._Moderatenew = value;
                    this.SendPropertyChanged("Moderatenew");
                    this.OnModeratenewChanged();
                }
            }
        }

        [Column(Name = @"startofweek", Storage = "_Startofweek", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Startofweek
        {
            get
            {
                return this._Startofweek;
            }
            set
            {
                if (this._Startofweek != value)
                {
                    this.OnStartofweekChanging(value);
                    this.SendPropertyChanging();
                    this._Startofweek = value;
                    this.SendPropertyChanged("Startofweek");
                    this.OnStartofweekChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"cutoff", Storage = "_Cutoff", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Cutoff
        {
            get
            {
                return this._Cutoff;
            }
            set
            {
                if (this._Cutoff != value)
                {
                    this.OnCutoffChanging(value);
                    this.SendPropertyChanging();
                    this._Cutoff = value;
                    this.SendPropertyChanged("Cutoff");
                    this.OnCutoffChanged();
                }
            }
        }

        [Column(Name = @"eventcount", Storage = "_Eventcount", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Eventcount
        {
            get
            {
                return this._Eventcount;
            }
            set
            {
                if (this._Eventcount != value)
                {
                    this.OnEventcountChanging(value);
                    this.SendPropertyChanging();
                    this._Eventcount = value;
                    this.SendPropertyChanged("Eventcount");
                    this.OnEventcountChanged();
                }
            }
        }

        [Column(Name = @"birthdaycount", Storage = "_Birthdaycount", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Birthdaycount
        {
            get
            {
                return this._Birthdaycount;
            }
            set
            {
                if (this._Birthdaycount != value)
                {
                    this.OnBirthdaycountChanging(value);
                    this.SendPropertyChanging();
                    this._Birthdaycount = value;
                    this.SendPropertyChanged("Birthdaycount");
                    this.OnBirthdaycountChanged();
                }
            }
        }

        [Column(Name = @"startyear", Storage = "_Startyear", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Startyear
        {
            get
            {
                return this._Startyear;
            }
            set
            {
                if (this._Startyear != value)
                {
                    this.OnStartyearChanging(value);
                    this.SendPropertyChanging();
                    this._Startyear = value;
                    this.SendPropertyChanged("Startyear");
                    this.OnStartyearChanged();
                }
            }
        }

        [Column(Name = @"endyear", Storage = "_Endyear", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Endyear
        {
            get
            {
                return this._Endyear;
            }
            set
            {
                if (this._Endyear != value)
                {
                    this.OnEndyearChanging(value);
                    this.SendPropertyChanging();
                    this._Endyear = value;
                    this.SendPropertyChanged("Endyear");
                    this.OnEndyearChanged();
                }
            }
        }

        [Column(Name = @"holidays", Storage = "_Holidays", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Holidays
        {
            get
            {
                return this._Holidays;
            }
            set
            {
                if (this._Holidays != value)
                {
                    this.OnHolidaysChanging(value);
                    this.SendPropertyChanging();
                    this._Holidays = value;
                    this.SendPropertyChanged("Holidays");
                    this.OnHolidaysChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.calendarcustomfield")]
    public partial class Calendarcustomfield : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Calendarcustomfieldid;

        private long _Calendarid;

        private string _Title;

        private string _Description;

        private string _Options;

        private short _Allowentry;

        private short _Required;

        private int _Length;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCalendarcustomfieldidChanging(long value);
        partial void OnCalendarcustomfieldidChanged();
        partial void OnCalendaridChanging(long value);
        partial void OnCalendaridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnOptionsChanging(string value);
        partial void OnOptionsChanged();
        partial void OnAllowentryChanging(short value);
        partial void OnAllowentryChanged();
        partial void OnRequiredChanging(short value);
        partial void OnRequiredChanged();
        partial void OnLengthChanging(int value);
        partial void OnLengthChanged();
        #endregion

        public Calendarcustomfield()
        {
            OnCreated();
        }

        [Column(Name = @"calendarcustomfieldid", Storage = "_Calendarcustomfieldid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Calendarcustomfieldid
        {
            get
            {
                return this._Calendarcustomfieldid;
            }
            set
            {
                if (this._Calendarcustomfieldid != value)
                {
                    this.OnCalendarcustomfieldidChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarcustomfieldid = value;
                    this.SendPropertyChanged("Calendarcustomfieldid");
                    this.OnCalendarcustomfieldidChanged();
                }
            }
        }

        [Column(Name = @"calendarid", Storage = "_Calendarid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarid
        {
            get
            {
                return this._Calendarid;
            }
            set
            {
                if (this._Calendarid != value)
                {
                    this.OnCalendaridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarid = value;
                    this.SendPropertyChanged("Calendarid");
                    this.OnCalendaridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"allowentry", Storage = "_Allowentry", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowentry
        {
            get
            {
                return this._Allowentry;
            }
            set
            {
                if (this._Allowentry != value)
                {
                    this.OnAllowentryChanging(value);
                    this.SendPropertyChanging();
                    this._Allowentry = value;
                    this.SendPropertyChanged("Allowentry");
                    this.OnAllowentryChanged();
                }
            }
        }

        [Column(Name = @"required", Storage = "_Required", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Required
        {
            get
            {
                return this._Required;
            }
            set
            {
                if (this._Required != value)
                {
                    this.OnRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._Required = value;
                    this.SendPropertyChanged("Required");
                    this.OnRequiredChanged();
                }
            }
        }

        [Column(Name = @"length", Storage = "_Length", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Length
        {
            get
            {
                return this._Length;
            }
            set
            {
                if (this._Length != value)
                {
                    this.OnLengthChanging(value);
                    this.SendPropertyChanging();
                    this._Length = value;
                    this.SendPropertyChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.calendarmoderator")]
    public partial class Calendarmoderator : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Calendarmoderatorid;

        private long _Userid;

        private long _Calendarid;

        private short _Neweventemail;

        private long _Permissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCalendarmoderatoridChanging(long value);
        partial void OnCalendarmoderatoridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCalendaridChanging(long value);
        partial void OnCalendaridChanged();
        partial void OnNeweventemailChanging(short value);
        partial void OnNeweventemailChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        #endregion

        public Calendarmoderator()
        {
            OnCreated();
        }

        [Column(Name = @"calendarmoderatorid", Storage = "_Calendarmoderatorid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Calendarmoderatorid
        {
            get
            {
                return this._Calendarmoderatorid;
            }
            set
            {
                if (this._Calendarmoderatorid != value)
                {
                    this.OnCalendarmoderatoridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarmoderatorid = value;
                    this.SendPropertyChanged("Calendarmoderatorid");
                    this.OnCalendarmoderatoridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"calendarid", Storage = "_Calendarid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarid
        {
            get
            {
                return this._Calendarid;
            }
            set
            {
                if (this._Calendarid != value)
                {
                    this.OnCalendaridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarid = value;
                    this.SendPropertyChanged("Calendarid");
                    this.OnCalendaridChanged();
                }
            }
        }

        [Column(Name = @"neweventemail", Storage = "_Neweventemail", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Neweventemail
        {
            get
            {
                return this._Neweventemail;
            }
            set
            {
                if (this._Neweventemail != value)
                {
                    this.OnNeweventemailChanging(value);
                    this.SendPropertyChanging();
                    this._Neweventemail = value;
                    this.SendPropertyChanged("Neweventemail");
                    this.OnNeweventemailChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.calendarpermission")]
    public partial class Calendarpermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Calendarpermissionid;

        private long _Calendarid;

        private int _Usergroupid;

        private long _Calendarpermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCalendarpermissionidChanging(long value);
        partial void OnCalendarpermissionidChanged();
        partial void OnCalendaridChanging(long value);
        partial void OnCalendaridChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnCalendarpermissionsChanging(long value);
        partial void OnCalendarpermissionsChanged();
        #endregion

        public Calendarpermission()
        {
            OnCreated();
        }

        [Column(Name = @"calendarpermissionid", Storage = "_Calendarpermissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Calendarpermissionid
        {
            get
            {
                return this._Calendarpermissionid;
            }
            set
            {
                if (this._Calendarpermissionid != value)
                {
                    this.OnCalendarpermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarpermissionid = value;
                    this.SendPropertyChanged("Calendarpermissionid");
                    this.OnCalendarpermissionidChanged();
                }
            }
        }

        [Column(Name = @"calendarid", Storage = "_Calendarid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarid
        {
            get
            {
                return this._Calendarid;
            }
            set
            {
                if (this._Calendarid != value)
                {
                    this.OnCalendaridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarid = value;
                    this.SendPropertyChanged("Calendarid");
                    this.OnCalendaridChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"calendarpermissions", Storage = "_Calendarpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarpermissions
        {
            get
            {
                return this._Calendarpermissions;
            }
            set
            {
                if (this._Calendarpermissions != value)
                {
                    this.OnCalendarpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarpermissions = value;
                    this.SendPropertyChanged("Calendarpermissions");
                    this.OnCalendarpermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_article")]
    public partial class Cmsarticle : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Contentid;

        private string _Pagetext;

        private System.Nullable<long> _Threadid;

        private System.Nullable<long> _Blogid;

        private string _Posttitle;

        private string _Postauthor;

        private System.Nullable<long> _Poststarter;

        private System.Nullable<long> _Blogpostid;

        private System.Nullable<long> _Postid;

        private System.Nullable<long> _Postposted;

        private System.Nullable<long> _Poststarted;

        private string _Previewtext;

        private string _Previewimage;

        private System.Nullable<long> _Imagewidth;

        private System.Nullable<long> _Imageheight;

        private string _Previewvideo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContentidChanging(long value);
        partial void OnContentidChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnThreadidChanging(System.Nullable<long> value);
        partial void OnThreadidChanged();
        partial void OnBlogidChanging(System.Nullable<long> value);
        partial void OnBlogidChanged();
        partial void OnPosttitleChanging(string value);
        partial void OnPosttitleChanged();
        partial void OnPostauthorChanging(string value);
        partial void OnPostauthorChanged();
        partial void OnPoststarterChanging(System.Nullable<long> value);
        partial void OnPoststarterChanged();
        partial void OnBlogpostidChanging(System.Nullable<long> value);
        partial void OnBlogpostidChanged();
        partial void OnPostidChanging(System.Nullable<long> value);
        partial void OnPostidChanged();
        partial void OnPostpostedChanging(System.Nullable<long> value);
        partial void OnPostpostedChanged();
        partial void OnPoststartedChanging(System.Nullable<long> value);
        partial void OnPoststartedChanged();
        partial void OnPreviewtextChanging(string value);
        partial void OnPreviewtextChanged();
        partial void OnPreviewimageChanging(string value);
        partial void OnPreviewimageChanged();
        partial void OnImagewidthChanging(System.Nullable<long> value);
        partial void OnImagewidthChanged();
        partial void OnImageheightChanging(System.Nullable<long> value);
        partial void OnImageheightChanged();
        partial void OnPreviewvideoChanging(string value);
        partial void OnPreviewvideoChanged();
        #endregion

        public Cmsarticle()
        {
            OnCreated();
        }

        [Column(Name = @"contentid", Storage = "_Contentid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Contentid
        {
            get
            {
                return this._Contentid;
            }
            set
            {
                if (this._Contentid != value)
                {
                    this.OnContentidChanging(value);
                    this.SendPropertyChanging();
                    this._Contentid = value;
                    this.SendPropertyChanged("Contentid");
                    this.OnContentidChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", DbType = "int(10)")]
        public System.Nullable<long> Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"blogid", Storage = "_Blogid", DbType = "int(10)")]
        public System.Nullable<long> Blogid
        {
            get
            {
                return this._Blogid;
            }
            set
            {
                if (this._Blogid != value)
                {
                    this.OnBlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogid = value;
                    this.SendPropertyChanged("Blogid");
                    this.OnBlogidChanged();
                }
            }
        }

        [Column(Name = @"posttitle", Storage = "_Posttitle", DbType = "varchar(255)")]
        public string Posttitle
        {
            get
            {
                return this._Posttitle;
            }
            set
            {
                if (this._Posttitle != value)
                {
                    this.OnPosttitleChanging(value);
                    this.SendPropertyChanging();
                    this._Posttitle = value;
                    this.SendPropertyChanged("Posttitle");
                    this.OnPosttitleChanged();
                }
            }
        }

        [Column(Name = @"postauthor", Storage = "_Postauthor", DbType = "varchar(100)")]
        public string Postauthor
        {
            get
            {
                return this._Postauthor;
            }
            set
            {
                if (this._Postauthor != value)
                {
                    this.OnPostauthorChanging(value);
                    this.SendPropertyChanging();
                    this._Postauthor = value;
                    this.SendPropertyChanged("Postauthor");
                    this.OnPostauthorChanged();
                }
            }
        }

        [Column(Name = @"poststarter", Storage = "_Poststarter", DbType = "int(10)")]
        public System.Nullable<long> Poststarter
        {
            get
            {
                return this._Poststarter;
            }
            set
            {
                if (this._Poststarter != value)
                {
                    this.OnPoststarterChanging(value);
                    this.SendPropertyChanging();
                    this._Poststarter = value;
                    this.SendPropertyChanged("Poststarter");
                    this.OnPoststarterChanged();
                }
            }
        }

        [Column(Name = @"blogpostid", Storage = "_Blogpostid", DbType = "int(10)")]
        public System.Nullable<long> Blogpostid
        {
            get
            {
                return this._Blogpostid;
            }
            set
            {
                if (this._Blogpostid != value)
                {
                    this.OnBlogpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Blogpostid = value;
                    this.SendPropertyChanged("Blogpostid");
                    this.OnBlogpostidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", DbType = "int(10)")]
        public System.Nullable<long> Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"post_posted", Storage = "_Postposted", DbType = "int(10)")]
        public System.Nullable<long> Postposted
        {
            get
            {
                return this._Postposted;
            }
            set
            {
                if (this._Postposted != value)
                {
                    this.OnPostpostedChanging(value);
                    this.SendPropertyChanging();
                    this._Postposted = value;
                    this.SendPropertyChanged("Postposted");
                    this.OnPostpostedChanged();
                }
            }
        }

        [Column(Name = @"post_started", Storage = "_Poststarted", DbType = "int(10)")]
        public System.Nullable<long> Poststarted
        {
            get
            {
                return this._Poststarted;
            }
            set
            {
                if (this._Poststarted != value)
                {
                    this.OnPoststartedChanging(value);
                    this.SendPropertyChanging();
                    this._Poststarted = value;
                    this.SendPropertyChanged("Poststarted");
                    this.OnPoststartedChanged();
                }
            }
        }

        [Column(Name = @"previewtext", Storage = "_Previewtext", DbType = "varchar(2048)")]
        public string Previewtext
        {
            get
            {
                return this._Previewtext;
            }
            set
            {
                if (this._Previewtext != value)
                {
                    this.OnPreviewtextChanging(value);
                    this.SendPropertyChanging();
                    this._Previewtext = value;
                    this.SendPropertyChanged("Previewtext");
                    this.OnPreviewtextChanged();
                }
            }
        }

        [Column(Name = @"previewimage", Storage = "_Previewimage", DbType = "varchar(256)")]
        public string Previewimage
        {
            get
            {
                return this._Previewimage;
            }
            set
            {
                if (this._Previewimage != value)
                {
                    this.OnPreviewimageChanging(value);
                    this.SendPropertyChanging();
                    this._Previewimage = value;
                    this.SendPropertyChanged("Previewimage");
                    this.OnPreviewimageChanged();
                }
            }
        }

        [Column(Name = @"imagewidth", Storage = "_Imagewidth", DbType = "int(10)")]
        public System.Nullable<long> Imagewidth
        {
            get
            {
                return this._Imagewidth;
            }
            set
            {
                if (this._Imagewidth != value)
                {
                    this.OnImagewidthChanging(value);
                    this.SendPropertyChanging();
                    this._Imagewidth = value;
                    this.SendPropertyChanged("Imagewidth");
                    this.OnImagewidthChanged();
                }
            }
        }

        [Column(Name = @"imageheight", Storage = "_Imageheight", DbType = "int(10)")]
        public System.Nullable<long> Imageheight
        {
            get
            {
                return this._Imageheight;
            }
            set
            {
                if (this._Imageheight != value)
                {
                    this.OnImageheightChanging(value);
                    this.SendPropertyChanging();
                    this._Imageheight = value;
                    this.SendPropertyChanged("Imageheight");
                    this.OnImageheightChanged();
                }
            }
        }

        [Column(Name = @"previewvideo", Storage = "_Previewvideo", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Previewvideo
        {
            get
            {
                return this._Previewvideo;
            }
            set
            {
                if (this._Previewvideo != value)
                {
                    this.OnPreviewvideoChanging(value);
                    this.SendPropertyChanging();
                    this._Previewvideo = value;
                    this.SendPropertyChanged("Previewvideo");
                    this.OnPreviewvideoChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_category")]
    public partial class Cmscategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Categoryid;

        private System.Nullable<int> _Parentnode;

        private string _Category;

        private string _Description;

        private int _Catleft;

        private int _Catright;

        private System.Nullable<int> _Parentcat;

        private System.Nullable<byte> _Enabled;

        private System.Nullable<int> _Contentcount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryidChanging(long value);
        partial void OnCategoryidChanged();
        partial void OnParentnodeChanging(System.Nullable<int> value);
        partial void OnParentnodeChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCatleftChanging(int value);
        partial void OnCatleftChanged();
        partial void OnCatrightChanging(int value);
        partial void OnCatrightChanged();
        partial void OnParentcatChanging(System.Nullable<int> value);
        partial void OnParentcatChanged();
        partial void OnEnabledChanging(System.Nullable<byte> value);
        partial void OnEnabledChanged();
        partial void OnContentcountChanging(System.Nullable<int> value);
        partial void OnContentcountChanged();
        #endregion

        public Cmscategory()
        {
            OnCreated();
        }

        [Column(Name = @"categoryid", Storage = "_Categoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

        [Column(Name = @"parentnode", Storage = "_Parentnode", DbType = "int(11)")]
        public System.Nullable<int> Parentnode
        {
            get
            {
                return this._Parentnode;
            }
            set
            {
                if (this._Parentnode != value)
                {
                    this.OnParentnodeChanging(value);
                    this.SendPropertyChanging();
                    this._Parentnode = value;
                    this.SendPropertyChanged("Parentnode");
                    this.OnParentnodeChanged();
                }
            }
        }

        [Column(Name = @"category", Storage = "_Category", DbType = "varchar(40)")]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "varchar(255)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"catleft", Storage = "_Catleft", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Catleft
        {
            get
            {
                return this._Catleft;
            }
            set
            {
                if (this._Catleft != value)
                {
                    this.OnCatleftChanging(value);
                    this.SendPropertyChanging();
                    this._Catleft = value;
                    this.SendPropertyChanged("Catleft");
                    this.OnCatleftChanged();
                }
            }
        }

        [Column(Name = @"catright", Storage = "_Catright", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Catright
        {
            get
            {
                return this._Catright;
            }
            set
            {
                if (this._Catright != value)
                {
                    this.OnCatrightChanging(value);
                    this.SendPropertyChanging();
                    this._Catright = value;
                    this.SendPropertyChanged("Catright");
                    this.OnCatrightChanged();
                }
            }
        }

        [Column(Name = @"parentcat", Storage = "_Parentcat", DbType = "int(11)")]
        public System.Nullable<int> Parentcat
        {
            get
            {
                return this._Parentcat;
            }
            set
            {
                if (this._Parentcat != value)
                {
                    this.OnParentcatChanging(value);
                    this.SendPropertyChanging();
                    this._Parentcat = value;
                    this.SendPropertyChanged("Parentcat");
                    this.OnParentcatChanged();
                }
            }
        }

        [Column(Name = @"enabled", Storage = "_Enabled", DbType = "tinyint(3)")]
        public System.Nullable<byte> Enabled
        {
            get
            {
                return this._Enabled;
            }
            set
            {
                if (this._Enabled != value)
                {
                    this.OnEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._Enabled = value;
                    this.SendPropertyChanged("Enabled");
                    this.OnEnabledChanged();
                }
            }
        }

        [Column(Name = @"contentcount", Storage = "_Contentcount", DbType = "int(11)")]
        public System.Nullable<int> Contentcount
        {
            get
            {
                return this._Contentcount;
            }
            set
            {
                if (this._Contentcount != value)
                {
                    this.OnContentcountChanging(value);
                    this.SendPropertyChanging();
                    this._Contentcount = value;
                    this.SendPropertyChanged("Contentcount");
                    this.OnContentcountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_grid")]
    public partial class Cmsgrid : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Gridid;

        private string _Gridhtml;

        private string _Title;

        private string _Gridhtmlbackup;

        private int _Auxheader;

        private int _Auxfooter;

        private int _Addcolumn;

        private int _Addcolumnsnap;

        private int _Addcolumnsize;

        private int _Gridcolumns;

        private int _Flattened;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGrididChanging(long value);
        partial void OnGrididChanged();
        partial void OnGridhtmlChanging(string value);
        partial void OnGridhtmlChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnGridhtmlbackupChanging(string value);
        partial void OnGridhtmlbackupChanged();
        partial void OnAuxheaderChanging(int value);
        partial void OnAuxheaderChanged();
        partial void OnAuxfooterChanging(int value);
        partial void OnAuxfooterChanged();
        partial void OnAddcolumnChanging(int value);
        partial void OnAddcolumnChanged();
        partial void OnAddcolumnsnapChanging(int value);
        partial void OnAddcolumnsnapChanged();
        partial void OnAddcolumnsizeChanging(int value);
        partial void OnAddcolumnsizeChanged();
        partial void OnGridcolumnsChanging(int value);
        partial void OnGridcolumnsChanged();
        partial void OnFlattenedChanging(int value);
        partial void OnFlattenedChanged();
        #endregion

        public Cmsgrid()
        {
            OnCreated();
        }

        [Column(Name = @"gridid", Storage = "_Gridid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Gridid
        {
            get
            {
                return this._Gridid;
            }
            set
            {
                if (this._Gridid != value)
                {
                    this.OnGrididChanging(value);
                    this.SendPropertyChanging();
                    this._Gridid = value;
                    this.SendPropertyChanged("Gridid");
                    this.OnGrididChanged();
                }
            }
        }

        [Column(Name = @"gridhtml", Storage = "_Gridhtml", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Gridhtml
        {
            get
            {
                return this._Gridhtml;
            }
            set
            {
                if (this._Gridhtml != value)
                {
                    this.OnGridhtmlChanging(value);
                    this.SendPropertyChanging();
                    this._Gridhtml = value;
                    this.SendPropertyChanged("Gridhtml");
                    this.OnGridhtmlChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"gridhtml_backup", Storage = "_Gridhtmlbackup", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gridhtmlbackup
        {
            get
            {
                return this._Gridhtmlbackup;
            }
            set
            {
                if (this._Gridhtmlbackup != value)
                {
                    this.OnGridhtmlbackupChanging(value);
                    this.SendPropertyChanging();
                    this._Gridhtmlbackup = value;
                    this.SendPropertyChanged("Gridhtmlbackup");
                    this.OnGridhtmlbackupChanged();
                }
            }
        }

        [Column(Name = @"auxheader", Storage = "_Auxheader", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Auxheader
        {
            get
            {
                return this._Auxheader;
            }
            set
            {
                if (this._Auxheader != value)
                {
                    this.OnAuxheaderChanging(value);
                    this.SendPropertyChanging();
                    this._Auxheader = value;
                    this.SendPropertyChanged("Auxheader");
                    this.OnAuxheaderChanged();
                }
            }
        }

        [Column(Name = @"auxfooter", Storage = "_Auxfooter", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Auxfooter
        {
            get
            {
                return this._Auxfooter;
            }
            set
            {
                if (this._Auxfooter != value)
                {
                    this.OnAuxfooterChanging(value);
                    this.SendPropertyChanging();
                    this._Auxfooter = value;
                    this.SendPropertyChanged("Auxfooter");
                    this.OnAuxfooterChanged();
                }
            }
        }

        [Column(Name = @"addcolumn", Storage = "_Addcolumn", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Addcolumn
        {
            get
            {
                return this._Addcolumn;
            }
            set
            {
                if (this._Addcolumn != value)
                {
                    this.OnAddcolumnChanging(value);
                    this.SendPropertyChanging();
                    this._Addcolumn = value;
                    this.SendPropertyChanged("Addcolumn");
                    this.OnAddcolumnChanged();
                }
            }
        }

        [Column(Name = @"addcolumnsnap", Storage = "_Addcolumnsnap", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Addcolumnsnap
        {
            get
            {
                return this._Addcolumnsnap;
            }
            set
            {
                if (this._Addcolumnsnap != value)
                {
                    this.OnAddcolumnsnapChanging(value);
                    this.SendPropertyChanging();
                    this._Addcolumnsnap = value;
                    this.SendPropertyChanged("Addcolumnsnap");
                    this.OnAddcolumnsnapChanged();
                }
            }
        }

        [Column(Name = @"addcolumnsize", Storage = "_Addcolumnsize", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Addcolumnsize
        {
            get
            {
                return this._Addcolumnsize;
            }
            set
            {
                if (this._Addcolumnsize != value)
                {
                    this.OnAddcolumnsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Addcolumnsize = value;
                    this.SendPropertyChanged("Addcolumnsize");
                    this.OnAddcolumnsizeChanged();
                }
            }
        }

        [Column(Name = @"gridcolumns", Storage = "_Gridcolumns", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Gridcolumns
        {
            get
            {
                return this._Gridcolumns;
            }
            set
            {
                if (this._Gridcolumns != value)
                {
                    this.OnGridcolumnsChanging(value);
                    this.SendPropertyChanging();
                    this._Gridcolumns = value;
                    this.SendPropertyChanged("Gridcolumns");
                    this.OnGridcolumnsChanged();
                }
            }
        }

        [Column(Name = @"flattened", Storage = "_Flattened", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Flattened
        {
            get
            {
                return this._Flattened;
            }
            set
            {
                if (this._Flattened != value)
                {
                    this.OnFlattenedChanging(value);
                    this.SendPropertyChanging();
                    this._Flattened = value;
                    this.SendPropertyChanged("Flattened");
                    this.OnFlattenedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_layout")]
    public partial class Cmslayout : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Layoutid;

        private string _Title;

        private long _Gridid;

        private string _Template;

        private string _Status;

        private long _Contentcolumn;

        private long _Contentindex;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLayoutidChanging(long value);
        partial void OnLayoutidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnGrididChanging(long value);
        partial void OnGrididChanged();
        partial void OnTemplateChanging(string value);
        partial void OnTemplateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnContentcolumnChanging(long value);
        partial void OnContentcolumnChanged();
        partial void OnContentindexChanging(long value);
        partial void OnContentindexChanged();
        #endregion

        public Cmslayout()
        {
            OnCreated();
        }

        [Column(Name = @"layoutid", Storage = "_Layoutid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Layoutid
        {
            get
            {
                return this._Layoutid;
            }
            set
            {
                if (this._Layoutid != value)
                {
                    this.OnLayoutidChanging(value);
                    this.SendPropertyChanging();
                    this._Layoutid = value;
                    this.SendPropertyChanged("Layoutid");
                    this.OnLayoutidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"gridid", Storage = "_Gridid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Gridid
        {
            get
            {
                return this._Gridid;
            }
            set
            {
                if (this._Gridid != value)
                {
                    this.OnGrididChanging(value);
                    this.SendPropertyChanging();
                    this._Gridid = value;
                    this.SendPropertyChanged("Gridid");
                    this.OnGrididChanged();
                }
            }
        }

        [Column(Name = @"template", Storage = "_Template", DbType = "varchar(100)")]
        public string Template
        {
            get
            {
                return this._Template;
            }
            set
            {
                if (this._Template != value)
                {
                    this.OnTemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Template = value;
                    this.SendPropertyChanged("Template");
                    this.OnTemplateChanged();
                }
            }
        }

        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"contentcolumn", Storage = "_Contentcolumn", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contentcolumn
        {
            get
            {
                return this._Contentcolumn;
            }
            set
            {
                if (this._Contentcolumn != value)
                {
                    this.OnContentcolumnChanging(value);
                    this.SendPropertyChanging();
                    this._Contentcolumn = value;
                    this.SendPropertyChanged("Contentcolumn");
                    this.OnContentcolumnChanged();
                }
            }
        }

        [Column(Name = @"contentindex", Storage = "_Contentindex", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contentindex
        {
            get
            {
                return this._Contentindex;
            }
            set
            {
                if (this._Contentindex != value)
                {
                    this.OnContentindexChanging(value);
                    this.SendPropertyChanging();
                    this._Contentindex = value;
                    this.SendPropertyChanged("Contentindex");
                    this.OnContentindexChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_layoutwidget")]
    public partial class Cmslayoutwidget : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Layoutid;

        private long _Widgetid;

        private long _Layoutcolumn;

        private long _Layoutindex;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLayoutidChanging(long value);
        partial void OnLayoutidChanged();
        partial void OnWidgetidChanging(long value);
        partial void OnWidgetidChanged();
        partial void OnLayoutcolumnChanging(long value);
        partial void OnLayoutcolumnChanged();
        partial void OnLayoutindexChanging(long value);
        partial void OnLayoutindexChanged();
        #endregion

        public Cmslayoutwidget()
        {
            OnCreated();
        }

        [Column(Name = @"layoutid", Storage = "_Layoutid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Layoutid
        {
            get
            {
                return this._Layoutid;
            }
            set
            {
                if (this._Layoutid != value)
                {
                    this.OnLayoutidChanging(value);
                    this.SendPropertyChanging();
                    this._Layoutid = value;
                    this.SendPropertyChanged("Layoutid");
                    this.OnLayoutidChanged();
                }
            }
        }

        [Column(Name = @"widgetid", Storage = "_Widgetid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Widgetid
        {
            get
            {
                return this._Widgetid;
            }
            set
            {
                if (this._Widgetid != value)
                {
                    this.OnWidgetidChanging(value);
                    this.SendPropertyChanging();
                    this._Widgetid = value;
                    this.SendPropertyChanged("Widgetid");
                    this.OnWidgetidChanged();
                }
            }
        }

        [Column(Name = @"layoutcolumn", Storage = "_Layoutcolumn", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Layoutcolumn
        {
            get
            {
                return this._Layoutcolumn;
            }
            set
            {
                if (this._Layoutcolumn != value)
                {
                    this.OnLayoutcolumnChanging(value);
                    this.SendPropertyChanging();
                    this._Layoutcolumn = value;
                    this.SendPropertyChanged("Layoutcolumn");
                    this.OnLayoutcolumnChanged();
                }
            }
        }

        [Column(Name = @"layoutindex", Storage = "_Layoutindex", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Layoutindex
        {
            get
            {
                return this._Layoutindex;
            }
            set
            {
                if (this._Layoutindex != value)
                {
                    this.OnLayoutindexChanging(value);
                    this.SendPropertyChanging();
                    this._Layoutindex = value;
                    this.SendPropertyChanged("Layoutindex");
                    this.OnLayoutindexChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_navigation")]
    public partial class Cmsnavigation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Nodeid;

        private string _Nodelist;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnNodelistChanging(string value);
        partial void OnNodelistChanged();
        #endregion

        public Cmsnavigation()
        {
            OnCreated();
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"nodelist", Storage = "_Nodelist", DbType = "varchar(255)")]
        public string Nodelist
        {
            get
            {
                return this._Nodelist;
            }
            set
            {
                if (this._Nodelist != value)
                {
                    this.OnNodelistChanging(value);
                    this.SendPropertyChanging();
                    this._Nodelist = value;
                    this.SendPropertyChanged("Nodelist");
                    this.OnNodelistChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_node")]
    public partial class Cmsnode : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Nodeid;

        private long _Nodeleft;

        private long _Noderight;

        private System.Nullable<long> _Parentnode;

        private long _Contenttypeid;

        private System.Nullable<long> _Contentid;

        private string _Url;

        private System.Nullable<long> _Styleid;

        private System.Nullable<long> _Layoutid;

        private long _Userid;

        private System.Nullable<long> _Publishdate;

        private System.Nullable<byte> _Setpublish;

        private System.Nullable<short> _Issection;

        private System.Nullable<short> _Onhomepage;

        private System.Nullable<long> _Permissionsfrom;

        private System.Nullable<long> _Lastupdated;

        private System.Nullable<short> _Publicpreview;

        private System.Nullable<short> _Autodisplayorder;

        private System.Nullable<short> _Commentsenabled;

        private byte _New;

        private System.Nullable<short> _Showtitle;

        private System.Nullable<short> _Showuser;

        private System.Nullable<short> _Showpreviewonly;

        private System.Nullable<short> _Showupdated;

        private System.Nullable<short> _Showviewcount;

        private System.Nullable<short> _Showpublishdate;

        private System.Nullable<short> _Settingsforboth;

        private System.Nullable<short> _Includechildren;

        private System.Nullable<short> _Showall;

        private System.Nullable<short> _Editshowchildren;

        private System.Nullable<short> _Showrating;

        private System.Nullable<short> _Hidden;

        private System.Nullable<short> _Shownav;

        private System.Nullable<short> _Nosearch;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnNodeleftChanging(long value);
        partial void OnNodeleftChanged();
        partial void OnNoderightChanging(long value);
        partial void OnNoderightChanged();
        partial void OnParentnodeChanging(System.Nullable<long> value);
        partial void OnParentnodeChanged();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnContentidChanging(System.Nullable<long> value);
        partial void OnContentidChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnStyleidChanging(System.Nullable<long> value);
        partial void OnStyleidChanged();
        partial void OnLayoutidChanging(System.Nullable<long> value);
        partial void OnLayoutidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPublishdateChanging(System.Nullable<long> value);
        partial void OnPublishdateChanged();
        partial void OnSetpublishChanging(System.Nullable<byte> value);
        partial void OnSetpublishChanged();
        partial void OnIssectionChanging(System.Nullable<short> value);
        partial void OnIssectionChanged();
        partial void OnOnhomepageChanging(System.Nullable<short> value);
        partial void OnOnhomepageChanged();
        partial void OnPermissionsfromChanging(System.Nullable<long> value);
        partial void OnPermissionsfromChanged();
        partial void OnLastupdatedChanging(System.Nullable<long> value);
        partial void OnLastupdatedChanged();
        partial void OnPublicpreviewChanging(System.Nullable<short> value);
        partial void OnPublicpreviewChanged();
        partial void OnAutodisplayorderChanging(System.Nullable<short> value);
        partial void OnAutodisplayorderChanged();
        partial void OnCommentsenabledChanging(System.Nullable<short> value);
        partial void OnCommentsenabledChanged();
        partial void OnNewChanging(byte value);
        partial void OnNewChanged();
        partial void OnShowtitleChanging(System.Nullable<short> value);
        partial void OnShowtitleChanged();
        partial void OnShowuserChanging(System.Nullable<short> value);
        partial void OnShowuserChanged();
        partial void OnShowpreviewonlyChanging(System.Nullable<short> value);
        partial void OnShowpreviewonlyChanged();
        partial void OnShowupdatedChanging(System.Nullable<short> value);
        partial void OnShowupdatedChanged();
        partial void OnShowviewcountChanging(System.Nullable<short> value);
        partial void OnShowviewcountChanged();
        partial void OnShowpublishdateChanging(System.Nullable<short> value);
        partial void OnShowpublishdateChanged();
        partial void OnSettingsforbothChanging(System.Nullable<short> value);
        partial void OnSettingsforbothChanged();
        partial void OnIncludechildrenChanging(System.Nullable<short> value);
        partial void OnIncludechildrenChanged();
        partial void OnShowallChanging(System.Nullable<short> value);
        partial void OnShowallChanged();
        partial void OnEditshowchildrenChanging(System.Nullable<short> value);
        partial void OnEditshowchildrenChanged();
        partial void OnShowratingChanging(System.Nullable<short> value);
        partial void OnShowratingChanged();
        partial void OnHiddenChanging(System.Nullable<short> value);
        partial void OnHiddenChanged();
        partial void OnShownavChanging(System.Nullable<short> value);
        partial void OnShownavChanged();
        partial void OnNosearchChanging(System.Nullable<short> value);
        partial void OnNosearchChanged();
        #endregion

        public Cmsnode()
        {
            OnCreated();
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"nodeleft", Storage = "_Nodeleft", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Nodeleft
        {
            get
            {
                return this._Nodeleft;
            }
            set
            {
                if (this._Nodeleft != value)
                {
                    this.OnNodeleftChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeleft = value;
                    this.SendPropertyChanged("Nodeleft");
                    this.OnNodeleftChanged();
                }
            }
        }

        [Column(Name = @"noderight", Storage = "_Noderight", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Noderight
        {
            get
            {
                return this._Noderight;
            }
            set
            {
                if (this._Noderight != value)
                {
                    this.OnNoderightChanging(value);
                    this.SendPropertyChanging();
                    this._Noderight = value;
                    this.SendPropertyChanged("Noderight");
                    this.OnNoderightChanged();
                }
            }
        }

        [Column(Name = @"parentnode", Storage = "_Parentnode", DbType = "int(10)")]
        public System.Nullable<long> Parentnode
        {
            get
            {
                return this._Parentnode;
            }
            set
            {
                if (this._Parentnode != value)
                {
                    this.OnParentnodeChanging(value);
                    this.SendPropertyChanging();
                    this._Parentnode = value;
                    this.SendPropertyChanged("Parentnode");
                    this.OnParentnodeChanged();
                }
            }
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"contentid", Storage = "_Contentid", DbType = "int(10)")]
        public System.Nullable<long> Contentid
        {
            get
            {
                return this._Contentid;
            }
            set
            {
                if (this._Contentid != value)
                {
                    this.OnContentidChanging(value);
                    this.SendPropertyChanging();
                    this._Contentid = value;
                    this.SendPropertyChanged("Contentid");
                    this.OnContentidChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", DbType = "int(10)")]
        public System.Nullable<long> Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"layoutid", Storage = "_Layoutid", DbType = "int(10)")]
        public System.Nullable<long> Layoutid
        {
            get
            {
                return this._Layoutid;
            }
            set
            {
                if (this._Layoutid != value)
                {
                    this.OnLayoutidChanging(value);
                    this.SendPropertyChanging();
                    this._Layoutid = value;
                    this.SendPropertyChanged("Layoutid");
                    this.OnLayoutidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"publishdate", Storage = "_Publishdate", DbType = "int(10)")]
        public System.Nullable<long> Publishdate
        {
            get
            {
                return this._Publishdate;
            }
            set
            {
                if (this._Publishdate != value)
                {
                    this.OnPublishdateChanging(value);
                    this.SendPropertyChanging();
                    this._Publishdate = value;
                    this.SendPropertyChanged("Publishdate");
                    this.OnPublishdateChanged();
                }
            }
        }

        [Column(Name = @"setpublish", Storage = "_Setpublish", DbType = "tinyint(3)")]
        public System.Nullable<byte> Setpublish
        {
            get
            {
                return this._Setpublish;
            }
            set
            {
                if (this._Setpublish != value)
                {
                    this.OnSetpublishChanging(value);
                    this.SendPropertyChanging();
                    this._Setpublish = value;
                    this.SendPropertyChanged("Setpublish");
                    this.OnSetpublishChanged();
                }
            }
        }

        [Column(Name = @"issection", Storage = "_Issection", DbType = "tinyint(4)")]
        public System.Nullable<short> Issection
        {
            get
            {
                return this._Issection;
            }
            set
            {
                if (this._Issection != value)
                {
                    this.OnIssectionChanging(value);
                    this.SendPropertyChanging();
                    this._Issection = value;
                    this.SendPropertyChanged("Issection");
                    this.OnIssectionChanged();
                }
            }
        }

        [Column(Name = @"onhomepage", Storage = "_Onhomepage", DbType = "tinyint(4)")]
        public System.Nullable<short> Onhomepage
        {
            get
            {
                return this._Onhomepage;
            }
            set
            {
                if (this._Onhomepage != value)
                {
                    this.OnOnhomepageChanging(value);
                    this.SendPropertyChanging();
                    this._Onhomepage = value;
                    this.SendPropertyChanged("Onhomepage");
                    this.OnOnhomepageChanged();
                }
            }
        }

        [Column(Name = @"permissionsfrom", Storage = "_Permissionsfrom", DbType = "int(10)")]
        public System.Nullable<long> Permissionsfrom
        {
            get
            {
                return this._Permissionsfrom;
            }
            set
            {
                if (this._Permissionsfrom != value)
                {
                    this.OnPermissionsfromChanging(value);
                    this.SendPropertyChanging();
                    this._Permissionsfrom = value;
                    this.SendPropertyChanged("Permissionsfrom");
                    this.OnPermissionsfromChanged();
                }
            }
        }

        [Column(Name = @"lastupdated", Storage = "_Lastupdated", DbType = "int(10)")]
        public System.Nullable<long> Lastupdated
        {
            get
            {
                return this._Lastupdated;
            }
            set
            {
                if (this._Lastupdated != value)
                {
                    this.OnLastupdatedChanging(value);
                    this.SendPropertyChanging();
                    this._Lastupdated = value;
                    this.SendPropertyChanged("Lastupdated");
                    this.OnLastupdatedChanged();
                }
            }
        }

        [Column(Name = @"publicpreview", Storage = "_Publicpreview", DbType = "tinyint(4)")]
        public System.Nullable<short> Publicpreview
        {
            get
            {
                return this._Publicpreview;
            }
            set
            {
                if (this._Publicpreview != value)
                {
                    this.OnPublicpreviewChanging(value);
                    this.SendPropertyChanging();
                    this._Publicpreview = value;
                    this.SendPropertyChanged("Publicpreview");
                    this.OnPublicpreviewChanged();
                }
            }
        }

        [Column(Name = @"auto_displayorder", Storage = "_Autodisplayorder", DbType = "tinyint(4)")]
        public System.Nullable<short> Autodisplayorder
        {
            get
            {
                return this._Autodisplayorder;
            }
            set
            {
                if (this._Autodisplayorder != value)
                {
                    this.OnAutodisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Autodisplayorder = value;
                    this.SendPropertyChanged("Autodisplayorder");
                    this.OnAutodisplayorderChanged();
                }
            }
        }

        [Column(Name = @"comments_enabled", Storage = "_Commentsenabled", DbType = "tinyint(4)")]
        public System.Nullable<short> Commentsenabled
        {
            get
            {
                return this._Commentsenabled;
            }
            set
            {
                if (this._Commentsenabled != value)
                {
                    this.OnCommentsenabledChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsenabled = value;
                    this.SendPropertyChanged("Commentsenabled");
                    this.OnCommentsenabledChanged();
                }
            }
        }

        [Column(Name = @"new", Storage = "_New", CanBeNull = false, DbType = "tinyint(3) NOT NULL")]
        public byte New
        {
            get
            {
                return this._New;
            }
            set
            {
                if (this._New != value)
                {
                    this.OnNewChanging(value);
                    this.SendPropertyChanging();
                    this._New = value;
                    this.SendPropertyChanged("New");
                    this.OnNewChanged();
                }
            }
        }

        [Column(Name = @"showtitle", Storage = "_Showtitle", DbType = "smallint(6)")]
        public System.Nullable<short> Showtitle
        {
            get
            {
                return this._Showtitle;
            }
            set
            {
                if (this._Showtitle != value)
                {
                    this.OnShowtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Showtitle = value;
                    this.SendPropertyChanged("Showtitle");
                    this.OnShowtitleChanged();
                }
            }
        }

        [Column(Name = @"showuser", Storage = "_Showuser", DbType = "smallint(6)")]
        public System.Nullable<short> Showuser
        {
            get
            {
                return this._Showuser;
            }
            set
            {
                if (this._Showuser != value)
                {
                    this.OnShowuserChanging(value);
                    this.SendPropertyChanging();
                    this._Showuser = value;
                    this.SendPropertyChanged("Showuser");
                    this.OnShowuserChanged();
                }
            }
        }

        [Column(Name = @"showpreviewonly", Storage = "_Showpreviewonly", DbType = "smallint(6)")]
        public System.Nullable<short> Showpreviewonly
        {
            get
            {
                return this._Showpreviewonly;
            }
            set
            {
                if (this._Showpreviewonly != value)
                {
                    this.OnShowpreviewonlyChanging(value);
                    this.SendPropertyChanging();
                    this._Showpreviewonly = value;
                    this.SendPropertyChanged("Showpreviewonly");
                    this.OnShowpreviewonlyChanged();
                }
            }
        }

        [Column(Name = @"showupdated", Storage = "_Showupdated", DbType = "smallint(6)")]
        public System.Nullable<short> Showupdated
        {
            get
            {
                return this._Showupdated;
            }
            set
            {
                if (this._Showupdated != value)
                {
                    this.OnShowupdatedChanging(value);
                    this.SendPropertyChanging();
                    this._Showupdated = value;
                    this.SendPropertyChanged("Showupdated");
                    this.OnShowupdatedChanged();
                }
            }
        }

        [Column(Name = @"showviewcount", Storage = "_Showviewcount", DbType = "smallint(6)")]
        public System.Nullable<short> Showviewcount
        {
            get
            {
                return this._Showviewcount;
            }
            set
            {
                if (this._Showviewcount != value)
                {
                    this.OnShowviewcountChanging(value);
                    this.SendPropertyChanging();
                    this._Showviewcount = value;
                    this.SendPropertyChanged("Showviewcount");
                    this.OnShowviewcountChanged();
                }
            }
        }

        [Column(Name = @"showpublishdate", Storage = "_Showpublishdate", DbType = "smallint(6)")]
        public System.Nullable<short> Showpublishdate
        {
            get
            {
                return this._Showpublishdate;
            }
            set
            {
                if (this._Showpublishdate != value)
                {
                    this.OnShowpublishdateChanging(value);
                    this.SendPropertyChanging();
                    this._Showpublishdate = value;
                    this.SendPropertyChanged("Showpublishdate");
                    this.OnShowpublishdateChanged();
                }
            }
        }

        [Column(Name = @"settingsforboth", Storage = "_Settingsforboth", DbType = "smallint(6)")]
        public System.Nullable<short> Settingsforboth
        {
            get
            {
                return this._Settingsforboth;
            }
            set
            {
                if (this._Settingsforboth != value)
                {
                    this.OnSettingsforbothChanging(value);
                    this.SendPropertyChanging();
                    this._Settingsforboth = value;
                    this.SendPropertyChanged("Settingsforboth");
                    this.OnSettingsforbothChanged();
                }
            }
        }

        [Column(Name = @"includechildren", Storage = "_Includechildren", DbType = "smallint(6)")]
        public System.Nullable<short> Includechildren
        {
            get
            {
                return this._Includechildren;
            }
            set
            {
                if (this._Includechildren != value)
                {
                    this.OnIncludechildrenChanging(value);
                    this.SendPropertyChanging();
                    this._Includechildren = value;
                    this.SendPropertyChanged("Includechildren");
                    this.OnIncludechildrenChanged();
                }
            }
        }

        [Column(Name = @"showall", Storage = "_Showall", DbType = "smallint(6)")]
        public System.Nullable<short> Showall
        {
            get
            {
                return this._Showall;
            }
            set
            {
                if (this._Showall != value)
                {
                    this.OnShowallChanging(value);
                    this.SendPropertyChanging();
                    this._Showall = value;
                    this.SendPropertyChanged("Showall");
                    this.OnShowallChanged();
                }
            }
        }

        [Column(Name = @"editshowchildren", Storage = "_Editshowchildren", DbType = "smallint(6)")]
        public System.Nullable<short> Editshowchildren
        {
            get
            {
                return this._Editshowchildren;
            }
            set
            {
                if (this._Editshowchildren != value)
                {
                    this.OnEditshowchildrenChanging(value);
                    this.SendPropertyChanging();
                    this._Editshowchildren = value;
                    this.SendPropertyChanged("Editshowchildren");
                    this.OnEditshowchildrenChanged();
                }
            }
        }

        [Column(Name = @"showrating", Storage = "_Showrating", DbType = "smallint(6)")]
        public System.Nullable<short> Showrating
        {
            get
            {
                return this._Showrating;
            }
            set
            {
                if (this._Showrating != value)
                {
                    this.OnShowratingChanging(value);
                    this.SendPropertyChanging();
                    this._Showrating = value;
                    this.SendPropertyChanged("Showrating");
                    this.OnShowratingChanged();
                }
            }
        }

        [Column(Name = @"hidden", Storage = "_Hidden", DbType = "smallint(6)")]
        public System.Nullable<short> Hidden
        {
            get
            {
                return this._Hidden;
            }
            set
            {
                if (this._Hidden != value)
                {
                    this.OnHiddenChanging(value);
                    this.SendPropertyChanging();
                    this._Hidden = value;
                    this.SendPropertyChanged("Hidden");
                    this.OnHiddenChanged();
                }
            }
        }

        [Column(Name = @"shownav", Storage = "_Shownav", DbType = "smallint(6)")]
        public System.Nullable<short> Shownav
        {
            get
            {
                return this._Shownav;
            }
            set
            {
                if (this._Shownav != value)
                {
                    this.OnShownavChanging(value);
                    this.SendPropertyChanging();
                    this._Shownav = value;
                    this.SendPropertyChanged("Shownav");
                    this.OnShownavChanged();
                }
            }
        }

        [Column(Name = @"nosearch", Storage = "_Nosearch", DbType = "smallint(6)")]
        public System.Nullable<short> Nosearch
        {
            get
            {
                return this._Nosearch;
            }
            set
            {
                if (this._Nosearch != value)
                {
                    this.OnNosearchChanging(value);
                    this.SendPropertyChanging();
                    this._Nosearch = value;
                    this.SendPropertyChanged("Nosearch");
                    this.OnNosearchChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_nodecategory")]
    public partial class Cmsnodecategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Categoryid;

        private long _Nodeid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryidChanging(long value);
        partial void OnCategoryidChanged();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        #endregion

        public Cmsnodecategory()
        {
            OnCreated();
        }

        [Column(Name = @"categoryid", Storage = "_Categoryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_nodeconfig")]
    public partial class Cmsnodeconfig : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Nodeid;

        private string _Name;

        private string _Value;

        private System.Nullable<byte> _Serialized;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnSerializedChanging(System.Nullable<byte> value);
        partial void OnSerializedChanged();
        #endregion

        public Cmsnodeconfig()
        {
            OnCreated();
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", IsPrimaryKey = true)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [Column(Name = @"serialized", Storage = "_Serialized", DbType = "tinyint(3)")]
        public System.Nullable<byte> Serialized
        {
            get
            {
                return this._Serialized;
            }
            set
            {
                if (this._Serialized != value)
                {
                    this.OnSerializedChanging(value);
                    this.SendPropertyChanging();
                    this._Serialized = value;
                    this.SendPropertyChanged("Serialized");
                    this.OnSerializedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_nodeinfo")]
    public partial class Cmsnodeinfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Nodeid;

        private string _Description;

        private string _Title;

        private string _Htmltitle;

        private System.Nullable<long> _Viewcount;

        private long _Creationdate;

        private System.Nullable<long> _Workflowdate;

        private string _Workflowstatus;

        private System.Nullable<short> _Workflowcheckedout;

        private System.Nullable<short> _Workflowpending;

        private System.Nullable<long> _Workflowlevelid;

        private long _Associatedthreadid;

        private string _Keywords;

        private long _Ratingnum;

        private long _Ratingtotal;

        private float _Rating;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnHtmltitleChanging(string value);
        partial void OnHtmltitleChanged();
        partial void OnViewcountChanging(System.Nullable<long> value);
        partial void OnViewcountChanged();
        partial void OnCreationdateChanging(long value);
        partial void OnCreationdateChanged();
        partial void OnWorkflowdateChanging(System.Nullable<long> value);
        partial void OnWorkflowdateChanged();
        partial void OnWorkflowstatusChanging(string value);
        partial void OnWorkflowstatusChanged();
        partial void OnWorkflowcheckedoutChanging(System.Nullable<short> value);
        partial void OnWorkflowcheckedoutChanged();
        partial void OnWorkflowpendingChanging(System.Nullable<short> value);
        partial void OnWorkflowpendingChanged();
        partial void OnWorkflowlevelidChanging(System.Nullable<long> value);
        partial void OnWorkflowlevelidChanged();
        partial void OnAssociatedthreadidChanging(long value);
        partial void OnAssociatedthreadidChanged();
        partial void OnKeywordsChanging(string value);
        partial void OnKeywordsChanged();
        partial void OnRatingnumChanging(long value);
        partial void OnRatingnumChanged();
        partial void OnRatingtotalChanging(long value);
        partial void OnRatingtotalChanged();
        partial void OnRatingChanging(float value);
        partial void OnRatingChanged();
        #endregion

        public Cmsnodeinfo()
        {
            OnCreated();
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"html_title", Storage = "_Htmltitle", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Htmltitle
        {
            get
            {
                return this._Htmltitle;
            }
            set
            {
                if (this._Htmltitle != value)
                {
                    this.OnHtmltitleChanging(value);
                    this.SendPropertyChanging();
                    this._Htmltitle = value;
                    this.SendPropertyChanged("Htmltitle");
                    this.OnHtmltitleChanged();
                }
            }
        }

        [Column(Name = @"viewcount", Storage = "_Viewcount", DbType = "int(10)")]
        public System.Nullable<long> Viewcount
        {
            get
            {
                return this._Viewcount;
            }
            set
            {
                if (this._Viewcount != value)
                {
                    this.OnViewcountChanging(value);
                    this.SendPropertyChanging();
                    this._Viewcount = value;
                    this.SendPropertyChanged("Viewcount");
                    this.OnViewcountChanged();
                }
            }
        }

        [Column(Name = @"creationdate", Storage = "_Creationdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Creationdate
        {
            get
            {
                return this._Creationdate;
            }
            set
            {
                if (this._Creationdate != value)
                {
                    this.OnCreationdateChanging(value);
                    this.SendPropertyChanging();
                    this._Creationdate = value;
                    this.SendPropertyChanged("Creationdate");
                    this.OnCreationdateChanged();
                }
            }
        }

        [Column(Name = @"workflowdate", Storage = "_Workflowdate", DbType = "int(10)")]
        public System.Nullable<long> Workflowdate
        {
            get
            {
                return this._Workflowdate;
            }
            set
            {
                if (this._Workflowdate != value)
                {
                    this.OnWorkflowdateChanging(value);
                    this.SendPropertyChanging();
                    this._Workflowdate = value;
                    this.SendPropertyChanged("Workflowdate");
                    this.OnWorkflowdateChanged();
                }
            }
        }

        [Column(Name = @"workflowstatus", Storage = "_Workflowstatus", DbType = "enum")]
        public string Workflowstatus
        {
            get
            {
                return this._Workflowstatus;
            }
            set
            {
                if (this._Workflowstatus != value)
                {
                    this.OnWorkflowstatusChanging(value);
                    this.SendPropertyChanging();
                    this._Workflowstatus = value;
                    this.SendPropertyChanged("Workflowstatus");
                    this.OnWorkflowstatusChanged();
                }
            }
        }

        [Column(Name = @"workflowcheckedout", Storage = "_Workflowcheckedout", DbType = "tinyint(4)")]
        public System.Nullable<short> Workflowcheckedout
        {
            get
            {
                return this._Workflowcheckedout;
            }
            set
            {
                if (this._Workflowcheckedout != value)
                {
                    this.OnWorkflowcheckedoutChanging(value);
                    this.SendPropertyChanging();
                    this._Workflowcheckedout = value;
                    this.SendPropertyChanged("Workflowcheckedout");
                    this.OnWorkflowcheckedoutChanged();
                }
            }
        }

        [Column(Name = @"workflowpending", Storage = "_Workflowpending", DbType = "tinyint(4)")]
        public System.Nullable<short> Workflowpending
        {
            get
            {
                return this._Workflowpending;
            }
            set
            {
                if (this._Workflowpending != value)
                {
                    this.OnWorkflowpendingChanging(value);
                    this.SendPropertyChanging();
                    this._Workflowpending = value;
                    this.SendPropertyChanged("Workflowpending");
                    this.OnWorkflowpendingChanged();
                }
            }
        }

        [Column(Name = @"workflowlevelid", Storage = "_Workflowlevelid", DbType = "int(10)")]
        public System.Nullable<long> Workflowlevelid
        {
            get
            {
                return this._Workflowlevelid;
            }
            set
            {
                if (this._Workflowlevelid != value)
                {
                    this.OnWorkflowlevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Workflowlevelid = value;
                    this.SendPropertyChanged("Workflowlevelid");
                    this.OnWorkflowlevelidChanged();
                }
            }
        }

        [Column(Name = @"associatedthreadid", Storage = "_Associatedthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Associatedthreadid
        {
            get
            {
                return this._Associatedthreadid;
            }
            set
            {
                if (this._Associatedthreadid != value)
                {
                    this.OnAssociatedthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Associatedthreadid = value;
                    this.SendPropertyChanged("Associatedthreadid");
                    this.OnAssociatedthreadidChanged();
                }
            }
        }

        [Column(Name = @"keywords", Storage = "_Keywords", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Keywords
        {
            get
            {
                return this._Keywords;
            }
            set
            {
                if (this._Keywords != value)
                {
                    this.OnKeywordsChanging(value);
                    this.SendPropertyChanging();
                    this._Keywords = value;
                    this.SendPropertyChanged("Keywords");
                    this.OnKeywordsChanged();
                }
            }
        }

        [Column(Name = @"ratingnum", Storage = "_Ratingnum", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingnum
        {
            get
            {
                return this._Ratingnum;
            }
            set
            {
                if (this._Ratingnum != value)
                {
                    this.OnRatingnumChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingnum = value;
                    this.SendPropertyChanged("Ratingnum");
                    this.OnRatingnumChanged();
                }
            }
        }

        [Column(Name = @"ratingtotal", Storage = "_Ratingtotal", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ratingtotal
        {
            get
            {
                return this._Ratingtotal;
            }
            set
            {
                if (this._Ratingtotal != value)
                {
                    this.OnRatingtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Ratingtotal = value;
                    this.SendPropertyChanged("Ratingtotal");
                    this.OnRatingtotalChanged();
                }
            }
        }

        [Column(Name = @"rating", Storage = "_Rating", CanBeNull = false, DbType = "float NOT NULL")]
        public float Rating
        {
            get
            {
                return this._Rating;
            }
            set
            {
                if (this._Rating != value)
                {
                    this.OnRatingChanging(value);
                    this.SendPropertyChanging();
                    this._Rating = value;
                    this.SendPropertyChanged("Rating");
                    this.OnRatingChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_permissions")]
    public partial class Cmspermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Permissionid;

        private long _Usergroupid;

        private long _Nodeid;

        private long _Permissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPermissionidChanging(long value);
        partial void OnPermissionidChanged();
        partial void OnUsergroupidChanging(long value);
        partial void OnUsergroupidChanged();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        #endregion

        public Cmspermission()
        {
            OnCreated();
        }

        [Column(Name = @"permissionid", Storage = "_Permissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Permissionid
        {
            get
            {
                return this._Permissionid;
            }
            set
            {
                if (this._Permissionid != value)
                {
                    this.OnPermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Permissionid = value;
                    this.SendPropertyChanged("Permissionid");
                    this.OnPermissionidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_rate")]
    public partial class Cmsrate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Rateid;

        private long _Nodeid;

        private long _Userid;

        private long _Vote;

        private string _Ipaddress;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRateidChanging(long value);
        partial void OnRateidChanged();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnVoteChanging(long value);
        partial void OnVoteChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        #endregion

        public Cmsrate()
        {
            OnCreated();
        }

        [Column(Name = @"rateid", Storage = "_Rateid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Rateid
        {
            get
            {
                return this._Rateid;
            }
            set
            {
                if (this._Rateid != value)
                {
                    this.OnRateidChanging(value);
                    this.SendPropertyChanging();
                    this._Rateid = value;
                    this.SendPropertyChanged("Rateid");
                    this.OnRateidChanged();
                }
            }
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"vote", Storage = "_Vote", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vote
        {
            get
            {
                return this._Vote;
            }
            set
            {
                if (this._Vote != value)
                {
                    this.OnVoteChanging(value);
                    this.SendPropertyChanging();
                    this._Vote = value;
                    this.SendPropertyChanged("Vote");
                    this.OnVoteChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_sectionorder")]
    public partial class Cmssectionorder : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Sectionid;

        private int _Nodeid;

        private short _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSectionidChanging(int value);
        partial void OnSectionidChanged();
        partial void OnNodeidChanging(int value);
        partial void OnNodeidChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        #endregion

        public Cmssectionorder()
        {
            OnCreated();
        }

        [Column(Name = @"sectionid", Storage = "_Sectionid", CanBeNull = false, DbType = "int(11) NOT NULL", IsPrimaryKey = true)]
        public int Sectionid
        {
            get
            {
                return this._Sectionid;
            }
            set
            {
                if (this._Sectionid != value)
                {
                    this.OnSectionidChanging(value);
                    this.SendPropertyChanging();
                    this._Sectionid = value;
                    this.SendPropertyChanged("Sectionid");
                    this.OnSectionidChanged();
                }
            }
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(11) NOT NULL", IsPrimaryKey = true)]
        public int Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_widget")]
    public partial class Cmswidget : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Widgetid;

        private string _Varname;

        private int _Widgettypeid;

        private string _Title;

        private string _Description;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnWidgetidChanging(long value);
        partial void OnWidgetidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnWidgettypeidChanging(int value);
        partial void OnWidgettypeidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Cmswidget()
        {
            OnCreated();
        }

        [Column(Name = @"widgetid", Storage = "_Widgetid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Widgetid
        {
            get
            {
                return this._Widgetid;
            }
            set
            {
                if (this._Widgetid != value)
                {
                    this.OnWidgetidChanging(value);
                    this.SendPropertyChanging();
                    this._Widgetid = value;
                    this.SendPropertyChanged("Widgetid");
                    this.OnWidgetidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"widgettypeid", Storage = "_Widgettypeid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Widgettypeid
        {
            get
            {
                return this._Widgettypeid;
            }
            set
            {
                if (this._Widgettypeid != value)
                {
                    this.OnWidgettypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Widgettypeid = value;
                    this.SendPropertyChanged("Widgettypeid");
                    this.OnWidgettypeidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_widgetconfig")]
    public partial class Cmswidgetconfig : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Widgetid;

        private long _Nodeid;

        private string _Name;

        private byte[] _Value;

        private System.Nullable<short> _Serialized;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnWidgetidChanging(long value);
        partial void OnWidgetidChanged();
        partial void OnNodeidChanging(long value);
        partial void OnNodeidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(byte[] value);
        partial void OnValueChanged();
        partial void OnSerializedChanging(System.Nullable<short> value);
        partial void OnSerializedChanged();
        #endregion

        public Cmswidgetconfig()
        {
            OnCreated();
        }

        [Column(Name = @"widgetid", Storage = "_Widgetid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Widgetid
        {
            get
            {
                return this._Widgetid;
            }
            set
            {
                if (this._Widgetid != value)
                {
                    this.OnWidgetidChanging(value);
                    this.SendPropertyChanging();
                    this._Widgetid = value;
                    this.SendPropertyChanged("Widgetid");
                    this.OnWidgetidChanged();
                }
            }
        }

        [Column(Name = @"nodeid", Storage = "_Nodeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Nodeid
        {
            get
            {
                return this._Nodeid;
            }
            set
            {
                if (this._Nodeid != value)
                {
                    this.OnNodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Nodeid = value;
                    this.SendPropertyChanged("Nodeid");
                    this.OnNodeidChanged();
                }
            }
        }

        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", IsPrimaryKey = true)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [Column(Name = @"serialized", Storage = "_Serialized", DbType = "tinyint(4)")]
        public System.Nullable<short> Serialized
        {
            get
            {
                return this._Serialized;
            }
            set
            {
                if (this._Serialized != value)
                {
                    this.OnSerializedChanging(value);
                    this.SendPropertyChanging();
                    this._Serialized = value;
                    this.SendPropertyChanged("Serialized");
                    this.OnSerializedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cms_widgettype")]
    public partial class Cmswidgettype : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Widgettypeid;

        private string _Class;

        private long _Packageid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnWidgettypeidChanging(long value);
        partial void OnWidgettypeidChanged();
        partial void OnClassChanging(string value);
        partial void OnClassChanged();
        partial void OnPackageidChanging(long value);
        partial void OnPackageidChanged();
        #endregion

        public Cmswidgettype()
        {
            OnCreated();
        }

        [Column(Name = @"widgettypeid", Storage = "_Widgettypeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Widgettypeid
        {
            get
            {
                return this._Widgettypeid;
            }
            set
            {
                if (this._Widgettypeid != value)
                {
                    this.OnWidgettypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Widgettypeid = value;
                    this.SendPropertyChanged("Widgettypeid");
                    this.OnWidgettypeidChanged();
                }
            }
        }

        [Column(Name = @"class", Storage = "_Class", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Class
        {
            get
            {
                return this._Class;
            }
            set
            {
                if (this._Class != value)
                {
                    this.OnClassChanging(value);
                    this.SendPropertyChanging();
                    this._Class = value;
                    this.SendPropertyChanged("Class");
                    this.OnClassChanged();
                }
            }
        }

        [Column(Name = @"packageid", Storage = "_Packageid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Packageid
        {
            get
            {
                return this._Packageid;
            }
            set
            {
                if (this._Packageid != value)
                {
                    this.OnPackageidChanging(value);
                    this.SendPropertyChanging();
                    this._Packageid = value;
                    this.SendPropertyChanged("Packageid");
                    this.OnPackageidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.contentpriority")]
    public partial class Contentpriority : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Contenttypeid;

        private long _Sourceid;

        private double _Prioritylevel;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContenttypeidChanging(string value);
        partial void OnContenttypeidChanged();
        partial void OnSourceidChanging(long value);
        partial void OnSourceidChanged();
        partial void OnPrioritylevelChanging(double value);
        partial void OnPrioritylevelChanged();
        #endregion

        public Contentpriority()
        {
            OnCreated();
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "varchar(20) NOT NULL", IsPrimaryKey = true)]
        public string Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"sourceid", Storage = "_Sourceid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Sourceid
        {
            get
            {
                return this._Sourceid;
            }
            set
            {
                if (this._Sourceid != value)
                {
                    this.OnSourceidChanging(value);
                    this.SendPropertyChanging();
                    this._Sourceid = value;
                    this.SendPropertyChanged("Sourceid");
                    this.OnSourceidChanged();
                }
            }
        }

        [Column(Name = @"prioritylevel", Storage = "_Prioritylevel", CanBeNull = false, DbType = "double(2,1) NOT NULL")]
        public double Prioritylevel
        {
            get
            {
                return this._Prioritylevel;
            }
            set
            {
                if (this._Prioritylevel != value)
                {
                    this.OnPrioritylevelChanging(value);
                    this.SendPropertyChanging();
                    this._Prioritylevel = value;
                    this.SendPropertyChanged("Prioritylevel");
                    this.OnPrioritylevelChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.contenttype")]
    public partial class Contenttype : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Contenttypeid;

        private string _Class;

        private long _Packageid;

        private string _Canplace;

        private string _Cansearch;

        private string _Cantag;

        private string _Canattach;

        private string _Isaggregator;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnClassChanging(string value);
        partial void OnClassChanged();
        partial void OnPackageidChanging(long value);
        partial void OnPackageidChanged();
        partial void OnCanplaceChanging(string value);
        partial void OnCanplaceChanged();
        partial void OnCansearchChanging(string value);
        partial void OnCansearchChanged();
        partial void OnCantagChanging(string value);
        partial void OnCantagChanged();
        partial void OnCanattachChanging(string value);
        partial void OnCanattachChanged();
        partial void OnIsaggregatorChanging(string value);
        partial void OnIsaggregatorChanged();
        #endregion

        public Contenttype()
        {
            OnCreated();
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"class", Storage = "_Class", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Class
        {
            get
            {
                return this._Class;
            }
            set
            {
                if (this._Class != value)
                {
                    this.OnClassChanging(value);
                    this.SendPropertyChanging();
                    this._Class = value;
                    this.SendPropertyChanged("Class");
                    this.OnClassChanged();
                }
            }
        }

        [Column(Name = @"packageid", Storage = "_Packageid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Packageid
        {
            get
            {
                return this._Packageid;
            }
            set
            {
                if (this._Packageid != value)
                {
                    this.OnPackageidChanging(value);
                    this.SendPropertyChanging();
                    this._Packageid = value;
                    this.SendPropertyChanged("Packageid");
                    this.OnPackageidChanged();
                }
            }
        }

        [Column(Name = @"canplace", Storage = "_Canplace", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Canplace
        {
            get
            {
                return this._Canplace;
            }
            set
            {
                if (this._Canplace != value)
                {
                    this.OnCanplaceChanging(value);
                    this.SendPropertyChanging();
                    this._Canplace = value;
                    this.SendPropertyChanged("Canplace");
                    this.OnCanplaceChanged();
                }
            }
        }

        [Column(Name = @"cansearch", Storage = "_Cansearch", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Cansearch
        {
            get
            {
                return this._Cansearch;
            }
            set
            {
                if (this._Cansearch != value)
                {
                    this.OnCansearchChanging(value);
                    this.SendPropertyChanging();
                    this._Cansearch = value;
                    this.SendPropertyChanged("Cansearch");
                    this.OnCansearchChanged();
                }
            }
        }

        [Column(Name = @"cantag", Storage = "_Cantag", DbType = "enum")]
        public string Cantag
        {
            get
            {
                return this._Cantag;
            }
            set
            {
                if (this._Cantag != value)
                {
                    this.OnCantagChanging(value);
                    this.SendPropertyChanging();
                    this._Cantag = value;
                    this.SendPropertyChanged("Cantag");
                    this.OnCantagChanged();
                }
            }
        }

        [Column(Name = @"canattach", Storage = "_Canattach", DbType = "enum")]
        public string Canattach
        {
            get
            {
                return this._Canattach;
            }
            set
            {
                if (this._Canattach != value)
                {
                    this.OnCanattachChanging(value);
                    this.SendPropertyChanging();
                    this._Canattach = value;
                    this.SendPropertyChanged("Canattach");
                    this.OnCanattachChanged();
                }
            }
        }

        [Column(Name = @"isaggregator", Storage = "_Isaggregator", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Isaggregator
        {
            get
            {
                return this._Isaggregator;
            }
            set
            {
                if (this._Isaggregator != value)
                {
                    this.OnIsaggregatorChanging(value);
                    this.SendPropertyChanging();
                    this._Isaggregator = value;
                    this.SendPropertyChanged("Isaggregator");
                    this.OnIsaggregatorChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cpsession")]
    public partial class Cpsession : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Hash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnHashChanging(string value);
        partial void OnHashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Cpsession()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"hash", Storage = "_Hash", CanBeNull = false, DbType = "varchar(32) NOT NULL", IsPrimaryKey = true)]
        public string Hash
        {
            get
            {
                return this._Hash;
            }
            set
            {
                if (this._Hash != value)
                {
                    this.OnHashChanging(value);
                    this.SendPropertyChanging();
                    this._Hash = value;
                    this.SendPropertyChanged("Hash");
                    this.OnHashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cron")]
    public partial class Cron : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Cronid;

        private long _Nextrun;

        private short _Weekday;

        private short _Day;

        private short _Hour;

        private string _Minute;

        private string _Filename;

        private short _Loglevel;

        private short _Active;

        private string _Varname;

        private int _Volatile;

        private string _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCronidChanging(long value);
        partial void OnCronidChanged();
        partial void OnNextrunChanging(long value);
        partial void OnNextrunChanged();
        partial void OnWeekdayChanging(short value);
        partial void OnWeekdayChanged();
        partial void OnDayChanging(short value);
        partial void OnDayChanged();
        partial void OnHourChanging(short value);
        partial void OnHourChanged();
        partial void OnMinuteChanging(string value);
        partial void OnMinuteChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnLoglevelChanging(short value);
        partial void OnLoglevelChanged();
        partial void OnActiveChanging(short value);
        partial void OnActiveChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnVolatileChanging(int value);
        partial void OnVolatileChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        #endregion

        public Cron()
        {
            OnCreated();
        }

        [Column(Name = @"cronid", Storage = "_Cronid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Cronid
        {
            get
            {
                return this._Cronid;
            }
            set
            {
                if (this._Cronid != value)
                {
                    this.OnCronidChanging(value);
                    this.SendPropertyChanging();
                    this._Cronid = value;
                    this.SendPropertyChanged("Cronid");
                    this.OnCronidChanged();
                }
            }
        }

        [Column(Name = @"nextrun", Storage = "_Nextrun", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Nextrun
        {
            get
            {
                return this._Nextrun;
            }
            set
            {
                if (this._Nextrun != value)
                {
                    this.OnNextrunChanging(value);
                    this.SendPropertyChanging();
                    this._Nextrun = value;
                    this.SendPropertyChanged("Nextrun");
                    this.OnNextrunChanged();
                }
            }
        }

        [Column(Name = @"weekday", Storage = "_Weekday", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Weekday
        {
            get
            {
                return this._Weekday;
            }
            set
            {
                if (this._Weekday != value)
                {
                    this.OnWeekdayChanging(value);
                    this.SendPropertyChanging();
                    this._Weekday = value;
                    this.SendPropertyChanged("Weekday");
                    this.OnWeekdayChanged();
                }
            }
        }

        [Column(Name = @"day", Storage = "_Day", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Day
        {
            get
            {
                return this._Day;
            }
            set
            {
                if (this._Day != value)
                {
                    this.OnDayChanging(value);
                    this.SendPropertyChanging();
                    this._Day = value;
                    this.SendPropertyChanged("Day");
                    this.OnDayChanged();
                }
            }
        }

        [Column(Name = @"hour", Storage = "_Hour", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Hour
        {
            get
            {
                return this._Hour;
            }
            set
            {
                if (this._Hour != value)
                {
                    this.OnHourChanging(value);
                    this.SendPropertyChanging();
                    this._Hour = value;
                    this.SendPropertyChanged("Hour");
                    this.OnHourChanged();
                }
            }
        }

        [Column(Name = @"minute", Storage = "_Minute", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Minute
        {
            get
            {
                return this._Minute;
            }
            set
            {
                if (this._Minute != value)
                {
                    this.OnMinuteChanging(value);
                    this.SendPropertyChanging();
                    this._Minute = value;
                    this.SendPropertyChanged("Minute");
                    this.OnMinuteChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "char(50) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"loglevel", Storage = "_Loglevel", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Loglevel
        {
            get
            {
                return this._Loglevel;
            }
            set
            {
                if (this._Loglevel != value)
                {
                    this.OnLoglevelChanging(value);
                    this.SendPropertyChanging();
                    this._Loglevel = value;
                    this.SendPropertyChanged("Loglevel");
                    this.OnLoglevelChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"volatile", Storage = "_Volatile", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Volatile
        {
            get
            {
                return this._Volatile;
            }
            set
            {
                if (this._Volatile != value)
                {
                    this.OnVolatileChanging(value);
                    this.SendPropertyChanging();
                    this._Volatile = value;
                    this.SendPropertyChanged("Volatile");
                    this.OnVolatileChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.cronlog")]
    public partial class Cronlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Cronlogid;

        private string _Varname;

        private long _Dateline;

        private string _Description;

        private int _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCronlogidChanging(long value);
        partial void OnCronlogidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        #endregion

        public Cronlog()
        {
            OnCreated();
        }

        [Column(Name = @"cronlogid", Storage = "_Cronlogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Cronlogid
        {
            get
            {
                return this._Cronlogid;
            }
            set
            {
                if (this._Cronlogid != value)
                {
                    this.OnCronlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Cronlogid = value;
                    this.SendPropertyChanged("Cronlogid");
                    this.OnCronlogidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.customavatar")]
    public partial class Customavatar : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private byte[] _Filedata;

        private long _Dateline;

        private string _Filename;

        private short _Visible;

        private long _Filesize;

        private int _Width;

        private int _Height;

        private byte[] _Filedatathumb;

        private long _Widththumb;

        private long _Heightthumb;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFiledataChanging(byte[] value);
        partial void OnFiledataChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnFilesizeChanging(long value);
        partial void OnFilesizeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        partial void OnFiledatathumbChanging(byte[] value);
        partial void OnFiledatathumbChanged();
        partial void OnWidththumbChanging(long value);
        partial void OnWidththumbChanged();
        partial void OnHeightthumbChanging(long value);
        partial void OnHeightthumbChanged();
        #endregion

        public Customavatar()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata
        {
            get
            {
                return this._Filedata;
            }
            set
            {
                if (this._Filedata != value)
                {
                    this.OnFiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Filedata = value;
                    this.SendPropertyChanged("Filedata");
                    this.OnFiledataChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"filesize", Storage = "_Filesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filesize
        {
            get
            {
                return this._Filesize;
            }
            set
            {
                if (this._Filesize != value)
                {
                    this.OnFilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Filesize = value;
                    this.SendPropertyChanged("Filesize");
                    this.OnFilesizeChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"filedata_thumb", Storage = "_Filedatathumb", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedatathumb
        {
            get
            {
                return this._Filedatathumb;
            }
            set
            {
                if (this._Filedatathumb != value)
                {
                    this.OnFiledatathumbChanging(value);
                    this.SendPropertyChanging();
                    this._Filedatathumb = value;
                    this.SendPropertyChanged("Filedatathumb");
                    this.OnFiledatathumbChanged();
                }
            }
        }

        [Column(Name = @"width_thumb", Storage = "_Widththumb", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Widththumb
        {
            get
            {
                return this._Widththumb;
            }
            set
            {
                if (this._Widththumb != value)
                {
                    this.OnWidththumbChanging(value);
                    this.SendPropertyChanging();
                    this._Widththumb = value;
                    this.SendPropertyChanged("Widththumb");
                    this.OnWidththumbChanged();
                }
            }
        }

        [Column(Name = @"height_thumb", Storage = "_Heightthumb", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Heightthumb
        {
            get
            {
                return this._Heightthumb;
            }
            set
            {
                if (this._Heightthumb != value)
                {
                    this.OnHeightthumbChanging(value);
                    this.SendPropertyChanging();
                    this._Heightthumb = value;
                    this.SendPropertyChanged("Heightthumb");
                    this.OnHeightthumbChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.customprofilepic")]
    public partial class Customprofilepic : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private byte[] _Filedata;

        private long _Dateline;

        private string _Filename;

        private short _Visible;

        private long _Filesize;

        private int _Width;

        private int _Height;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFiledataChanging(byte[] value);
        partial void OnFiledataChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnFilesizeChanging(long value);
        partial void OnFilesizeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        #endregion

        public Customprofilepic()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata
        {
            get
            {
                return this._Filedata;
            }
            set
            {
                if (this._Filedata != value)
                {
                    this.OnFiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Filedata = value;
                    this.SendPropertyChanged("Filedata");
                    this.OnFiledataChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"filesize", Storage = "_Filesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filesize
        {
            get
            {
                return this._Filesize;
            }
            set
            {
                if (this._Filesize != value)
                {
                    this.OnFilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Filesize = value;
                    this.SendPropertyChanged("Filesize");
                    this.OnFilesizeChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.datastore")]
    public partial class Datastore : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Title;

        private string _Data;

        private short _Unserialize;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnUnserializeChanging(short value);
        partial void OnUnserializeChanged();
        #endregion

        public Datastore()
        {
            OnCreated();
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "char(50) NOT NULL", IsPrimaryKey = true)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"data", Storage = "_Data", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

        [Column(Name = @"unserialize", Storage = "_Unserialize", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Unserialize
        {
            get
            {
                return this._Unserialize;
            }
            set
            {
                if (this._Unserialize != value)
                {
                    this.OnUnserializeChanging(value);
                    this.SendPropertyChanging();
                    this._Unserialize = value;
                    this.SendPropertyChanged("Unserialize");
                    this.OnUnserializeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.deletionlog")]
    public partial class Deletionlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Primaryid;

        private string _Type;

        private long _Userid;

        private string _Username;

        private string _Reason;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Deletionlog()
        {
            OnCreated();
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(125) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.discussion")]
    public partial class Discussion : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Discussionid;

        private long _Groupid;

        private long _Firstpostid;

        private long _Lastpostid;

        private long _Lastpost;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Visible;

        private long _Deleted;

        private long _Moderation;

        private string _Subscribers;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDiscussionidChanging(long value);
        partial void OnDiscussionidChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnFirstpostidChanging(long value);
        partial void OnFirstpostidChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnVisibleChanging(long value);
        partial void OnVisibleChanged();
        partial void OnDeletedChanging(long value);
        partial void OnDeletedChanged();
        partial void OnModerationChanging(long value);
        partial void OnModerationChanged();
        partial void OnSubscribersChanging(string value);
        partial void OnSubscribersChanged();
        #endregion

        public Discussion()
        {
            OnCreated();
        }

        [Column(Name = @"discussionid", Storage = "_Discussionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Discussionid
        {
            get
            {
                return this._Discussionid;
            }
            set
            {
                if (this._Discussionid != value)
                {
                    this.OnDiscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Discussionid = value;
                    this.SendPropertyChanged("Discussionid");
                    this.OnDiscussionidChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"firstpostid", Storage = "_Firstpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Firstpostid
        {
            get
            {
                return this._Firstpostid;
            }
            set
            {
                if (this._Firstpostid != value)
                {
                    this.OnFirstpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Firstpostid = value;
                    this.SendPropertyChanged("Firstpostid");
                    this.OnFirstpostidChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Column(Name = @"moderation", Storage = "_Moderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Moderation
        {
            get
            {
                return this._Moderation;
            }
            set
            {
                if (this._Moderation != value)
                {
                    this.OnModerationChanging(value);
                    this.SendPropertyChanging();
                    this._Moderation = value;
                    this.SendPropertyChanged("Moderation");
                    this.OnModerationChanged();
                }
            }
        }

        [Column(Name = @"subscribers", Storage = "_Subscribers", DbType = "enum")]
        public string Subscribers
        {
            get
            {
                return this._Subscribers;
            }
            set
            {
                if (this._Subscribers != value)
                {
                    this.OnSubscribersChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribers = value;
                    this.SendPropertyChanged("Subscribers");
                    this.OnSubscribersChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.discussionread")]
    public partial class Discussionread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Discussionid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDiscussionidChanging(long value);
        partial void OnDiscussionidChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Discussionread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"discussionid", Storage = "_Discussionid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Discussionid
        {
            get
            {
                return this._Discussionid;
            }
            set
            {
                if (this._Discussionid != value)
                {
                    this.OnDiscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Discussionid = value;
                    this.SendPropertyChanged("Discussionid");
                    this.OnDiscussionidChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.editlog")]
    public partial class Editlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;

        private long _Userid;

        private string _Username;

        private long _Dateline;

        private string _Reason;

        private short _Hashistory;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnHashistoryChanging(short value);
        partial void OnHashistoryChanged();
        #endregion

        public Editlog()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"hashistory", Storage = "_Hashistory", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Hashistory
        {
            get
            {
                return this._Hashistory;
            }
            set
            {
                if (this._Hashistory != value)
                {
                    this.OnHashistoryChanging(value);
                    this.SendPropertyChanging();
                    this._Hashistory = value;
                    this.SendPropertyChanged("Hashistory");
                    this.OnHashistoryChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.event")]
    public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Eventid;

        private long _Userid;

        private string _Event1;

        private string _Title;

        private short _Allowsmilies;

        private short _Recurring;

        private string _Recuroption;

        private long _Calendarid;

        private string _Customfields;

        private short _Visible;

        private long _Dateline;

        private decimal _Utc;

        private short _Dst;

        private long _Datelinefrom;

        private long _Datelineto;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEventidChanging(long value);
        partial void OnEventidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnEvent1Changing(string value);
        partial void OnEvent1Changed();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnAllowsmiliesChanging(short value);
        partial void OnAllowsmiliesChanged();
        partial void OnRecurringChanging(short value);
        partial void OnRecurringChanged();
        partial void OnRecuroptionChanging(string value);
        partial void OnRecuroptionChanged();
        partial void OnCalendaridChanging(long value);
        partial void OnCalendaridChanged();
        partial void OnCustomfieldsChanging(string value);
        partial void OnCustomfieldsChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUtcChanging(decimal value);
        partial void OnUtcChanged();
        partial void OnDstChanging(short value);
        partial void OnDstChanged();
        partial void OnDatelinefromChanging(long value);
        partial void OnDatelinefromChanged();
        partial void OnDatelinetoChanging(long value);
        partial void OnDatelinetoChanged();
        #endregion

        public Event()
        {
            OnCreated();
        }

        [Column(Name = @"eventid", Storage = "_Eventid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Eventid
        {
            get
            {
                return this._Eventid;
            }
            set
            {
                if (this._Eventid != value)
                {
                    this.OnEventidChanging(value);
                    this.SendPropertyChanging();
                    this._Eventid = value;
                    this.SendPropertyChanged("Eventid");
                    this.OnEventidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"event", Storage = "_Event1", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Event1
        {
            get
            {
                return this._Event1;
            }
            set
            {
                if (this._Event1 != value)
                {
                    this.OnEvent1Changing(value);
                    this.SendPropertyChanging();
                    this._Event1 = value;
                    this.SendPropertyChanged("Event1");
                    this.OnEvent1Changed();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"allowsmilies", Storage = "_Allowsmilies", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowsmilies
        {
            get
            {
                return this._Allowsmilies;
            }
            set
            {
                if (this._Allowsmilies != value)
                {
                    this.OnAllowsmiliesChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilies = value;
                    this.SendPropertyChanged("Allowsmilies");
                    this.OnAllowsmiliesChanged();
                }
            }
        }

        [Column(Name = @"recurring", Storage = "_Recurring", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Recurring
        {
            get
            {
                return this._Recurring;
            }
            set
            {
                if (this._Recurring != value)
                {
                    this.OnRecurringChanging(value);
                    this.SendPropertyChanging();
                    this._Recurring = value;
                    this.SendPropertyChanged("Recurring");
                    this.OnRecurringChanged();
                }
            }
        }

        [Column(Name = @"recuroption", Storage = "_Recuroption", CanBeNull = false, DbType = "char(6) NOT NULL")]
        public string Recuroption
        {
            get
            {
                return this._Recuroption;
            }
            set
            {
                if (this._Recuroption != value)
                {
                    this.OnRecuroptionChanging(value);
                    this.SendPropertyChanging();
                    this._Recuroption = value;
                    this.SendPropertyChanged("Recuroption");
                    this.OnRecuroptionChanged();
                }
            }
        }

        [Column(Name = @"calendarid", Storage = "_Calendarid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarid
        {
            get
            {
                return this._Calendarid;
            }
            set
            {
                if (this._Calendarid != value)
                {
                    this.OnCalendaridChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarid = value;
                    this.SendPropertyChanged("Calendarid");
                    this.OnCalendaridChanged();
                }
            }
        }

        [Column(Name = @"customfields", Storage = "_Customfields", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Customfields
        {
            get
            {
                return this._Customfields;
            }
            set
            {
                if (this._Customfields != value)
                {
                    this.OnCustomfieldsChanging(value);
                    this.SendPropertyChanging();
                    this._Customfields = value;
                    this.SendPropertyChanged("Customfields");
                    this.OnCustomfieldsChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"utc", Storage = "_Utc", CanBeNull = false, DbType = "decimal(4,2) NOT NULL")]
        public decimal Utc
        {
            get
            {
                return this._Utc;
            }
            set
            {
                if (this._Utc != value)
                {
                    this.OnUtcChanging(value);
                    this.SendPropertyChanging();
                    this._Utc = value;
                    this.SendPropertyChanged("Utc");
                    this.OnUtcChanged();
                }
            }
        }

        [Column(Name = @"dst", Storage = "_Dst", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Dst
        {
            get
            {
                return this._Dst;
            }
            set
            {
                if (this._Dst != value)
                {
                    this.OnDstChanging(value);
                    this.SendPropertyChanging();
                    this._Dst = value;
                    this.SendPropertyChanged("Dst");
                    this.OnDstChanged();
                }
            }
        }

        [Column(Name = @"dateline_from", Storage = "_Datelinefrom", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Datelinefrom
        {
            get
            {
                return this._Datelinefrom;
            }
            set
            {
                if (this._Datelinefrom != value)
                {
                    this.OnDatelinefromChanging(value);
                    this.SendPropertyChanging();
                    this._Datelinefrom = value;
                    this.SendPropertyChanged("Datelinefrom");
                    this.OnDatelinefromChanged();
                }
            }
        }

        [Column(Name = @"dateline_to", Storage = "_Datelineto", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Datelineto
        {
            get
            {
                return this._Datelineto;
            }
            set
            {
                if (this._Datelineto != value)
                {
                    this.OnDatelinetoChanging(value);
                    this.SendPropertyChanging();
                    this._Datelineto = value;
                    this.SendPropertyChanged("Datelineto");
                    this.OnDatelinetoChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.externalcache")]
    public partial class Externalcache : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Cachehash;

        private string _Text;

        private string _Headers;

        private long _Dateline;

        private long _Forumid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCachehashChanging(string value);
        partial void OnCachehashChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnHeadersChanging(string value);
        partial void OnHeadersChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnForumidChanging(long value);
        partial void OnForumidChanged();
        #endregion

        public Externalcache()
        {
            OnCreated();
        }

        [Column(Name = @"cachehash", Storage = "_Cachehash", CanBeNull = false, DbType = "char(32) NOT NULL", IsPrimaryKey = true)]
        public string Cachehash
        {
            get
            {
                return this._Cachehash;
            }
            set
            {
                if (this._Cachehash != value)
                {
                    this.OnCachehashChanging(value);
                    this.SendPropertyChanging();
                    this._Cachehash = value;
                    this.SendPropertyChanged("Cachehash");
                    this.OnCachehashChanged();
                }
            }
        }

        [Column(Name = @"text", Storage = "_Text", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        [Column(Name = @"headers", Storage = "_Headers", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Headers
        {
            get
            {
                return this._Headers;
            }
            set
            {
                if (this._Headers != value)
                {
                    this.OnHeadersChanging(value);
                    this.SendPropertyChanging();
                    this._Headers = value;
                    this.SendPropertyChanged("Headers");
                    this.OnHeadersChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.faq")]
    public partial class Faq : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Faqname;

        private string _Faqparent;

        private int _Displayorder;

        private int _Volatile;

        private string _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFaqnameChanging(string value);
        partial void OnFaqnameChanged();
        partial void OnFaqparentChanging(string value);
        partial void OnFaqparentChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnVolatileChanging(int value);
        partial void OnVolatileChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        #endregion

        public Faq()
        {
            OnCreated();
        }

        [Column(Name = @"faqname", Storage = "_Faqname", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Faqname
        {
            get
            {
                return this._Faqname;
            }
            set
            {
                if (this._Faqname != value)
                {
                    this.OnFaqnameChanging(value);
                    this.SendPropertyChanging();
                    this._Faqname = value;
                    this.SendPropertyChanged("Faqname");
                    this.OnFaqnameChanged();
                }
            }
        }

        [Column(Name = @"faqparent", Storage = "_Faqparent", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Faqparent
        {
            get
            {
                return this._Faqparent;
            }
            set
            {
                if (this._Faqparent != value)
                {
                    this.OnFaqparentChanging(value);
                    this.SendPropertyChanging();
                    this._Faqparent = value;
                    this.SendPropertyChanged("Faqparent");
                    this.OnFaqparentChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"volatile", Storage = "_Volatile", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Volatile
        {
            get
            {
                return this._Volatile;
            }
            set
            {
                if (this._Volatile != value)
                {
                    this.OnVolatileChanging(value);
                    this.SendPropertyChanging();
                    this._Volatile = value;
                    this.SendPropertyChanged("Volatile");
                    this.OnVolatileChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.filedata")]
    public partial class Filedata : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Filedataid;

        private long _Userid;

        private long _Dateline;

        private long _Thumbnaildateline;

        private byte[] _Filedata1;

        private long _Filesize;

        private string _Filehash;

        private byte[] _Thumbnail;

        private long _Thumbnailfilesize;

        private string _Extension;

        private long _Refcount;

        private int _Width;

        private int _Height;

        private int _Thumbnailwidth;

        private int _Thumbnailheight;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFiledataidChanging(long value);
        partial void OnFiledataidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnThumbnaildatelineChanging(long value);
        partial void OnThumbnaildatelineChanged();
        partial void OnFiledata1Changing(byte[] value);
        partial void OnFiledata1Changed();
        partial void OnFilesizeChanging(long value);
        partial void OnFilesizeChanged();
        partial void OnFilehashChanging(string value);
        partial void OnFilehashChanged();
        partial void OnThumbnailChanging(byte[] value);
        partial void OnThumbnailChanged();
        partial void OnThumbnailfilesizeChanging(long value);
        partial void OnThumbnailfilesizeChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnRefcountChanging(long value);
        partial void OnRefcountChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        partial void OnThumbnailwidthChanging(int value);
        partial void OnThumbnailwidthChanged();
        partial void OnThumbnailheightChanging(int value);
        partial void OnThumbnailheightChanged();
        #endregion

        public Filedata()
        {
            OnCreated();
        }

        [Column(Name = @"filedataid", Storage = "_Filedataid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Filedataid
        {
            get
            {
                return this._Filedataid;
            }
            set
            {
                if (this._Filedataid != value)
                {
                    this.OnFiledataidChanging(value);
                    this.SendPropertyChanging();
                    this._Filedataid = value;
                    this.SendPropertyChanged("Filedataid");
                    this.OnFiledataidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_dateline", Storage = "_Thumbnaildateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnaildateline
        {
            get
            {
                return this._Thumbnaildateline;
            }
            set
            {
                if (this._Thumbnaildateline != value)
                {
                    this.OnThumbnaildatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnaildateline = value;
                    this.SendPropertyChanged("Thumbnaildateline");
                    this.OnThumbnaildatelineChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata1", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata1
        {
            get
            {
                return this._Filedata1;
            }
            set
            {
                if (this._Filedata1 != value)
                {
                    this.OnFiledata1Changing(value);
                    this.SendPropertyChanging();
                    this._Filedata1 = value;
                    this.SendPropertyChanged("Filedata1");
                    this.OnFiledata1Changed();
                }
            }
        }

        [Column(Name = @"filesize", Storage = "_Filesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filesize
        {
            get
            {
                return this._Filesize;
            }
            set
            {
                if (this._Filesize != value)
                {
                    this.OnFilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Filesize = value;
                    this.SendPropertyChanged("Filesize");
                    this.OnFilesizeChanged();
                }
            }
        }

        [Column(Name = @"filehash", Storage = "_Filehash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Filehash
        {
            get
            {
                return this._Filehash;
            }
            set
            {
                if (this._Filehash != value)
                {
                    this.OnFilehashChanging(value);
                    this.SendPropertyChanging();
                    this._Filehash = value;
                    this.SendPropertyChanged("Filehash");
                    this.OnFilehashChanged();
                }
            }
        }

        [Column(Name = @"thumbnail", Storage = "_Thumbnail", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Thumbnail
        {
            get
            {
                return this._Thumbnail;
            }
            set
            {
                if (this._Thumbnail != value)
                {
                    this.OnThumbnailChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnail = value;
                    this.SendPropertyChanged("Thumbnail");
                    this.OnThumbnailChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_filesize", Storage = "_Thumbnailfilesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnailfilesize
        {
            get
            {
                return this._Thumbnailfilesize;
            }
            set
            {
                if (this._Thumbnailfilesize != value)
                {
                    this.OnThumbnailfilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailfilesize = value;
                    this.SendPropertyChanged("Thumbnailfilesize");
                    this.OnThumbnailfilesizeChanged();
                }
            }
        }

        [Column(Name = @"extension", Storage = "_Extension", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [Column(Name = @"refcount", Storage = "_Refcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Refcount
        {
            get
            {
                return this._Refcount;
            }
            set
            {
                if (this._Refcount != value)
                {
                    this.OnRefcountChanging(value);
                    this.SendPropertyChanging();
                    this._Refcount = value;
                    this.SendPropertyChanged("Refcount");
                    this.OnRefcountChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_width", Storage = "_Thumbnailwidth", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Thumbnailwidth
        {
            get
            {
                return this._Thumbnailwidth;
            }
            set
            {
                if (this._Thumbnailwidth != value)
                {
                    this.OnThumbnailwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailwidth = value;
                    this.SendPropertyChanged("Thumbnailwidth");
                    this.OnThumbnailwidthChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_height", Storage = "_Thumbnailheight", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Thumbnailheight
        {
            get
            {
                return this._Thumbnailheight;
            }
            set
            {
                if (this._Thumbnailheight != value)
                {
                    this.OnThumbnailheightChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailheight = value;
                    this.SendPropertyChanged("Thumbnailheight");
                    this.OnThumbnailheightChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.forum")]
    public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Forumid;

        private int _Styleid;

        private string _Title;

        private string _Titleclean;

        private string _Description;

        private string _Descriptionclean;

        private long _Options;

        private byte _Showprivate;

        private short _Displayorder;

        private long _Replycount;

        private int _Lastpost;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Lastpostid;

        private string _Lastthread;

        private long _Lastthreadid;

        private short _Lasticonid;

        private string _Lastprefixid;

        private int _Threadcount;

        private short _Daysprune;

        private string _Newpostemail;

        private string _Newthreademail;

        private short _Parentid;

        private string _Parentlist;

        private string _Password;

        private string _Link;

        private string _Childlist;

        private string _Defaultsortfield;

        private string _Defaultsortorder;

        private string _Imageprefix;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTitlecleanChanging(string value);
        partial void OnTitlecleanChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDescriptioncleanChanging(string value);
        partial void OnDescriptioncleanChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnShowprivateChanging(byte value);
        partial void OnShowprivateChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        partial void OnReplycountChanging(long value);
        partial void OnReplycountChanged();
        partial void OnLastpostChanging(int value);
        partial void OnLastpostChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        partial void OnLastthreadChanging(string value);
        partial void OnLastthreadChanged();
        partial void OnLastthreadidChanging(long value);
        partial void OnLastthreadidChanged();
        partial void OnLasticonidChanging(short value);
        partial void OnLasticonidChanged();
        partial void OnLastprefixidChanging(string value);
        partial void OnLastprefixidChanged();
        partial void OnThreadcountChanging(int value);
        partial void OnThreadcountChanged();
        partial void OnDayspruneChanging(short value);
        partial void OnDayspruneChanged();
        partial void OnNewpostemailChanging(string value);
        partial void OnNewpostemailChanged();
        partial void OnNewthreademailChanging(string value);
        partial void OnNewthreademailChanged();
        partial void OnParentidChanging(short value);
        partial void OnParentidChanged();
        partial void OnParentlistChanging(string value);
        partial void OnParentlistChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnLinkChanging(string value);
        partial void OnLinkChanged();
        partial void OnChildlistChanging(string value);
        partial void OnChildlistChanged();
        partial void OnDefaultsortfieldChanging(string value);
        partial void OnDefaultsortfieldChanged();
        partial void OnDefaultsortorderChanging(string value);
        partial void OnDefaultsortorderChanged();
        partial void OnImageprefixChanging(string value);
        partial void OnImageprefixChanged();
        #endregion

        public Forum()
        {
            OnCreated();
        }

        [Column(Name = @"forumid", Storage = "_Forumid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"title_clean", Storage = "_Titleclean", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Titleclean
        {
            get
            {
                return this._Titleclean;
            }
            set
            {
                if (this._Titleclean != value)
                {
                    this.OnTitlecleanChanging(value);
                    this.SendPropertyChanging();
                    this._Titleclean = value;
                    this.SendPropertyChanged("Titleclean");
                    this.OnTitlecleanChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"description_clean", Storage = "_Descriptionclean", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Descriptionclean
        {
            get
            {
                return this._Descriptionclean;
            }
            set
            {
                if (this._Descriptionclean != value)
                {
                    this.OnDescriptioncleanChanging(value);
                    this.SendPropertyChanging();
                    this._Descriptionclean = value;
                    this.SendPropertyChanged("Descriptionclean");
                    this.OnDescriptioncleanChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"showprivate", Storage = "_Showprivate", CanBeNull = false, DbType = "tinyint(3) NOT NULL")]
        public byte Showprivate
        {
            get
            {
                return this._Showprivate;
            }
            set
            {
                if (this._Showprivate != value)
                {
                    this.OnShowprivateChanging(value);
                    this.SendPropertyChanging();
                    this._Showprivate = value;
                    this.SendPropertyChanged("Showprivate");
                    this.OnShowprivateChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"replycount", Storage = "_Replycount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Replycount
        {
            get
            {
                return this._Replycount;
            }
            set
            {
                if (this._Replycount != value)
                {
                    this.OnReplycountChanging(value);
                    this.SendPropertyChanging();
                    this._Replycount = value;
                    this.SendPropertyChanged("Replycount");
                    this.OnReplycountChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }

        [Column(Name = @"lastthread", Storage = "_Lastthread", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Lastthread
        {
            get
            {
                return this._Lastthread;
            }
            set
            {
                if (this._Lastthread != value)
                {
                    this.OnLastthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Lastthread = value;
                    this.SendPropertyChanged("Lastthread");
                    this.OnLastthreadChanged();
                }
            }
        }

        [Column(Name = @"lastthreadid", Storage = "_Lastthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastthreadid
        {
            get
            {
                return this._Lastthreadid;
            }
            set
            {
                if (this._Lastthreadid != value)
                {
                    this.OnLastthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastthreadid = value;
                    this.SendPropertyChanged("Lastthreadid");
                    this.OnLastthreadidChanged();
                }
            }
        }

        [Column(Name = @"lasticonid", Storage = "_Lasticonid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Lasticonid
        {
            get
            {
                return this._Lasticonid;
            }
            set
            {
                if (this._Lasticonid != value)
                {
                    this.OnLasticonidChanging(value);
                    this.SendPropertyChanging();
                    this._Lasticonid = value;
                    this.SendPropertyChanged("Lasticonid");
                    this.OnLasticonidChanged();
                }
            }
        }

        [Column(Name = @"lastprefixid", Storage = "_Lastprefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Lastprefixid
        {
            get
            {
                return this._Lastprefixid;
            }
            set
            {
                if (this._Lastprefixid != value)
                {
                    this.OnLastprefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastprefixid = value;
                    this.SendPropertyChanged("Lastprefixid");
                    this.OnLastprefixidChanged();
                }
            }
        }

        [Column(Name = @"threadcount", Storage = "_Threadcount", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Threadcount
        {
            get
            {
                return this._Threadcount;
            }
            set
            {
                if (this._Threadcount != value)
                {
                    this.OnThreadcountChanging(value);
                    this.SendPropertyChanging();
                    this._Threadcount = value;
                    this.SendPropertyChanged("Threadcount");
                    this.OnThreadcountChanged();
                }
            }
        }

        [Column(Name = @"daysprune", Storage = "_Daysprune", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Daysprune
        {
            get
            {
                return this._Daysprune;
            }
            set
            {
                if (this._Daysprune != value)
                {
                    this.OnDayspruneChanging(value);
                    this.SendPropertyChanging();
                    this._Daysprune = value;
                    this.SendPropertyChanged("Daysprune");
                    this.OnDayspruneChanged();
                }
            }
        }

        [Column(Name = @"newpostemail", Storage = "_Newpostemail", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Newpostemail
        {
            get
            {
                return this._Newpostemail;
            }
            set
            {
                if (this._Newpostemail != value)
                {
                    this.OnNewpostemailChanging(value);
                    this.SendPropertyChanging();
                    this._Newpostemail = value;
                    this.SendPropertyChanged("Newpostemail");
                    this.OnNewpostemailChanged();
                }
            }
        }

        [Column(Name = @"newthreademail", Storage = "_Newthreademail", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Newthreademail
        {
            get
            {
                return this._Newthreademail;
            }
            set
            {
                if (this._Newthreademail != value)
                {
                    this.OnNewthreademailChanging(value);
                    this.SendPropertyChanging();
                    this._Newthreademail = value;
                    this.SendPropertyChanged("Newthreademail");
                    this.OnNewthreademailChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"parentlist", Storage = "_Parentlist", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Parentlist
        {
            get
            {
                return this._Parentlist;
            }
            set
            {
                if (this._Parentlist != value)
                {
                    this.OnParentlistChanging(value);
                    this.SendPropertyChanging();
                    this._Parentlist = value;
                    this.SendPropertyChanged("Parentlist");
                    this.OnParentlistChanged();
                }
            }
        }

        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Name = @"link", Storage = "_Link", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Link
        {
            get
            {
                return this._Link;
            }
            set
            {
                if (this._Link != value)
                {
                    this.OnLinkChanging(value);
                    this.SendPropertyChanging();
                    this._Link = value;
                    this.SendPropertyChanged("Link");
                    this.OnLinkChanged();
                }
            }
        }

        [Column(Name = @"childlist", Storage = "_Childlist", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Childlist
        {
            get
            {
                return this._Childlist;
            }
            set
            {
                if (this._Childlist != value)
                {
                    this.OnChildlistChanging(value);
                    this.SendPropertyChanging();
                    this._Childlist = value;
                    this.SendPropertyChanged("Childlist");
                    this.OnChildlistChanged();
                }
            }
        }

        [Column(Name = @"defaultsortfield", Storage = "_Defaultsortfield", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Defaultsortfield
        {
            get
            {
                return this._Defaultsortfield;
            }
            set
            {
                if (this._Defaultsortfield != value)
                {
                    this.OnDefaultsortfieldChanging(value);
                    this.SendPropertyChanging();
                    this._Defaultsortfield = value;
                    this.SendPropertyChanged("Defaultsortfield");
                    this.OnDefaultsortfieldChanged();
                }
            }
        }

        [Column(Name = @"defaultsortorder", Storage = "_Defaultsortorder", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Defaultsortorder
        {
            get
            {
                return this._Defaultsortorder;
            }
            set
            {
                if (this._Defaultsortorder != value)
                {
                    this.OnDefaultsortorderChanging(value);
                    this.SendPropertyChanging();
                    this._Defaultsortorder = value;
                    this.SendPropertyChanged("Defaultsortorder");
                    this.OnDefaultsortorderChanged();
                }
            }
        }

        [Column(Name = @"imageprefix", Storage = "_Imageprefix", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Imageprefix
        {
            get
            {
                return this._Imageprefix;
            }
            set
            {
                if (this._Imageprefix != value)
                {
                    this.OnImageprefixChanging(value);
                    this.SendPropertyChanging();
                    this._Imageprefix = value;
                    this.SendPropertyChanged("Imageprefix");
                    this.OnImageprefixChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.forumpermission")]
    public partial class Forumpermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Forumpermissionid;

        private int _Forumid;

        private int _Usergroupid;

        private long _Forumpermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnForumpermissionidChanging(long value);
        partial void OnForumpermissionidChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnForumpermissionsChanging(long value);
        partial void OnForumpermissionsChanged();
        #endregion

        public Forumpermission()
        {
            OnCreated();
        }

        [Column(Name = @"forumpermissionid", Storage = "_Forumpermissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Forumpermissionid
        {
            get
            {
                return this._Forumpermissionid;
            }
            set
            {
                if (this._Forumpermissionid != value)
                {
                    this.OnForumpermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumpermissionid = value;
                    this.SendPropertyChanged("Forumpermissionid");
                    this.OnForumpermissionidChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"forumpermissions", Storage = "_Forumpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Forumpermissions
        {
            get
            {
                return this._Forumpermissions;
            }
            set
            {
                if (this._Forumpermissions != value)
                {
                    this.OnForumpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Forumpermissions = value;
                    this.SendPropertyChanged("Forumpermissions");
                    this.OnForumpermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.forumprefixset")]
    public partial class Forumprefixset : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Forumid;

        private string _Prefixsetid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnForumidChanging(long value);
        partial void OnForumidChanged();
        partial void OnPrefixsetidChanging(string value);
        partial void OnPrefixsetidChanged();
        #endregion

        public Forumprefixset()
        {
            OnCreated();
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"prefixsetid", Storage = "_Prefixsetid", CanBeNull = false, DbType = "varchar(25) NOT NULL", IsPrimaryKey = true)]
        public string Prefixsetid
        {
            get
            {
                return this._Prefixsetid;
            }
            set
            {
                if (this._Prefixsetid != value)
                {
                    this.OnPrefixsetidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixsetid = value;
                    this.SendPropertyChanged("Prefixsetid");
                    this.OnPrefixsetidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.forumread")]
    public partial class Forumread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Forumid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Forumread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.groupmessage")]
    public partial class Groupmessage : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Gmid;

        private long _Discussionid;

        private long _Postuserid;

        private string _Postusername;

        private long _Dateline;

        private string _State;

        private string _Title;

        private string _Pagetext;

        private long _Ipaddress;

        private int _Allowsmilie;

        private long _Reportthreadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGmidChanging(long value);
        partial void OnGmidChanged();
        partial void OnDiscussionidChanging(long value);
        partial void OnDiscussionidChanged();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnPostusernameChanging(string value);
        partial void OnPostusernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        #endregion

        public Groupmessage()
        {
            OnCreated();
        }

        [Column(Name = @"gmid", Storage = "_Gmid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Gmid
        {
            get
            {
                return this._Gmid;
            }
            set
            {
                if (this._Gmid != value)
                {
                    this.OnGmidChanging(value);
                    this.SendPropertyChanging();
                    this._Gmid = value;
                    this.SendPropertyChanged("Gmid");
                    this.OnGmidChanged();
                }
            }
        }

        [Column(Name = @"discussionid", Storage = "_Discussionid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Discussionid
        {
            get
            {
                return this._Discussionid;
            }
            set
            {
                if (this._Discussionid != value)
                {
                    this.OnDiscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Discussionid = value;
                    this.SendPropertyChanged("Discussionid");
                    this.OnDiscussionidChanged();
                }
            }
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"postusername", Storage = "_Postusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Postusername
        {
            get
            {
                return this._Postusername;
            }
            set
            {
                if (this._Postusername != value)
                {
                    this.OnPostusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Postusername = value;
                    this.SendPropertyChanged("Postusername");
                    this.OnPostusernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.groupmessage_hash")]
    public partial class Groupmessagehash : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postuserid;

        private long _Groupid;

        private string _Dupehash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnDupehashChanging(string value);
        partial void OnDupehashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Groupmessagehash()
        {
            OnCreated();
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"dupehash", Storage = "_Dupehash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Dupehash
        {
            get
            {
                return this._Dupehash;
            }
            set
            {
                if (this._Dupehash != value)
                {
                    this.OnDupehashChanging(value);
                    this.SendPropertyChanging();
                    this._Dupehash = value;
                    this.SendPropertyChanged("Dupehash");
                    this.OnDupehashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.groupread")]
    public partial class Groupread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Groupid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Groupread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.holiday")]
    public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Holidayid;

        private string _Varname;

        private int _Recurring;

        private string _Recuroption;

        private short _Allowsmilies;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnHolidayidChanging(long value);
        partial void OnHolidayidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnRecurringChanging(int value);
        partial void OnRecurringChanged();
        partial void OnRecuroptionChanging(string value);
        partial void OnRecuroptionChanged();
        partial void OnAllowsmiliesChanging(short value);
        partial void OnAllowsmiliesChanged();
        #endregion

        public Holiday()
        {
            OnCreated();
        }

        [Column(Name = @"holidayid", Storage = "_Holidayid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Holidayid
        {
            get
            {
                return this._Holidayid;
            }
            set
            {
                if (this._Holidayid != value)
                {
                    this.OnHolidayidChanging(value);
                    this.SendPropertyChanging();
                    this._Holidayid = value;
                    this.SendPropertyChanged("Holidayid");
                    this.OnHolidayidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"recurring", Storage = "_Recurring", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Recurring
        {
            get
            {
                return this._Recurring;
            }
            set
            {
                if (this._Recurring != value)
                {
                    this.OnRecurringChanging(value);
                    this.SendPropertyChanging();
                    this._Recurring = value;
                    this.SendPropertyChanged("Recurring");
                    this.OnRecurringChanged();
                }
            }
        }

        [Column(Name = @"recuroption", Storage = "_Recuroption", CanBeNull = false, DbType = "char(6) NOT NULL")]
        public string Recuroption
        {
            get
            {
                return this._Recuroption;
            }
            set
            {
                if (this._Recuroption != value)
                {
                    this.OnRecuroptionChanging(value);
                    this.SendPropertyChanging();
                    this._Recuroption = value;
                    this.SendPropertyChanged("Recuroption");
                    this.OnRecuroptionChanged();
                }
            }
        }

        [Column(Name = @"allowsmilies", Storage = "_Allowsmilies", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowsmilies
        {
            get
            {
                return this._Allowsmilies;
            }
            set
            {
                if (this._Allowsmilies != value)
                {
                    this.OnAllowsmiliesChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilies = value;
                    this.SendPropertyChanged("Allowsmilies");
                    this.OnAllowsmiliesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.humanverify")]
    public partial class Humanverify : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Hash;

        private string _Answer;

        private long _Dateline;

        private int _Viewed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnHashChanging(string value);
        partial void OnHashChanged();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnViewedChanging(int value);
        partial void OnViewedChanged();
        #endregion

        public Humanverify()
        {
            OnCreated();
        }

        [Column(Name = @"hash", Storage = "_Hash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Hash
        {
            get
            {
                return this._Hash;
            }
            set
            {
                if (this._Hash != value)
                {
                    this.OnHashChanging(value);
                    this.SendPropertyChanging();
                    this._Hash = value;
                    this.SendPropertyChanged("Hash");
                    this.OnHashChanged();
                }
            }
        }

        [Column(Name = @"answer", Storage = "_Answer", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Answer
        {
            get
            {
                return this._Answer;
            }
            set
            {
                if (this._Answer != value)
                {
                    this.OnAnswerChanging(value);
                    this.SendPropertyChanging();
                    this._Answer = value;
                    this.SendPropertyChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"viewed", Storage = "_Viewed", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Viewed
        {
            get
            {
                return this._Viewed;
            }
            set
            {
                if (this._Viewed != value)
                {
                    this.OnViewedChanging(value);
                    this.SendPropertyChanging();
                    this._Viewed = value;
                    this.SendPropertyChanged("Viewed");
                    this.OnViewedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.hvanswer")]
    public partial class Hvanswer : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Answerid;

        private int _Questionid;

        private string _Answer;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnsweridChanging(int value);
        partial void OnAnsweridChanged();
        partial void OnQuestionidChanging(int value);
        partial void OnQuestionidChanged();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Hvanswer()
        {
            OnCreated();
        }

        [Column(Name = @"answerid", Storage = "_Answerid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Answerid
        {
            get
            {
                return this._Answerid;
            }
            set
            {
                if (this._Answerid != value)
                {
                    this.OnAnsweridChanging(value);
                    this.SendPropertyChanging();
                    this._Answerid = value;
                    this.SendPropertyChanged("Answerid");
                    this.OnAnsweridChanged();
                }
            }
        }

        [Column(Name = @"questionid", Storage = "_Questionid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Questionid
        {
            get
            {
                return this._Questionid;
            }
            set
            {
                if (this._Questionid != value)
                {
                    this.OnQuestionidChanging(value);
                    this.SendPropertyChanging();
                    this._Questionid = value;
                    this.SendPropertyChanged("Questionid");
                    this.OnQuestionidChanged();
                }
            }
        }

        [Column(Name = @"answer", Storage = "_Answer", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Answer
        {
            get
            {
                return this._Answer;
            }
            set
            {
                if (this._Answer != value)
                {
                    this.OnAnswerChanging(value);
                    this.SendPropertyChanging();
                    this._Answer = value;
                    this.SendPropertyChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.hvquestion")]
    public partial class Hvquestion : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Questionid;

        private string _Regex;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnQuestionidChanging(long value);
        partial void OnQuestionidChanged();
        partial void OnRegexChanging(string value);
        partial void OnRegexChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Hvquestion()
        {
            OnCreated();
        }

        [Column(Name = @"questionid", Storage = "_Questionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Questionid
        {
            get
            {
                return this._Questionid;
            }
            set
            {
                if (this._Questionid != value)
                {
                    this.OnQuestionidChanging(value);
                    this.SendPropertyChanging();
                    this._Questionid = value;
                    this.SendPropertyChanged("Questionid");
                    this.OnQuestionidChanged();
                }
            }
        }

        [Column(Name = @"regex", Storage = "_Regex", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Regex
        {
            get
            {
                return this._Regex;
            }
            set
            {
                if (this._Regex != value)
                {
                    this.OnRegexChanging(value);
                    this.SendPropertyChanging();
                    this._Regex = value;
                    this.SendPropertyChanged("Regex");
                    this.OnRegexChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.icon")]
    public partial class Icon : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Iconid;

        private string _Title;

        private string _Iconpath;

        private int _Imagecategoryid;

        private int _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIconidChanging(int value);
        partial void OnIconidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnIconpathChanging(string value);
        partial void OnIconpathChanged();
        partial void OnImagecategoryidChanging(int value);
        partial void OnImagecategoryidChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        #endregion

        public Icon()
        {
            OnCreated();
        }

        [Column(Name = @"iconid", Storage = "_Iconid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"iconpath", Storage = "_Iconpath", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Iconpath
        {
            get
            {
                return this._Iconpath;
            }
            set
            {
                if (this._Iconpath != value)
                {
                    this.OnIconpathChanging(value);
                    this.SendPropertyChanging();
                    this._Iconpath = value;
                    this.SendPropertyChanged("Iconpath");
                    this.OnIconpathChanged();
                }
            }
        }

        [Column(Name = @"imagecategoryid", Storage = "_Imagecategoryid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Imagecategoryid
        {
            get
            {
                return this._Imagecategoryid;
            }
            set
            {
                if (this._Imagecategoryid != value)
                {
                    this.OnImagecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Imagecategoryid = value;
                    this.SendPropertyChanged("Imagecategoryid");
                    this.OnImagecategoryidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.imagecategory")]
    public partial class Imagecategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Imagecategoryid;

        private string _Title;

        private int _Imagetype;

        private int _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnImagecategoryidChanging(int value);
        partial void OnImagecategoryidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnImagetypeChanging(int value);
        partial void OnImagetypeChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        #endregion

        public Imagecategory()
        {
            OnCreated();
        }

        [Column(Name = @"imagecategoryid", Storage = "_Imagecategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Imagecategoryid
        {
            get
            {
                return this._Imagecategoryid;
            }
            set
            {
                if (this._Imagecategoryid != value)
                {
                    this.OnImagecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Imagecategoryid = value;
                    this.SendPropertyChanged("Imagecategoryid");
                    this.OnImagecategoryidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"imagetype", Storage = "_Imagetype", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Imagetype
        {
            get
            {
                return this._Imagetype;
            }
            set
            {
                if (this._Imagetype != value)
                {
                    this.OnImagetypeChanging(value);
                    this.SendPropertyChanging();
                    this._Imagetype = value;
                    this.SendPropertyChanged("Imagetype");
                    this.OnImagetypeChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.imagecategorypermission")]
    public partial class Imagecategorypermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Imagecategoryid;

        private int _Usergroupid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnImagecategoryidChanging(int value);
        partial void OnImagecategoryidChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        #endregion

        public Imagecategorypermission()
        {
            OnCreated();
        }

        [Column(Name = @"imagecategoryid", Storage = "_Imagecategoryid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Imagecategoryid
        {
            get
            {
                return this._Imagecategoryid;
            }
            set
            {
                if (this._Imagecategoryid != value)
                {
                    this.OnImagecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Imagecategoryid = value;
                    this.SendPropertyChanged("Imagecategoryid");
                    this.OnImagecategoryidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.indexqueue")]
    public partial class Indexqueue : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Queueid;

        private string _Contenttype;

        private long _Newid;

        private long _Id2;

        private string _Package;

        private string _Operation;

        private string _Data;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnQueueidChanging(long value);
        partial void OnQueueidChanged();
        partial void OnContenttypeChanging(string value);
        partial void OnContenttypeChanged();
        partial void OnNewidChanging(long value);
        partial void OnNewidChanged();
        partial void OnId2Changing(long value);
        partial void OnId2Changed();
        partial void OnPackageChanging(string value);
        partial void OnPackageChanged();
        partial void OnOperationChanging(string value);
        partial void OnOperationChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        #endregion

        public Indexqueue()
        {
            OnCreated();
        }

        [Column(Name = @"queueid", Storage = "_Queueid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Queueid
        {
            get
            {
                return this._Queueid;
            }
            set
            {
                if (this._Queueid != value)
                {
                    this.OnQueueidChanging(value);
                    this.SendPropertyChanging();
                    this._Queueid = value;
                    this.SendPropertyChanged("Queueid");
                    this.OnQueueidChanged();
                }
            }
        }

        [Column(Name = @"contenttype", Storage = "_Contenttype", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string Contenttype
        {
            get
            {
                return this._Contenttype;
            }
            set
            {
                if (this._Contenttype != value)
                {
                    this.OnContenttypeChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttype = value;
                    this.SendPropertyChanged("Contenttype");
                    this.OnContenttypeChanged();
                }
            }
        }

        [Column(Name = @"newid", Storage = "_Newid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Newid
        {
            get
            {
                return this._Newid;
            }
            set
            {
                if (this._Newid != value)
                {
                    this.OnNewidChanging(value);
                    this.SendPropertyChanging();
                    this._Newid = value;
                    this.SendPropertyChanged("Newid");
                    this.OnNewidChanged();
                }
            }
        }

        [Column(Name = @"id2", Storage = "_Id2", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id2
        {
            get
            {
                return this._Id2;
            }
            set
            {
                if (this._Id2 != value)
                {
                    this.OnId2Changing(value);
                    this.SendPropertyChanging();
                    this._Id2 = value;
                    this.SendPropertyChanged("Id2");
                    this.OnId2Changed();
                }
            }
        }

        [Column(Name = @"package", Storage = "_Package", CanBeNull = false, DbType = "varchar(64) NOT NULL")]
        public string Package
        {
            get
            {
                return this._Package;
            }
            set
            {
                if (this._Package != value)
                {
                    this.OnPackageChanging(value);
                    this.SendPropertyChanging();
                    this._Package = value;
                    this.SendPropertyChanged("Package");
                    this.OnPackageChanged();
                }
            }
        }

        [Column(Name = @"operation", Storage = "_Operation", CanBeNull = false, DbType = "varchar(64) NOT NULL")]
        public string Operation
        {
            get
            {
                return this._Operation;
            }
            set
            {
                if (this._Operation != value)
                {
                    this.OnOperationChanging(value);
                    this.SendPropertyChanging();
                    this._Operation = value;
                    this.SendPropertyChanged("Operation");
                    this.OnOperationChanged();
                }
            }
        }

        [Column(Name = @"data", Storage = "_Data", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.infraction")]
    public partial class Infraction : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Infractionid;

        private long _Infractionlevelid;

        private long _Postid;

        private long _Userid;

        private long _Whoadded;

        private long _Points;

        private long _Dateline;

        private string _Note;

        private int _Action;

        private long _Actiondateline;

        private long _Actionuserid;

        private string _Actionreason;

        private long _Expires;

        private long _Threadid;

        private string _Customreason;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInfractionidChanging(long value);
        partial void OnInfractionidChanged();
        partial void OnInfractionlevelidChanging(long value);
        partial void OnInfractionlevelidChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnWhoaddedChanging(long value);
        partial void OnWhoaddedChanged();
        partial void OnPointsChanging(long value);
        partial void OnPointsChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnActionChanging(int value);
        partial void OnActionChanged();
        partial void OnActiondatelineChanging(long value);
        partial void OnActiondatelineChanged();
        partial void OnActionuseridChanging(long value);
        partial void OnActionuseridChanged();
        partial void OnActionreasonChanging(string value);
        partial void OnActionreasonChanged();
        partial void OnExpiresChanging(long value);
        partial void OnExpiresChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnCustomreasonChanging(string value);
        partial void OnCustomreasonChanged();
        #endregion

        public Infraction()
        {
            OnCreated();
        }

        [Column(Name = @"infractionid", Storage = "_Infractionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Infractionid
        {
            get
            {
                return this._Infractionid;
            }
            set
            {
                if (this._Infractionid != value)
                {
                    this.OnInfractionidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractionid = value;
                    this.SendPropertyChanged("Infractionid");
                    this.OnInfractionidChanged();
                }
            }
        }

        [Column(Name = @"infractionlevelid", Storage = "_Infractionlevelid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Infractionlevelid
        {
            get
            {
                return this._Infractionlevelid;
            }
            set
            {
                if (this._Infractionlevelid != value)
                {
                    this.OnInfractionlevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractionlevelid = value;
                    this.SendPropertyChanged("Infractionlevelid");
                    this.OnInfractionlevelidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"whoadded", Storage = "_Whoadded", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Whoadded
        {
            get
            {
                return this._Whoadded;
            }
            set
            {
                if (this._Whoadded != value)
                {
                    this.OnWhoaddedChanging(value);
                    this.SendPropertyChanging();
                    this._Whoadded = value;
                    this.SendPropertyChanged("Whoadded");
                    this.OnWhoaddedChanged();
                }
            }
        }

        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"note", Storage = "_Note", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging();
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

        [Column(Name = @"action", Storage = "_Action", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [Column(Name = @"actiondateline", Storage = "_Actiondateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Actiondateline
        {
            get
            {
                return this._Actiondateline;
            }
            set
            {
                if (this._Actiondateline != value)
                {
                    this.OnActiondatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Actiondateline = value;
                    this.SendPropertyChanged("Actiondateline");
                    this.OnActiondatelineChanged();
                }
            }
        }

        [Column(Name = @"actionuserid", Storage = "_Actionuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Actionuserid
        {
            get
            {
                return this._Actionuserid;
            }
            set
            {
                if (this._Actionuserid != value)
                {
                    this.OnActionuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Actionuserid = value;
                    this.SendPropertyChanged("Actionuserid");
                    this.OnActionuseridChanged();
                }
            }
        }

        [Column(Name = @"actionreason", Storage = "_Actionreason", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Actionreason
        {
            get
            {
                return this._Actionreason;
            }
            set
            {
                if (this._Actionreason != value)
                {
                    this.OnActionreasonChanging(value);
                    this.SendPropertyChanging();
                    this._Actionreason = value;
                    this.SendPropertyChanged("Actionreason");
                    this.OnActionreasonChanged();
                }
            }
        }

        [Column(Name = @"expires", Storage = "_Expires", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Expires
        {
            get
            {
                return this._Expires;
            }
            set
            {
                if (this._Expires != value)
                {
                    this.OnExpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Expires = value;
                    this.SendPropertyChanged("Expires");
                    this.OnExpiresChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"customreason", Storage = "_Customreason", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Customreason
        {
            get
            {
                return this._Customreason;
            }
            set
            {
                if (this._Customreason != value)
                {
                    this.OnCustomreasonChanging(value);
                    this.SendPropertyChanging();
                    this._Customreason = value;
                    this.SendPropertyChanged("Customreason");
                    this.OnCustomreasonChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.infractionban")]
    public partial class Infractionban : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Infractionbanid;

        private int _Usergroupid;

        private long _Banusergroupid;

        private long _Amount;

        private string _Period;

        private string _Method;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInfractionbanidChanging(long value);
        partial void OnInfractionbanidChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnBanusergroupidChanging(long value);
        partial void OnBanusergroupidChanged();
        partial void OnAmountChanging(long value);
        partial void OnAmountChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnMethodChanging(string value);
        partial void OnMethodChanged();
        #endregion

        public Infractionban()
        {
            OnCreated();
        }

        [Column(Name = @"infractionbanid", Storage = "_Infractionbanid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Infractionbanid
        {
            get
            {
                return this._Infractionbanid;
            }
            set
            {
                if (this._Infractionbanid != value)
                {
                    this.OnInfractionbanidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractionbanid = value;
                    this.SendPropertyChanged("Infractionbanid");
                    this.OnInfractionbanidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"banusergroupid", Storage = "_Banusergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Banusergroupid
        {
            get
            {
                return this._Banusergroupid;
            }
            set
            {
                if (this._Banusergroupid != value)
                {
                    this.OnBanusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Banusergroupid = value;
                    this.SendPropertyChanged("Banusergroupid");
                    this.OnBanusergroupidChanged();
                }
            }
        }

        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"period", Storage = "_Period", CanBeNull = false, DbType = "char(5) NOT NULL")]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

        [Column(Name = @"method", Storage = "_Method", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Method
        {
            get
            {
                return this._Method;
            }
            set
            {
                if (this._Method != value)
                {
                    this.OnMethodChanging(value);
                    this.SendPropertyChanging();
                    this._Method = value;
                    this.SendPropertyChanged("Method");
                    this.OnMethodChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.infractiongroup")]
    public partial class Infractiongroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Infractiongroupid;

        private int _Usergroupid;

        private int _Orusergroupid;

        private long _Pointlevel;

        private int _Override;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInfractiongroupidChanging(long value);
        partial void OnInfractiongroupidChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnOrusergroupidChanging(int value);
        partial void OnOrusergroupidChanged();
        partial void OnPointlevelChanging(long value);
        partial void OnPointlevelChanged();
        partial void OnOverrideChanging(int value);
        partial void OnOverrideChanged();
        #endregion

        public Infractiongroup()
        {
            OnCreated();
        }

        [Column(Name = @"infractiongroupid", Storage = "_Infractiongroupid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Infractiongroupid
        {
            get
            {
                return this._Infractiongroupid;
            }
            set
            {
                if (this._Infractiongroupid != value)
                {
                    this.OnInfractiongroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractiongroupid = value;
                    this.SendPropertyChanged("Infractiongroupid");
                    this.OnInfractiongroupidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"orusergroupid", Storage = "_Orusergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Orusergroupid
        {
            get
            {
                return this._Orusergroupid;
            }
            set
            {
                if (this._Orusergroupid != value)
                {
                    this.OnOrusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Orusergroupid = value;
                    this.SendPropertyChanged("Orusergroupid");
                    this.OnOrusergroupidChanged();
                }
            }
        }

        [Column(Name = @"pointlevel", Storage = "_Pointlevel", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pointlevel
        {
            get
            {
                return this._Pointlevel;
            }
            set
            {
                if (this._Pointlevel != value)
                {
                    this.OnPointlevelChanging(value);
                    this.SendPropertyChanging();
                    this._Pointlevel = value;
                    this.SendPropertyChanged("Pointlevel");
                    this.OnPointlevelChanged();
                }
            }
        }

        [Column(Name = @"override", Storage = "_Override", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Override
        {
            get
            {
                return this._Override;
            }
            set
            {
                if (this._Override != value)
                {
                    this.OnOverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Override = value;
                    this.SendPropertyChanged("Override");
                    this.OnOverrideChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.infractionlevel")]
    public partial class Infractionlevel : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Infractionlevelid;

        private long _Points;

        private long _Expires;

        private string _Period;

        private int _Warning;

        private int _Extend;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInfractionlevelidChanging(long value);
        partial void OnInfractionlevelidChanged();
        partial void OnPointsChanging(long value);
        partial void OnPointsChanged();
        partial void OnExpiresChanging(long value);
        partial void OnExpiresChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnWarningChanging(int value);
        partial void OnWarningChanged();
        partial void OnExtendChanging(int value);
        partial void OnExtendChanged();
        #endregion

        public Infractionlevel()
        {
            OnCreated();
        }

        [Column(Name = @"infractionlevelid", Storage = "_Infractionlevelid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Infractionlevelid
        {
            get
            {
                return this._Infractionlevelid;
            }
            set
            {
                if (this._Infractionlevelid != value)
                {
                    this.OnInfractionlevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractionlevelid = value;
                    this.SendPropertyChanged("Infractionlevelid");
                    this.OnInfractionlevelidChanged();
                }
            }
        }

        [Column(Name = @"points", Storage = "_Points", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Points
        {
            get
            {
                return this._Points;
            }
            set
            {
                if (this._Points != value)
                {
                    this.OnPointsChanging(value);
                    this.SendPropertyChanging();
                    this._Points = value;
                    this.SendPropertyChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }

        [Column(Name = @"expires", Storage = "_Expires", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Expires
        {
            get
            {
                return this._Expires;
            }
            set
            {
                if (this._Expires != value)
                {
                    this.OnExpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Expires = value;
                    this.SendPropertyChanged("Expires");
                    this.OnExpiresChanged();
                }
            }
        }

        [Column(Name = @"period", Storage = "_Period", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

        [Column(Name = @"warning", Storage = "_Warning", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Warning
        {
            get
            {
                return this._Warning;
            }
            set
            {
                if (this._Warning != value)
                {
                    this.OnWarningChanging(value);
                    this.SendPropertyChanging();
                    this._Warning = value;
                    this.SendPropertyChanged("Warning");
                    this.OnWarningChanged();
                }
            }
        }

        [Column(Name = @"extend", Storage = "_Extend", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Extend
        {
            get
            {
                return this._Extend;
            }
            set
            {
                if (this._Extend != value)
                {
                    this.OnExtendChanging(value);
                    this.SendPropertyChanging();
                    this._Extend = value;
                    this.SendPropertyChanged("Extend");
                    this.OnExtendChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.language")]
    public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Languageid;

        private string _Title;

        private int _Userselect;

        private int _Options;

        private string _Languagecode;

        private string _Charset;

        private string _Imagesoverride;

        private string _Dateoverride;

        private string _Timeoverride;

        private string _Registereddateoverride;

        private string _Calformat1override;

        private string _Calformat2override;

        private string _Logdateoverride;

        private string _Locale;

        private string _Decimalsep;

        private string _Thousandsep;

        private string _Phrasegroupglobal;

        private string _Phrasegroupcpglobal;

        private string _Phrasegroupcppermission;

        private string _Phrasegroupforum;

        private string _Phrasegroupcalendar;

        private string _Phrasegroupattachmentimage;

        private string _Phrasegroupstyle;

        private string _Phrasegrouplogging;

        private string _Phrasegroupcphome;

        private string _Phrasegrouppromotion;

        private string _Phrasegroupuser;

        private string _Phrasegrouphelpfaq;

        private string _Phrasegroupsql;

        private string _Phrasegroupsubscription;

        private string _Phrasegrouplanguage;

        private string _Phrasegroupbbcode;

        private string _Phrasegroupstats;

        private string _Phrasegroupdiagnostic;

        private string _Phrasegroupmaintenance;

        private string _Phrasegroupprofilefield;

        private string _Phrasegroupthread;

        private string _Phrasegrouptimezone;

        private string _Phrasegroupbanning;

        private string _Phrasegroupreputation;

        private string _Phrasegroupwol;

        private string _Phrasegroupthreadmanage;

        private string _Phrasegrouppm;

        private string _Phrasegroupcpuser;

        private string _Phrasegroupaccessmask;

        private string _Phrasegroupcron;

        private string _Phrasegroupmoderator;

        private string _Phrasegroupcpoption;

        private string _Phrasegroupcprank;

        private string _Phrasegroupcpusergroup;

        private string _Phrasegroupholiday;

        private string _Phrasegroupposting;

        private string _Phrasegrouppoll;

        private string _Phrasegroupfronthelp;

        private string _Phrasegroupregister;

        private string _Phrasegroupsearch;

        private string _Phrasegroupshowthread;

        private string _Phrasegrouppostbit;

        private string _Phrasegroupforumdisplay;

        private string _Phrasegroupmessaging;

        private string _Phrasegroupinlinemod;

        private string _Phrasegroupplugins;

        private string _Phrasegroupcprofilefield;

        private string _Phrasegroupreputationlevel;

        private string _Phrasegroupinfraction;

        private string _Phrasegroupinfractionlevel;

        private string _Phrasegroupnotice;

        private string _Phrasegroupprefix;

        private string _Phrasegroupprefixadmin;

        private string _Phrasegroupalbum;

        private string _Phrasegroupsocialgroups;

        private string _Phrasegroupadvertising;

        private string _Phrasegrouptagscategories;

        private string _Phrasegroupcontenttypes;

        private string _Phrasegroupvbblock;

        private string _Phrasegroupvbblocksettings;

        private string _Phrasegroupvbblogadmin;

        private string _Phrasegroupvbblogcat;

        private string _Phrasegroupvbblogglobal;

        private string _Phrasegroupcpcms;

        private string _Phrasegroupvbcms;

        private string _Phrasegroupwidgettypes;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUserselectChanging(int value);
        partial void OnUserselectChanged();
        partial void OnOptionsChanging(int value);
        partial void OnOptionsChanged();
        partial void OnLanguagecodeChanging(string value);
        partial void OnLanguagecodeChanged();
        partial void OnCharsetChanging(string value);
        partial void OnCharsetChanged();
        partial void OnImagesoverrideChanging(string value);
        partial void OnImagesoverrideChanged();
        partial void OnDateoverrideChanging(string value);
        partial void OnDateoverrideChanged();
        partial void OnTimeoverrideChanging(string value);
        partial void OnTimeoverrideChanged();
        partial void OnRegistereddateoverrideChanging(string value);
        partial void OnRegistereddateoverrideChanged();
        partial void OnCalformat1overrideChanging(string value);
        partial void OnCalformat1overrideChanged();
        partial void OnCalformat2overrideChanging(string value);
        partial void OnCalformat2overrideChanged();
        partial void OnLogdateoverrideChanging(string value);
        partial void OnLogdateoverrideChanged();
        partial void OnLocaleChanging(string value);
        partial void OnLocaleChanged();
        partial void OnDecimalsepChanging(string value);
        partial void OnDecimalsepChanged();
        partial void OnThousandsepChanging(string value);
        partial void OnThousandsepChanged();
        partial void OnPhrasegroupglobalChanging(string value);
        partial void OnPhrasegroupglobalChanged();
        partial void OnPhrasegroupcpglobalChanging(string value);
        partial void OnPhrasegroupcpglobalChanged();
        partial void OnPhrasegroupcppermissionChanging(string value);
        partial void OnPhrasegroupcppermissionChanged();
        partial void OnPhrasegroupforumChanging(string value);
        partial void OnPhrasegroupforumChanged();
        partial void OnPhrasegroupcalendarChanging(string value);
        partial void OnPhrasegroupcalendarChanged();
        partial void OnPhrasegroupattachmentimageChanging(string value);
        partial void OnPhrasegroupattachmentimageChanged();
        partial void OnPhrasegroupstyleChanging(string value);
        partial void OnPhrasegroupstyleChanged();
        partial void OnPhrasegrouploggingChanging(string value);
        partial void OnPhrasegrouploggingChanged();
        partial void OnPhrasegroupcphomeChanging(string value);
        partial void OnPhrasegroupcphomeChanged();
        partial void OnPhrasegrouppromotionChanging(string value);
        partial void OnPhrasegrouppromotionChanged();
        partial void OnPhrasegroupuserChanging(string value);
        partial void OnPhrasegroupuserChanged();
        partial void OnPhrasegrouphelpfaqChanging(string value);
        partial void OnPhrasegrouphelpfaqChanged();
        partial void OnPhrasegroupsqlChanging(string value);
        partial void OnPhrasegroupsqlChanged();
        partial void OnPhrasegroupsubscriptionChanging(string value);
        partial void OnPhrasegroupsubscriptionChanged();
        partial void OnPhrasegrouplanguageChanging(string value);
        partial void OnPhrasegrouplanguageChanged();
        partial void OnPhrasegroupbbcodeChanging(string value);
        partial void OnPhrasegroupbbcodeChanged();
        partial void OnPhrasegroupstatsChanging(string value);
        partial void OnPhrasegroupstatsChanged();
        partial void OnPhrasegroupdiagnosticChanging(string value);
        partial void OnPhrasegroupdiagnosticChanged();
        partial void OnPhrasegroupmaintenanceChanging(string value);
        partial void OnPhrasegroupmaintenanceChanged();
        partial void OnPhrasegroupprofilefieldChanging(string value);
        partial void OnPhrasegroupprofilefieldChanged();
        partial void OnPhrasegroupthreadChanging(string value);
        partial void OnPhrasegroupthreadChanged();
        partial void OnPhrasegrouptimezoneChanging(string value);
        partial void OnPhrasegrouptimezoneChanged();
        partial void OnPhrasegroupbanningChanging(string value);
        partial void OnPhrasegroupbanningChanged();
        partial void OnPhrasegroupreputationChanging(string value);
        partial void OnPhrasegroupreputationChanged();
        partial void OnPhrasegroupwolChanging(string value);
        partial void OnPhrasegroupwolChanged();
        partial void OnPhrasegroupthreadmanageChanging(string value);
        partial void OnPhrasegroupthreadmanageChanged();
        partial void OnPhrasegrouppmChanging(string value);
        partial void OnPhrasegrouppmChanged();
        partial void OnPhrasegroupcpuserChanging(string value);
        partial void OnPhrasegroupcpuserChanged();
        partial void OnPhrasegroupaccessmaskChanging(string value);
        partial void OnPhrasegroupaccessmaskChanged();
        partial void OnPhrasegroupcronChanging(string value);
        partial void OnPhrasegroupcronChanged();
        partial void OnPhrasegroupmoderatorChanging(string value);
        partial void OnPhrasegroupmoderatorChanged();
        partial void OnPhrasegroupcpoptionChanging(string value);
        partial void OnPhrasegroupcpoptionChanged();
        partial void OnPhrasegroupcprankChanging(string value);
        partial void OnPhrasegroupcprankChanged();
        partial void OnPhrasegroupcpusergroupChanging(string value);
        partial void OnPhrasegroupcpusergroupChanged();
        partial void OnPhrasegroupholidayChanging(string value);
        partial void OnPhrasegroupholidayChanged();
        partial void OnPhrasegrouppostingChanging(string value);
        partial void OnPhrasegrouppostingChanged();
        partial void OnPhrasegrouppollChanging(string value);
        partial void OnPhrasegrouppollChanged();
        partial void OnPhrasegroupfronthelpChanging(string value);
        partial void OnPhrasegroupfronthelpChanged();
        partial void OnPhrasegroupregisterChanging(string value);
        partial void OnPhrasegroupregisterChanged();
        partial void OnPhrasegroupsearchChanging(string value);
        partial void OnPhrasegroupsearchChanged();
        partial void OnPhrasegroupshowthreadChanging(string value);
        partial void OnPhrasegroupshowthreadChanged();
        partial void OnPhrasegrouppostbitChanging(string value);
        partial void OnPhrasegrouppostbitChanged();
        partial void OnPhrasegroupforumdisplayChanging(string value);
        partial void OnPhrasegroupforumdisplayChanged();
        partial void OnPhrasegroupmessagingChanging(string value);
        partial void OnPhrasegroupmessagingChanged();
        partial void OnPhrasegroupinlinemodChanging(string value);
        partial void OnPhrasegroupinlinemodChanged();
        partial void OnPhrasegrouppluginsChanging(string value);
        partial void OnPhrasegrouppluginsChanged();
        partial void OnPhrasegroupcprofilefieldChanging(string value);
        partial void OnPhrasegroupcprofilefieldChanged();
        partial void OnPhrasegroupreputationlevelChanging(string value);
        partial void OnPhrasegroupreputationlevelChanged();
        partial void OnPhrasegroupinfractionChanging(string value);
        partial void OnPhrasegroupinfractionChanged();
        partial void OnPhrasegroupinfractionlevelChanging(string value);
        partial void OnPhrasegroupinfractionlevelChanged();
        partial void OnPhrasegroupnoticeChanging(string value);
        partial void OnPhrasegroupnoticeChanged();
        partial void OnPhrasegroupprefixChanging(string value);
        partial void OnPhrasegroupprefixChanged();
        partial void OnPhrasegroupprefixadminChanging(string value);
        partial void OnPhrasegroupprefixadminChanged();
        partial void OnPhrasegroupalbumChanging(string value);
        partial void OnPhrasegroupalbumChanged();
        partial void OnPhrasegroupsocialgroupsChanging(string value);
        partial void OnPhrasegroupsocialgroupsChanged();
        partial void OnPhrasegroupadvertisingChanging(string value);
        partial void OnPhrasegroupadvertisingChanged();
        partial void OnPhrasegrouptagscategoriesChanging(string value);
        partial void OnPhrasegrouptagscategoriesChanged();
        partial void OnPhrasegroupcontenttypesChanging(string value);
        partial void OnPhrasegroupcontenttypesChanged();
        partial void OnPhrasegroupvbblockChanging(string value);
        partial void OnPhrasegroupvbblockChanged();
        partial void OnPhrasegroupvbblocksettingsChanging(string value);
        partial void OnPhrasegroupvbblocksettingsChanged();
        partial void OnPhrasegroupvbblogadminChanging(string value);
        partial void OnPhrasegroupvbblogadminChanged();
        partial void OnPhrasegroupvbblogcatChanging(string value);
        partial void OnPhrasegroupvbblogcatChanged();
        partial void OnPhrasegroupvbblogglobalChanging(string value);
        partial void OnPhrasegroupvbblogglobalChanged();
        partial void OnPhrasegroupcpcmsChanging(string value);
        partial void OnPhrasegroupcpcmsChanged();
        partial void OnPhrasegroupvbcmsChanging(string value);
        partial void OnPhrasegroupvbcmsChanged();
        partial void OnPhrasegroupwidgettypesChanging(string value);
        partial void OnPhrasegroupwidgettypesChanged();
        #endregion

        public Language()
        {
            OnCreated();
        }

        [Column(Name = @"languageid", Storage = "_Languageid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"userselect", Storage = "_Userselect", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Userselect
        {
            get
            {
                return this._Userselect;
            }
            set
            {
                if (this._Userselect != value)
                {
                    this.OnUserselectChanging(value);
                    this.SendPropertyChanging();
                    this._Userselect = value;
                    this.SendPropertyChanged("Userselect");
                    this.OnUserselectChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"languagecode", Storage = "_Languagecode", CanBeNull = false, DbType = "varchar(12) NOT NULL")]
        public string Languagecode
        {
            get
            {
                return this._Languagecode;
            }
            set
            {
                if (this._Languagecode != value)
                {
                    this.OnLanguagecodeChanging(value);
                    this.SendPropertyChanging();
                    this._Languagecode = value;
                    this.SendPropertyChanged("Languagecode");
                    this.OnLanguagecodeChanged();
                }
            }
        }

        [Column(Name = @"charset", Storage = "_Charset", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Charset
        {
            get
            {
                return this._Charset;
            }
            set
            {
                if (this._Charset != value)
                {
                    this.OnCharsetChanging(value);
                    this.SendPropertyChanging();
                    this._Charset = value;
                    this.SendPropertyChanged("Charset");
                    this.OnCharsetChanged();
                }
            }
        }

        [Column(Name = @"imagesoverride", Storage = "_Imagesoverride", CanBeNull = false, DbType = "varchar(150) NOT NULL")]
        public string Imagesoverride
        {
            get
            {
                return this._Imagesoverride;
            }
            set
            {
                if (this._Imagesoverride != value)
                {
                    this.OnImagesoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Imagesoverride = value;
                    this.SendPropertyChanged("Imagesoverride");
                    this.OnImagesoverrideChanged();
                }
            }
        }

        [Column(Name = @"dateoverride", Storage = "_Dateoverride", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Dateoverride
        {
            get
            {
                return this._Dateoverride;
            }
            set
            {
                if (this._Dateoverride != value)
                {
                    this.OnDateoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Dateoverride = value;
                    this.SendPropertyChanged("Dateoverride");
                    this.OnDateoverrideChanged();
                }
            }
        }

        [Column(Name = @"timeoverride", Storage = "_Timeoverride", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Timeoverride
        {
            get
            {
                return this._Timeoverride;
            }
            set
            {
                if (this._Timeoverride != value)
                {
                    this.OnTimeoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Timeoverride = value;
                    this.SendPropertyChanged("Timeoverride");
                    this.OnTimeoverrideChanged();
                }
            }
        }

        [Column(Name = @"registereddateoverride", Storage = "_Registereddateoverride", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Registereddateoverride
        {
            get
            {
                return this._Registereddateoverride;
            }
            set
            {
                if (this._Registereddateoverride != value)
                {
                    this.OnRegistereddateoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Registereddateoverride = value;
                    this.SendPropertyChanged("Registereddateoverride");
                    this.OnRegistereddateoverrideChanged();
                }
            }
        }

        [Column(Name = @"calformat1override", Storage = "_Calformat1override", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Calformat1override
        {
            get
            {
                return this._Calformat1override;
            }
            set
            {
                if (this._Calformat1override != value)
                {
                    this.OnCalformat1overrideChanging(value);
                    this.SendPropertyChanging();
                    this._Calformat1override = value;
                    this.SendPropertyChanged("Calformat1override");
                    this.OnCalformat1overrideChanged();
                }
            }
        }

        [Column(Name = @"calformat2override", Storage = "_Calformat2override", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Calformat2override
        {
            get
            {
                return this._Calformat2override;
            }
            set
            {
                if (this._Calformat2override != value)
                {
                    this.OnCalformat2overrideChanging(value);
                    this.SendPropertyChanging();
                    this._Calformat2override = value;
                    this.SendPropertyChanged("Calformat2override");
                    this.OnCalformat2overrideChanged();
                }
            }
        }

        [Column(Name = @"logdateoverride", Storage = "_Logdateoverride", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Logdateoverride
        {
            get
            {
                return this._Logdateoverride;
            }
            set
            {
                if (this._Logdateoverride != value)
                {
                    this.OnLogdateoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Logdateoverride = value;
                    this.SendPropertyChanged("Logdateoverride");
                    this.OnLogdateoverrideChanged();
                }
            }
        }

        [Column(Name = @"locale", Storage = "_Locale", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Locale
        {
            get
            {
                return this._Locale;
            }
            set
            {
                if (this._Locale != value)
                {
                    this.OnLocaleChanging(value);
                    this.SendPropertyChanging();
                    this._Locale = value;
                    this.SendPropertyChanged("Locale");
                    this.OnLocaleChanged();
                }
            }
        }

        [Column(Name = @"decimalsep", Storage = "_Decimalsep", CanBeNull = false, DbType = "char(1) NOT NULL")]
        public string Decimalsep
        {
            get
            {
                return this._Decimalsep;
            }
            set
            {
                if (this._Decimalsep != value)
                {
                    this.OnDecimalsepChanging(value);
                    this.SendPropertyChanging();
                    this._Decimalsep = value;
                    this.SendPropertyChanged("Decimalsep");
                    this.OnDecimalsepChanged();
                }
            }
        }

        [Column(Name = @"thousandsep", Storage = "_Thousandsep", CanBeNull = false, DbType = "char(1) NOT NULL")]
        public string Thousandsep
        {
            get
            {
                return this._Thousandsep;
            }
            set
            {
                if (this._Thousandsep != value)
                {
                    this.OnThousandsepChanging(value);
                    this.SendPropertyChanging();
                    this._Thousandsep = value;
                    this.SendPropertyChanged("Thousandsep");
                    this.OnThousandsepChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_global", Storage = "_Phrasegroupglobal", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupglobal
        {
            get
            {
                return this._Phrasegroupglobal;
            }
            set
            {
                if (this._Phrasegroupglobal != value)
                {
                    this.OnPhrasegroupglobalChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupglobal = value;
                    this.SendPropertyChanged("Phrasegroupglobal");
                    this.OnPhrasegroupglobalChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cpglobal", Storage = "_Phrasegroupcpglobal", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcpglobal
        {
            get
            {
                return this._Phrasegroupcpglobal;
            }
            set
            {
                if (this._Phrasegroupcpglobal != value)
                {
                    this.OnPhrasegroupcpglobalChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcpglobal = value;
                    this.SendPropertyChanged("Phrasegroupcpglobal");
                    this.OnPhrasegroupcpglobalChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cppermission", Storage = "_Phrasegroupcppermission", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcppermission
        {
            get
            {
                return this._Phrasegroupcppermission;
            }
            set
            {
                if (this._Phrasegroupcppermission != value)
                {
                    this.OnPhrasegroupcppermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcppermission = value;
                    this.SendPropertyChanged("Phrasegroupcppermission");
                    this.OnPhrasegroupcppermissionChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_forum", Storage = "_Phrasegroupforum", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupforum
        {
            get
            {
                return this._Phrasegroupforum;
            }
            set
            {
                if (this._Phrasegroupforum != value)
                {
                    this.OnPhrasegroupforumChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupforum = value;
                    this.SendPropertyChanged("Phrasegroupforum");
                    this.OnPhrasegroupforumChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_calendar", Storage = "_Phrasegroupcalendar", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcalendar
        {
            get
            {
                return this._Phrasegroupcalendar;
            }
            set
            {
                if (this._Phrasegroupcalendar != value)
                {
                    this.OnPhrasegroupcalendarChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcalendar = value;
                    this.SendPropertyChanged("Phrasegroupcalendar");
                    this.OnPhrasegroupcalendarChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_attachment_image", Storage = "_Phrasegroupattachmentimage", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupattachmentimage
        {
            get
            {
                return this._Phrasegroupattachmentimage;
            }
            set
            {
                if (this._Phrasegroupattachmentimage != value)
                {
                    this.OnPhrasegroupattachmentimageChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupattachmentimage = value;
                    this.SendPropertyChanged("Phrasegroupattachmentimage");
                    this.OnPhrasegroupattachmentimageChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_style", Storage = "_Phrasegroupstyle", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupstyle
        {
            get
            {
                return this._Phrasegroupstyle;
            }
            set
            {
                if (this._Phrasegroupstyle != value)
                {
                    this.OnPhrasegroupstyleChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupstyle = value;
                    this.SendPropertyChanged("Phrasegroupstyle");
                    this.OnPhrasegroupstyleChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_logging", Storage = "_Phrasegrouplogging", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouplogging
        {
            get
            {
                return this._Phrasegrouplogging;
            }
            set
            {
                if (this._Phrasegrouplogging != value)
                {
                    this.OnPhrasegrouploggingChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouplogging = value;
                    this.SendPropertyChanged("Phrasegrouplogging");
                    this.OnPhrasegrouploggingChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cphome", Storage = "_Phrasegroupcphome", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcphome
        {
            get
            {
                return this._Phrasegroupcphome;
            }
            set
            {
                if (this._Phrasegroupcphome != value)
                {
                    this.OnPhrasegroupcphomeChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcphome = value;
                    this.SendPropertyChanged("Phrasegroupcphome");
                    this.OnPhrasegroupcphomeChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_promotion", Storage = "_Phrasegrouppromotion", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouppromotion
        {
            get
            {
                return this._Phrasegrouppromotion;
            }
            set
            {
                if (this._Phrasegrouppromotion != value)
                {
                    this.OnPhrasegrouppromotionChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouppromotion = value;
                    this.SendPropertyChanged("Phrasegrouppromotion");
                    this.OnPhrasegrouppromotionChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_user", Storage = "_Phrasegroupuser", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupuser
        {
            get
            {
                return this._Phrasegroupuser;
            }
            set
            {
                if (this._Phrasegroupuser != value)
                {
                    this.OnPhrasegroupuserChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupuser = value;
                    this.SendPropertyChanged("Phrasegroupuser");
                    this.OnPhrasegroupuserChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_help_faq", Storage = "_Phrasegrouphelpfaq", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouphelpfaq
        {
            get
            {
                return this._Phrasegrouphelpfaq;
            }
            set
            {
                if (this._Phrasegrouphelpfaq != value)
                {
                    this.OnPhrasegrouphelpfaqChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouphelpfaq = value;
                    this.SendPropertyChanged("Phrasegrouphelpfaq");
                    this.OnPhrasegrouphelpfaqChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_sql", Storage = "_Phrasegroupsql", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupsql
        {
            get
            {
                return this._Phrasegroupsql;
            }
            set
            {
                if (this._Phrasegroupsql != value)
                {
                    this.OnPhrasegroupsqlChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupsql = value;
                    this.SendPropertyChanged("Phrasegroupsql");
                    this.OnPhrasegroupsqlChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_subscription", Storage = "_Phrasegroupsubscription", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupsubscription
        {
            get
            {
                return this._Phrasegroupsubscription;
            }
            set
            {
                if (this._Phrasegroupsubscription != value)
                {
                    this.OnPhrasegroupsubscriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupsubscription = value;
                    this.SendPropertyChanged("Phrasegroupsubscription");
                    this.OnPhrasegroupsubscriptionChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_language", Storage = "_Phrasegrouplanguage", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouplanguage
        {
            get
            {
                return this._Phrasegrouplanguage;
            }
            set
            {
                if (this._Phrasegrouplanguage != value)
                {
                    this.OnPhrasegrouplanguageChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouplanguage = value;
                    this.SendPropertyChanged("Phrasegrouplanguage");
                    this.OnPhrasegrouplanguageChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_bbcode", Storage = "_Phrasegroupbbcode", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupbbcode
        {
            get
            {
                return this._Phrasegroupbbcode;
            }
            set
            {
                if (this._Phrasegroupbbcode != value)
                {
                    this.OnPhrasegroupbbcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupbbcode = value;
                    this.SendPropertyChanged("Phrasegroupbbcode");
                    this.OnPhrasegroupbbcodeChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_stats", Storage = "_Phrasegroupstats", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupstats
        {
            get
            {
                return this._Phrasegroupstats;
            }
            set
            {
                if (this._Phrasegroupstats != value)
                {
                    this.OnPhrasegroupstatsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupstats = value;
                    this.SendPropertyChanged("Phrasegroupstats");
                    this.OnPhrasegroupstatsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_diagnostic", Storage = "_Phrasegroupdiagnostic", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupdiagnostic
        {
            get
            {
                return this._Phrasegroupdiagnostic;
            }
            set
            {
                if (this._Phrasegroupdiagnostic != value)
                {
                    this.OnPhrasegroupdiagnosticChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupdiagnostic = value;
                    this.SendPropertyChanged("Phrasegroupdiagnostic");
                    this.OnPhrasegroupdiagnosticChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_maintenance", Storage = "_Phrasegroupmaintenance", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupmaintenance
        {
            get
            {
                return this._Phrasegroupmaintenance;
            }
            set
            {
                if (this._Phrasegroupmaintenance != value)
                {
                    this.OnPhrasegroupmaintenanceChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupmaintenance = value;
                    this.SendPropertyChanged("Phrasegroupmaintenance");
                    this.OnPhrasegroupmaintenanceChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_profilefield", Storage = "_Phrasegroupprofilefield", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupprofilefield
        {
            get
            {
                return this._Phrasegroupprofilefield;
            }
            set
            {
                if (this._Phrasegroupprofilefield != value)
                {
                    this.OnPhrasegroupprofilefieldChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupprofilefield = value;
                    this.SendPropertyChanged("Phrasegroupprofilefield");
                    this.OnPhrasegroupprofilefieldChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_thread", Storage = "_Phrasegroupthread", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupthread
        {
            get
            {
                return this._Phrasegroupthread;
            }
            set
            {
                if (this._Phrasegroupthread != value)
                {
                    this.OnPhrasegroupthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupthread = value;
                    this.SendPropertyChanged("Phrasegroupthread");
                    this.OnPhrasegroupthreadChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_timezone", Storage = "_Phrasegrouptimezone", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouptimezone
        {
            get
            {
                return this._Phrasegrouptimezone;
            }
            set
            {
                if (this._Phrasegrouptimezone != value)
                {
                    this.OnPhrasegrouptimezoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouptimezone = value;
                    this.SendPropertyChanged("Phrasegrouptimezone");
                    this.OnPhrasegrouptimezoneChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_banning", Storage = "_Phrasegroupbanning", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupbanning
        {
            get
            {
                return this._Phrasegroupbanning;
            }
            set
            {
                if (this._Phrasegroupbanning != value)
                {
                    this.OnPhrasegroupbanningChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupbanning = value;
                    this.SendPropertyChanged("Phrasegroupbanning");
                    this.OnPhrasegroupbanningChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_reputation", Storage = "_Phrasegroupreputation", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupreputation
        {
            get
            {
                return this._Phrasegroupreputation;
            }
            set
            {
                if (this._Phrasegroupreputation != value)
                {
                    this.OnPhrasegroupreputationChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupreputation = value;
                    this.SendPropertyChanged("Phrasegroupreputation");
                    this.OnPhrasegroupreputationChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_wol", Storage = "_Phrasegroupwol", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupwol
        {
            get
            {
                return this._Phrasegroupwol;
            }
            set
            {
                if (this._Phrasegroupwol != value)
                {
                    this.OnPhrasegroupwolChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupwol = value;
                    this.SendPropertyChanged("Phrasegroupwol");
                    this.OnPhrasegroupwolChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_threadmanage", Storage = "_Phrasegroupthreadmanage", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupthreadmanage
        {
            get
            {
                return this._Phrasegroupthreadmanage;
            }
            set
            {
                if (this._Phrasegroupthreadmanage != value)
                {
                    this.OnPhrasegroupthreadmanageChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupthreadmanage = value;
                    this.SendPropertyChanged("Phrasegroupthreadmanage");
                    this.OnPhrasegroupthreadmanageChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_pm", Storage = "_Phrasegrouppm", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouppm
        {
            get
            {
                return this._Phrasegrouppm;
            }
            set
            {
                if (this._Phrasegrouppm != value)
                {
                    this.OnPhrasegrouppmChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouppm = value;
                    this.SendPropertyChanged("Phrasegrouppm");
                    this.OnPhrasegrouppmChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cpuser", Storage = "_Phrasegroupcpuser", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcpuser
        {
            get
            {
                return this._Phrasegroupcpuser;
            }
            set
            {
                if (this._Phrasegroupcpuser != value)
                {
                    this.OnPhrasegroupcpuserChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcpuser = value;
                    this.SendPropertyChanged("Phrasegroupcpuser");
                    this.OnPhrasegroupcpuserChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_accessmask", Storage = "_Phrasegroupaccessmask", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupaccessmask
        {
            get
            {
                return this._Phrasegroupaccessmask;
            }
            set
            {
                if (this._Phrasegroupaccessmask != value)
                {
                    this.OnPhrasegroupaccessmaskChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupaccessmask = value;
                    this.SendPropertyChanged("Phrasegroupaccessmask");
                    this.OnPhrasegroupaccessmaskChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cron", Storage = "_Phrasegroupcron", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcron
        {
            get
            {
                return this._Phrasegroupcron;
            }
            set
            {
                if (this._Phrasegroupcron != value)
                {
                    this.OnPhrasegroupcronChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcron = value;
                    this.SendPropertyChanged("Phrasegroupcron");
                    this.OnPhrasegroupcronChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_moderator", Storage = "_Phrasegroupmoderator", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupmoderator
        {
            get
            {
                return this._Phrasegroupmoderator;
            }
            set
            {
                if (this._Phrasegroupmoderator != value)
                {
                    this.OnPhrasegroupmoderatorChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupmoderator = value;
                    this.SendPropertyChanged("Phrasegroupmoderator");
                    this.OnPhrasegroupmoderatorChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cpoption", Storage = "_Phrasegroupcpoption", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcpoption
        {
            get
            {
                return this._Phrasegroupcpoption;
            }
            set
            {
                if (this._Phrasegroupcpoption != value)
                {
                    this.OnPhrasegroupcpoptionChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcpoption = value;
                    this.SendPropertyChanged("Phrasegroupcpoption");
                    this.OnPhrasegroupcpoptionChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cprank", Storage = "_Phrasegroupcprank", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcprank
        {
            get
            {
                return this._Phrasegroupcprank;
            }
            set
            {
                if (this._Phrasegroupcprank != value)
                {
                    this.OnPhrasegroupcprankChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcprank = value;
                    this.SendPropertyChanged("Phrasegroupcprank");
                    this.OnPhrasegroupcprankChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cpusergroup", Storage = "_Phrasegroupcpusergroup", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcpusergroup
        {
            get
            {
                return this._Phrasegroupcpusergroup;
            }
            set
            {
                if (this._Phrasegroupcpusergroup != value)
                {
                    this.OnPhrasegroupcpusergroupChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcpusergroup = value;
                    this.SendPropertyChanged("Phrasegroupcpusergroup");
                    this.OnPhrasegroupcpusergroupChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_holiday", Storage = "_Phrasegroupholiday", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupholiday
        {
            get
            {
                return this._Phrasegroupholiday;
            }
            set
            {
                if (this._Phrasegroupholiday != value)
                {
                    this.OnPhrasegroupholidayChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupholiday = value;
                    this.SendPropertyChanged("Phrasegroupholiday");
                    this.OnPhrasegroupholidayChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_posting", Storage = "_Phrasegroupposting", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupposting
        {
            get
            {
                return this._Phrasegroupposting;
            }
            set
            {
                if (this._Phrasegroupposting != value)
                {
                    this.OnPhrasegrouppostingChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupposting = value;
                    this.SendPropertyChanged("Phrasegroupposting");
                    this.OnPhrasegrouppostingChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_poll", Storage = "_Phrasegrouppoll", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouppoll
        {
            get
            {
                return this._Phrasegrouppoll;
            }
            set
            {
                if (this._Phrasegrouppoll != value)
                {
                    this.OnPhrasegrouppollChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouppoll = value;
                    this.SendPropertyChanged("Phrasegrouppoll");
                    this.OnPhrasegrouppollChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_fronthelp", Storage = "_Phrasegroupfronthelp", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupfronthelp
        {
            get
            {
                return this._Phrasegroupfronthelp;
            }
            set
            {
                if (this._Phrasegroupfronthelp != value)
                {
                    this.OnPhrasegroupfronthelpChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupfronthelp = value;
                    this.SendPropertyChanged("Phrasegroupfronthelp");
                    this.OnPhrasegroupfronthelpChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_register", Storage = "_Phrasegroupregister", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupregister
        {
            get
            {
                return this._Phrasegroupregister;
            }
            set
            {
                if (this._Phrasegroupregister != value)
                {
                    this.OnPhrasegroupregisterChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupregister = value;
                    this.SendPropertyChanged("Phrasegroupregister");
                    this.OnPhrasegroupregisterChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_search", Storage = "_Phrasegroupsearch", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupsearch
        {
            get
            {
                return this._Phrasegroupsearch;
            }
            set
            {
                if (this._Phrasegroupsearch != value)
                {
                    this.OnPhrasegroupsearchChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupsearch = value;
                    this.SendPropertyChanged("Phrasegroupsearch");
                    this.OnPhrasegroupsearchChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_showthread", Storage = "_Phrasegroupshowthread", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupshowthread
        {
            get
            {
                return this._Phrasegroupshowthread;
            }
            set
            {
                if (this._Phrasegroupshowthread != value)
                {
                    this.OnPhrasegroupshowthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupshowthread = value;
                    this.SendPropertyChanged("Phrasegroupshowthread");
                    this.OnPhrasegroupshowthreadChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_postbit", Storage = "_Phrasegrouppostbit", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouppostbit
        {
            get
            {
                return this._Phrasegrouppostbit;
            }
            set
            {
                if (this._Phrasegrouppostbit != value)
                {
                    this.OnPhrasegrouppostbitChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouppostbit = value;
                    this.SendPropertyChanged("Phrasegrouppostbit");
                    this.OnPhrasegrouppostbitChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_forumdisplay", Storage = "_Phrasegroupforumdisplay", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupforumdisplay
        {
            get
            {
                return this._Phrasegroupforumdisplay;
            }
            set
            {
                if (this._Phrasegroupforumdisplay != value)
                {
                    this.OnPhrasegroupforumdisplayChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupforumdisplay = value;
                    this.SendPropertyChanged("Phrasegroupforumdisplay");
                    this.OnPhrasegroupforumdisplayChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_messaging", Storage = "_Phrasegroupmessaging", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupmessaging
        {
            get
            {
                return this._Phrasegroupmessaging;
            }
            set
            {
                if (this._Phrasegroupmessaging != value)
                {
                    this.OnPhrasegroupmessagingChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupmessaging = value;
                    this.SendPropertyChanged("Phrasegroupmessaging");
                    this.OnPhrasegroupmessagingChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_inlinemod", Storage = "_Phrasegroupinlinemod", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupinlinemod
        {
            get
            {
                return this._Phrasegroupinlinemod;
            }
            set
            {
                if (this._Phrasegroupinlinemod != value)
                {
                    this.OnPhrasegroupinlinemodChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupinlinemod = value;
                    this.SendPropertyChanged("Phrasegroupinlinemod");
                    this.OnPhrasegroupinlinemodChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_plugins", Storage = "_Phrasegroupplugins", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupplugins
        {
            get
            {
                return this._Phrasegroupplugins;
            }
            set
            {
                if (this._Phrasegroupplugins != value)
                {
                    this.OnPhrasegrouppluginsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupplugins = value;
                    this.SendPropertyChanged("Phrasegroupplugins");
                    this.OnPhrasegrouppluginsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cprofilefield", Storage = "_Phrasegroupcprofilefield", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcprofilefield
        {
            get
            {
                return this._Phrasegroupcprofilefield;
            }
            set
            {
                if (this._Phrasegroupcprofilefield != value)
                {
                    this.OnPhrasegroupcprofilefieldChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcprofilefield = value;
                    this.SendPropertyChanged("Phrasegroupcprofilefield");
                    this.OnPhrasegroupcprofilefieldChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_reputationlevel", Storage = "_Phrasegroupreputationlevel", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupreputationlevel
        {
            get
            {
                return this._Phrasegroupreputationlevel;
            }
            set
            {
                if (this._Phrasegroupreputationlevel != value)
                {
                    this.OnPhrasegroupreputationlevelChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupreputationlevel = value;
                    this.SendPropertyChanged("Phrasegroupreputationlevel");
                    this.OnPhrasegroupreputationlevelChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_infraction", Storage = "_Phrasegroupinfraction", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupinfraction
        {
            get
            {
                return this._Phrasegroupinfraction;
            }
            set
            {
                if (this._Phrasegroupinfraction != value)
                {
                    this.OnPhrasegroupinfractionChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupinfraction = value;
                    this.SendPropertyChanged("Phrasegroupinfraction");
                    this.OnPhrasegroupinfractionChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_infractionlevel", Storage = "_Phrasegroupinfractionlevel", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupinfractionlevel
        {
            get
            {
                return this._Phrasegroupinfractionlevel;
            }
            set
            {
                if (this._Phrasegroupinfractionlevel != value)
                {
                    this.OnPhrasegroupinfractionlevelChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupinfractionlevel = value;
                    this.SendPropertyChanged("Phrasegroupinfractionlevel");
                    this.OnPhrasegroupinfractionlevelChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_notice", Storage = "_Phrasegroupnotice", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupnotice
        {
            get
            {
                return this._Phrasegroupnotice;
            }
            set
            {
                if (this._Phrasegroupnotice != value)
                {
                    this.OnPhrasegroupnoticeChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupnotice = value;
                    this.SendPropertyChanged("Phrasegroupnotice");
                    this.OnPhrasegroupnoticeChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_prefix", Storage = "_Phrasegroupprefix", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupprefix
        {
            get
            {
                return this._Phrasegroupprefix;
            }
            set
            {
                if (this._Phrasegroupprefix != value)
                {
                    this.OnPhrasegroupprefixChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupprefix = value;
                    this.SendPropertyChanged("Phrasegroupprefix");
                    this.OnPhrasegroupprefixChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_prefixadmin", Storage = "_Phrasegroupprefixadmin", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupprefixadmin
        {
            get
            {
                return this._Phrasegroupprefixadmin;
            }
            set
            {
                if (this._Phrasegroupprefixadmin != value)
                {
                    this.OnPhrasegroupprefixadminChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupprefixadmin = value;
                    this.SendPropertyChanged("Phrasegroupprefixadmin");
                    this.OnPhrasegroupprefixadminChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_album", Storage = "_Phrasegroupalbum", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupalbum
        {
            get
            {
                return this._Phrasegroupalbum;
            }
            set
            {
                if (this._Phrasegroupalbum != value)
                {
                    this.OnPhrasegroupalbumChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupalbum = value;
                    this.SendPropertyChanged("Phrasegroupalbum");
                    this.OnPhrasegroupalbumChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_socialgroups", Storage = "_Phrasegroupsocialgroups", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupsocialgroups
        {
            get
            {
                return this._Phrasegroupsocialgroups;
            }
            set
            {
                if (this._Phrasegroupsocialgroups != value)
                {
                    this.OnPhrasegroupsocialgroupsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupsocialgroups = value;
                    this.SendPropertyChanged("Phrasegroupsocialgroups");
                    this.OnPhrasegroupsocialgroupsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_advertising", Storage = "_Phrasegroupadvertising", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupadvertising
        {
            get
            {
                return this._Phrasegroupadvertising;
            }
            set
            {
                if (this._Phrasegroupadvertising != value)
                {
                    this.OnPhrasegroupadvertisingChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupadvertising = value;
                    this.SendPropertyChanged("Phrasegroupadvertising");
                    this.OnPhrasegroupadvertisingChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_tagscategories", Storage = "_Phrasegrouptagscategories", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegrouptagscategories
        {
            get
            {
                return this._Phrasegrouptagscategories;
            }
            set
            {
                if (this._Phrasegrouptagscategories != value)
                {
                    this.OnPhrasegrouptagscategoriesChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegrouptagscategories = value;
                    this.SendPropertyChanged("Phrasegrouptagscategories");
                    this.OnPhrasegrouptagscategoriesChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_contenttypes", Storage = "_Phrasegroupcontenttypes", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcontenttypes
        {
            get
            {
                return this._Phrasegroupcontenttypes;
            }
            set
            {
                if (this._Phrasegroupcontenttypes != value)
                {
                    this.OnPhrasegroupcontenttypesChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcontenttypes = value;
                    this.SendPropertyChanged("Phrasegroupcontenttypes");
                    this.OnPhrasegroupcontenttypesChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbblock", Storage = "_Phrasegroupvbblock", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbblock
        {
            get
            {
                return this._Phrasegroupvbblock;
            }
            set
            {
                if (this._Phrasegroupvbblock != value)
                {
                    this.OnPhrasegroupvbblockChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbblock = value;
                    this.SendPropertyChanged("Phrasegroupvbblock");
                    this.OnPhrasegroupvbblockChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbblocksettings", Storage = "_Phrasegroupvbblocksettings", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbblocksettings
        {
            get
            {
                return this._Phrasegroupvbblocksettings;
            }
            set
            {
                if (this._Phrasegroupvbblocksettings != value)
                {
                    this.OnPhrasegroupvbblocksettingsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbblocksettings = value;
                    this.SendPropertyChanged("Phrasegroupvbblocksettings");
                    this.OnPhrasegroupvbblocksettingsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbblogadmin", Storage = "_Phrasegroupvbblogadmin", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbblogadmin
        {
            get
            {
                return this._Phrasegroupvbblogadmin;
            }
            set
            {
                if (this._Phrasegroupvbblogadmin != value)
                {
                    this.OnPhrasegroupvbblogadminChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbblogadmin = value;
                    this.SendPropertyChanged("Phrasegroupvbblogadmin");
                    this.OnPhrasegroupvbblogadminChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbblogcat", Storage = "_Phrasegroupvbblogcat", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbblogcat
        {
            get
            {
                return this._Phrasegroupvbblogcat;
            }
            set
            {
                if (this._Phrasegroupvbblogcat != value)
                {
                    this.OnPhrasegroupvbblogcatChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbblogcat = value;
                    this.SendPropertyChanged("Phrasegroupvbblogcat");
                    this.OnPhrasegroupvbblogcatChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbblogglobal", Storage = "_Phrasegroupvbblogglobal", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbblogglobal
        {
            get
            {
                return this._Phrasegroupvbblogglobal;
            }
            set
            {
                if (this._Phrasegroupvbblogglobal != value)
                {
                    this.OnPhrasegroupvbblogglobalChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbblogglobal = value;
                    this.SendPropertyChanged("Phrasegroupvbblogglobal");
                    this.OnPhrasegroupvbblogglobalChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_cpcms", Storage = "_Phrasegroupcpcms", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupcpcms
        {
            get
            {
                return this._Phrasegroupcpcms;
            }
            set
            {
                if (this._Phrasegroupcpcms != value)
                {
                    this.OnPhrasegroupcpcmsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupcpcms = value;
                    this.SendPropertyChanged("Phrasegroupcpcms");
                    this.OnPhrasegroupcpcmsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_vbcms", Storage = "_Phrasegroupvbcms", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupvbcms
        {
            get
            {
                return this._Phrasegroupvbcms;
            }
            set
            {
                if (this._Phrasegroupvbcms != value)
                {
                    this.OnPhrasegroupvbcmsChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupvbcms = value;
                    this.SendPropertyChanged("Phrasegroupvbcms");
                    this.OnPhrasegroupvbcmsChanged();
                }
            }
        }

        [Column(Name = @"phrasegroup_widgettypes", Storage = "_Phrasegroupwidgettypes", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phrasegroupwidgettypes
        {
            get
            {
                return this._Phrasegroupwidgettypes;
            }
            set
            {
                if (this._Phrasegroupwidgettypes != value)
                {
                    this.OnPhrasegroupwidgettypesChanging(value);
                    this.SendPropertyChanging();
                    this._Phrasegroupwidgettypes = value;
                    this.SendPropertyChanged("Phrasegroupwidgettypes");
                    this.OnPhrasegroupwidgettypesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.mailqueue")]
    public partial class Mailqueue : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Mailqueueid;

        private long _Dateline;

        private string _Toemail;

        private string _Fromemail;

        private string _Subject;

        private string _Message;

        private string _Header;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMailqueueidChanging(long value);
        partial void OnMailqueueidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnToemailChanging(string value);
        partial void OnToemailChanged();
        partial void OnFromemailChanging(string value);
        partial void OnFromemailChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnHeaderChanging(string value);
        partial void OnHeaderChanged();
        #endregion

        public Mailqueue()
        {
            OnCreated();
        }

        [Column(Name = @"mailqueueid", Storage = "_Mailqueueid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Mailqueueid
        {
            get
            {
                return this._Mailqueueid;
            }
            set
            {
                if (this._Mailqueueid != value)
                {
                    this.OnMailqueueidChanging(value);
                    this.SendPropertyChanging();
                    this._Mailqueueid = value;
                    this.SendPropertyChanged("Mailqueueid");
                    this.OnMailqueueidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"toemail", Storage = "_Toemail", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Toemail
        {
            get
            {
                return this._Toemail;
            }
            set
            {
                if (this._Toemail != value)
                {
                    this.OnToemailChanging(value);
                    this.SendPropertyChanging();
                    this._Toemail = value;
                    this.SendPropertyChanged("Toemail");
                    this.OnToemailChanged();
                }
            }
        }

        [Column(Name = @"fromemail", Storage = "_Fromemail", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Fromemail
        {
            get
            {
                return this._Fromemail;
            }
            set
            {
                if (this._Fromemail != value)
                {
                    this.OnFromemailChanging(value);
                    this.SendPropertyChanging();
                    this._Fromemail = value;
                    this.SendPropertyChanged("Fromemail");
                    this.OnFromemailChanged();
                }
            }
        }

        [Column(Name = @"subject", Storage = "_Subject", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

        [Column(Name = @"message", Storage = "_Message", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

        [Column(Name = @"header", Storage = "_Header", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Header
        {
            get
            {
                return this._Header;
            }
            set
            {
                if (this._Header != value)
                {
                    this.OnHeaderChanging(value);
                    this.SendPropertyChanging();
                    this._Header = value;
                    this.SendPropertyChanged("Header");
                    this.OnHeaderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.moderation")]
    public partial class Moderation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Primaryid;

        private string _Type;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Moderation()
        {
            OnCreated();
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.moderator")]
    public partial class Moderator : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Moderatorid;

        private long _Userid;

        private short _Forumid;

        private long _Permissions;

        private long _Permissions2;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnModeratoridChanging(int value);
        partial void OnModeratoridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(short value);
        partial void OnForumidChanged();
        partial void OnPermissionsChanging(long value);
        partial void OnPermissionsChanged();
        partial void OnPermissions2Changing(long value);
        partial void OnPermissions2Changed();
        #endregion

        public Moderator()
        {
            OnCreated();
        }

        [Column(Name = @"moderatorid", Storage = "_Moderatorid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Moderatorid
        {
            get
            {
                return this._Moderatorid;
            }
            set
            {
                if (this._Moderatorid != value)
                {
                    this.OnModeratoridChanging(value);
                    this.SendPropertyChanging();
                    this._Moderatorid = value;
                    this.SendPropertyChanged("Moderatorid");
                    this.OnModeratoridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"permissions", Storage = "_Permissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions
        {
            get
            {
                return this._Permissions;
            }
            set
            {
                if (this._Permissions != value)
                {
                    this.OnPermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Permissions = value;
                    this.SendPropertyChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }

        [Column(Name = @"permissions2", Storage = "_Permissions2", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Permissions2
        {
            get
            {
                return this._Permissions2;
            }
            set
            {
                if (this._Permissions2 != value)
                {
                    this.OnPermissions2Changing(value);
                    this.SendPropertyChanging();
                    this._Permissions2 = value;
                    this.SendPropertyChanged("Permissions2");
                    this.OnPermissions2Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.moderatorlog")]
    public partial class Moderatorlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Moderatorlogid;

        private long _Dateline;

        private long _Userid;

        private int _Forumid;

        private long _Threadid;

        private long _Postid;

        private long _Pollid;

        private long _Attachmentid;

        private string _Action;

        private int _Type;

        private string _Threadtitle;

        private string _Ipaddress;

        private string _Product;

        private long _Id1;

        private long _Id2;

        private long _Id3;

        private long _Id4;

        private long _Id5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnModeratorlogidChanging(long value);
        partial void OnModeratorlogidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnPollidChanging(long value);
        partial void OnPollidChanged();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnThreadtitleChanging(string value);
        partial void OnThreadtitleChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnId1Changing(long value);
        partial void OnId1Changed();
        partial void OnId2Changing(long value);
        partial void OnId2Changed();
        partial void OnId3Changing(long value);
        partial void OnId3Changed();
        partial void OnId4Changing(long value);
        partial void OnId4Changed();
        partial void OnId5Changing(long value);
        partial void OnId5Changed();
        #endregion

        public Moderatorlog()
        {
            OnCreated();
        }

        [Column(Name = @"moderatorlogid", Storage = "_Moderatorlogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Moderatorlogid
        {
            get
            {
                return this._Moderatorlogid;
            }
            set
            {
                if (this._Moderatorlogid != value)
                {
                    this.OnModeratorlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Moderatorlogid = value;
                    this.SendPropertyChanged("Moderatorlogid");
                    this.OnModeratorlogidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"pollid", Storage = "_Pollid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }

        [Column(Name = @"action", Storage = "_Action", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"threadtitle", Storage = "_Threadtitle", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Threadtitle
        {
            get
            {
                return this._Threadtitle;
            }
            set
            {
                if (this._Threadtitle != value)
                {
                    this.OnThreadtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Threadtitle = value;
                    this.SendPropertyChanged("Threadtitle");
                    this.OnThreadtitleChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"id1", Storage = "_Id1", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id1
        {
            get
            {
                return this._Id1;
            }
            set
            {
                if (this._Id1 != value)
                {
                    this.OnId1Changing(value);
                    this.SendPropertyChanging();
                    this._Id1 = value;
                    this.SendPropertyChanged("Id1");
                    this.OnId1Changed();
                }
            }
        }

        [Column(Name = @"id2", Storage = "_Id2", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id2
        {
            get
            {
                return this._Id2;
            }
            set
            {
                if (this._Id2 != value)
                {
                    this.OnId2Changing(value);
                    this.SendPropertyChanging();
                    this._Id2 = value;
                    this.SendPropertyChanged("Id2");
                    this.OnId2Changed();
                }
            }
        }

        [Column(Name = @"id3", Storage = "_Id3", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id3
        {
            get
            {
                return this._Id3;
            }
            set
            {
                if (this._Id3 != value)
                {
                    this.OnId3Changing(value);
                    this.SendPropertyChanging();
                    this._Id3 = value;
                    this.SendPropertyChanged("Id3");
                    this.OnId3Changed();
                }
            }
        }

        [Column(Name = @"id4", Storage = "_Id4", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id4
        {
            get
            {
                return this._Id4;
            }
            set
            {
                if (this._Id4 != value)
                {
                    this.OnId4Changing(value);
                    this.SendPropertyChanging();
                    this._Id4 = value;
                    this.SendPropertyChanged("Id4");
                    this.OnId4Changed();
                }
            }
        }

        [Column(Name = @"id5", Storage = "_Id5", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Id5
        {
            get
            {
                return this._Id5;
            }
            set
            {
                if (this._Id5 != value)
                {
                    this.OnId5Changing(value);
                    this.SendPropertyChanging();
                    this._Id5 = value;
                    this.SendPropertyChanged("Id5");
                    this.OnId5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.notice")]
    public partial class Notice : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Noticeid;

        private string _Title;

        private long _Displayorder;

        private int _Persistent;

        private int _Active;

        private int _Dismissible;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNoticeidChanging(long value);
        partial void OnNoticeidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnPersistentChanging(int value);
        partial void OnPersistentChanged();
        partial void OnActiveChanging(int value);
        partial void OnActiveChanged();
        partial void OnDismissibleChanging(int value);
        partial void OnDismissibleChanged();
        #endregion

        public Notice()
        {
            OnCreated();
        }

        [Column(Name = @"noticeid", Storage = "_Noticeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Noticeid
        {
            get
            {
                return this._Noticeid;
            }
            set
            {
                if (this._Noticeid != value)
                {
                    this.OnNoticeidChanging(value);
                    this.SendPropertyChanging();
                    this._Noticeid = value;
                    this.SendPropertyChanged("Noticeid");
                    this.OnNoticeidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"persistent", Storage = "_Persistent", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Persistent
        {
            get
            {
                return this._Persistent;
            }
            set
            {
                if (this._Persistent != value)
                {
                    this.OnPersistentChanging(value);
                    this.SendPropertyChanging();
                    this._Persistent = value;
                    this.SendPropertyChanged("Persistent");
                    this.OnPersistentChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"dismissible", Storage = "_Dismissible", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Dismissible
        {
            get
            {
                return this._Dismissible;
            }
            set
            {
                if (this._Dismissible != value)
                {
                    this.OnDismissibleChanging(value);
                    this.SendPropertyChanging();
                    this._Dismissible = value;
                    this.SendPropertyChanged("Dismissible");
                    this.OnDismissibleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.noticecriteria")]
    public partial class Noticecriteria : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Noticeid;

        private string _Criteriaid;

        private string _Condition1;

        private string _Condition2;

        private string _Condition3;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNoticeidChanging(long value);
        partial void OnNoticeidChanged();
        partial void OnCriteriaidChanging(string value);
        partial void OnCriteriaidChanged();
        partial void OnCondition1Changing(string value);
        partial void OnCondition1Changed();
        partial void OnCondition2Changing(string value);
        partial void OnCondition2Changed();
        partial void OnCondition3Changing(string value);
        partial void OnCondition3Changed();
        #endregion

        public Noticecriteria()
        {
            OnCreated();
        }

        [Column(Name = @"noticeid", Storage = "_Noticeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Noticeid
        {
            get
            {
                return this._Noticeid;
            }
            set
            {
                if (this._Noticeid != value)
                {
                    this.OnNoticeidChanging(value);
                    this.SendPropertyChanging();
                    this._Noticeid = value;
                    this.SendPropertyChanged("Noticeid");
                    this.OnNoticeidChanged();
                }
            }
        }

        [Column(Name = @"criteriaid", Storage = "_Criteriaid", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Criteriaid
        {
            get
            {
                return this._Criteriaid;
            }
            set
            {
                if (this._Criteriaid != value)
                {
                    this.OnCriteriaidChanging(value);
                    this.SendPropertyChanging();
                    this._Criteriaid = value;
                    this.SendPropertyChanged("Criteriaid");
                    this.OnCriteriaidChanged();
                }
            }
        }

        [Column(Name = @"condition1", Storage = "_Condition1", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition1
        {
            get
            {
                return this._Condition1;
            }
            set
            {
                if (this._Condition1 != value)
                {
                    this.OnCondition1Changing(value);
                    this.SendPropertyChanging();
                    this._Condition1 = value;
                    this.SendPropertyChanged("Condition1");
                    this.OnCondition1Changed();
                }
            }
        }

        [Column(Name = @"condition2", Storage = "_Condition2", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition2
        {
            get
            {
                return this._Condition2;
            }
            set
            {
                if (this._Condition2 != value)
                {
                    this.OnCondition2Changing(value);
                    this.SendPropertyChanging();
                    this._Condition2 = value;
                    this.SendPropertyChanged("Condition2");
                    this.OnCondition2Changed();
                }
            }
        }

        [Column(Name = @"condition3", Storage = "_Condition3", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Condition3
        {
            get
            {
                return this._Condition3;
            }
            set
            {
                if (this._Condition3 != value)
                {
                    this.OnCondition3Changing(value);
                    this.SendPropertyChanging();
                    this._Condition3 = value;
                    this.SendPropertyChanged("Condition3");
                    this.OnCondition3Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.noticedismissed")]
    public partial class Noticedismissed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Noticeid;

        private long _Userid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNoticeidChanging(long value);
        partial void OnNoticeidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        #endregion

        public Noticedismissed()
        {
            OnCreated();
        }

        [Column(Name = @"noticeid", Storage = "_Noticeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Noticeid
        {
            get
            {
                return this._Noticeid;
            }
            set
            {
                if (this._Noticeid != value)
                {
                    this.OnNoticeidChanging(value);
                    this.SendPropertyChanging();
                    this._Noticeid = value;
                    this.SendPropertyChanged("Noticeid");
                    this.OnNoticeidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.package")]
    public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Packageid;

        private string _Productid;

        private string _Class;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPackageidChanging(long value);
        partial void OnPackageidChanged();
        partial void OnProductidChanging(string value);
        partial void OnProductidChanged();
        partial void OnClassChanging(string value);
        partial void OnClassChanged();
        #endregion

        public Package()
        {
            OnCreated();
        }

        [Column(Name = @"packageid", Storage = "_Packageid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Packageid
        {
            get
            {
                return this._Packageid;
            }
            set
            {
                if (this._Packageid != value)
                {
                    this.OnPackageidChanging(value);
                    this.SendPropertyChanging();
                    this._Packageid = value;
                    this.SendPropertyChanged("Packageid");
                    this.OnPackageidChanged();
                }
            }
        }

        [Column(Name = @"productid", Storage = "_Productid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

        [Column(Name = @"class", Storage = "_Class", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Class
        {
            get
            {
                return this._Class;
            }
            set
            {
                if (this._Class != value)
                {
                    this.OnClassChanging(value);
                    this.SendPropertyChanging();
                    this._Class = value;
                    this.SendPropertyChanged("Class");
                    this.OnClassChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.passwordhistory")]
    public partial class Passwordhistory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Password;

        private System.DateTime _Passworddate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPassworddateChanging(System.DateTime value);
        partial void OnPassworddateChanged();
        #endregion

        public Passwordhistory()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Name = @"passworddate", Storage = "_Passworddate", CanBeNull = false, DbType = "date NOT NULL")]
        public System.DateTime Passworddate
        {
            get
            {
                return this._Passworddate;
            }
            set
            {
                if (this._Passworddate != value)
                {
                    this.OnPassworddateChanging(value);
                    this.SendPropertyChanging();
                    this._Passworddate = value;
                    this.SendPropertyChanged("Passworddate");
                    this.OnPassworddateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.paymentapi")]
    public partial class Paymentapi : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Paymentapiid;

        private string _Title;

        private string _Currency;

        private short _Recurring;

        private string _Classname;

        private short _Active;

        private string _Settings;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPaymentapiidChanging(long value);
        partial void OnPaymentapiidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnRecurringChanging(short value);
        partial void OnRecurringChanged();
        partial void OnClassnameChanging(string value);
        partial void OnClassnameChanged();
        partial void OnActiveChanging(short value);
        partial void OnActiveChanged();
        partial void OnSettingsChanging(string value);
        partial void OnSettingsChanged();
        #endregion

        public Paymentapi()
        {
            OnCreated();
        }

        [Column(Name = @"paymentapiid", Storage = "_Paymentapiid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Paymentapiid
        {
            get
            {
                return this._Paymentapiid;
            }
            set
            {
                if (this._Paymentapiid != value)
                {
                    this.OnPaymentapiidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentapiid = value;
                    this.SendPropertyChanged("Paymentapiid");
                    this.OnPaymentapiidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"currency", Storage = "_Currency", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Currency
        {
            get
            {
                return this._Currency;
            }
            set
            {
                if (this._Currency != value)
                {
                    this.OnCurrencyChanging(value);
                    this.SendPropertyChanging();
                    this._Currency = value;
                    this.SendPropertyChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }

        [Column(Name = @"recurring", Storage = "_Recurring", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Recurring
        {
            get
            {
                return this._Recurring;
            }
            set
            {
                if (this._Recurring != value)
                {
                    this.OnRecurringChanging(value);
                    this.SendPropertyChanging();
                    this._Recurring = value;
                    this.SendPropertyChanged("Recurring");
                    this.OnRecurringChanged();
                }
            }
        }

        [Column(Name = @"classname", Storage = "_Classname", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Classname
        {
            get
            {
                return this._Classname;
            }
            set
            {
                if (this._Classname != value)
                {
                    this.OnClassnameChanging(value);
                    this.SendPropertyChanging();
                    this._Classname = value;
                    this.SendPropertyChanged("Classname");
                    this.OnClassnameChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"settings", Storage = "_Settings", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(value);
                    this.SendPropertyChanging();
                    this._Settings = value;
                    this.SendPropertyChanged("Settings");
                    this.OnSettingsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.paymentinfo")]
    public partial class Paymentinfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Paymentinfoid;

        private string _Hash;

        private int _Subscriptionid;

        private int _Subscriptionsubid;

        private long _Userid;

        private short _Completed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPaymentinfoidChanging(long value);
        partial void OnPaymentinfoidChanged();
        partial void OnHashChanging(string value);
        partial void OnHashChanged();
        partial void OnSubscriptionidChanging(int value);
        partial void OnSubscriptionidChanged();
        partial void OnSubscriptionsubidChanging(int value);
        partial void OnSubscriptionsubidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCompletedChanging(short value);
        partial void OnCompletedChanged();
        #endregion

        public Paymentinfo()
        {
            OnCreated();
        }

        [Column(Name = @"paymentinfoid", Storage = "_Paymentinfoid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Paymentinfoid
        {
            get
            {
                return this._Paymentinfoid;
            }
            set
            {
                if (this._Paymentinfoid != value)
                {
                    this.OnPaymentinfoidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentinfoid = value;
                    this.SendPropertyChanged("Paymentinfoid");
                    this.OnPaymentinfoidChanged();
                }
            }
        }

        [Column(Name = @"hash", Storage = "_Hash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Hash
        {
            get
            {
                return this._Hash;
            }
            set
            {
                if (this._Hash != value)
                {
                    this.OnHashChanging(value);
                    this.SendPropertyChanging();
                    this._Hash = value;
                    this.SendPropertyChanged("Hash");
                    this.OnHashChanged();
                }
            }
        }

        [Column(Name = @"subscriptionid", Storage = "_Subscriptionid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Subscriptionid
        {
            get
            {
                return this._Subscriptionid;
            }
            set
            {
                if (this._Subscriptionid != value)
                {
                    this.OnSubscriptionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionid = value;
                    this.SendPropertyChanged("Subscriptionid");
                    this.OnSubscriptionidChanged();
                }
            }
        }

        [Column(Name = @"subscriptionsubid", Storage = "_Subscriptionsubid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Subscriptionsubid
        {
            get
            {
                return this._Subscriptionsubid;
            }
            set
            {
                if (this._Subscriptionsubid != value)
                {
                    this.OnSubscriptionsubidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionsubid = value;
                    this.SendPropertyChanged("Subscriptionsubid");
                    this.OnSubscriptionsubidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"completed", Storage = "_Completed", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging();
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.paymenttransaction")]
    public partial class Paymenttransaction : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Paymenttransactionid;

        private long _Paymentinfoid;

        private string _Transactionid;

        private int _State;

        private double _Amount;

        private string _Currency;

        private long _Dateline;

        private long _Paymentapiid;

        private string _Request;

        private long _Reversed;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPaymenttransactionidChanging(long value);
        partial void OnPaymenttransactionidChanged();
        partial void OnPaymentinfoidChanging(long value);
        partial void OnPaymentinfoidChanged();
        partial void OnTransactionidChanging(string value);
        partial void OnTransactionidChanged();
        partial void OnStateChanging(int value);
        partial void OnStateChanged();
        partial void OnAmountChanging(double value);
        partial void OnAmountChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnPaymentapiidChanging(long value);
        partial void OnPaymentapiidChanged();
        partial void OnRequestChanging(string value);
        partial void OnRequestChanged();
        partial void OnReversedChanging(long value);
        partial void OnReversedChanged();
        #endregion

        public Paymenttransaction()
        {
            OnCreated();
        }

        [Column(Name = @"paymenttransactionid", Storage = "_Paymenttransactionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Paymenttransactionid
        {
            get
            {
                return this._Paymenttransactionid;
            }
            set
            {
                if (this._Paymenttransactionid != value)
                {
                    this.OnPaymenttransactionidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymenttransactionid = value;
                    this.SendPropertyChanged("Paymenttransactionid");
                    this.OnPaymenttransactionidChanged();
                }
            }
        }

        [Column(Name = @"paymentinfoid", Storage = "_Paymentinfoid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Paymentinfoid
        {
            get
            {
                return this._Paymentinfoid;
            }
            set
            {
                if (this._Paymentinfoid != value)
                {
                    this.OnPaymentinfoidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentinfoid = value;
                    this.SendPropertyChanged("Paymentinfoid");
                    this.OnPaymentinfoidChanged();
                }
            }
        }

        [Column(Name = @"transactionid", Storage = "_Transactionid", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Transactionid
        {
            get
            {
                return this._Transactionid;
            }
            set
            {
                if (this._Transactionid != value)
                {
                    this.OnTransactionidChanging(value);
                    this.SendPropertyChanging();
                    this._Transactionid = value;
                    this.SendPropertyChanged("Transactionid");
                    this.OnTransactionidChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "double NOT NULL")]
        public double Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"currency", Storage = "_Currency", CanBeNull = false, DbType = "varchar(5) NOT NULL")]
        public string Currency
        {
            get
            {
                return this._Currency;
            }
            set
            {
                if (this._Currency != value)
                {
                    this.OnCurrencyChanging(value);
                    this.SendPropertyChanging();
                    this._Currency = value;
                    this.SendPropertyChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"paymentapiid", Storage = "_Paymentapiid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Paymentapiid
        {
            get
            {
                return this._Paymentapiid;
            }
            set
            {
                if (this._Paymentapiid != value)
                {
                    this.OnPaymentapiidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentapiid = value;
                    this.SendPropertyChanged("Paymentapiid");
                    this.OnPaymentapiidChanged();
                }
            }
        }

        [Column(Name = @"request", Storage = "_Request", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Request
        {
            get
            {
                return this._Request;
            }
            set
            {
                if (this._Request != value)
                {
                    this.OnRequestChanging(value);
                    this.SendPropertyChanging();
                    this._Request = value;
                    this.SendPropertyChanged("Request");
                    this.OnRequestChanged();
                }
            }
        }

        [Column(Name = @"reversed", Storage = "_Reversed", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reversed
        {
            get
            {
                return this._Reversed;
            }
            set
            {
                if (this._Reversed != value)
                {
                    this.OnReversedChanging(value);
                    this.SendPropertyChanging();
                    this._Reversed = value;
                    this.SendPropertyChanged("Reversed");
                    this.OnReversedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.phrase")]
    public partial class Phrase : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Phraseid;

        private short _Languageid;

        private string _Varname;

        private string _Fieldname;

        private string _Text;

        private string _Product;

        private string _Username;

        private long _Dateline;

        private string _Version;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPhraseidChanging(long value);
        partial void OnPhraseidChanged();
        partial void OnLanguageidChanging(short value);
        partial void OnLanguageidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnFieldnameChanging(string value);
        partial void OnFieldnameChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        #endregion

        public Phrase()
        {
            OnCreated();
        }

        [Column(Name = @"phraseid", Storage = "_Phraseid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Phraseid
        {
            get
            {
                return this._Phraseid;
            }
            set
            {
                if (this._Phraseid != value)
                {
                    this.OnPhraseidChanging(value);
                    this.SendPropertyChanging();
                    this._Phraseid = value;
                    this.SendPropertyChanged("Phraseid");
                    this.OnPhraseidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"fieldname", Storage = "_Fieldname", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Fieldname
        {
            get
            {
                return this._Fieldname;
            }
            set
            {
                if (this._Fieldname != value)
                {
                    this.OnFieldnameChanging(value);
                    this.SendPropertyChanging();
                    this._Fieldname = value;
                    this.SendPropertyChanged("Fieldname");
                    this.OnFieldnameChanged();
                }
            }
        }

        [Column(Name = @"text", Storage = "_Text", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(30) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.phrasetype")]
    public partial class Phrasetype : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Fieldname;

        private string _Title;

        private int _Editrows;

        private string _Product;

        private int _Special;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFieldnameChanging(string value);
        partial void OnFieldnameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnEditrowsChanging(int value);
        partial void OnEditrowsChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnSpecialChanging(int value);
        partial void OnSpecialChanged();
        #endregion

        public Phrasetype()
        {
            OnCreated();
        }

        [Column(Name = @"fieldname", Storage = "_Fieldname", CanBeNull = false, DbType = "char(20) NOT NULL", IsPrimaryKey = true)]
        public string Fieldname
        {
            get
            {
                return this._Fieldname;
            }
            set
            {
                if (this._Fieldname != value)
                {
                    this.OnFieldnameChanging(value);
                    this.SendPropertyChanging();
                    this._Fieldname = value;
                    this.SendPropertyChanged("Fieldname");
                    this.OnFieldnameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "char(50) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"editrows", Storage = "_Editrows", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Editrows
        {
            get
            {
                return this._Editrows;
            }
            set
            {
                if (this._Editrows != value)
                {
                    this.OnEditrowsChanging(value);
                    this.SendPropertyChanging();
                    this._Editrows = value;
                    this.SendPropertyChanged("Editrows");
                    this.OnEditrowsChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"special", Storage = "_Special", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Special
        {
            get
            {
                return this._Special;
            }
            set
            {
                if (this._Special != value)
                {
                    this.OnSpecialChanging(value);
                    this.SendPropertyChanging();
                    this._Special = value;
                    this.SendPropertyChanged("Special");
                    this.OnSpecialChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.picturecomment")]
    public partial class Picturecomment : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Commentid;

        private long _Filedataid;

        private long _Userid;

        private long _Postuserid;

        private string _Postusername;

        private long _Dateline;

        private string _State;

        private string _Title;

        private string _Pagetext;

        private long _Ipaddress;

        private short _Allowsmilie;

        private long _Reportthreadid;

        private int _Messageread;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCommentidChanging(long value);
        partial void OnCommentidChanged();
        partial void OnFiledataidChanging(long value);
        partial void OnFiledataidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnPostusernameChanging(string value);
        partial void OnPostusernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnAllowsmilieChanging(short value);
        partial void OnAllowsmilieChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        partial void OnMessagereadChanging(int value);
        partial void OnMessagereadChanged();
        #endregion

        public Picturecomment()
        {
            OnCreated();
        }

        [Column(Name = @"commentid", Storage = "_Commentid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Commentid
        {
            get
            {
                return this._Commentid;
            }
            set
            {
                if (this._Commentid != value)
                {
                    this.OnCommentidChanging(value);
                    this.SendPropertyChanging();
                    this._Commentid = value;
                    this.SendPropertyChanged("Commentid");
                    this.OnCommentidChanged();
                }
            }
        }

        [Column(Name = @"filedataid", Storage = "_Filedataid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filedataid
        {
            get
            {
                return this._Filedataid;
            }
            set
            {
                if (this._Filedataid != value)
                {
                    this.OnFiledataidChanging(value);
                    this.SendPropertyChanging();
                    this._Filedataid = value;
                    this.SendPropertyChanged("Filedataid");
                    this.OnFiledataidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"postusername", Storage = "_Postusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Postusername
        {
            get
            {
                return this._Postusername;
            }
            set
            {
                if (this._Postusername != value)
                {
                    this.OnPostusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Postusername = value;
                    this.SendPropertyChanged("Postusername");
                    this.OnPostusernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }

        [Column(Name = @"messageread", Storage = "_Messageread", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Messageread
        {
            get
            {
                return this._Messageread;
            }
            set
            {
                if (this._Messageread != value)
                {
                    this.OnMessagereadChanging(value);
                    this.SendPropertyChanging();
                    this._Messageread = value;
                    this.SendPropertyChanged("Messageread");
                    this.OnMessagereadChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.picturecomment_hash")]
    public partial class Picturecommenthash : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postuserid;

        private long _Filedataid;

        private long _Userid;

        private string _Dupehash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnFiledataidChanging(long value);
        partial void OnFiledataidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDupehashChanging(string value);
        partial void OnDupehashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Picturecommenthash()
        {
            OnCreated();
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"filedataid", Storage = "_Filedataid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filedataid
        {
            get
            {
                return this._Filedataid;
            }
            set
            {
                if (this._Filedataid != value)
                {
                    this.OnFiledataidChanging(value);
                    this.SendPropertyChanging();
                    this._Filedataid = value;
                    this.SendPropertyChanged("Filedataid");
                    this.OnFiledataidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dupehash", Storage = "_Dupehash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Dupehash
        {
            get
            {
                return this._Dupehash;
            }
            set
            {
                if (this._Dupehash != value)
                {
                    this.OnDupehashChanging(value);
                    this.SendPropertyChanging();
                    this._Dupehash = value;
                    this.SendPropertyChanged("Dupehash");
                    this.OnDupehashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.picturelegacy")]
    public partial class Picturelegacy : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Type;

        private long _Primaryid;

        private long _Pictureid;

        private long _Attachmentid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnPictureidChanging(long value);
        partial void OnPictureidChanged();
        partial void OnAttachmentidChanging(long value);
        partial void OnAttachmentidChanged();
        #endregion

        public Picturelegacy()
        {
            OnCreated();
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"pictureid", Storage = "_Pictureid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Pictureid
        {
            get
            {
                return this._Pictureid;
            }
            set
            {
                if (this._Pictureid != value)
                {
                    this.OnPictureidChanging(value);
                    this.SendPropertyChanging();
                    this._Pictureid = value;
                    this.SendPropertyChanged("Pictureid");
                    this.OnPictureidChanged();
                }
            }
        }

        [Column(Name = @"attachmentid", Storage = "_Attachmentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachmentid
        {
            get
            {
                return this._Attachmentid;
            }
            set
            {
                if (this._Attachmentid != value)
                {
                    this.OnAttachmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Attachmentid = value;
                    this.SendPropertyChanged("Attachmentid");
                    this.OnAttachmentidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.plugin")]
    public partial class Plugin : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pluginid;

        private string _Title;

        private string _Hookname;

        private string _Phpcode;

        private string _Product;

        private string _Devkey;

        private short _Active;

        private int _Executionorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPluginidChanging(long value);
        partial void OnPluginidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnHooknameChanging(string value);
        partial void OnHooknameChanged();
        partial void OnPhpcodeChanging(string value);
        partial void OnPhpcodeChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnDevkeyChanging(string value);
        partial void OnDevkeyChanged();
        partial void OnActiveChanging(short value);
        partial void OnActiveChanged();
        partial void OnExecutionorderChanging(int value);
        partial void OnExecutionorderChanged();
        #endregion

        public Plugin()
        {
            OnCreated();
        }

        [Column(Name = @"pluginid", Storage = "_Pluginid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Pluginid
        {
            get
            {
                return this._Pluginid;
            }
            set
            {
                if (this._Pluginid != value)
                {
                    this.OnPluginidChanging(value);
                    this.SendPropertyChanging();
                    this._Pluginid = value;
                    this.SendPropertyChanged("Pluginid");
                    this.OnPluginidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"hookname", Storage = "_Hookname", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Hookname
        {
            get
            {
                return this._Hookname;
            }
            set
            {
                if (this._Hookname != value)
                {
                    this.OnHooknameChanging(value);
                    this.SendPropertyChanging();
                    this._Hookname = value;
                    this.SendPropertyChanged("Hookname");
                    this.OnHooknameChanged();
                }
            }
        }

        [Column(Name = @"phpcode", Storage = "_Phpcode", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Phpcode
        {
            get
            {
                return this._Phpcode;
            }
            set
            {
                if (this._Phpcode != value)
                {
                    this.OnPhpcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Phpcode = value;
                    this.SendPropertyChanged("Phpcode");
                    this.OnPhpcodeChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"devkey", Storage = "_Devkey", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Devkey
        {
            get
            {
                return this._Devkey;
            }
            set
            {
                if (this._Devkey != value)
                {
                    this.OnDevkeyChanging(value);
                    this.SendPropertyChanging();
                    this._Devkey = value;
                    this.SendPropertyChanged("Devkey");
                    this.OnDevkeyChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"executionorder", Storage = "_Executionorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Executionorder
        {
            get
            {
                return this._Executionorder;
            }
            set
            {
                if (this._Executionorder != value)
                {
                    this.OnExecutionorderChanging(value);
                    this.SendPropertyChanging();
                    this._Executionorder = value;
                    this.SendPropertyChanged("Executionorder");
                    this.OnExecutionorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.pm")]
    public partial class Pm : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pmid;

        private long _Pmtextid;

        private long _Userid;

        private short _Folderid;

        private int _Messageread;

        private long _Parentpmid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPmidChanging(long value);
        partial void OnPmidChanged();
        partial void OnPmtextidChanging(long value);
        partial void OnPmtextidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFolderidChanging(short value);
        partial void OnFolderidChanged();
        partial void OnMessagereadChanging(int value);
        partial void OnMessagereadChanged();
        partial void OnParentpmidChanging(long value);
        partial void OnParentpmidChanged();
        #endregion

        public Pm()
        {
            OnCreated();
        }

        [Column(Name = @"pmid", Storage = "_Pmid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Pmid
        {
            get
            {
                return this._Pmid;
            }
            set
            {
                if (this._Pmid != value)
                {
                    this.OnPmidChanging(value);
                    this.SendPropertyChanging();
                    this._Pmid = value;
                    this.SendPropertyChanged("Pmid");
                    this.OnPmidChanged();
                }
            }
        }

        [Column(Name = @"pmtextid", Storage = "_Pmtextid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pmtextid
        {
            get
            {
                return this._Pmtextid;
            }
            set
            {
                if (this._Pmtextid != value)
                {
                    this.OnPmtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Pmtextid = value;
                    this.SendPropertyChanged("Pmtextid");
                    this.OnPmtextidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"folderid", Storage = "_Folderid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Folderid
        {
            get
            {
                return this._Folderid;
            }
            set
            {
                if (this._Folderid != value)
                {
                    this.OnFolderidChanging(value);
                    this.SendPropertyChanging();
                    this._Folderid = value;
                    this.SendPropertyChanged("Folderid");
                    this.OnFolderidChanged();
                }
            }
        }

        [Column(Name = @"messageread", Storage = "_Messageread", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Messageread
        {
            get
            {
                return this._Messageread;
            }
            set
            {
                if (this._Messageread != value)
                {
                    this.OnMessagereadChanging(value);
                    this.SendPropertyChanging();
                    this._Messageread = value;
                    this.SendPropertyChanged("Messageread");
                    this.OnMessagereadChanged();
                }
            }
        }

        [Column(Name = @"parentpmid", Storage = "_Parentpmid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Parentpmid
        {
            get
            {
                return this._Parentpmid;
            }
            set
            {
                if (this._Parentpmid != value)
                {
                    this.OnParentpmidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentpmid = value;
                    this.SendPropertyChanged("Parentpmid");
                    this.OnParentpmidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.pmreceipt")]
    public partial class Pmreceipt : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pmid;

        private long _Userid;

        private long _Touserid;

        private string _Tousername;

        private string _Title;

        private long _Sendtime;

        private long _Readtime;

        private int _Denied;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPmidChanging(long value);
        partial void OnPmidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTouseridChanging(long value);
        partial void OnTouseridChanged();
        partial void OnTousernameChanging(string value);
        partial void OnTousernameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnSendtimeChanging(long value);
        partial void OnSendtimeChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        partial void OnDeniedChanging(int value);
        partial void OnDeniedChanged();
        #endregion

        public Pmreceipt()
        {
            OnCreated();
        }

        [Column(Name = @"pmid", Storage = "_Pmid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Pmid
        {
            get
            {
                return this._Pmid;
            }
            set
            {
                if (this._Pmid != value)
                {
                    this.OnPmidChanging(value);
                    this.SendPropertyChanging();
                    this._Pmid = value;
                    this.SendPropertyChanged("Pmid");
                    this.OnPmidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"touserid", Storage = "_Touserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Touserid
        {
            get
            {
                return this._Touserid;
            }
            set
            {
                if (this._Touserid != value)
                {
                    this.OnTouseridChanging(value);
                    this.SendPropertyChanging();
                    this._Touserid = value;
                    this.SendPropertyChanged("Touserid");
                    this.OnTouseridChanged();
                }
            }
        }

        [Column(Name = @"tousername", Storage = "_Tousername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Tousername
        {
            get
            {
                return this._Tousername;
            }
            set
            {
                if (this._Tousername != value)
                {
                    this.OnTousernameChanging(value);
                    this.SendPropertyChanging();
                    this._Tousername = value;
                    this.SendPropertyChanged("Tousername");
                    this.OnTousernameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"sendtime", Storage = "_Sendtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Sendtime
        {
            get
            {
                return this._Sendtime;
            }
            set
            {
                if (this._Sendtime != value)
                {
                    this.OnSendtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Sendtime = value;
                    this.SendPropertyChanged("Sendtime");
                    this.OnSendtimeChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }

        [Column(Name = @"denied", Storage = "_Denied", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Denied
        {
            get
            {
                return this._Denied;
            }
            set
            {
                if (this._Denied != value)
                {
                    this.OnDeniedChanging(value);
                    this.SendPropertyChanging();
                    this._Denied = value;
                    this.SendPropertyChanged("Denied");
                    this.OnDeniedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.pmtext")]
    public partial class Pmtext : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pmtextid;

        private long _Fromuserid;

        private string _Fromusername;

        private string _Title;

        private string _Message;

        private string _Touserarray;

        private int _Iconid;

        private long _Dateline;

        private int _Showsignature;

        private int _Allowsmilie;

        private long _Reportthreadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPmtextidChanging(long value);
        partial void OnPmtextidChanged();
        partial void OnFromuseridChanging(long value);
        partial void OnFromuseridChanged();
        partial void OnFromusernameChanging(string value);
        partial void OnFromusernameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnTouserarrayChanging(string value);
        partial void OnTouserarrayChanged();
        partial void OnIconidChanging(int value);
        partial void OnIconidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnShowsignatureChanging(int value);
        partial void OnShowsignatureChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        #endregion

        public Pmtext()
        {
            OnCreated();
        }

        [Column(Name = @"pmtextid", Storage = "_Pmtextid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Pmtextid
        {
            get
            {
                return this._Pmtextid;
            }
            set
            {
                if (this._Pmtextid != value)
                {
                    this.OnPmtextidChanging(value);
                    this.SendPropertyChanging();
                    this._Pmtextid = value;
                    this.SendPropertyChanged("Pmtextid");
                    this.OnPmtextidChanged();
                }
            }
        }

        [Column(Name = @"fromuserid", Storage = "_Fromuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Fromuserid
        {
            get
            {
                return this._Fromuserid;
            }
            set
            {
                if (this._Fromuserid != value)
                {
                    this.OnFromuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Fromuserid = value;
                    this.SendPropertyChanged("Fromuserid");
                    this.OnFromuseridChanged();
                }
            }
        }

        [Column(Name = @"fromusername", Storage = "_Fromusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Fromusername
        {
            get
            {
                return this._Fromusername;
            }
            set
            {
                if (this._Fromusername != value)
                {
                    this.OnFromusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Fromusername = value;
                    this.SendPropertyChanged("Fromusername");
                    this.OnFromusernameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"message", Storage = "_Message", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

        [Column(Name = @"touserarray", Storage = "_Touserarray", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Touserarray
        {
            get
            {
                return this._Touserarray;
            }
            set
            {
                if (this._Touserarray != value)
                {
                    this.OnTouserarrayChanging(value);
                    this.SendPropertyChanging();
                    this._Touserarray = value;
                    this.SendPropertyChanged("Touserarray");
                    this.OnTouserarrayChanged();
                }
            }
        }

        [Column(Name = @"iconid", Storage = "_Iconid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"showsignature", Storage = "_Showsignature", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Showsignature
        {
            get
            {
                return this._Showsignature;
            }
            set
            {
                if (this._Showsignature != value)
                {
                    this.OnShowsignatureChanging(value);
                    this.SendPropertyChanging();
                    this._Showsignature = value;
                    this.SendPropertyChanged("Showsignature");
                    this.OnShowsignatureChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.pmthrottle")]
    public partial class Pmthrottle : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Pmthrottle()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.podcast")]
    public partial class Podcast : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Forumid;

        private string _Author;

        private string _Category;

        private string _Image;

        private short _Explicit;

        private short _Enabled;

        private string _Keywords;

        private string _Owneremail;

        private string _Ownername;

        private string _Subtitle;

        private string _Summary;

        private short _Categoryid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnForumidChanging(long value);
        partial void OnForumidChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnExplicitChanging(short value);
        partial void OnExplicitChanged();
        partial void OnEnabledChanging(short value);
        partial void OnEnabledChanged();
        partial void OnKeywordsChanging(string value);
        partial void OnKeywordsChanged();
        partial void OnOwneremailChanging(string value);
        partial void OnOwneremailChanged();
        partial void OnOwnernameChanging(string value);
        partial void OnOwnernameChanged();
        partial void OnSubtitleChanging(string value);
        partial void OnSubtitleChanged();
        partial void OnSummaryChanging(string value);
        partial void OnSummaryChanged();
        partial void OnCategoryidChanging(short value);
        partial void OnCategoryidChanged();
        #endregion

        public Podcast()
        {
            OnCreated();
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"author", Storage = "_Author", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

        [Column(Name = @"category", Storage = "_Category", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

        [Column(Name = @"image", Storage = "_Image", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

        [Column(Name = @"explicit", Storage = "_Explicit", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Explicit
        {
            get
            {
                return this._Explicit;
            }
            set
            {
                if (this._Explicit != value)
                {
                    this.OnExplicitChanging(value);
                    this.SendPropertyChanging();
                    this._Explicit = value;
                    this.SendPropertyChanged("Explicit");
                    this.OnExplicitChanged();
                }
            }
        }

        [Column(Name = @"enabled", Storage = "_Enabled", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Enabled
        {
            get
            {
                return this._Enabled;
            }
            set
            {
                if (this._Enabled != value)
                {
                    this.OnEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._Enabled = value;
                    this.SendPropertyChanged("Enabled");
                    this.OnEnabledChanged();
                }
            }
        }

        [Column(Name = @"keywords", Storage = "_Keywords", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Keywords
        {
            get
            {
                return this._Keywords;
            }
            set
            {
                if (this._Keywords != value)
                {
                    this.OnKeywordsChanging(value);
                    this.SendPropertyChanging();
                    this._Keywords = value;
                    this.SendPropertyChanged("Keywords");
                    this.OnKeywordsChanged();
                }
            }
        }

        [Column(Name = @"owneremail", Storage = "_Owneremail", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Owneremail
        {
            get
            {
                return this._Owneremail;
            }
            set
            {
                if (this._Owneremail != value)
                {
                    this.OnOwneremailChanging(value);
                    this.SendPropertyChanging();
                    this._Owneremail = value;
                    this.SendPropertyChanged("Owneremail");
                    this.OnOwneremailChanged();
                }
            }
        }

        [Column(Name = @"ownername", Storage = "_Ownername", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Ownername
        {
            get
            {
                return this._Ownername;
            }
            set
            {
                if (this._Ownername != value)
                {
                    this.OnOwnernameChanging(value);
                    this.SendPropertyChanging();
                    this._Ownername = value;
                    this.SendPropertyChanged("Ownername");
                    this.OnOwnernameChanged();
                }
            }
        }

        [Column(Name = @"subtitle", Storage = "_Subtitle", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Subtitle
        {
            get
            {
                return this._Subtitle;
            }
            set
            {
                if (this._Subtitle != value)
                {
                    this.OnSubtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Subtitle = value;
                    this.SendPropertyChanged("Subtitle");
                    this.OnSubtitleChanged();
                }
            }
        }

        [Column(Name = @"summary", Storage = "_Summary", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Summary
        {
            get
            {
                return this._Summary;
            }
            set
            {
                if (this._Summary != value)
                {
                    this.OnSummaryChanging(value);
                    this.SendPropertyChanging();
                    this._Summary = value;
                    this.SendPropertyChanged("Summary");
                    this.OnSummaryChanged();
                }
            }
        }

        [Column(Name = @"categoryid", Storage = "_Categoryid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.podcastitem")]
    public partial class Podcastitem : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;

        private string _Url;

        private long _Length;

        private int _Explicit;

        private string _Keywords;

        private string _Subtitle;

        private string _Author;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnLengthChanging(long value);
        partial void OnLengthChanged();
        partial void OnExplicitChanging(int value);
        partial void OnExplicitChanged();
        partial void OnKeywordsChanging(string value);
        partial void OnKeywordsChanged();
        partial void OnSubtitleChanging(string value);
        partial void OnSubtitleChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        #endregion

        public Podcastitem()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"length", Storage = "_Length", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Length
        {
            get
            {
                return this._Length;
            }
            set
            {
                if (this._Length != value)
                {
                    this.OnLengthChanging(value);
                    this.SendPropertyChanging();
                    this._Length = value;
                    this.SendPropertyChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }

        [Column(Name = @"explicit", Storage = "_Explicit", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Explicit
        {
            get
            {
                return this._Explicit;
            }
            set
            {
                if (this._Explicit != value)
                {
                    this.OnExplicitChanging(value);
                    this.SendPropertyChanging();
                    this._Explicit = value;
                    this.SendPropertyChanged("Explicit");
                    this.OnExplicitChanged();
                }
            }
        }

        [Column(Name = @"keywords", Storage = "_Keywords", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Keywords
        {
            get
            {
                return this._Keywords;
            }
            set
            {
                if (this._Keywords != value)
                {
                    this.OnKeywordsChanging(value);
                    this.SendPropertyChanging();
                    this._Keywords = value;
                    this.SendPropertyChanged("Keywords");
                    this.OnKeywordsChanged();
                }
            }
        }

        [Column(Name = @"subtitle", Storage = "_Subtitle", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Subtitle
        {
            get
            {
                return this._Subtitle;
            }
            set
            {
                if (this._Subtitle != value)
                {
                    this.OnSubtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Subtitle = value;
                    this.SendPropertyChanged("Subtitle");
                    this.OnSubtitleChanged();
                }
            }
        }

        [Column(Name = @"author", Storage = "_Author", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.poll")]
    public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pollid;

        private string _Question;

        private long _Dateline;

        private string _Options;

        private string _Votes;

        private short _Active;

        private int _Numberoptions;

        private int _Timeout;

        private int _Multiple;

        private int _Voters;

        private short _Public;

        private long _Lastvote;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPollidChanging(long value);
        partial void OnPollidChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnOptionsChanging(string value);
        partial void OnOptionsChanged();
        partial void OnVotesChanging(string value);
        partial void OnVotesChanged();
        partial void OnActiveChanging(short value);
        partial void OnActiveChanged();
        partial void OnNumberoptionsChanging(int value);
        partial void OnNumberoptionsChanged();
        partial void OnTimeoutChanging(int value);
        partial void OnTimeoutChanged();
        partial void OnMultipleChanging(int value);
        partial void OnMultipleChanged();
        partial void OnVotersChanging(int value);
        partial void OnVotersChanged();
        partial void OnPublicChanging(short value);
        partial void OnPublicChanged();
        partial void OnLastvoteChanging(long value);
        partial void OnLastvoteChanged();
        #endregion

        public Poll()
        {
            OnCreated();
        }

        [Column(Name = @"pollid", Storage = "_Pollid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"question", Storage = "_Question", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Question
        {
            get
            {
                return this._Question;
            }
            set
            {
                if (this._Question != value)
                {
                    this.OnQuestionChanging(value);
                    this.SendPropertyChanging();
                    this._Question = value;
                    this.SendPropertyChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"votes", Storage = "_Votes", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Votes
        {
            get
            {
                return this._Votes;
            }
            set
            {
                if (this._Votes != value)
                {
                    this.OnVotesChanging(value);
                    this.SendPropertyChanging();
                    this._Votes = value;
                    this.SendPropertyChanged("Votes");
                    this.OnVotesChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"numberoptions", Storage = "_Numberoptions", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Numberoptions
        {
            get
            {
                return this._Numberoptions;
            }
            set
            {
                if (this._Numberoptions != value)
                {
                    this.OnNumberoptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Numberoptions = value;
                    this.SendPropertyChanged("Numberoptions");
                    this.OnNumberoptionsChanged();
                }
            }
        }

        [Column(Name = @"timeout", Storage = "_Timeout", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Timeout
        {
            get
            {
                return this._Timeout;
            }
            set
            {
                if (this._Timeout != value)
                {
                    this.OnTimeoutChanging(value);
                    this.SendPropertyChanging();
                    this._Timeout = value;
                    this.SendPropertyChanged("Timeout");
                    this.OnTimeoutChanged();
                }
            }
        }

        [Column(Name = @"multiple", Storage = "_Multiple", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Multiple
        {
            get
            {
                return this._Multiple;
            }
            set
            {
                if (this._Multiple != value)
                {
                    this.OnMultipleChanging(value);
                    this.SendPropertyChanging();
                    this._Multiple = value;
                    this.SendPropertyChanged("Multiple");
                    this.OnMultipleChanged();
                }
            }
        }

        [Column(Name = @"voters", Storage = "_Voters", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Voters
        {
            get
            {
                return this._Voters;
            }
            set
            {
                if (this._Voters != value)
                {
                    this.OnVotersChanging(value);
                    this.SendPropertyChanging();
                    this._Voters = value;
                    this.SendPropertyChanged("Voters");
                    this.OnVotersChanged();
                }
            }
        }

        [Column(Name = @"public", Storage = "_Public", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Public
        {
            get
            {
                return this._Public;
            }
            set
            {
                if (this._Public != value)
                {
                    this.OnPublicChanging(value);
                    this.SendPropertyChanging();
                    this._Public = value;
                    this.SendPropertyChanged("Public");
                    this.OnPublicChanged();
                }
            }
        }

        [Column(Name = @"lastvote", Storage = "_Lastvote", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastvote
        {
            get
            {
                return this._Lastvote;
            }
            set
            {
                if (this._Lastvote != value)
                {
                    this.OnLastvoteChanging(value);
                    this.SendPropertyChanging();
                    this._Lastvote = value;
                    this.SendPropertyChanged("Lastvote");
                    this.OnLastvoteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.pollvote")]
    public partial class Pollvote : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Pollvoteid;

        private long _Pollid;

        private System.Nullable<long> _Userid;

        private long _Votedate;

        private long _Voteoption;

        private long _Votetype;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPollvoteidChanging(long value);
        partial void OnPollvoteidChanged();
        partial void OnPollidChanging(long value);
        partial void OnPollidChanged();
        partial void OnUseridChanging(System.Nullable<long> value);
        partial void OnUseridChanged();
        partial void OnVotedateChanging(long value);
        partial void OnVotedateChanged();
        partial void OnVoteoptionChanging(long value);
        partial void OnVoteoptionChanged();
        partial void OnVotetypeChanging(long value);
        partial void OnVotetypeChanged();
        #endregion

        public Pollvote()
        {
            OnCreated();
        }

        [Column(Name = @"pollvoteid", Storage = "_Pollvoteid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Pollvoteid
        {
            get
            {
                return this._Pollvoteid;
            }
            set
            {
                if (this._Pollvoteid != value)
                {
                    this.OnPollvoteidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollvoteid = value;
                    this.SendPropertyChanged("Pollvoteid");
                    this.OnPollvoteidChanged();
                }
            }
        }

        [Column(Name = @"pollid", Storage = "_Pollid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", DbType = "int(10)")]
        public System.Nullable<long> Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"votedate", Storage = "_Votedate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Votedate
        {
            get
            {
                return this._Votedate;
            }
            set
            {
                if (this._Votedate != value)
                {
                    this.OnVotedateChanging(value);
                    this.SendPropertyChanging();
                    this._Votedate = value;
                    this.SendPropertyChanged("Votedate");
                    this.OnVotedateChanged();
                }
            }
        }

        [Column(Name = @"voteoption", Storage = "_Voteoption", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Voteoption
        {
            get
            {
                return this._Voteoption;
            }
            set
            {
                if (this._Voteoption != value)
                {
                    this.OnVoteoptionChanging(value);
                    this.SendPropertyChanging();
                    this._Voteoption = value;
                    this.SendPropertyChanged("Voteoption");
                    this.OnVoteoptionChanged();
                }
            }
        }

        [Column(Name = @"votetype", Storage = "_Votetype", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Votetype
        {
            get
            {
                return this._Votetype;
            }
            set
            {
                if (this._Votetype != value)
                {
                    this.OnVotetypeChanging(value);
                    this.SendPropertyChanging();
                    this._Votetype = value;
                    this.SendPropertyChanged("Votetype");
                    this.OnVotetypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.post")]
    public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;

        private long _Threadid;

        private long _Parentid;

        private string _Username;

        private long _Userid;

        private string _Title;

        private long _Dateline;

        private string _Pagetext;

        private short _Allowsmilie;

        private short _Showsignature;

        private string _Ipaddress;

        private int _Iconid;

        private short _Visible;

        private int _Attach;

        private int _Infraction;

        private long _Reportthreadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnParentidChanging(long value);
        partial void OnParentidChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnAllowsmilieChanging(short value);
        partial void OnAllowsmilieChanged();
        partial void OnShowsignatureChanging(short value);
        partial void OnShowsignatureChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        partial void OnIconidChanging(int value);
        partial void OnIconidChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnAttachChanging(int value);
        partial void OnAttachChanged();
        partial void OnInfractionChanging(int value);
        partial void OnInfractionChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        #endregion

        public Post()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"showsignature", Storage = "_Showsignature", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Showsignature
        {
            get
            {
                return this._Showsignature;
            }
            set
            {
                if (this._Showsignature != value)
                {
                    this.OnShowsignatureChanging(value);
                    this.SendPropertyChanging();
                    this._Showsignature = value;
                    this.SendPropertyChanged("Showsignature");
                    this.OnShowsignatureChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"iconid", Storage = "_Iconid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"attach", Storage = "_Attach", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Attach
        {
            get
            {
                return this._Attach;
            }
            set
            {
                if (this._Attach != value)
                {
                    this.OnAttachChanging(value);
                    this.SendPropertyChanging();
                    this._Attach = value;
                    this.SendPropertyChanged("Attach");
                    this.OnAttachChanged();
                }
            }
        }

        [Column(Name = @"infraction", Storage = "_Infraction", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Infraction
        {
            get
            {
                return this._Infraction;
            }
            set
            {
                if (this._Infraction != value)
                {
                    this.OnInfractionChanging(value);
                    this.SendPropertyChanging();
                    this._Infraction = value;
                    this.SendPropertyChanged("Infraction");
                    this.OnInfractionChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.postedithistory")]
    public partial class Postedithistory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postedithistoryid;

        private long _Postid;

        private long _Userid;

        private string _Username;

        private string _Title;

        private long _Iconid;

        private long _Dateline;

        private string _Reason;

        private short _Original;

        private string _Pagetext;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostedithistoryidChanging(long value);
        partial void OnPostedithistoryidChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnIconidChanging(long value);
        partial void OnIconidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnOriginalChanging(short value);
        partial void OnOriginalChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        #endregion

        public Postedithistory()
        {
            OnCreated();
        }

        [Column(Name = @"postedithistoryid", Storage = "_Postedithistoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Postedithistoryid
        {
            get
            {
                return this._Postedithistoryid;
            }
            set
            {
                if (this._Postedithistoryid != value)
                {
                    this.OnPostedithistoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Postedithistoryid = value;
                    this.SendPropertyChanged("Postedithistoryid");
                    this.OnPostedithistoryidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"iconid", Storage = "_Iconid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(200) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"original", Storage = "_Original", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Original
        {
            get
            {
                return this._Original;
            }
            set
            {
                if (this._Original != value)
                {
                    this.OnOriginalChanging(value);
                    this.SendPropertyChanging();
                    this._Original = value;
                    this.SendPropertyChanged("Original");
                    this.OnOriginalChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.posthash")]
    public partial class Posthash : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Threadid;

        private long _Postid;

        private string _Dupehash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnDupehashChanging(string value);
        partial void OnDupehashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Posthash()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"dupehash", Storage = "_Dupehash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Dupehash
        {
            get
            {
                return this._Dupehash;
            }
            set
            {
                if (this._Dupehash != value)
                {
                    this.OnDupehashChanging(value);
                    this.SendPropertyChanging();
                    this._Dupehash = value;
                    this.SendPropertyChanged("Dupehash");
                    this.OnDupehashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.postlog")]
    public partial class Postlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;

        private string _Useragent;

        private long _Ip;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUseragentChanging(string value);
        partial void OnUseragentChanged();
        partial void OnIpChanging(long value);
        partial void OnIpChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Postlog()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"useragent", Storage = "_Useragent", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Useragent
        {
            get
            {
                return this._Useragent;
            }
            set
            {
                if (this._Useragent != value)
                {
                    this.OnUseragentChanging(value);
                    this.SendPropertyChanging();
                    this._Useragent = value;
                    this.SendPropertyChanged("Useragent");
                    this.OnUseragentChanged();
                }
            }
        }

        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging();
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.postparsed")]
    public partial class Postparsed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;

        private long _Dateline;

        private int _Styleid;

        private int _Languageid;

        private short _Hasimages;

        private string _Pagetexthtml;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnHasimagesChanging(short value);
        partial void OnHasimagesChanged();
        partial void OnPagetexthtmlChanging(string value);
        partial void OnPagetexthtmlChanged();
        #endregion

        public Postparsed()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"hasimages", Storage = "_Hasimages", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Hasimages
        {
            get
            {
                return this._Hasimages;
            }
            set
            {
                if (this._Hasimages != value)
                {
                    this.OnHasimagesChanging(value);
                    this.SendPropertyChanging();
                    this._Hasimages = value;
                    this.SendPropertyChanged("Hasimages");
                    this.OnHasimagesChanged();
                }
            }
        }

        [Column(Name = @"pagetext_html", Storage = "_Pagetexthtml", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetexthtml
        {
            get
            {
                return this._Pagetexthtml;
            }
            set
            {
                if (this._Pagetexthtml != value)
                {
                    this.OnPagetexthtmlChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetexthtml = value;
                    this.SendPropertyChanged("Pagetexthtml");
                    this.OnPagetexthtmlChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.prefix")]
    public partial class Prefix : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Prefixid;

        private string _Prefixsetid;

        private long _Displayorder;

        private long _Options;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrefixidChanging(string value);
        partial void OnPrefixidChanged();
        partial void OnPrefixsetidChanging(string value);
        partial void OnPrefixsetidChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        #endregion

        public Prefix()
        {
            OnCreated();
        }

        [Column(Name = @"prefixid", Storage = "_Prefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL", IsPrimaryKey = true)]
        public string Prefixid
        {
            get
            {
                return this._Prefixid;
            }
            set
            {
                if (this._Prefixid != value)
                {
                    this.OnPrefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixid = value;
                    this.SendPropertyChanged("Prefixid");
                    this.OnPrefixidChanged();
                }
            }
        }

        [Column(Name = @"prefixsetid", Storage = "_Prefixsetid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Prefixsetid
        {
            get
            {
                return this._Prefixsetid;
            }
            set
            {
                if (this._Prefixsetid != value)
                {
                    this.OnPrefixsetidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixsetid = value;
                    this.SendPropertyChanged("Prefixsetid");
                    this.OnPrefixsetidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.prefixpermission")]
    public partial class Prefixpermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Prefixid;

        private int _Usergroupid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrefixidChanging(string value);
        partial void OnPrefixidChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        #endregion

        public Prefixpermission()
        {
            OnCreated();
        }

        [Column(Name = @"prefixid", Storage = "_Prefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Prefixid
        {
            get
            {
                return this._Prefixid;
            }
            set
            {
                if (this._Prefixid != value)
                {
                    this.OnPrefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixid = value;
                    this.SendPropertyChanged("Prefixid");
                    this.OnPrefixidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.prefixset")]
    public partial class Prefixset : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Prefixsetid;

        private long _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPrefixsetidChanging(string value);
        partial void OnPrefixsetidChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        #endregion

        public Prefixset()
        {
            OnCreated();
        }

        [Column(Name = @"prefixsetid", Storage = "_Prefixsetid", CanBeNull = false, DbType = "varchar(25) NOT NULL", IsPrimaryKey = true)]
        public string Prefixsetid
        {
            get
            {
                return this._Prefixsetid;
            }
            set
            {
                if (this._Prefixsetid != value)
                {
                    this.OnPrefixsetidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixsetid = value;
                    this.SendPropertyChanged("Prefixsetid");
                    this.OnPrefixsetidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Productid;

        private string _Title;

        private string _Description;

        private string _Version;

        private int _Active;

        private string _Url;

        private string _Versioncheckurl;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductidChanging(string value);
        partial void OnProductidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        partial void OnActiveChanging(int value);
        partial void OnActiveChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnVersioncheckurlChanging(string value);
        partial void OnVersioncheckurlChanged();
        #endregion

        public Product()
        {
            OnCreated();
        }

        [Column(Name = @"productid", Storage = "_Productid", CanBeNull = false, DbType = "varchar(25) NOT NULL", IsPrimaryKey = true)]
        public string Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"versioncheckurl", Storage = "_Versioncheckurl", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Versioncheckurl
        {
            get
            {
                return this._Versioncheckurl;
            }
            set
            {
                if (this._Versioncheckurl != value)
                {
                    this.OnVersioncheckurlChanging(value);
                    this.SendPropertyChanging();
                    this._Versioncheckurl = value;
                    this.SendPropertyChanged("Versioncheckurl");
                    this.OnVersioncheckurlChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.productcode")]
    public partial class Productcode : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Productcodeid;

        private string _Productid;

        private string _Version;

        private string _Installcode;

        private string _Uninstallcode;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductcodeidChanging(long value);
        partial void OnProductcodeidChanged();
        partial void OnProductidChanging(string value);
        partial void OnProductidChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        partial void OnInstallcodeChanging(string value);
        partial void OnInstallcodeChanged();
        partial void OnUninstallcodeChanging(string value);
        partial void OnUninstallcodeChanged();
        #endregion

        public Productcode()
        {
            OnCreated();
        }

        [Column(Name = @"productcodeid", Storage = "_Productcodeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Productcodeid
        {
            get
            {
                return this._Productcodeid;
            }
            set
            {
                if (this._Productcodeid != value)
                {
                    this.OnProductcodeidChanging(value);
                    this.SendPropertyChanging();
                    this._Productcodeid = value;
                    this.SendPropertyChanged("Productcodeid");
                    this.OnProductcodeidChanged();
                }
            }
        }

        [Column(Name = @"productid", Storage = "_Productid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

        [Column(Name = @"installcode", Storage = "_Installcode", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Installcode
        {
            get
            {
                return this._Installcode;
            }
            set
            {
                if (this._Installcode != value)
                {
                    this.OnInstallcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Installcode = value;
                    this.SendPropertyChanged("Installcode");
                    this.OnInstallcodeChanged();
                }
            }
        }

        [Column(Name = @"uninstallcode", Storage = "_Uninstallcode", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Uninstallcode
        {
            get
            {
                return this._Uninstallcode;
            }
            set
            {
                if (this._Uninstallcode != value)
                {
                    this.OnUninstallcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Uninstallcode = value;
                    this.SendPropertyChanged("Uninstallcode");
                    this.OnUninstallcodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.productdependency")]
    public partial class Productdependency : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Productdependencyid;

        private string _Productid;

        private string _Dependencytype;

        private string _Parentproductid;

        private string _Minversion;

        private string _Maxversion;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductdependencyidChanging(int value);
        partial void OnProductdependencyidChanged();
        partial void OnProductidChanging(string value);
        partial void OnProductidChanged();
        partial void OnDependencytypeChanging(string value);
        partial void OnDependencytypeChanged();
        partial void OnParentproductidChanging(string value);
        partial void OnParentproductidChanged();
        partial void OnMinversionChanging(string value);
        partial void OnMinversionChanged();
        partial void OnMaxversionChanging(string value);
        partial void OnMaxversionChanged();
        #endregion

        public Productdependency()
        {
            OnCreated();
        }

        [Column(Name = @"productdependencyid", Storage = "_Productdependencyid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Productdependencyid
        {
            get
            {
                return this._Productdependencyid;
            }
            set
            {
                if (this._Productdependencyid != value)
                {
                    this.OnProductdependencyidChanging(value);
                    this.SendPropertyChanging();
                    this._Productdependencyid = value;
                    this.SendPropertyChanged("Productdependencyid");
                    this.OnProductdependencyidChanged();
                }
            }
        }

        [Column(Name = @"productid", Storage = "_Productid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

        [Column(Name = @"dependencytype", Storage = "_Dependencytype", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Dependencytype
        {
            get
            {
                return this._Dependencytype;
            }
            set
            {
                if (this._Dependencytype != value)
                {
                    this.OnDependencytypeChanging(value);
                    this.SendPropertyChanging();
                    this._Dependencytype = value;
                    this.SendPropertyChanged("Dependencytype");
                    this.OnDependencytypeChanged();
                }
            }
        }

        [Column(Name = @"parentproductid", Storage = "_Parentproductid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Parentproductid
        {
            get
            {
                return this._Parentproductid;
            }
            set
            {
                if (this._Parentproductid != value)
                {
                    this.OnParentproductidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentproductid = value;
                    this.SendPropertyChanged("Parentproductid");
                    this.OnParentproductidChanged();
                }
            }
        }

        [Column(Name = @"minversion", Storage = "_Minversion", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Minversion
        {
            get
            {
                return this._Minversion;
            }
            set
            {
                if (this._Minversion != value)
                {
                    this.OnMinversionChanging(value);
                    this.SendPropertyChanging();
                    this._Minversion = value;
                    this.SendPropertyChanged("Minversion");
                    this.OnMinversionChanged();
                }
            }
        }

        [Column(Name = @"maxversion", Storage = "_Maxversion", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Maxversion
        {
            get
            {
                return this._Maxversion;
            }
            set
            {
                if (this._Maxversion != value)
                {
                    this.OnMaxversionChanging(value);
                    this.SendPropertyChanging();
                    this._Maxversion = value;
                    this.SendPropertyChanged("Maxversion");
                    this.OnMaxversionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.profileblockprivacy")]
    public partial class Profileblockprivacy : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Blockid;

        private int _Requirement;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnBlockidChanging(string value);
        partial void OnBlockidChanged();
        partial void OnRequirementChanging(int value);
        partial void OnRequirementChanged();
        #endregion

        public Profileblockprivacy()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"blockid", Storage = "_Blockid", CanBeNull = false, DbType = "varchar(255) NOT NULL", IsPrimaryKey = true)]
        public string Blockid
        {
            get
            {
                return this._Blockid;
            }
            set
            {
                if (this._Blockid != value)
                {
                    this.OnBlockidChanging(value);
                    this.SendPropertyChanging();
                    this._Blockid = value;
                    this.SendPropertyChanged("Blockid");
                    this.OnBlockidChanged();
                }
            }
        }

        [Column(Name = @"requirement", Storage = "_Requirement", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Requirement
        {
            get
            {
                return this._Requirement;
            }
            set
            {
                if (this._Requirement != value)
                {
                    this.OnRequirementChanging(value);
                    this.SendPropertyChanging();
                    this._Requirement = value;
                    this.SendPropertyChanged("Requirement");
                    this.OnRequirementChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.profilefield")]
    public partial class Profilefield : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Profilefieldid;

        private int _Profilefieldcategoryid;

        private short _Required;

        private short _Hidden;

        private short _Maxlength;

        private short _Size;

        private short _Displayorder;

        private short _Editable;

        private string _Type;

        private string _Data;

        private short _Height;

        private short _Def;

        private int _Optional;

        private short _Searchable;

        private short _Memberlist;

        private string _Regex;

        private short _Form;

        private short _Html;

        private short _Perline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProfilefieldidChanging(int value);
        partial void OnProfilefieldidChanged();
        partial void OnProfilefieldcategoryidChanging(int value);
        partial void OnProfilefieldcategoryidChanged();
        partial void OnRequiredChanging(short value);
        partial void OnRequiredChanged();
        partial void OnHiddenChanging(short value);
        partial void OnHiddenChanged();
        partial void OnMaxlengthChanging(short value);
        partial void OnMaxlengthChanged();
        partial void OnSizeChanging(short value);
        partial void OnSizeChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        partial void OnEditableChanging(short value);
        partial void OnEditableChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnHeightChanging(short value);
        partial void OnHeightChanged();
        partial void OnDefChanging(short value);
        partial void OnDefChanged();
        partial void OnOptionalChanging(int value);
        partial void OnOptionalChanged();
        partial void OnSearchableChanging(short value);
        partial void OnSearchableChanged();
        partial void OnMemberlistChanging(short value);
        partial void OnMemberlistChanged();
        partial void OnRegexChanging(string value);
        partial void OnRegexChanged();
        partial void OnFormChanging(short value);
        partial void OnFormChanged();
        partial void OnHtmlChanging(short value);
        partial void OnHtmlChanged();
        partial void OnPerlineChanging(short value);
        partial void OnPerlineChanged();
        #endregion

        public Profilefield()
        {
            OnCreated();
        }

        [Column(Name = @"profilefieldid", Storage = "_Profilefieldid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Profilefieldid
        {
            get
            {
                return this._Profilefieldid;
            }
            set
            {
                if (this._Profilefieldid != value)
                {
                    this.OnProfilefieldidChanging(value);
                    this.SendPropertyChanging();
                    this._Profilefieldid = value;
                    this.SendPropertyChanged("Profilefieldid");
                    this.OnProfilefieldidChanged();
                }
            }
        }

        [Column(Name = @"profilefieldcategoryid", Storage = "_Profilefieldcategoryid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Profilefieldcategoryid
        {
            get
            {
                return this._Profilefieldcategoryid;
            }
            set
            {
                if (this._Profilefieldcategoryid != value)
                {
                    this.OnProfilefieldcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Profilefieldcategoryid = value;
                    this.SendPropertyChanged("Profilefieldcategoryid");
                    this.OnProfilefieldcategoryidChanged();
                }
            }
        }

        [Column(Name = @"required", Storage = "_Required", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Required
        {
            get
            {
                return this._Required;
            }
            set
            {
                if (this._Required != value)
                {
                    this.OnRequiredChanging(value);
                    this.SendPropertyChanging();
                    this._Required = value;
                    this.SendPropertyChanged("Required");
                    this.OnRequiredChanged();
                }
            }
        }

        [Column(Name = @"hidden", Storage = "_Hidden", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Hidden
        {
            get
            {
                return this._Hidden;
            }
            set
            {
                if (this._Hidden != value)
                {
                    this.OnHiddenChanging(value);
                    this.SendPropertyChanging();
                    this._Hidden = value;
                    this.SendPropertyChanged("Hidden");
                    this.OnHiddenChanged();
                }
            }
        }

        [Column(Name = @"maxlength", Storage = "_Maxlength", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Maxlength
        {
            get
            {
                return this._Maxlength;
            }
            set
            {
                if (this._Maxlength != value)
                {
                    this.OnMaxlengthChanging(value);
                    this.SendPropertyChanging();
                    this._Maxlength = value;
                    this.SendPropertyChanged("Maxlength");
                    this.OnMaxlengthChanged();
                }
            }
        }

        [Column(Name = @"size", Storage = "_Size", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging();
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"editable", Storage = "_Editable", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Editable
        {
            get
            {
                return this._Editable;
            }
            set
            {
                if (this._Editable != value)
                {
                    this.OnEditableChanging(value);
                    this.SendPropertyChanging();
                    this._Editable = value;
                    this.SendPropertyChanged("Editable");
                    this.OnEditableChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"data", Storage = "_Data", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"def", Storage = "_Def", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Def
        {
            get
            {
                return this._Def;
            }
            set
            {
                if (this._Def != value)
                {
                    this.OnDefChanging(value);
                    this.SendPropertyChanging();
                    this._Def = value;
                    this.SendPropertyChanged("Def");
                    this.OnDefChanged();
                }
            }
        }

        [Column(Name = @"optional", Storage = "_Optional", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Optional
        {
            get
            {
                return this._Optional;
            }
            set
            {
                if (this._Optional != value)
                {
                    this.OnOptionalChanging(value);
                    this.SendPropertyChanging();
                    this._Optional = value;
                    this.SendPropertyChanged("Optional");
                    this.OnOptionalChanged();
                }
            }
        }

        [Column(Name = @"searchable", Storage = "_Searchable", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Searchable
        {
            get
            {
                return this._Searchable;
            }
            set
            {
                if (this._Searchable != value)
                {
                    this.OnSearchableChanging(value);
                    this.SendPropertyChanging();
                    this._Searchable = value;
                    this.SendPropertyChanged("Searchable");
                    this.OnSearchableChanged();
                }
            }
        }

        [Column(Name = @"memberlist", Storage = "_Memberlist", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Memberlist
        {
            get
            {
                return this._Memberlist;
            }
            set
            {
                if (this._Memberlist != value)
                {
                    this.OnMemberlistChanging(value);
                    this.SendPropertyChanging();
                    this._Memberlist = value;
                    this.SendPropertyChanged("Memberlist");
                    this.OnMemberlistChanged();
                }
            }
        }

        [Column(Name = @"regex", Storage = "_Regex", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Regex
        {
            get
            {
                return this._Regex;
            }
            set
            {
                if (this._Regex != value)
                {
                    this.OnRegexChanging(value);
                    this.SendPropertyChanging();
                    this._Regex = value;
                    this.SendPropertyChanged("Regex");
                    this.OnRegexChanged();
                }
            }
        }

        [Column(Name = @"form", Storage = "_Form", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Form
        {
            get
            {
                return this._Form;
            }
            set
            {
                if (this._Form != value)
                {
                    this.OnFormChanging(value);
                    this.SendPropertyChanging();
                    this._Form = value;
                    this.SendPropertyChanged("Form");
                    this.OnFormChanged();
                }
            }
        }

        [Column(Name = @"html", Storage = "_Html", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Html
        {
            get
            {
                return this._Html;
            }
            set
            {
                if (this._Html != value)
                {
                    this.OnHtmlChanging(value);
                    this.SendPropertyChanging();
                    this._Html = value;
                    this.SendPropertyChanged("Html");
                    this.OnHtmlChanged();
                }
            }
        }

        [Column(Name = @"perline", Storage = "_Perline", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Perline
        {
            get
            {
                return this._Perline;
            }
            set
            {
                if (this._Perline != value)
                {
                    this.OnPerlineChanging(value);
                    this.SendPropertyChanging();
                    this._Perline = value;
                    this.SendPropertyChanged("Perline");
                    this.OnPerlineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.profilefieldcategory")]
    public partial class Profilefieldcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Profilefieldcategoryid;

        private short _Displayorder;

        private string _Location;

        private int _Allowprivacy;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProfilefieldcategoryidChanging(int value);
        partial void OnProfilefieldcategoryidChanged();
        partial void OnDisplayorderChanging(short value);
        partial void OnDisplayorderChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnAllowprivacyChanging(int value);
        partial void OnAllowprivacyChanged();
        #endregion

        public Profilefieldcategory()
        {
            OnCreated();
        }

        [Column(Name = @"profilefieldcategoryid", Storage = "_Profilefieldcategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Profilefieldcategoryid
        {
            get
            {
                return this._Profilefieldcategoryid;
            }
            set
            {
                if (this._Profilefieldcategoryid != value)
                {
                    this.OnProfilefieldcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Profilefieldcategoryid = value;
                    this.SendPropertyChanged("Profilefieldcategoryid");
                    this.OnProfilefieldcategoryidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"location", Storage = "_Location", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

        [Column(Name = @"allowprivacy", Storage = "_Allowprivacy", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowprivacy
        {
            get
            {
                return this._Allowprivacy;
            }
            set
            {
                if (this._Allowprivacy != value)
                {
                    this.OnAllowprivacyChanging(value);
                    this.SendPropertyChanging();
                    this._Allowprivacy = value;
                    this.SendPropertyChanged("Allowprivacy");
                    this.OnAllowprivacyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.profilevisitor")]
    public partial class Profilevisitor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Visitorid;

        private long _Dateline;

        private long _Visible;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnVisitoridChanging(long value);
        partial void OnVisitoridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnVisibleChanging(long value);
        partial void OnVisibleChanged();
        #endregion

        public Profilevisitor()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"visitorid", Storage = "_Visitorid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Visitorid
        {
            get
            {
                return this._Visitorid;
            }
            set
            {
                if (this._Visitorid != value)
                {
                    this.OnVisitoridChanging(value);
                    this.SendPropertyChanging();
                    this._Visitorid = value;
                    this.SendPropertyChanged("Visitorid");
                    this.OnVisitoridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.ranks")]
    public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Rankid;

        private long _Minposts;

        private int _Ranklevel;

        private string _Rankimg;

        private int _Usergroupid;

        private int _Type;

        private int _Stack;

        private int _Display;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRankidChanging(int value);
        partial void OnRankidChanged();
        partial void OnMinpostsChanging(long value);
        partial void OnMinpostsChanged();
        partial void OnRanklevelChanging(int value);
        partial void OnRanklevelChanged();
        partial void OnRankimgChanging(string value);
        partial void OnRankimgChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnStackChanging(int value);
        partial void OnStackChanged();
        partial void OnDisplayChanging(int value);
        partial void OnDisplayChanged();
        #endregion

        public Rank()
        {
            OnCreated();
        }

        [Column(Name = @"rankid", Storage = "_Rankid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Rankid
        {
            get
            {
                return this._Rankid;
            }
            set
            {
                if (this._Rankid != value)
                {
                    this.OnRankidChanging(value);
                    this.SendPropertyChanging();
                    this._Rankid = value;
                    this.SendPropertyChanged("Rankid");
                    this.OnRankidChanged();
                }
            }
        }

        [Column(Name = @"minposts", Storage = "_Minposts", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Minposts
        {
            get
            {
                return this._Minposts;
            }
            set
            {
                if (this._Minposts != value)
                {
                    this.OnMinpostsChanging(value);
                    this.SendPropertyChanging();
                    this._Minposts = value;
                    this.SendPropertyChanged("Minposts");
                    this.OnMinpostsChanged();
                }
            }
        }

        [Column(Name = @"ranklevel", Storage = "_Ranklevel", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Ranklevel
        {
            get
            {
                return this._Ranklevel;
            }
            set
            {
                if (this._Ranklevel != value)
                {
                    this.OnRanklevelChanging(value);
                    this.SendPropertyChanging();
                    this._Ranklevel = value;
                    this.SendPropertyChanged("Ranklevel");
                    this.OnRanklevelChanged();
                }
            }
        }

        [Column(Name = @"rankimg", Storage = "_Rankimg", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Rankimg
        {
            get
            {
                return this._Rankimg;
            }
            set
            {
                if (this._Rankimg != value)
                {
                    this.OnRankimgChanging(value);
                    this.SendPropertyChanging();
                    this._Rankimg = value;
                    this.SendPropertyChanged("Rankimg");
                    this.OnRankimgChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"stack", Storage = "_Stack", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Stack
        {
            get
            {
                return this._Stack;
            }
            set
            {
                if (this._Stack != value)
                {
                    this.OnStackChanging(value);
                    this.SendPropertyChanging();
                    this._Stack = value;
                    this.SendPropertyChanged("Stack");
                    this.OnStackChanged();
                }
            }
        }

        [Column(Name = @"display", Storage = "_Display", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Display
        {
            get
            {
                return this._Display;
            }
            set
            {
                if (this._Display != value)
                {
                    this.OnDisplayChanging(value);
                    this.SendPropertyChanging();
                    this._Display = value;
                    this.SendPropertyChanged("Display");
                    this.OnDisplayChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.reminder")]
    public partial class Reminder : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Reminderid;

        private long _Userid;

        private string _Title;

        private string _Text;

        private long _Duedate;

        private int _Adminonly;

        private long _Completedby;

        private long _Completedtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReminderidChanging(long value);
        partial void OnReminderidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnDuedateChanging(long value);
        partial void OnDuedateChanged();
        partial void OnAdminonlyChanging(int value);
        partial void OnAdminonlyChanged();
        partial void OnCompletedbyChanging(long value);
        partial void OnCompletedbyChanged();
        partial void OnCompletedtimeChanging(long value);
        partial void OnCompletedtimeChanged();
        #endregion

        public Reminder()
        {
            OnCreated();
        }

        [Column(Name = @"reminderid", Storage = "_Reminderid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Reminderid
        {
            get
            {
                return this._Reminderid;
            }
            set
            {
                if (this._Reminderid != value)
                {
                    this.OnReminderidChanging(value);
                    this.SendPropertyChanging();
                    this._Reminderid = value;
                    this.SendPropertyChanged("Reminderid");
                    this.OnReminderidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"text", Storage = "_Text", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        [Column(Name = @"duedate", Storage = "_Duedate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Duedate
        {
            get
            {
                return this._Duedate;
            }
            set
            {
                if (this._Duedate != value)
                {
                    this.OnDuedateChanging(value);
                    this.SendPropertyChanging();
                    this._Duedate = value;
                    this.SendPropertyChanged("Duedate");
                    this.OnDuedateChanged();
                }
            }
        }

        [Column(Name = @"adminonly", Storage = "_Adminonly", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Adminonly
        {
            get
            {
                return this._Adminonly;
            }
            set
            {
                if (this._Adminonly != value)
                {
                    this.OnAdminonlyChanging(value);
                    this.SendPropertyChanging();
                    this._Adminonly = value;
                    this.SendPropertyChanged("Adminonly");
                    this.OnAdminonlyChanged();
                }
            }
        }

        [Column(Name = @"completedby", Storage = "_Completedby", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Completedby
        {
            get
            {
                return this._Completedby;
            }
            set
            {
                if (this._Completedby != value)
                {
                    this.OnCompletedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Completedby = value;
                    this.SendPropertyChanged("Completedby");
                    this.OnCompletedbyChanged();
                }
            }
        }

        [Column(Name = @"completedtime", Storage = "_Completedtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Completedtime
        {
            get
            {
                return this._Completedtime;
            }
            set
            {
                if (this._Completedtime != value)
                {
                    this.OnCompletedtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Completedtime = value;
                    this.SendPropertyChanged("Completedtime");
                    this.OnCompletedtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.reputation")]
    public partial class Reputation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Reputationid;

        private long _Postid;

        private long _Userid;

        private int _Reputation1;

        private long _Whoadded;

        private string _Reason;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReputationidChanging(long value);
        partial void OnReputationidChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnReputation1Changing(int value);
        partial void OnReputation1Changed();
        partial void OnWhoaddedChanging(long value);
        partial void OnWhoaddedChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Reputation()
        {
            OnCreated();
        }

        [Column(Name = @"reputationid", Storage = "_Reputationid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Reputationid
        {
            get
            {
                return this._Reputationid;
            }
            set
            {
                if (this._Reputationid != value)
                {
                    this.OnReputationidChanging(value);
                    this.SendPropertyChanging();
                    this._Reputationid = value;
                    this.SendPropertyChanged("Reputationid");
                    this.OnReputationidChanged();
                }
            }
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"reputation", Storage = "_Reputation1", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Reputation1
        {
            get
            {
                return this._Reputation1;
            }
            set
            {
                if (this._Reputation1 != value)
                {
                    this.OnReputation1Changing(value);
                    this.SendPropertyChanging();
                    this._Reputation1 = value;
                    this.SendPropertyChanged("Reputation1");
                    this.OnReputation1Changed();
                }
            }
        }

        [Column(Name = @"whoadded", Storage = "_Whoadded", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Whoadded
        {
            get
            {
                return this._Whoadded;
            }
            set
            {
                if (this._Whoadded != value)
                {
                    this.OnWhoaddedChanging(value);
                    this.SendPropertyChanging();
                    this._Whoadded = value;
                    this.SendPropertyChanged("Whoadded");
                    this.OnWhoaddedChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", DbType = "varchar(250)")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.reputationlevel")]
    public partial class Reputationlevel : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Reputationlevelid;

        private int _Minimumreputation;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReputationlevelidChanging(long value);
        partial void OnReputationlevelidChanged();
        partial void OnMinimumreputationChanging(int value);
        partial void OnMinimumreputationChanged();
        #endregion

        public Reputationlevel()
        {
            OnCreated();
        }

        [Column(Name = @"reputationlevelid", Storage = "_Reputationlevelid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Reputationlevelid
        {
            get
            {
                return this._Reputationlevelid;
            }
            set
            {
                if (this._Reputationlevelid != value)
                {
                    this.OnReputationlevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Reputationlevelid = value;
                    this.SendPropertyChanged("Reputationlevelid");
                    this.OnReputationlevelidChanged();
                }
            }
        }

        [Column(Name = @"minimumreputation", Storage = "_Minimumreputation", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Minimumreputation
        {
            get
            {
                return this._Minimumreputation;
            }
            set
            {
                if (this._Minimumreputation != value)
                {
                    this.OnMinimumreputationChanging(value);
                    this.SendPropertyChanging();
                    this._Minimumreputation = value;
                    this.SendPropertyChanged("Minimumreputation");
                    this.OnMinimumreputationChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.route")]
    public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Routeid;

        private string _Userrequest;

        private long _Packageid;

        private string _Class;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRouteidChanging(long value);
        partial void OnRouteidChanged();
        partial void OnUserrequestChanging(string value);
        partial void OnUserrequestChanged();
        partial void OnPackageidChanging(long value);
        partial void OnPackageidChanged();
        partial void OnClassChanging(string value);
        partial void OnClassChanged();
        #endregion

        public Route()
        {
            OnCreated();
        }

        [Column(Name = @"routeid", Storage = "_Routeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Routeid
        {
            get
            {
                return this._Routeid;
            }
            set
            {
                if (this._Routeid != value)
                {
                    this.OnRouteidChanging(value);
                    this.SendPropertyChanging();
                    this._Routeid = value;
                    this.SendPropertyChanged("Routeid");
                    this.OnRouteidChanged();
                }
            }
        }

        [Column(Name = @"userrequest", Storage = "_Userrequest", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Userrequest
        {
            get
            {
                return this._Userrequest;
            }
            set
            {
                if (this._Userrequest != value)
                {
                    this.OnUserrequestChanging(value);
                    this.SendPropertyChanging();
                    this._Userrequest = value;
                    this.SendPropertyChanged("Userrequest");
                    this.OnUserrequestChanged();
                }
            }
        }

        [Column(Name = @"packageid", Storage = "_Packageid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Packageid
        {
            get
            {
                return this._Packageid;
            }
            set
            {
                if (this._Packageid != value)
                {
                    this.OnPackageidChanging(value);
                    this.SendPropertyChanging();
                    this._Packageid = value;
                    this.SendPropertyChanged("Packageid");
                    this.OnPackageidChanged();
                }
            }
        }

        [Column(Name = @"class", Storage = "_Class", CanBeNull = false, DbType = "varbinary(50) NOT NULL")]
        public string Class
        {
            get
            {
                return this._Class;
            }
            set
            {
                if (this._Class != value)
                {
                    this.OnClassChanging(value);
                    this.SendPropertyChanging();
                    this._Class = value;
                    this.SendPropertyChanged("Class");
                    this.OnClassChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.rssfeed")]
    public partial class Rssfeed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Rssfeedid;

        private string _Title;

        private string _Url;

        private int _Port;

        private int _Ttl;

        private short _Maxresults;

        private long _Userid;

        private int _Forumid;

        private string _Prefixid;

        private int _Iconid;

        private string _Titletemplate;

        private string _Bodytemplate;

        private string _Searchwords;

        private string _Itemtype;

        private int _Threadactiondelay;

        private long _Endannouncement;

        private long _Options;

        private long _Lastrun;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRssfeedidChanging(long value);
        partial void OnRssfeedidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnPortChanging(int value);
        partial void OnPortChanged();
        partial void OnTtlChanging(int value);
        partial void OnTtlChanged();
        partial void OnMaxresultsChanging(short value);
        partial void OnMaxresultsChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnPrefixidChanging(string value);
        partial void OnPrefixidChanged();
        partial void OnIconidChanging(int value);
        partial void OnIconidChanged();
        partial void OnTitletemplateChanging(string value);
        partial void OnTitletemplateChanged();
        partial void OnBodytemplateChanging(string value);
        partial void OnBodytemplateChanged();
        partial void OnSearchwordsChanging(string value);
        partial void OnSearchwordsChanged();
        partial void OnItemtypeChanging(string value);
        partial void OnItemtypeChanged();
        partial void OnThreadactiondelayChanging(int value);
        partial void OnThreadactiondelayChanged();
        partial void OnEndannouncementChanging(long value);
        partial void OnEndannouncementChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnLastrunChanging(long value);
        partial void OnLastrunChanged();
        #endregion

        public Rssfeed()
        {
            OnCreated();
        }

        [Column(Name = @"rssfeedid", Storage = "_Rssfeedid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Rssfeedid
        {
            get
            {
                return this._Rssfeedid;
            }
            set
            {
                if (this._Rssfeedid != value)
                {
                    this.OnRssfeedidChanging(value);
                    this.SendPropertyChanging();
                    this._Rssfeedid = value;
                    this.SendPropertyChanged("Rssfeedid");
                    this.OnRssfeedidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"url", Storage = "_Url", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

        [Column(Name = @"port", Storage = "_Port", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Port
        {
            get
            {
                return this._Port;
            }
            set
            {
                if (this._Port != value)
                {
                    this.OnPortChanging(value);
                    this.SendPropertyChanging();
                    this._Port = value;
                    this.SendPropertyChanged("Port");
                    this.OnPortChanged();
                }
            }
        }

        [Column(Name = @"ttl", Storage = "_Ttl", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Ttl
        {
            get
            {
                return this._Ttl;
            }
            set
            {
                if (this._Ttl != value)
                {
                    this.OnTtlChanging(value);
                    this.SendPropertyChanging();
                    this._Ttl = value;
                    this.SendPropertyChanged("Ttl");
                    this.OnTtlChanged();
                }
            }
        }

        [Column(Name = @"maxresults", Storage = "_Maxresults", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Maxresults
        {
            get
            {
                return this._Maxresults;
            }
            set
            {
                if (this._Maxresults != value)
                {
                    this.OnMaxresultsChanging(value);
                    this.SendPropertyChanging();
                    this._Maxresults = value;
                    this.SendPropertyChanged("Maxresults");
                    this.OnMaxresultsChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"prefixid", Storage = "_Prefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Prefixid
        {
            get
            {
                return this._Prefixid;
            }
            set
            {
                if (this._Prefixid != value)
                {
                    this.OnPrefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixid = value;
                    this.SendPropertyChanged("Prefixid");
                    this.OnPrefixidChanged();
                }
            }
        }

        [Column(Name = @"iconid", Storage = "_Iconid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"titletemplate", Storage = "_Titletemplate", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Titletemplate
        {
            get
            {
                return this._Titletemplate;
            }
            set
            {
                if (this._Titletemplate != value)
                {
                    this.OnTitletemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Titletemplate = value;
                    this.SendPropertyChanged("Titletemplate");
                    this.OnTitletemplateChanged();
                }
            }
        }

        [Column(Name = @"bodytemplate", Storage = "_Bodytemplate", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Bodytemplate
        {
            get
            {
                return this._Bodytemplate;
            }
            set
            {
                if (this._Bodytemplate != value)
                {
                    this.OnBodytemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Bodytemplate = value;
                    this.SendPropertyChanged("Bodytemplate");
                    this.OnBodytemplateChanged();
                }
            }
        }

        [Column(Name = @"searchwords", Storage = "_Searchwords", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Searchwords
        {
            get
            {
                return this._Searchwords;
            }
            set
            {
                if (this._Searchwords != value)
                {
                    this.OnSearchwordsChanging(value);
                    this.SendPropertyChanging();
                    this._Searchwords = value;
                    this.SendPropertyChanged("Searchwords");
                    this.OnSearchwordsChanged();
                }
            }
        }

        [Column(Name = @"itemtype", Storage = "_Itemtype", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Itemtype
        {
            get
            {
                return this._Itemtype;
            }
            set
            {
                if (this._Itemtype != value)
                {
                    this.OnItemtypeChanging(value);
                    this.SendPropertyChanging();
                    this._Itemtype = value;
                    this.SendPropertyChanged("Itemtype");
                    this.OnItemtypeChanged();
                }
            }
        }

        [Column(Name = @"threadactiondelay", Storage = "_Threadactiondelay", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Threadactiondelay
        {
            get
            {
                return this._Threadactiondelay;
            }
            set
            {
                if (this._Threadactiondelay != value)
                {
                    this.OnThreadactiondelayChanging(value);
                    this.SendPropertyChanging();
                    this._Threadactiondelay = value;
                    this.SendPropertyChanged("Threadactiondelay");
                    this.OnThreadactiondelayChanged();
                }
            }
        }

        [Column(Name = @"endannouncement", Storage = "_Endannouncement", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Endannouncement
        {
            get
            {
                return this._Endannouncement;
            }
            set
            {
                if (this._Endannouncement != value)
                {
                    this.OnEndannouncementChanging(value);
                    this.SendPropertyChanging();
                    this._Endannouncement = value;
                    this.SendPropertyChanged("Endannouncement");
                    this.OnEndannouncementChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"lastrun", Storage = "_Lastrun", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastrun
        {
            get
            {
                return this._Lastrun;
            }
            set
            {
                if (this._Lastrun != value)
                {
                    this.OnLastrunChanging(value);
                    this.SendPropertyChanging();
                    this._Lastrun = value;
                    this.SendPropertyChanged("Lastrun");
                    this.OnLastrunChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.rsslog")]
    public partial class Rsslog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Rssfeedid;

        private long _Itemid;

        private string _Itemtype;

        private string _Uniquehash;

        private string _Contenthash;

        private long _Dateline;

        private long _Threadactiontime;

        private byte _Threadactioncomplete;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRssfeedidChanging(long value);
        partial void OnRssfeedidChanged();
        partial void OnItemidChanging(long value);
        partial void OnItemidChanged();
        partial void OnItemtypeChanging(string value);
        partial void OnItemtypeChanged();
        partial void OnUniquehashChanging(string value);
        partial void OnUniquehashChanged();
        partial void OnContenthashChanging(string value);
        partial void OnContenthashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnThreadactiontimeChanging(long value);
        partial void OnThreadactiontimeChanged();
        partial void OnThreadactioncompleteChanging(byte value);
        partial void OnThreadactioncompleteChanged();
        #endregion

        public Rsslog()
        {
            OnCreated();
        }

        [Column(Name = @"rssfeedid", Storage = "_Rssfeedid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Rssfeedid
        {
            get
            {
                return this._Rssfeedid;
            }
            set
            {
                if (this._Rssfeedid != value)
                {
                    this.OnRssfeedidChanging(value);
                    this.SendPropertyChanging();
                    this._Rssfeedid = value;
                    this.SendPropertyChanged("Rssfeedid");
                    this.OnRssfeedidChanged();
                }
            }
        }

        [Column(Name = @"itemid", Storage = "_Itemid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Itemid
        {
            get
            {
                return this._Itemid;
            }
            set
            {
                if (this._Itemid != value)
                {
                    this.OnItemidChanging(value);
                    this.SendPropertyChanging();
                    this._Itemid = value;
                    this.SendPropertyChanged("Itemid");
                    this.OnItemidChanged();
                }
            }
        }

        [Column(Name = @"itemtype", Storage = "_Itemtype", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Itemtype
        {
            get
            {
                return this._Itemtype;
            }
            set
            {
                if (this._Itemtype != value)
                {
                    this.OnItemtypeChanging(value);
                    this.SendPropertyChanging();
                    this._Itemtype = value;
                    this.SendPropertyChanged("Itemtype");
                    this.OnItemtypeChanged();
                }
            }
        }

        [Column(Name = @"uniquehash", Storage = "_Uniquehash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Uniquehash
        {
            get
            {
                return this._Uniquehash;
            }
            set
            {
                if (this._Uniquehash != value)
                {
                    this.OnUniquehashChanging(value);
                    this.SendPropertyChanging();
                    this._Uniquehash = value;
                    this.SendPropertyChanged("Uniquehash");
                    this.OnUniquehashChanged();
                }
            }
        }

        [Column(Name = @"contenthash", Storage = "_Contenthash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Contenthash
        {
            get
            {
                return this._Contenthash;
            }
            set
            {
                if (this._Contenthash != value)
                {
                    this.OnContenthashChanging(value);
                    this.SendPropertyChanging();
                    this._Contenthash = value;
                    this.SendPropertyChanged("Contenthash");
                    this.OnContenthashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"threadactiontime", Storage = "_Threadactiontime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadactiontime
        {
            get
            {
                return this._Threadactiontime;
            }
            set
            {
                if (this._Threadactiontime != value)
                {
                    this.OnThreadactiontimeChanging(value);
                    this.SendPropertyChanging();
                    this._Threadactiontime = value;
                    this.SendPropertyChanged("Threadactiontime");
                    this.OnThreadactiontimeChanged();
                }
            }
        }

        [Column(Name = @"threadactioncomplete", Storage = "_Threadactioncomplete", CanBeNull = false, DbType = "tinyint(3) NOT NULL")]
        public byte Threadactioncomplete
        {
            get
            {
                return this._Threadactioncomplete;
            }
            set
            {
                if (this._Threadactioncomplete != value)
                {
                    this.OnThreadactioncompleteChanging(value);
                    this.SendPropertyChanging();
                    this._Threadactioncomplete = value;
                    this.SendPropertyChanged("Threadactioncomplete");
                    this.OnThreadactioncompleteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.searchcore")]
    public partial class Searchcore : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Searchcoreid;

        private long _Contenttypeid;

        private long _Primaryid;

        private long _Groupcontenttypeid;

        private long _Groupid;

        private long _Dateline;

        private long _Userid;

        private string _Username;

        private long _Ipaddress;

        private long _Searchgroupid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSearchcoreidChanging(long value);
        partial void OnSearchcoreidChanged();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnPrimaryidChanging(long value);
        partial void OnPrimaryidChanged();
        partial void OnGroupcontenttypeidChanging(long value);
        partial void OnGroupcontenttypeidChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnSearchgroupidChanging(long value);
        partial void OnSearchgroupidChanged();
        #endregion

        public Searchcore()
        {
            OnCreated();
        }

        [Column(Name = @"searchcoreid", Storage = "_Searchcoreid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Searchcoreid
        {
            get
            {
                return this._Searchcoreid;
            }
            set
            {
                if (this._Searchcoreid != value)
                {
                    this.OnSearchcoreidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchcoreid = value;
                    this.SendPropertyChanged("Searchcoreid");
                    this.OnSearchcoreidChanged();
                }
            }
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"primaryid", Storage = "_Primaryid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Primaryid
        {
            get
            {
                return this._Primaryid;
            }
            set
            {
                if (this._Primaryid != value)
                {
                    this.OnPrimaryidChanging(value);
                    this.SendPropertyChanging();
                    this._Primaryid = value;
                    this.SendPropertyChanged("Primaryid");
                    this.OnPrimaryidChanged();
                }
            }
        }

        [Column(Name = @"groupcontenttypeid", Storage = "_Groupcontenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupcontenttypeid
        {
            get
            {
                return this._Groupcontenttypeid;
            }
            set
            {
                if (this._Groupcontenttypeid != value)
                {
                    this.OnGroupcontenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupcontenttypeid = value;
                    this.SendPropertyChanged("Groupcontenttypeid");
                    this.OnGroupcontenttypeidChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"searchgroupid", Storage = "_Searchgroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Searchgroupid
        {
            get
            {
                return this._Searchgroupid;
            }
            set
            {
                if (this._Searchgroupid != value)
                {
                    this.OnSearchgroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchgroupid = value;
                    this.SendPropertyChanged("Searchgroupid");
                    this.OnSearchgroupidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.searchcore_text")]
    public partial class Searchcoretext : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Searchcoreid;

        private string _Keywordtext;

        private string _Title;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSearchcoreidChanging(long value);
        partial void OnSearchcoreidChanged();
        partial void OnKeywordtextChanging(string value);
        partial void OnKeywordtextChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        #endregion

        public Searchcoretext()
        {
            OnCreated();
        }

        [Column(Name = @"searchcoreid", Storage = "_Searchcoreid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Searchcoreid
        {
            get
            {
                return this._Searchcoreid;
            }
            set
            {
                if (this._Searchcoreid != value)
                {
                    this.OnSearchcoreidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchcoreid = value;
                    this.SendPropertyChanged("Searchcoreid");
                    this.OnSearchcoreidChanged();
                }
            }
        }

        [Column(Name = @"keywordtext", Storage = "_Keywordtext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Keywordtext
        {
            get
            {
                return this._Keywordtext;
            }
            set
            {
                if (this._Keywordtext != value)
                {
                    this.OnKeywordtextChanging(value);
                    this.SendPropertyChanging();
                    this._Keywordtext = value;
                    this.SendPropertyChanged("Keywordtext");
                    this.OnKeywordtextChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(254) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.searchgroup")]
    public partial class Searchgroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Searchgroupid;

        private long _Contenttypeid;

        private long _Groupid;

        private long _Dateline;

        private long _Userid;

        private string _Username;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSearchgroupidChanging(long value);
        partial void OnSearchgroupidChanged();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        #endregion

        public Searchgroup()
        {
            OnCreated();
        }

        [Column(Name = @"searchgroupid", Storage = "_Searchgroupid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Searchgroupid
        {
            get
            {
                return this._Searchgroupid;
            }
            set
            {
                if (this._Searchgroupid != value)
                {
                    this.OnSearchgroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchgroupid = value;
                    this.SendPropertyChanged("Searchgroupid");
                    this.OnSearchgroupidChanged();
                }
            }
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.searchgroup_text")]
    public partial class Searchgrouptext : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Searchgroupid;

        private string _Title;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSearchgroupidChanging(long value);
        partial void OnSearchgroupidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        #endregion

        public Searchgrouptext()
        {
            OnCreated();
        }

        [Column(Name = @"searchgroupid", Storage = "_Searchgroupid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Searchgroupid
        {
            get
            {
                return this._Searchgroupid;
            }
            set
            {
                if (this._Searchgroupid != value)
                {
                    this.OnSearchgroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchgroupid = value;
                    this.SendPropertyChanged("Searchgroupid");
                    this.OnSearchgroupidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(254) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.searchlog")]
    public partial class Searchlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Searchlogid;

        private long _Userid;

        private string _Ipaddress;

        private string _Searchhash;

        private string _Sortby;

        private string _Sortorder;

        private float _Searchtime;

        private long _Dateline;

        private int _Completed;

        private string _Criteria;

        private byte[] _Results;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSearchlogidChanging(long value);
        partial void OnSearchlogidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        partial void OnSearchhashChanging(string value);
        partial void OnSearchhashChanged();
        partial void OnSortbyChanging(string value);
        partial void OnSortbyChanged();
        partial void OnSortorderChanging(string value);
        partial void OnSortorderChanged();
        partial void OnSearchtimeChanging(float value);
        partial void OnSearchtimeChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnCompletedChanging(int value);
        partial void OnCompletedChanged();
        partial void OnCriteriaChanging(string value);
        partial void OnCriteriaChanged();
        partial void OnResultsChanging(byte[] value);
        partial void OnResultsChanged();
        #endregion

        public Searchlog()
        {
            OnCreated();
        }

        [Column(Name = @"searchlogid", Storage = "_Searchlogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Searchlogid
        {
            get
            {
                return this._Searchlogid;
            }
            set
            {
                if (this._Searchlogid != value)
                {
                    this.OnSearchlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Searchlogid = value;
                    this.SendPropertyChanged("Searchlogid");
                    this.OnSearchlogidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"searchhash", Storage = "_Searchhash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Searchhash
        {
            get
            {
                return this._Searchhash;
            }
            set
            {
                if (this._Searchhash != value)
                {
                    this.OnSearchhashChanging(value);
                    this.SendPropertyChanging();
                    this._Searchhash = value;
                    this.SendPropertyChanged("Searchhash");
                    this.OnSearchhashChanged();
                }
            }
        }

        [Column(Name = @"sortby", Storage = "_Sortby", CanBeNull = false, DbType = "varchar(15) NOT NULL")]
        public string Sortby
        {
            get
            {
                return this._Sortby;
            }
            set
            {
                if (this._Sortby != value)
                {
                    this.OnSortbyChanging(value);
                    this.SendPropertyChanging();
                    this._Sortby = value;
                    this.SendPropertyChanged("Sortby");
                    this.OnSortbyChanged();
                }
            }
        }

        [Column(Name = @"sortorder", Storage = "_Sortorder", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Sortorder
        {
            get
            {
                return this._Sortorder;
            }
            set
            {
                if (this._Sortorder != value)
                {
                    this.OnSortorderChanging(value);
                    this.SendPropertyChanging();
                    this._Sortorder = value;
                    this.SendPropertyChanged("Sortorder");
                    this.OnSortorderChanged();
                }
            }
        }

        [Column(Name = @"searchtime", Storage = "_Searchtime", CanBeNull = false, DbType = "float NOT NULL")]
        public float Searchtime
        {
            get
            {
                return this._Searchtime;
            }
            set
            {
                if (this._Searchtime != value)
                {
                    this.OnSearchtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Searchtime = value;
                    this.SendPropertyChanged("Searchtime");
                    this.OnSearchtimeChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"completed", Storage = "_Completed", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging();
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }

        [Column(Name = @"criteria", Storage = "_Criteria", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Criteria
        {
            get
            {
                return this._Criteria;
            }
            set
            {
                if (this._Criteria != value)
                {
                    this.OnCriteriaChanging(value);
                    this.SendPropertyChanging();
                    this._Criteria = value;
                    this.SendPropertyChanged("Criteria");
                    this.OnCriteriaChanged();
                }
            }
        }

        [Column(Name = @"results", Storage = "_Results", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Results
        {
            get
            {
                return this._Results;
            }
            set
            {
                if (this._Results != value)
                {
                    this.OnResultsChanging(value);
                    this.SendPropertyChanging();
                    this._Results = value;
                    this.SendPropertyChanged("Results");
                    this.OnResultsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.session")]
    public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Sessionhash;

        private long _Userid;

        private string _Host;

        private string _Idhash;

        private long _Lastactivity;

        private string _Location;

        private string _Useragent;

        private int _Styleid;

        private int _Languageid;

        private int _Loggedin;

        private int _Inforum;

        private long _Inthread;

        private int _Incalendar;

        private int _Badlocation;

        private short _Bypass;

        private int _Profileupdate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSessionhashChanging(string value);
        partial void OnSessionhashChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnHostChanging(string value);
        partial void OnHostChanged();
        partial void OnIdhashChanging(string value);
        partial void OnIdhashChanged();
        partial void OnLastactivityChanging(long value);
        partial void OnLastactivityChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnUseragentChanging(string value);
        partial void OnUseragentChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnLoggedinChanging(int value);
        partial void OnLoggedinChanged();
        partial void OnInforumChanging(int value);
        partial void OnInforumChanged();
        partial void OnInthreadChanging(long value);
        partial void OnInthreadChanged();
        partial void OnIncalendarChanging(int value);
        partial void OnIncalendarChanged();
        partial void OnBadlocationChanging(int value);
        partial void OnBadlocationChanged();
        partial void OnBypassChanging(short value);
        partial void OnBypassChanged();
        partial void OnProfileupdateChanging(int value);
        partial void OnProfileupdateChanged();
        #endregion

        public Session()
        {
            OnCreated();
        }

        [Column(Name = @"sessionhash", Storage = "_Sessionhash", CanBeNull = false, DbType = "char(32) NOT NULL", IsPrimaryKey = true)]
        public string Sessionhash
        {
            get
            {
                return this._Sessionhash;
            }
            set
            {
                if (this._Sessionhash != value)
                {
                    this.OnSessionhashChanging(value);
                    this.SendPropertyChanging();
                    this._Sessionhash = value;
                    this.SendPropertyChanged("Sessionhash");
                    this.OnSessionhashChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"host", Storage = "_Host", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Host
        {
            get
            {
                return this._Host;
            }
            set
            {
                if (this._Host != value)
                {
                    this.OnHostChanging(value);
                    this.SendPropertyChanging();
                    this._Host = value;
                    this.SendPropertyChanged("Host");
                    this.OnHostChanged();
                }
            }
        }

        [Column(Name = @"idhash", Storage = "_Idhash", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Idhash
        {
            get
            {
                return this._Idhash;
            }
            set
            {
                if (this._Idhash != value)
                {
                    this.OnIdhashChanging(value);
                    this.SendPropertyChanging();
                    this._Idhash = value;
                    this.SendPropertyChanged("Idhash");
                    this.OnIdhashChanged();
                }
            }
        }

        [Column(Name = @"lastactivity", Storage = "_Lastactivity", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastactivity
        {
            get
            {
                return this._Lastactivity;
            }
            set
            {
                if (this._Lastactivity != value)
                {
                    this.OnLastactivityChanging(value);
                    this.SendPropertyChanging();
                    this._Lastactivity = value;
                    this.SendPropertyChanged("Lastactivity");
                    this.OnLastactivityChanged();
                }
            }
        }

        [Column(Name = @"location", Storage = "_Location", CanBeNull = false, DbType = "char(255) NOT NULL")]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

        [Column(Name = @"useragent", Storage = "_Useragent", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Useragent
        {
            get
            {
                return this._Useragent;
            }
            set
            {
                if (this._Useragent != value)
                {
                    this.OnUseragentChanging(value);
                    this.SendPropertyChanging();
                    this._Useragent = value;
                    this.SendPropertyChanged("Useragent");
                    this.OnUseragentChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"loggedin", Storage = "_Loggedin", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Loggedin
        {
            get
            {
                return this._Loggedin;
            }
            set
            {
                if (this._Loggedin != value)
                {
                    this.OnLoggedinChanging(value);
                    this.SendPropertyChanging();
                    this._Loggedin = value;
                    this.SendPropertyChanged("Loggedin");
                    this.OnLoggedinChanged();
                }
            }
        }

        [Column(Name = @"inforum", Storage = "_Inforum", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Inforum
        {
            get
            {
                return this._Inforum;
            }
            set
            {
                if (this._Inforum != value)
                {
                    this.OnInforumChanging(value);
                    this.SendPropertyChanging();
                    this._Inforum = value;
                    this.SendPropertyChanged("Inforum");
                    this.OnInforumChanged();
                }
            }
        }

        [Column(Name = @"inthread", Storage = "_Inthread", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Inthread
        {
            get
            {
                return this._Inthread;
            }
            set
            {
                if (this._Inthread != value)
                {
                    this.OnInthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Inthread = value;
                    this.SendPropertyChanged("Inthread");
                    this.OnInthreadChanged();
                }
            }
        }

        [Column(Name = @"incalendar", Storage = "_Incalendar", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Incalendar
        {
            get
            {
                return this._Incalendar;
            }
            set
            {
                if (this._Incalendar != value)
                {
                    this.OnIncalendarChanging(value);
                    this.SendPropertyChanging();
                    this._Incalendar = value;
                    this.SendPropertyChanged("Incalendar");
                    this.OnIncalendarChanged();
                }
            }
        }

        [Column(Name = @"badlocation", Storage = "_Badlocation", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Badlocation
        {
            get
            {
                return this._Badlocation;
            }
            set
            {
                if (this._Badlocation != value)
                {
                    this.OnBadlocationChanging(value);
                    this.SendPropertyChanging();
                    this._Badlocation = value;
                    this.SendPropertyChanged("Badlocation");
                    this.OnBadlocationChanged();
                }
            }
        }

        [Column(Name = @"bypass", Storage = "_Bypass", CanBeNull = false, DbType = "tinyint(4) NOT NULL")]
        public short Bypass
        {
            get
            {
                return this._Bypass;
            }
            set
            {
                if (this._Bypass != value)
                {
                    this.OnBypassChanging(value);
                    this.SendPropertyChanging();
                    this._Bypass = value;
                    this.SendPropertyChanged("Bypass");
                    this.OnBypassChanged();
                }
            }
        }

        [Column(Name = @"profileupdate", Storage = "_Profileupdate", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Profileupdate
        {
            get
            {
                return this._Profileupdate;
            }
            set
            {
                if (this._Profileupdate != value)
                {
                    this.OnProfileupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Profileupdate = value;
                    this.SendPropertyChanged("Profileupdate");
                    this.OnProfileupdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.setting")]
    public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Varname;

        private string _Grouptitle;

        private string _Value;

        private string _Defaultvalue;

        private string _Optioncode;

        private int _Displayorder;

        private short _Advanced;

        private int _Volatile;

        private string _Datatype;

        private string _Product;

        private string _Validationcode;

        private short _Blacklist;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnGrouptitleChanging(string value);
        partial void OnGrouptitleChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnDefaultvalueChanging(string value);
        partial void OnDefaultvalueChanged();
        partial void OnOptioncodeChanging(string value);
        partial void OnOptioncodeChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnAdvancedChanging(short value);
        partial void OnAdvancedChanged();
        partial void OnVolatileChanging(int value);
        partial void OnVolatileChanged();
        partial void OnDatatypeChanging(string value);
        partial void OnDatatypeChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnValidationcodeChanging(string value);
        partial void OnValidationcodeChanged();
        partial void OnBlacklistChanging(short value);
        partial void OnBlacklistChanged();
        #endregion

        public Setting()
        {
            OnCreated();
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(100) NOT NULL", IsPrimaryKey = true)]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"grouptitle", Storage = "_Grouptitle", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Grouptitle
        {
            get
            {
                return this._Grouptitle;
            }
            set
            {
                if (this._Grouptitle != value)
                {
                    this.OnGrouptitleChanging(value);
                    this.SendPropertyChanging();
                    this._Grouptitle = value;
                    this.SendPropertyChanged("Grouptitle");
                    this.OnGrouptitleChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [Column(Name = @"defaultvalue", Storage = "_Defaultvalue", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Defaultvalue
        {
            get
            {
                return this._Defaultvalue;
            }
            set
            {
                if (this._Defaultvalue != value)
                {
                    this.OnDefaultvalueChanging(value);
                    this.SendPropertyChanging();
                    this._Defaultvalue = value;
                    this.SendPropertyChanged("Defaultvalue");
                    this.OnDefaultvalueChanged();
                }
            }
        }

        [Column(Name = @"optioncode", Storage = "_Optioncode", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Optioncode
        {
            get
            {
                return this._Optioncode;
            }
            set
            {
                if (this._Optioncode != value)
                {
                    this.OnOptioncodeChanging(value);
                    this.SendPropertyChanging();
                    this._Optioncode = value;
                    this.SendPropertyChanged("Optioncode");
                    this.OnOptioncodeChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"advanced", Storage = "_Advanced", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Advanced
        {
            get
            {
                return this._Advanced;
            }
            set
            {
                if (this._Advanced != value)
                {
                    this.OnAdvancedChanging(value);
                    this.SendPropertyChanging();
                    this._Advanced = value;
                    this.SendPropertyChanged("Advanced");
                    this.OnAdvancedChanged();
                }
            }
        }

        [Column(Name = @"volatile", Storage = "_Volatile", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Volatile
        {
            get
            {
                return this._Volatile;
            }
            set
            {
                if (this._Volatile != value)
                {
                    this.OnVolatileChanging(value);
                    this.SendPropertyChanging();
                    this._Volatile = value;
                    this.SendPropertyChanged("Volatile");
                    this.OnVolatileChanged();
                }
            }
        }

        [Column(Name = @"datatype", Storage = "_Datatype", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Datatype
        {
            get
            {
                return this._Datatype;
            }
            set
            {
                if (this._Datatype != value)
                {
                    this.OnDatatypeChanging(value);
                    this.SendPropertyChanging();
                    this._Datatype = value;
                    this.SendPropertyChanged("Datatype");
                    this.OnDatatypeChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"validationcode", Storage = "_Validationcode", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Validationcode
        {
            get
            {
                return this._Validationcode;
            }
            set
            {
                if (this._Validationcode != value)
                {
                    this.OnValidationcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Validationcode = value;
                    this.SendPropertyChanged("Validationcode");
                    this.OnValidationcodeChanged();
                }
            }
        }

        [Column(Name = @"blacklist", Storage = "_Blacklist", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Blacklist
        {
            get
            {
                return this._Blacklist;
            }
            set
            {
                if (this._Blacklist != value)
                {
                    this.OnBlacklistChanging(value);
                    this.SendPropertyChanging();
                    this._Blacklist = value;
                    this.SendPropertyChanged("Blacklist");
                    this.OnBlacklistChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.settinggroup")]
    public partial class Settinggroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Grouptitle;

        private int _Displayorder;

        private int _Volatile;

        private string _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGrouptitleChanging(string value);
        partial void OnGrouptitleChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnVolatileChanging(int value);
        partial void OnVolatileChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        #endregion

        public Settinggroup()
        {
            OnCreated();
        }

        [Column(Name = @"grouptitle", Storage = "_Grouptitle", CanBeNull = false, DbType = "char(50) NOT NULL", IsPrimaryKey = true)]
        public string Grouptitle
        {
            get
            {
                return this._Grouptitle;
            }
            set
            {
                if (this._Grouptitle != value)
                {
                    this.OnGrouptitleChanging(value);
                    this.SendPropertyChanging();
                    this._Grouptitle = value;
                    this.SendPropertyChanged("Grouptitle");
                    this.OnGrouptitleChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"volatile", Storage = "_Volatile", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Volatile
        {
            get
            {
                return this._Volatile;
            }
            set
            {
                if (this._Volatile != value)
                {
                    this.OnVolatileChanging(value);
                    this.SendPropertyChanging();
                    this._Volatile = value;
                    this.SendPropertyChanged("Volatile");
                    this.OnVolatileChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.sigparsed")]
    public partial class Sigparsed : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Styleid;

        private int _Languageid;

        private string _Signatureparsed;

        private int _Hasimages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnSignatureparsedChanging(string value);
        partial void OnSignatureparsedChanged();
        partial void OnHasimagesChanging(int value);
        partial void OnHasimagesChanged();
        #endregion

        public Sigparsed()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"signatureparsed", Storage = "_Signatureparsed", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Signatureparsed
        {
            get
            {
                return this._Signatureparsed;
            }
            set
            {
                if (this._Signatureparsed != value)
                {
                    this.OnSignatureparsedChanging(value);
                    this.SendPropertyChanging();
                    this._Signatureparsed = value;
                    this.SendPropertyChanged("Signatureparsed");
                    this.OnSignatureparsedChanged();
                }
            }
        }

        [Column(Name = @"hasimages", Storage = "_Hasimages", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Hasimages
        {
            get
            {
                return this._Hasimages;
            }
            set
            {
                if (this._Hasimages != value)
                {
                    this.OnHasimagesChanging(value);
                    this.SendPropertyChanging();
                    this._Hasimages = value;
                    this.SendPropertyChanged("Hasimages");
                    this.OnHasimagesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.sigpic")]
    public partial class Sigpic : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private byte[] _Filedata;

        private long _Dateline;

        private string _Filename;

        private short _Visible;

        private long _Filesize;

        private int _Width;

        private int _Height;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFiledataChanging(byte[] value);
        partial void OnFiledataChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnFilesizeChanging(long value);
        partial void OnFilesizeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        #endregion

        public Sigpic()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata
        {
            get
            {
                return this._Filedata;
            }
            set
            {
                if (this._Filedata != value)
                {
                    this.OnFiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Filedata = value;
                    this.SendPropertyChanged("Filedata");
                    this.OnFiledataChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"filesize", Storage = "_Filesize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Filesize
        {
            get
            {
                return this._Filesize;
            }
            set
            {
                if (this._Filesize != value)
                {
                    this.OnFilesizeChanging(value);
                    this.SendPropertyChanging();
                    this._Filesize = value;
                    this.SendPropertyChanged("Filesize");
                    this.OnFilesizeChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.smilie")]
    public partial class Smilie : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Smilieid;

        private string _Title;

        private string _Smilietext;

        private string _Smiliepath;

        private int _Imagecategoryid;

        private int _Displayorder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSmilieidChanging(int value);
        partial void OnSmilieidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnSmilietextChanging(string value);
        partial void OnSmilietextChanged();
        partial void OnSmiliepathChanging(string value);
        partial void OnSmiliepathChanged();
        partial void OnImagecategoryidChanging(int value);
        partial void OnImagecategoryidChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        #endregion

        public Smilie()
        {
            OnCreated();
        }

        [Column(Name = @"smilieid", Storage = "_Smilieid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Smilieid
        {
            get
            {
                return this._Smilieid;
            }
            set
            {
                if (this._Smilieid != value)
                {
                    this.OnSmilieidChanging(value);
                    this.SendPropertyChanging();
                    this._Smilieid = value;
                    this.SendPropertyChanged("Smilieid");
                    this.OnSmilieidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"smilietext", Storage = "_Smilietext", CanBeNull = false, DbType = "char(20) NOT NULL")]
        public string Smilietext
        {
            get
            {
                return this._Smilietext;
            }
            set
            {
                if (this._Smilietext != value)
                {
                    this.OnSmilietextChanging(value);
                    this.SendPropertyChanging();
                    this._Smilietext = value;
                    this.SendPropertyChanged("Smilietext");
                    this.OnSmilietextChanged();
                }
            }
        }

        [Column(Name = @"smiliepath", Storage = "_Smiliepath", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Smiliepath
        {
            get
            {
                return this._Smiliepath;
            }
            set
            {
                if (this._Smiliepath != value)
                {
                    this.OnSmiliepathChanging(value);
                    this.SendPropertyChanging();
                    this._Smiliepath = value;
                    this.SendPropertyChanged("Smiliepath");
                    this.OnSmiliepathChanged();
                }
            }
        }

        [Column(Name = @"imagecategoryid", Storage = "_Imagecategoryid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Imagecategoryid
        {
            get
            {
                return this._Imagecategoryid;
            }
            set
            {
                if (this._Imagecategoryid != value)
                {
                    this.OnImagecategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Imagecategoryid = value;
                    this.SendPropertyChanged("Imagecategoryid");
                    this.OnImagecategoryidChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.socialgroup")]
    public partial class Socialgroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Groupid;

        private long _Socialgroupcategoryid;

        private string _Name;

        private string _Description;

        private long _Creatoruserid;

        private long _Dateline;

        private long _Members;

        private long _Picturecount;

        private long _Lastpost;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Lastgmid;

        private long _Visible;

        private long _Deleted;

        private long _Moderation;

        private string _Type;

        private long _Moderatedmembers;

        private long _Options;

        private long _Lastdiscussionid;

        private System.Nullable<long> _Discussions;

        private string _Lastdiscussion;

        private long _Lastupdate;

        private long _Transferowner;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnSocialgroupcategoryidChanging(long value);
        partial void OnSocialgroupcategoryidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreatoruseridChanging(long value);
        partial void OnCreatoruseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnMembersChanging(long value);
        partial void OnMembersChanged();
        partial void OnPicturecountChanging(long value);
        partial void OnPicturecountChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnLastgmidChanging(long value);
        partial void OnLastgmidChanged();
        partial void OnVisibleChanging(long value);
        partial void OnVisibleChanged();
        partial void OnDeletedChanging(long value);
        partial void OnDeletedChanged();
        partial void OnModerationChanging(long value);
        partial void OnModerationChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnModeratedmembersChanging(long value);
        partial void OnModeratedmembersChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnLastdiscussionidChanging(long value);
        partial void OnLastdiscussionidChanged();
        partial void OnDiscussionsChanging(System.Nullable<long> value);
        partial void OnDiscussionsChanged();
        partial void OnLastdiscussionChanging(string value);
        partial void OnLastdiscussionChanged();
        partial void OnLastupdateChanging(long value);
        partial void OnLastupdateChanged();
        partial void OnTransferownerChanging(long value);
        partial void OnTransferownerChanged();
        #endregion

        public Socialgroup()
        {
            OnCreated();
        }

        [Column(Name = @"groupid", Storage = "_Groupid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"socialgroupcategoryid", Storage = "_Socialgroupcategoryid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Socialgroupcategoryid
        {
            get
            {
                return this._Socialgroupcategoryid;
            }
            set
            {
                if (this._Socialgroupcategoryid != value)
                {
                    this.OnSocialgroupcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Socialgroupcategoryid = value;
                    this.SendPropertyChanged("Socialgroupcategoryid");
                    this.OnSocialgroupcategoryidChanged();
                }
            }
        }

        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"creatoruserid", Storage = "_Creatoruserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Creatoruserid
        {
            get
            {
                return this._Creatoruserid;
            }
            set
            {
                if (this._Creatoruserid != value)
                {
                    this.OnCreatoruseridChanging(value);
                    this.SendPropertyChanging();
                    this._Creatoruserid = value;
                    this.SendPropertyChanged("Creatoruserid");
                    this.OnCreatoruseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"members", Storage = "_Members", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Members
        {
            get
            {
                return this._Members;
            }
            set
            {
                if (this._Members != value)
                {
                    this.OnMembersChanging(value);
                    this.SendPropertyChanging();
                    this._Members = value;
                    this.SendPropertyChanged("Members");
                    this.OnMembersChanged();
                }
            }
        }

        [Column(Name = @"picturecount", Storage = "_Picturecount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Picturecount
        {
            get
            {
                return this._Picturecount;
            }
            set
            {
                if (this._Picturecount != value)
                {
                    this.OnPicturecountChanging(value);
                    this.SendPropertyChanging();
                    this._Picturecount = value;
                    this.SendPropertyChanged("Picturecount");
                    this.OnPicturecountChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"lastgmid", Storage = "_Lastgmid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastgmid
        {
            get
            {
                return this._Lastgmid;
            }
            set
            {
                if (this._Lastgmid != value)
                {
                    this.OnLastgmidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastgmid = value;
                    this.SendPropertyChanged("Lastgmid");
                    this.OnLastgmidChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Column(Name = @"moderation", Storage = "_Moderation", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Moderation
        {
            get
            {
                return this._Moderation;
            }
            set
            {
                if (this._Moderation != value)
                {
                    this.OnModerationChanging(value);
                    this.SendPropertyChanging();
                    this._Moderation = value;
                    this.SendPropertyChanged("Moderation");
                    this.OnModerationChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"moderatedmembers", Storage = "_Moderatedmembers", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Moderatedmembers
        {
            get
            {
                return this._Moderatedmembers;
            }
            set
            {
                if (this._Moderatedmembers != value)
                {
                    this.OnModeratedmembersChanging(value);
                    this.SendPropertyChanging();
                    this._Moderatedmembers = value;
                    this.SendPropertyChanged("Moderatedmembers");
                    this.OnModeratedmembersChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"lastdiscussionid", Storage = "_Lastdiscussionid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastdiscussionid
        {
            get
            {
                return this._Lastdiscussionid;
            }
            set
            {
                if (this._Lastdiscussionid != value)
                {
                    this.OnLastdiscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastdiscussionid = value;
                    this.SendPropertyChanged("Lastdiscussionid");
                    this.OnLastdiscussionidChanged();
                }
            }
        }

        [Column(Name = @"discussions", Storage = "_Discussions", DbType = "int(10)")]
        public System.Nullable<long> Discussions
        {
            get
            {
                return this._Discussions;
            }
            set
            {
                if (this._Discussions != value)
                {
                    this.OnDiscussionsChanging(value);
                    this.SendPropertyChanging();
                    this._Discussions = value;
                    this.SendPropertyChanged("Discussions");
                    this.OnDiscussionsChanged();
                }
            }
        }

        [Column(Name = @"lastdiscussion", Storage = "_Lastdiscussion", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Lastdiscussion
        {
            get
            {
                return this._Lastdiscussion;
            }
            set
            {
                if (this._Lastdiscussion != value)
                {
                    this.OnLastdiscussionChanging(value);
                    this.SendPropertyChanging();
                    this._Lastdiscussion = value;
                    this.SendPropertyChanged("Lastdiscussion");
                    this.OnLastdiscussionChanged();
                }
            }
        }

        [Column(Name = @"lastupdate", Storage = "_Lastupdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastupdate
        {
            get
            {
                return this._Lastupdate;
            }
            set
            {
                if (this._Lastupdate != value)
                {
                    this.OnLastupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Lastupdate = value;
                    this.SendPropertyChanged("Lastupdate");
                    this.OnLastupdateChanged();
                }
            }
        }

        [Column(Name = @"transferowner", Storage = "_Transferowner", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Transferowner
        {
            get
            {
                return this._Transferowner;
            }
            set
            {
                if (this._Transferowner != value)
                {
                    this.OnTransferownerChanging(value);
                    this.SendPropertyChanging();
                    this._Transferowner = value;
                    this.SendPropertyChanged("Transferowner");
                    this.OnTransferownerChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.socialgroupcategory")]
    public partial class Socialgroupcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Socialgroupcategoryid;

        private long _Creatoruserid;

        private string _Title;

        private string _Description;

        private long _Displayorder;

        private long _Lastupdate;

        private System.Nullable<long> _Groups;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSocialgroupcategoryidChanging(long value);
        partial void OnSocialgroupcategoryidChanged();
        partial void OnCreatoruseridChanging(long value);
        partial void OnCreatoruseridChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDisplayorderChanging(long value);
        partial void OnDisplayorderChanged();
        partial void OnLastupdateChanging(long value);
        partial void OnLastupdateChanged();
        partial void OnGroupsChanging(System.Nullable<long> value);
        partial void OnGroupsChanged();
        #endregion

        public Socialgroupcategory()
        {
            OnCreated();
        }

        [Column(Name = @"socialgroupcategoryid", Storage = "_Socialgroupcategoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Socialgroupcategoryid
        {
            get
            {
                return this._Socialgroupcategoryid;
            }
            set
            {
                if (this._Socialgroupcategoryid != value)
                {
                    this.OnSocialgroupcategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Socialgroupcategoryid = value;
                    this.SendPropertyChanged("Socialgroupcategoryid");
                    this.OnSocialgroupcategoryidChanged();
                }
            }
        }

        [Column(Name = @"creatoruserid", Storage = "_Creatoruserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Creatoruserid
        {
            get
            {
                return this._Creatoruserid;
            }
            set
            {
                if (this._Creatoruserid != value)
                {
                    this.OnCreatoruseridChanging(value);
                    this.SendPropertyChanging();
                    this._Creatoruserid = value;
                    this.SendPropertyChanged("Creatoruserid");
                    this.OnCreatoruseridChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"lastupdate", Storage = "_Lastupdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastupdate
        {
            get
            {
                return this._Lastupdate;
            }
            set
            {
                if (this._Lastupdate != value)
                {
                    this.OnLastupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Lastupdate = value;
                    this.SendPropertyChanged("Lastupdate");
                    this.OnLastupdateChanged();
                }
            }
        }

        [Column(Name = @"groups", Storage = "_Groups", DbType = "int(10)")]
        public System.Nullable<long> Groups
        {
            get
            {
                return this._Groups;
            }
            set
            {
                if (this._Groups != value)
                {
                    this.OnGroupsChanging(value);
                    this.SendPropertyChanging();
                    this._Groups = value;
                    this.SendPropertyChanged("Groups");
                    this.OnGroupsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.socialgroupicon")]
    public partial class Socialgroupicon : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Groupid;

        private System.Nullable<long> _Userid;

        private byte[] _Filedata;

        private string _Extension;

        private long _Dateline;

        private long _Width;

        private long _Height;

        private byte[] _Thumbnailfiledata;

        private long _Thumbnailwidth;

        private long _Thumbnailheight;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnUseridChanging(System.Nullable<long> value);
        partial void OnUseridChanged();
        partial void OnFiledataChanging(byte[] value);
        partial void OnFiledataChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnWidthChanging(long value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(long value);
        partial void OnHeightChanged();
        partial void OnThumbnailfiledataChanging(byte[] value);
        partial void OnThumbnailfiledataChanged();
        partial void OnThumbnailwidthChanging(long value);
        partial void OnThumbnailwidthChanged();
        partial void OnThumbnailheightChanging(long value);
        partial void OnThumbnailheightChanged();
        #endregion

        public Socialgroupicon()
        {
            OnCreated();
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", DbType = "int(10)")]
        public System.Nullable<long> Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"filedata", Storage = "_Filedata", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filedata
        {
            get
            {
                return this._Filedata;
            }
            set
            {
                if (this._Filedata != value)
                {
                    this.OnFiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Filedata = value;
                    this.SendPropertyChanged("Filedata");
                    this.OnFiledataChanged();
                }
            }
        }

        [Column(Name = @"extension", Storage = "_Extension", CanBeNull = false, DbType = "varchar(20) NOT NULL")]
        public string Extension
        {
            get
            {
                return this._Extension;
            }
            set
            {
                if (this._Extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging();
                    this._Extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"width", Storage = "_Width", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if (this._Width != value)
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Name = @"height", Storage = "_Height", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_filedata", Storage = "_Thumbnailfiledata", DbType = "mediumblob", UpdateCheck = UpdateCheck.Never)]
        public byte[] Thumbnailfiledata
        {
            get
            {
                return this._Thumbnailfiledata;
            }
            set
            {
                if (this._Thumbnailfiledata != value)
                {
                    this.OnThumbnailfiledataChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailfiledata = value;
                    this.SendPropertyChanged("Thumbnailfiledata");
                    this.OnThumbnailfiledataChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_width", Storage = "_Thumbnailwidth", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnailwidth
        {
            get
            {
                return this._Thumbnailwidth;
            }
            set
            {
                if (this._Thumbnailwidth != value)
                {
                    this.OnThumbnailwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailwidth = value;
                    this.SendPropertyChanged("Thumbnailwidth");
                    this.OnThumbnailwidthChanged();
                }
            }
        }

        [Column(Name = @"thumbnail_height", Storage = "_Thumbnailheight", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Thumbnailheight
        {
            get
            {
                return this._Thumbnailheight;
            }
            set
            {
                if (this._Thumbnailheight != value)
                {
                    this.OnThumbnailheightChanging(value);
                    this.SendPropertyChanging();
                    this._Thumbnailheight = value;
                    this.SendPropertyChanged("Thumbnailheight");
                    this.OnThumbnailheightChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.socialgroupmember")]
    public partial class Socialgroupmember : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Groupid;

        private long _Dateline;

        private string _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public Socialgroupmember()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.spamlog")]
    public partial class Spamlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        #endregion

        public Spamlog()
        {
            OnCreated();
        }

        [Column(Name = @"postid", Storage = "_Postid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.stats")]
    public partial class Stat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Dateline;

        private int _Nuser;

        private int _Nthread;

        private int _Npost;

        private int _Ausers;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnNuserChanging(int value);
        partial void OnNuserChanged();
        partial void OnNthreadChanging(int value);
        partial void OnNthreadChanged();
        partial void OnNpostChanging(int value);
        partial void OnNpostChanged();
        partial void OnAusersChanging(int value);
        partial void OnAusersChanged();
        #endregion

        public Stat()
        {
            OnCreated();
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"nuser", Storage = "_Nuser", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Nuser
        {
            get
            {
                return this._Nuser;
            }
            set
            {
                if (this._Nuser != value)
                {
                    this.OnNuserChanging(value);
                    this.SendPropertyChanging();
                    this._Nuser = value;
                    this.SendPropertyChanged("Nuser");
                    this.OnNuserChanged();
                }
            }
        }

        [Column(Name = @"nthread", Storage = "_Nthread", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Nthread
        {
            get
            {
                return this._Nthread;
            }
            set
            {
                if (this._Nthread != value)
                {
                    this.OnNthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Nthread = value;
                    this.SendPropertyChanged("Nthread");
                    this.OnNthreadChanged();
                }
            }
        }

        [Column(Name = @"npost", Storage = "_Npost", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Npost
        {
            get
            {
                return this._Npost;
            }
            set
            {
                if (this._Npost != value)
                {
                    this.OnNpostChanging(value);
                    this.SendPropertyChanging();
                    this._Npost = value;
                    this.SendPropertyChanged("Npost");
                    this.OnNpostChanged();
                }
            }
        }

        [Column(Name = @"ausers", Storage = "_Ausers", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Ausers
        {
            get
            {
                return this._Ausers;
            }
            set
            {
                if (this._Ausers != value)
                {
                    this.OnAusersChanging(value);
                    this.SendPropertyChanging();
                    this._Ausers = value;
                    this.SendPropertyChanged("Ausers");
                    this.OnAusersChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.strikes")]
    public partial class Strike : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Striketime;

        private string _Strikeip;

        private string _Username;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStriketimeChanging(long value);
        partial void OnStriketimeChanged();
        partial void OnStrikeipChanging(string value);
        partial void OnStrikeipChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        #endregion

        public Strike()
        {
            OnCreated();
        }

        [Column(Name = @"striketime", Storage = "_Striketime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Striketime
        {
            get
            {
                return this._Striketime;
            }
            set
            {
                if (this._Striketime != value)
                {
                    this.OnStriketimeChanging(value);
                    this.SendPropertyChanging();
                    this._Striketime = value;
                    this.SendPropertyChanged("Striketime");
                    this.OnStriketimeChanged();
                }
            }
        }

        [Column(Name = @"strikeip", Storage = "_Strikeip", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Strikeip
        {
            get
            {
                return this._Strikeip;
            }
            set
            {
                if (this._Strikeip != value)
                {
                    this.OnStrikeipChanging(value);
                    this.SendPropertyChanging();
                    this._Strikeip = value;
                    this.SendPropertyChanged("Strikeip");
                    this.OnStrikeipChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.style")]
    public partial class Style : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Styleid;

        private string _Title;

        private short _Parentid;

        private string _Parentlist;

        private string _Templatelist;

        private string _Csscolors;

        private string _Css;

        private string _Stylevars;

        private string _Newstylevars;

        private string _Replacements;

        private string _Editorstyles;

        private int _Userselect;

        private int _Displayorder;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnParentidChanging(short value);
        partial void OnParentidChanged();
        partial void OnParentlistChanging(string value);
        partial void OnParentlistChanged();
        partial void OnTemplatelistChanging(string value);
        partial void OnTemplatelistChanged();
        partial void OnCsscolorsChanging(string value);
        partial void OnCsscolorsChanged();
        partial void OnCssChanging(string value);
        partial void OnCssChanged();
        partial void OnStylevarsChanging(string value);
        partial void OnStylevarsChanged();
        partial void OnNewstylevarsChanging(string value);
        partial void OnNewstylevarsChanged();
        partial void OnReplacementsChanging(string value);
        partial void OnReplacementsChanged();
        partial void OnEditorstylesChanging(string value);
        partial void OnEditorstylesChanged();
        partial void OnUserselectChanging(int value);
        partial void OnUserselectChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Style()
        {
            OnCreated();
        }

        [Column(Name = @"styleid", Storage = "_Styleid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"parentlist", Storage = "_Parentlist", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Parentlist
        {
            get
            {
                return this._Parentlist;
            }
            set
            {
                if (this._Parentlist != value)
                {
                    this.OnParentlistChanging(value);
                    this.SendPropertyChanging();
                    this._Parentlist = value;
                    this.SendPropertyChanged("Parentlist");
                    this.OnParentlistChanged();
                }
            }
        }

        [Column(Name = @"templatelist", Storage = "_Templatelist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Templatelist
        {
            get
            {
                return this._Templatelist;
            }
            set
            {
                if (this._Templatelist != value)
                {
                    this.OnTemplatelistChanging(value);
                    this.SendPropertyChanging();
                    this._Templatelist = value;
                    this.SendPropertyChanged("Templatelist");
                    this.OnTemplatelistChanged();
                }
            }
        }

        [Column(Name = @"csscolors", Storage = "_Csscolors", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Csscolors
        {
            get
            {
                return this._Csscolors;
            }
            set
            {
                if (this._Csscolors != value)
                {
                    this.OnCsscolorsChanging(value);
                    this.SendPropertyChanging();
                    this._Csscolors = value;
                    this.SendPropertyChanged("Csscolors");
                    this.OnCsscolorsChanged();
                }
            }
        }

        [Column(Name = @"css", Storage = "_Css", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Css
        {
            get
            {
                return this._Css;
            }
            set
            {
                if (this._Css != value)
                {
                    this.OnCssChanging(value);
                    this.SendPropertyChanging();
                    this._Css = value;
                    this.SendPropertyChanged("Css");
                    this.OnCssChanged();
                }
            }
        }

        [Column(Name = @"stylevars", Storage = "_Stylevars", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Stylevars
        {
            get
            {
                return this._Stylevars;
            }
            set
            {
                if (this._Stylevars != value)
                {
                    this.OnStylevarsChanging(value);
                    this.SendPropertyChanging();
                    this._Stylevars = value;
                    this.SendPropertyChanged("Stylevars");
                    this.OnStylevarsChanged();
                }
            }
        }

        [Column(Name = @"newstylevars", Storage = "_Newstylevars", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Newstylevars
        {
            get
            {
                return this._Newstylevars;
            }
            set
            {
                if (this._Newstylevars != value)
                {
                    this.OnNewstylevarsChanging(value);
                    this.SendPropertyChanging();
                    this._Newstylevars = value;
                    this.SendPropertyChanged("Newstylevars");
                    this.OnNewstylevarsChanged();
                }
            }
        }

        [Column(Name = @"replacements", Storage = "_Replacements", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Replacements
        {
            get
            {
                return this._Replacements;
            }
            set
            {
                if (this._Replacements != value)
                {
                    this.OnReplacementsChanging(value);
                    this.SendPropertyChanging();
                    this._Replacements = value;
                    this.SendPropertyChanged("Replacements");
                    this.OnReplacementsChanged();
                }
            }
        }

        [Column(Name = @"editorstyles", Storage = "_Editorstyles", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Editorstyles
        {
            get
            {
                return this._Editorstyles;
            }
            set
            {
                if (this._Editorstyles != value)
                {
                    this.OnEditorstylesChanging(value);
                    this.SendPropertyChanging();
                    this._Editorstyles = value;
                    this.SendPropertyChanged("Editorstyles");
                    this.OnEditorstylesChanged();
                }
            }
        }

        [Column(Name = @"userselect", Storage = "_Userselect", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Userselect
        {
            get
            {
                return this._Userselect;
            }
            set
            {
                if (this._Userselect != value)
                {
                    this.OnUserselectChanging(value);
                    this.SendPropertyChanging();
                    this._Userselect = value;
                    this.SendPropertyChanged("Userselect");
                    this.OnUserselectChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.stylevar")]
    public partial class Stylevar : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Stylevarid;

        private short _Styleid;

        private byte[] _Value;

        private long _Dateline;

        private string _Username;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStylevaridChanging(string value);
        partial void OnStylevaridChanged();
        partial void OnStyleidChanging(short value);
        partial void OnStyleidChanged();
        partial void OnValueChanging(byte[] value);
        partial void OnValueChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        #endregion

        public Stylevar()
        {
            OnCreated();
        }

        [Column(Name = @"stylevarid", Storage = "_Stylevarid", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Stylevarid
        {
            get
            {
                return this._Stylevarid;
            }
            set
            {
                if (this._Stylevarid != value)
                {
                    this.OnStylevaridChanging(value);
                    this.SendPropertyChanging();
                    this._Stylevarid = value;
                    this.SendPropertyChanged("Stylevarid");
                    this.OnStylevaridChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(6) NOT NULL", IsPrimaryKey = true)]
        public short Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "mediumblob NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.stylevardfn")]
    public partial class Stylevardfn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Stylevarid;

        private short _Styleid;

        private short _Parentid;

        private string _Parentlist;

        private string _Stylevargroup;

        private string _Product;

        private string _Datatype;

        private string _Validation;

        private byte[] _Failsafe;

        private string _Units;

        private byte _Uneditable;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStylevaridChanging(string value);
        partial void OnStylevaridChanged();
        partial void OnStyleidChanging(short value);
        partial void OnStyleidChanged();
        partial void OnParentidChanging(short value);
        partial void OnParentidChanged();
        partial void OnParentlistChanging(string value);
        partial void OnParentlistChanged();
        partial void OnStylevargroupChanging(string value);
        partial void OnStylevargroupChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnDatatypeChanging(string value);
        partial void OnDatatypeChanged();
        partial void OnValidationChanging(string value);
        partial void OnValidationChanged();
        partial void OnFailsafeChanging(byte[] value);
        partial void OnFailsafeChanged();
        partial void OnUnitsChanging(string value);
        partial void OnUnitsChanged();
        partial void OnUneditableChanging(byte value);
        partial void OnUneditableChanged();
        #endregion

        public Stylevardfn()
        {
            OnCreated();
        }

        [Column(Name = @"stylevarid", Storage = "_Stylevarid", CanBeNull = false, DbType = "varchar(250) NOT NULL", IsPrimaryKey = true)]
        public string Stylevarid
        {
            get
            {
                return this._Stylevarid;
            }
            set
            {
                if (this._Stylevarid != value)
                {
                    this.OnStylevaridChanging(value);
                    this.SendPropertyChanging();
                    this._Stylevarid = value;
                    this.SendPropertyChanged("Stylevarid");
                    this.OnStylevaridChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"parentid", Storage = "_Parentid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

        [Column(Name = @"parentlist", Storage = "_Parentlist", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Parentlist
        {
            get
            {
                return this._Parentlist;
            }
            set
            {
                if (this._Parentlist != value)
                {
                    this.OnParentlistChanging(value);
                    this.SendPropertyChanging();
                    this._Parentlist = value;
                    this.SendPropertyChanged("Parentlist");
                    this.OnParentlistChanged();
                }
            }
        }

        [Column(Name = @"stylevargroup", Storage = "_Stylevargroup", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Stylevargroup
        {
            get
            {
                return this._Stylevargroup;
            }
            set
            {
                if (this._Stylevargroup != value)
                {
                    this.OnStylevargroupChanging(value);
                    this.SendPropertyChanging();
                    this._Stylevargroup = value;
                    this.SendPropertyChanged("Stylevargroup");
                    this.OnStylevargroupChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"datatype", Storage = "_Datatype", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Datatype
        {
            get
            {
                return this._Datatype;
            }
            set
            {
                if (this._Datatype != value)
                {
                    this.OnDatatypeChanging(value);
                    this.SendPropertyChanging();
                    this._Datatype = value;
                    this.SendPropertyChanged("Datatype");
                    this.OnDatatypeChanged();
                }
            }
        }

        [Column(Name = @"validation", Storage = "_Validation", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Validation
        {
            get
            {
                return this._Validation;
            }
            set
            {
                if (this._Validation != value)
                {
                    this.OnValidationChanging(value);
                    this.SendPropertyChanging();
                    this._Validation = value;
                    this.SendPropertyChanged("Validation");
                    this.OnValidationChanged();
                }
            }
        }

        [Column(Name = @"failsafe", Storage = "_Failsafe", CanBeNull = false, DbType = "mediumblob NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Failsafe
        {
            get
            {
                return this._Failsafe;
            }
            set
            {
                if (this._Failsafe != value)
                {
                    this.OnFailsafeChanging(value);
                    this.SendPropertyChanging();
                    this._Failsafe = value;
                    this.SendPropertyChanged("Failsafe");
                    this.OnFailsafeChanged();
                }
            }
        }

        [Column(Name = @"units", Storage = "_Units", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Units
        {
            get
            {
                return this._Units;
            }
            set
            {
                if (this._Units != value)
                {
                    this.OnUnitsChanging(value);
                    this.SendPropertyChanging();
                    this._Units = value;
                    this.SendPropertyChanged("Units");
                    this.OnUnitsChanged();
                }
            }
        }

        [Column(Name = @"uneditable", Storage = "_Uneditable", CanBeNull = false, DbType = "tinyint(3) NOT NULL")]
        public byte Uneditable
        {
            get
            {
                return this._Uneditable;
            }
            set
            {
                if (this._Uneditable != value)
                {
                    this.OnUneditableChanging(value);
                    this.SendPropertyChanging();
                    this._Uneditable = value;
                    this.SendPropertyChanged("Uneditable");
                    this.OnUneditableChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscribediscussion")]
    public partial class Subscribediscussion : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscribediscussionid;

        private long _Userid;

        private long _Discussionid;

        private int _Emailupdate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscribediscussionidChanging(long value);
        partial void OnSubscribediscussionidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDiscussionidChanging(long value);
        partial void OnDiscussionidChanged();
        partial void OnEmailupdateChanging(int value);
        partial void OnEmailupdateChanged();
        #endregion

        public Subscribediscussion()
        {
            OnCreated();
        }

        [Column(Name = @"subscribediscussionid", Storage = "_Subscribediscussionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscribediscussionid
        {
            get
            {
                return this._Subscribediscussionid;
            }
            set
            {
                if (this._Subscribediscussionid != value)
                {
                    this.OnSubscribediscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribediscussionid = value;
                    this.SendPropertyChanged("Subscribediscussionid");
                    this.OnSubscribediscussionidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"discussionid", Storage = "_Discussionid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Discussionid
        {
            get
            {
                return this._Discussionid;
            }
            set
            {
                if (this._Discussionid != value)
                {
                    this.OnDiscussionidChanging(value);
                    this.SendPropertyChanging();
                    this._Discussionid = value;
                    this.SendPropertyChanged("Discussionid");
                    this.OnDiscussionidChanged();
                }
            }
        }

        [Column(Name = @"emailupdate", Storage = "_Emailupdate", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Emailupdate
        {
            get
            {
                return this._Emailupdate;
            }
            set
            {
                if (this._Emailupdate != value)
                {
                    this.OnEmailupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Emailupdate = value;
                    this.SendPropertyChanged("Emailupdate");
                    this.OnEmailupdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscribeevent")]
    public partial class Subscribeevent : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscribeeventid;

        private long _Userid;

        private long _Eventid;

        private long _Lastreminder;

        private long _Reminder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscribeeventidChanging(long value);
        partial void OnSubscribeeventidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnEventidChanging(long value);
        partial void OnEventidChanged();
        partial void OnLastreminderChanging(long value);
        partial void OnLastreminderChanged();
        partial void OnReminderChanging(long value);
        partial void OnReminderChanged();
        #endregion

        public Subscribeevent()
        {
            OnCreated();
        }

        [Column(Name = @"subscribeeventid", Storage = "_Subscribeeventid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscribeeventid
        {
            get
            {
                return this._Subscribeeventid;
            }
            set
            {
                if (this._Subscribeeventid != value)
                {
                    this.OnSubscribeeventidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribeeventid = value;
                    this.SendPropertyChanged("Subscribeeventid");
                    this.OnSubscribeeventidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"eventid", Storage = "_Eventid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Eventid
        {
            get
            {
                return this._Eventid;
            }
            set
            {
                if (this._Eventid != value)
                {
                    this.OnEventidChanging(value);
                    this.SendPropertyChanging();
                    this._Eventid = value;
                    this.SendPropertyChanged("Eventid");
                    this.OnEventidChanged();
                }
            }
        }

        [Column(Name = @"lastreminder", Storage = "_Lastreminder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastreminder
        {
            get
            {
                return this._Lastreminder;
            }
            set
            {
                if (this._Lastreminder != value)
                {
                    this.OnLastreminderChanging(value);
                    this.SendPropertyChanging();
                    this._Lastreminder = value;
                    this.SendPropertyChanged("Lastreminder");
                    this.OnLastreminderChanged();
                }
            }
        }

        [Column(Name = @"reminder", Storage = "_Reminder", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reminder
        {
            get
            {
                return this._Reminder;
            }
            set
            {
                if (this._Reminder != value)
                {
                    this.OnReminderChanging(value);
                    this.SendPropertyChanging();
                    this._Reminder = value;
                    this.SendPropertyChanged("Reminder");
                    this.OnReminderChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscribeforum")]
    public partial class Subscribeforum : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscribeforumid;

        private long _Userid;

        private int _Forumid;

        private int _Emailupdate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscribeforumidChanging(long value);
        partial void OnSubscribeforumidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnEmailupdateChanging(int value);
        partial void OnEmailupdateChanged();
        #endregion

        public Subscribeforum()
        {
            OnCreated();
        }

        [Column(Name = @"subscribeforumid", Storage = "_Subscribeforumid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscribeforumid
        {
            get
            {
                return this._Subscribeforumid;
            }
            set
            {
                if (this._Subscribeforumid != value)
                {
                    this.OnSubscribeforumidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribeforumid = value;
                    this.SendPropertyChanged("Subscribeforumid");
                    this.OnSubscribeforumidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"emailupdate", Storage = "_Emailupdate", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Emailupdate
        {
            get
            {
                return this._Emailupdate;
            }
            set
            {
                if (this._Emailupdate != value)
                {
                    this.OnEmailupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Emailupdate = value;
                    this.SendPropertyChanged("Emailupdate");
                    this.OnEmailupdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscribegroup")]
    public partial class Subscribegroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscribegroupid;

        private long _Userid;

        private long _Groupid;

        private string _Emailupdate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscribegroupidChanging(long value);
        partial void OnSubscribegroupidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnGroupidChanging(long value);
        partial void OnGroupidChanged();
        partial void OnEmailupdateChanging(string value);
        partial void OnEmailupdateChanged();
        #endregion

        public Subscribegroup()
        {
            OnCreated();
        }

        [Column(Name = @"subscribegroupid", Storage = "_Subscribegroupid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscribegroupid
        {
            get
            {
                return this._Subscribegroupid;
            }
            set
            {
                if (this._Subscribegroupid != value)
                {
                    this.OnSubscribegroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribegroupid = value;
                    this.SendPropertyChanged("Subscribegroupid");
                    this.OnSubscribegroupidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"groupid", Storage = "_Groupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupid
        {
            get
            {
                return this._Groupid;
            }
            set
            {
                if (this._Groupid != value)
                {
                    this.OnGroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Groupid = value;
                    this.SendPropertyChanged("Groupid");
                    this.OnGroupidChanged();
                }
            }
        }

        [Column(Name = @"emailupdate", Storage = "_Emailupdate", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Emailupdate
        {
            get
            {
                return this._Emailupdate;
            }
            set
            {
                if (this._Emailupdate != value)
                {
                    this.OnEmailupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Emailupdate = value;
                    this.SendPropertyChanged("Emailupdate");
                    this.OnEmailupdateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscribethread")]
    public partial class Subscribethread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscribethreadid;

        private long _Userid;

        private long _Threadid;

        private int _Emailupdate;

        private long _Folderid;

        private int _Canview;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscribethreadidChanging(long value);
        partial void OnSubscribethreadidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnEmailupdateChanging(int value);
        partial void OnEmailupdateChanged();
        partial void OnFolderidChanging(long value);
        partial void OnFolderidChanged();
        partial void OnCanviewChanging(int value);
        partial void OnCanviewChanged();
        #endregion

        public Subscribethread()
        {
            OnCreated();
        }

        [Column(Name = @"subscribethreadid", Storage = "_Subscribethreadid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscribethreadid
        {
            get
            {
                return this._Subscribethreadid;
            }
            set
            {
                if (this._Subscribethreadid != value)
                {
                    this.OnSubscribethreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribethreadid = value;
                    this.SendPropertyChanged("Subscribethreadid");
                    this.OnSubscribethreadidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"emailupdate", Storage = "_Emailupdate", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Emailupdate
        {
            get
            {
                return this._Emailupdate;
            }
            set
            {
                if (this._Emailupdate != value)
                {
                    this.OnEmailupdateChanging(value);
                    this.SendPropertyChanging();
                    this._Emailupdate = value;
                    this.SendPropertyChanged("Emailupdate");
                    this.OnEmailupdateChanged();
                }
            }
        }

        [Column(Name = @"folderid", Storage = "_Folderid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Folderid
        {
            get
            {
                return this._Folderid;
            }
            set
            {
                if (this._Folderid != value)
                {
                    this.OnFolderidChanging(value);
                    this.SendPropertyChanging();
                    this._Folderid = value;
                    this.SendPropertyChanged("Folderid");
                    this.OnFolderidChanged();
                }
            }
        }

        [Column(Name = @"canview", Storage = "_Canview", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Canview
        {
            get
            {
                return this._Canview;
            }
            set
            {
                if (this._Canview != value)
                {
                    this.OnCanviewChanging(value);
                    this.SendPropertyChanging();
                    this._Canview = value;
                    this.SendPropertyChanged("Canview");
                    this.OnCanviewChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscription")]
    public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Subscriptionid;

        private string _Varname;

        private string _Cost;

        private string _Forums;

        private short _Nusergroupid;

        private string _Membergroupids;

        private int _Active;

        private long _Options;

        private int _Displayorder;

        private long _Adminoptions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscriptionidChanging(int value);
        partial void OnSubscriptionidChanged();
        partial void OnVarnameChanging(string value);
        partial void OnVarnameChanged();
        partial void OnCostChanging(string value);
        partial void OnCostChanged();
        partial void OnForumsChanging(string value);
        partial void OnForumsChanged();
        partial void OnNusergroupidChanging(short value);
        partial void OnNusergroupidChanged();
        partial void OnMembergroupidsChanging(string value);
        partial void OnMembergroupidsChanged();
        partial void OnActiveChanging(int value);
        partial void OnActiveChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnDisplayorderChanging(int value);
        partial void OnDisplayorderChanged();
        partial void OnAdminoptionsChanging(long value);
        partial void OnAdminoptionsChanged();
        #endregion

        public Subscription()
        {
            OnCreated();
        }

        [Column(Name = @"subscriptionid", Storage = "_Subscriptionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Subscriptionid
        {
            get
            {
                return this._Subscriptionid;
            }
            set
            {
                if (this._Subscriptionid != value)
                {
                    this.OnSubscriptionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionid = value;
                    this.SendPropertyChanged("Subscriptionid");
                    this.OnSubscriptionidChanged();
                }
            }
        }

        [Column(Name = @"varname", Storage = "_Varname", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Varname
        {
            get
            {
                return this._Varname;
            }
            set
            {
                if (this._Varname != value)
                {
                    this.OnVarnameChanging(value);
                    this.SendPropertyChanging();
                    this._Varname = value;
                    this.SendPropertyChanged("Varname");
                    this.OnVarnameChanged();
                }
            }
        }

        [Column(Name = @"cost", Storage = "_Cost", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

        [Column(Name = @"forums", Storage = "_Forums", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Forums
        {
            get
            {
                return this._Forums;
            }
            set
            {
                if (this._Forums != value)
                {
                    this.OnForumsChanging(value);
                    this.SendPropertyChanging();
                    this._Forums = value;
                    this.SendPropertyChanged("Forums");
                    this.OnForumsChanged();
                }
            }
        }

        [Column(Name = @"nusergroupid", Storage = "_Nusergroupid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Nusergroupid
        {
            get
            {
                return this._Nusergroupid;
            }
            set
            {
                if (this._Nusergroupid != value)
                {
                    this.OnNusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Nusergroupid = value;
                    this.SendPropertyChanged("Nusergroupid");
                    this.OnNusergroupidChanged();
                }
            }
        }

        [Column(Name = @"membergroupids", Storage = "_Membergroupids", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Membergroupids
        {
            get
            {
                return this._Membergroupids;
            }
            set
            {
                if (this._Membergroupids != value)
                {
                    this.OnMembergroupidsChanging(value);
                    this.SendPropertyChanging();
                    this._Membergroupids = value;
                    this.SendPropertyChanged("Membergroupids");
                    this.OnMembergroupidsChanged();
                }
            }
        }

        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"displayorder", Storage = "_Displayorder", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displayorder
        {
            get
            {
                return this._Displayorder;
            }
            set
            {
                if (this._Displayorder != value)
                {
                    this.OnDisplayorderChanging(value);
                    this.SendPropertyChanging();
                    this._Displayorder = value;
                    this.SendPropertyChanged("Displayorder");
                    this.OnDisplayorderChanged();
                }
            }
        }

        [Column(Name = @"adminoptions", Storage = "_Adminoptions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminoptions
        {
            get
            {
                return this._Adminoptions;
            }
            set
            {
                if (this._Adminoptions != value)
                {
                    this.OnAdminoptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Adminoptions = value;
                    this.SendPropertyChanged("Adminoptions");
                    this.OnAdminoptionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscriptionlog")]
    public partial class Subscriptionlog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Subscriptionlogid;

        private short _Subscriptionid;

        private long _Userid;

        private short _Pusergroupid;

        private short _Status;

        private long _Regdate;

        private long _Expirydate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscriptionlogidChanging(int value);
        partial void OnSubscriptionlogidChanged();
        partial void OnSubscriptionidChanging(short value);
        partial void OnSubscriptionidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPusergroupidChanging(short value);
        partial void OnPusergroupidChanged();
        partial void OnStatusChanging(short value);
        partial void OnStatusChanged();
        partial void OnRegdateChanging(long value);
        partial void OnRegdateChanged();
        partial void OnExpirydateChanging(long value);
        partial void OnExpirydateChanged();
        #endregion

        public Subscriptionlog()
        {
            OnCreated();
        }

        [Column(Name = @"subscriptionlogid", Storage = "_Subscriptionlogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "mediumint(8) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Subscriptionlogid
        {
            get
            {
                return this._Subscriptionlogid;
            }
            set
            {
                if (this._Subscriptionlogid != value)
                {
                    this.OnSubscriptionlogidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionlogid = value;
                    this.SendPropertyChanged("Subscriptionlogid");
                    this.OnSubscriptionlogidChanged();
                }
            }
        }

        [Column(Name = @"subscriptionid", Storage = "_Subscriptionid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Subscriptionid
        {
            get
            {
                return this._Subscriptionid;
            }
            set
            {
                if (this._Subscriptionid != value)
                {
                    this.OnSubscriptionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionid = value;
                    this.SendPropertyChanged("Subscriptionid");
                    this.OnSubscriptionidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"pusergroupid", Storage = "_Pusergroupid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Pusergroupid
        {
            get
            {
                return this._Pusergroupid;
            }
            set
            {
                if (this._Pusergroupid != value)
                {
                    this.OnPusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Pusergroupid = value;
                    this.SendPropertyChanged("Pusergroupid");
                    this.OnPusergroupidChanged();
                }
            }
        }

        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"regdate", Storage = "_Regdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Regdate
        {
            get
            {
                return this._Regdate;
            }
            set
            {
                if (this._Regdate != value)
                {
                    this.OnRegdateChanging(value);
                    this.SendPropertyChanging();
                    this._Regdate = value;
                    this.SendPropertyChanged("Regdate");
                    this.OnRegdateChanged();
                }
            }
        }

        [Column(Name = @"expirydate", Storage = "_Expirydate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Expirydate
        {
            get
            {
                return this._Expirydate;
            }
            set
            {
                if (this._Expirydate != value)
                {
                    this.OnExpirydateChanging(value);
                    this.SendPropertyChanging();
                    this._Expirydate = value;
                    this.SendPropertyChanged("Expirydate");
                    this.OnExpirydateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.subscriptionpermission")]
    public partial class Subscriptionpermission : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Subscriptionpermissionid;

        private long _Subscriptionid;

        private long _Usergroupid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSubscriptionpermissionidChanging(long value);
        partial void OnSubscriptionpermissionidChanged();
        partial void OnSubscriptionidChanging(long value);
        partial void OnSubscriptionidChanged();
        partial void OnUsergroupidChanging(long value);
        partial void OnUsergroupidChanged();
        #endregion

        public Subscriptionpermission()
        {
            OnCreated();
        }

        [Column(Name = @"subscriptionpermissionid", Storage = "_Subscriptionpermissionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Subscriptionpermissionid
        {
            get
            {
                return this._Subscriptionpermissionid;
            }
            set
            {
                if (this._Subscriptionpermissionid != value)
                {
                    this.OnSubscriptionpermissionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionpermissionid = value;
                    this.SendPropertyChanged("Subscriptionpermissionid");
                    this.OnSubscriptionpermissionidChanged();
                }
            }
        }

        [Column(Name = @"subscriptionid", Storage = "_Subscriptionid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Subscriptionid
        {
            get
            {
                return this._Subscriptionid;
            }
            set
            {
                if (this._Subscriptionid != value)
                {
                    this.OnSubscriptionidChanging(value);
                    this.SendPropertyChanging();
                    this._Subscriptionid = value;
                    this.SendPropertyChanged("Subscriptionid");
                    this.OnSubscriptionidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tachyforumcounter")]
    public partial class Tachyforumcounter : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Forumid;

        private int _Threadcount;

        private long _Replycount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnThreadcountChanging(int value);
        partial void OnThreadcountChanged();
        partial void OnReplycountChanging(long value);
        partial void OnReplycountChanged();
        #endregion

        public Tachyforumcounter()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL", IsPrimaryKey = true)]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"threadcount", Storage = "_Threadcount", CanBeNull = false, DbType = "mediumint(8) NOT NULL")]
        public int Threadcount
        {
            get
            {
                return this._Threadcount;
            }
            set
            {
                if (this._Threadcount != value)
                {
                    this.OnThreadcountChanging(value);
                    this.SendPropertyChanging();
                    this._Threadcount = value;
                    this.SendPropertyChanged("Threadcount");
                    this.OnThreadcountChanged();
                }
            }
        }

        [Column(Name = @"replycount", Storage = "_Replycount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Replycount
        {
            get
            {
                return this._Replycount;
            }
            set
            {
                if (this._Replycount != value)
                {
                    this.OnReplycountChanging(value);
                    this.SendPropertyChanging();
                    this._Replycount = value;
                    this.SendPropertyChanged("Replycount");
                    this.OnReplycountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tachyforumpost")]
    public partial class Tachyforumpost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Forumid;

        private long _Lastpost;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Lastpostid;

        private string _Lastthread;

        private long _Lastthreadid;

        private int _Lasticonid;

        private string _Lastprefixid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnForumidChanging(long value);
        partial void OnForumidChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        partial void OnLastthreadChanging(string value);
        partial void OnLastthreadChanged();
        partial void OnLastthreadidChanging(long value);
        partial void OnLastthreadidChanged();
        partial void OnLasticonidChanging(int value);
        partial void OnLasticonidChanged();
        partial void OnLastprefixidChanging(string value);
        partial void OnLastprefixidChanged();
        #endregion

        public Tachyforumpost()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }

        [Column(Name = @"lastthread", Storage = "_Lastthread", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Lastthread
        {
            get
            {
                return this._Lastthread;
            }
            set
            {
                if (this._Lastthread != value)
                {
                    this.OnLastthreadChanging(value);
                    this.SendPropertyChanging();
                    this._Lastthread = value;
                    this.SendPropertyChanged("Lastthread");
                    this.OnLastthreadChanged();
                }
            }
        }

        [Column(Name = @"lastthreadid", Storage = "_Lastthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastthreadid
        {
            get
            {
                return this._Lastthreadid;
            }
            set
            {
                if (this._Lastthreadid != value)
                {
                    this.OnLastthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastthreadid = value;
                    this.SendPropertyChanged("Lastthreadid");
                    this.OnLastthreadidChanged();
                }
            }
        }

        [Column(Name = @"lasticonid", Storage = "_Lasticonid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Lasticonid
        {
            get
            {
                return this._Lasticonid;
            }
            set
            {
                if (this._Lasticonid != value)
                {
                    this.OnLasticonidChanging(value);
                    this.SendPropertyChanging();
                    this._Lasticonid = value;
                    this.SendPropertyChanged("Lasticonid");
                    this.OnLasticonidChanged();
                }
            }
        }

        [Column(Name = @"lastprefixid", Storage = "_Lastprefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Lastprefixid
        {
            get
            {
                return this._Lastprefixid;
            }
            set
            {
                if (this._Lastprefixid != value)
                {
                    this.OnLastprefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastprefixid = value;
                    this.SendPropertyChanged("Lastprefixid");
                    this.OnLastprefixidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tachythreadcounter")]
    public partial class Tachythreadcounter : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Threadid;

        private long _Replycount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnReplycountChanging(long value);
        partial void OnReplycountChanged();
        #endregion

        public Tachythreadcounter()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"replycount", Storage = "_Replycount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Replycount
        {
            get
            {
                return this._Replycount;
            }
            set
            {
                if (this._Replycount != value)
                {
                    this.OnReplycountChanging(value);
                    this.SendPropertyChanging();
                    this._Replycount = value;
                    this.SendPropertyChanged("Replycount");
                    this.OnReplycountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tachythreadpost")]
    public partial class Tachythreadpost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Threadid;

        private long _Lastpost;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Lastpostid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        #endregion

        public Tachythreadpost()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tag")]
    public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Tagid;

        private string _Tagtext;

        private long _Dateline;

        private long _Canonicaltagid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTagidChanging(long value);
        partial void OnTagidChanged();
        partial void OnTagtextChanging(string value);
        partial void OnTagtextChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnCanonicaltagidChanging(long value);
        partial void OnCanonicaltagidChanged();
        #endregion

        public Tag()
        {
            OnCreated();
        }

        [Column(Name = @"tagid", Storage = "_Tagid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Tagid
        {
            get
            {
                return this._Tagid;
            }
            set
            {
                if (this._Tagid != value)
                {
                    this.OnTagidChanging(value);
                    this.SendPropertyChanging();
                    this._Tagid = value;
                    this.SendPropertyChanged("Tagid");
                    this.OnTagidChanged();
                }
            }
        }

        [Column(Name = @"tagtext", Storage = "_Tagtext", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Tagtext
        {
            get
            {
                return this._Tagtext;
            }
            set
            {
                if (this._Tagtext != value)
                {
                    this.OnTagtextChanging(value);
                    this.SendPropertyChanging();
                    this._Tagtext = value;
                    this.SendPropertyChanged("Tagtext");
                    this.OnTagtextChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"canonicaltagid", Storage = "_Canonicaltagid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Canonicaltagid
        {
            get
            {
                return this._Canonicaltagid;
            }
            set
            {
                if (this._Canonicaltagid != value)
                {
                    this.OnCanonicaltagidChanging(value);
                    this.SendPropertyChanging();
                    this._Canonicaltagid = value;
                    this.SendPropertyChanged("Canonicaltagid");
                    this.OnCanonicaltagidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tagcontent")]
    public partial class Tagcontent : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Tagid;

        private long _Contenttypeid;

        private long _Contentid;

        private long _Userid;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTagidChanging(long value);
        partial void OnTagidChanged();
        partial void OnContenttypeidChanging(long value);
        partial void OnContenttypeidChanged();
        partial void OnContentidChanging(long value);
        partial void OnContentidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Tagcontent()
        {
            OnCreated();
        }

        [Column(Name = @"tagid", Storage = "_Tagid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Tagid
        {
            get
            {
                return this._Tagid;
            }
            set
            {
                if (this._Tagid != value)
                {
                    this.OnTagidChanging(value);
                    this.SendPropertyChanging();
                    this._Tagid = value;
                    this.SendPropertyChanged("Tagid");
                    this.OnTagidChanged();
                }
            }
        }

        [Column(Name = @"contenttypeid", Storage = "_Contenttypeid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Contenttypeid
        {
            get
            {
                return this._Contenttypeid;
            }
            set
            {
                if (this._Contenttypeid != value)
                {
                    this.OnContenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contenttypeid = value;
                    this.SendPropertyChanged("Contenttypeid");
                    this.OnContenttypeidChanged();
                }
            }
        }

        [Column(Name = @"contentid", Storage = "_Contentid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Contentid
        {
            get
            {
                return this._Contentid;
            }
            set
            {
                if (this._Contentid != value)
                {
                    this.OnContentidChanging(value);
                    this.SendPropertyChanging();
                    this._Contentid = value;
                    this.SendPropertyChanged("Contentid");
                    this.OnContentidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.tagsearch")]
    public partial class Tagsearch : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Tagid;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTagidChanging(long value);
        partial void OnTagidChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Tagsearch()
        {
            OnCreated();
        }

        [Column(Name = @"tagid", Storage = "_Tagid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Tagid
        {
            get
            {
                return this._Tagid;
            }
            set
            {
                if (this._Tagid != value)
                {
                    this.OnTagidChanging(value);
                    this.SendPropertyChanging();
                    this._Tagid = value;
                    this.SendPropertyChanged("Tagid");
                    this.OnTagidChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.template")]
    public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Templateid;

        private short _Styleid;

        private string _Title;

        private string _Template1;

        private string _Templateun;

        private string _Templatetype;

        private long _Dateline;

        private string _Username;

        private string _Version;

        private string _Product;

        private string _Mergestatus;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTemplateidChanging(long value);
        partial void OnTemplateidChanged();
        partial void OnStyleidChanging(short value);
        partial void OnStyleidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTemplate1Changing(string value);
        partial void OnTemplate1Changed();
        partial void OnTemplateunChanging(string value);
        partial void OnTemplateunChanged();
        partial void OnTemplatetypeChanging(string value);
        partial void OnTemplatetypeChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        partial void OnMergestatusChanging(string value);
        partial void OnMergestatusChanged();
        #endregion

        public Template()
        {
            OnCreated();
        }

        [Column(Name = @"templateid", Storage = "_Templateid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Templateid
        {
            get
            {
                return this._Templateid;
            }
            set
            {
                if (this._Templateid != value)
                {
                    this.OnTemplateidChanging(value);
                    this.SendPropertyChanging();
                    this._Templateid = value;
                    this.SendPropertyChanged("Templateid");
                    this.OnTemplateidChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"template", Storage = "_Template1", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Template1
        {
            get
            {
                return this._Template1;
            }
            set
            {
                if (this._Template1 != value)
                {
                    this.OnTemplate1Changing(value);
                    this.SendPropertyChanging();
                    this._Template1 = value;
                    this.SendPropertyChanged("Template1");
                    this.OnTemplate1Changed();
                }
            }
        }

        [Column(Name = @"template_un", Storage = "_Templateun", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Templateun
        {
            get
            {
                return this._Templateun;
            }
            set
            {
                if (this._Templateun != value)
                {
                    this.OnTemplateunChanging(value);
                    this.SendPropertyChanging();
                    this._Templateun = value;
                    this.SendPropertyChanged("Templateun");
                    this.OnTemplateunChanged();
                }
            }
        }

        [Column(Name = @"templatetype", Storage = "_Templatetype", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Templatetype
        {
            get
            {
                return this._Templatetype;
            }
            set
            {
                if (this._Templatetype != value)
                {
                    this.OnTemplatetypeChanging(value);
                    this.SendPropertyChanging();
                    this._Templatetype = value;
                    this.SendPropertyChanged("Templatetype");
                    this.OnTemplatetypeChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(30) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

        [Column(Name = @"product", Storage = "_Product", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging();
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }

        [Column(Name = @"mergestatus", Storage = "_Mergestatus", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Mergestatus
        {
            get
            {
                return this._Mergestatus;
            }
            set
            {
                if (this._Mergestatus != value)
                {
                    this.OnMergestatusChanging(value);
                    this.SendPropertyChanging();
                    this._Mergestatus = value;
                    this.SendPropertyChanged("Mergestatus");
                    this.OnMergestatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.templatehistory")]
    public partial class Templatehistory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Templatehistoryid;

        private int _Styleid;

        private string _Title;

        private string _Template;

        private long _Dateline;

        private string _Username;

        private string _Version;

        private string _Comment;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTemplatehistoryidChanging(long value);
        partial void OnTemplatehistoryidChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTemplateChanging(string value);
        partial void OnTemplateChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        #endregion

        public Templatehistory()
        {
            OnCreated();
        }

        [Column(Name = @"templatehistoryid", Storage = "_Templatehistoryid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Templatehistoryid
        {
            get
            {
                return this._Templatehistoryid;
            }
            set
            {
                if (this._Templatehistoryid != value)
                {
                    this.OnTemplatehistoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Templatehistoryid = value;
                    this.SendPropertyChanged("Templatehistoryid");
                    this.OnTemplatehistoryidChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"template", Storage = "_Template", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Template
        {
            get
            {
                return this._Template;
            }
            set
            {
                if (this._Template != value)
                {
                    this.OnTemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Template = value;
                    this.SendPropertyChanged("Template");
                    this.OnTemplateChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(30) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

        [Column(Name = @"comment", Storage = "_Comment", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.templatemerge")]
    public partial class Templatemerge : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Templateid;

        private string _Template;

        private string _Version;

        private long _Savedtemplateid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTemplateidChanging(long value);
        partial void OnTemplateidChanged();
        partial void OnTemplateChanging(string value);
        partial void OnTemplateChanged();
        partial void OnVersionChanging(string value);
        partial void OnVersionChanged();
        partial void OnSavedtemplateidChanging(long value);
        partial void OnSavedtemplateidChanged();
        #endregion

        public Templatemerge()
        {
            OnCreated();
        }

        [Column(Name = @"templateid", Storage = "_Templateid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Templateid
        {
            get
            {
                return this._Templateid;
            }
            set
            {
                if (this._Templateid != value)
                {
                    this.OnTemplateidChanging(value);
                    this.SendPropertyChanging();
                    this._Templateid = value;
                    this.SendPropertyChanged("Templateid");
                    this.OnTemplateidChanged();
                }
            }
        }

        [Column(Name = @"template", Storage = "_Template", CanBeNull = false, DbType = "mediumtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Template
        {
            get
            {
                return this._Template;
            }
            set
            {
                if (this._Template != value)
                {
                    this.OnTemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Template = value;
                    this.SendPropertyChanged("Template");
                    this.OnTemplateChanged();
                }
            }
        }

        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "varchar(30) NOT NULL")]
        public string Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

        [Column(Name = @"savedtemplateid", Storage = "_Savedtemplateid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Savedtemplateid
        {
            get
            {
                return this._Savedtemplateid;
            }
            set
            {
                if (this._Savedtemplateid != value)
                {
                    this.OnSavedtemplateidChanging(value);
                    this.SendPropertyChanging();
                    this._Savedtemplateid = value;
                    this.SendPropertyChanged("Savedtemplateid");
                    this.OnSavedtemplateidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.thread")]
    public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Threadid;

        private string _Title;

        private string _Prefixid;

        private long _Firstpostid;

        private long _Lastpostid;

        private long _Lastpost;

        private int _Forumid;

        private long _Pollid;

        private short _Open;

        private long _Replycount;

        private long _Hiddencount;

        private long _Deletedcount;

        private string _Postusername;

        private long _Postuserid;

        private string _Lastposter;

        private long _Lastposterid;

        private long _Dateline;

        private long _Views;

        private int _Iconid;

        private string _Notes;

        private short _Visible;

        private short _Sticky;

        private int _Votenum;

        private int _Votetotal;

        private int _Attach;

        private string _Similar;

        private string _Taglist;

        private string _Keywords;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPrefixidChanging(string value);
        partial void OnPrefixidChanged();
        partial void OnFirstpostidChanging(long value);
        partial void OnFirstpostidChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnForumidChanging(int value);
        partial void OnForumidChanged();
        partial void OnPollidChanging(long value);
        partial void OnPollidChanged();
        partial void OnOpenChanging(short value);
        partial void OnOpenChanged();
        partial void OnReplycountChanging(long value);
        partial void OnReplycountChanged();
        partial void OnHiddencountChanging(long value);
        partial void OnHiddencountChanged();
        partial void OnDeletedcountChanging(long value);
        partial void OnDeletedcountChanged();
        partial void OnPostusernameChanging(string value);
        partial void OnPostusernameChanged();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnLastposterChanging(string value);
        partial void OnLastposterChanged();
        partial void OnLastposteridChanging(long value);
        partial void OnLastposteridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnViewsChanging(long value);
        partial void OnViewsChanged();
        partial void OnIconidChanging(int value);
        partial void OnIconidChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnVisibleChanging(short value);
        partial void OnVisibleChanged();
        partial void OnStickyChanging(short value);
        partial void OnStickyChanged();
        partial void OnVotenumChanging(int value);
        partial void OnVotenumChanged();
        partial void OnVotetotalChanging(int value);
        partial void OnVotetotalChanged();
        partial void OnAttachChanging(int value);
        partial void OnAttachChanged();
        partial void OnSimilarChanging(string value);
        partial void OnSimilarChanged();
        partial void OnTaglistChanging(string value);
        partial void OnTaglistChanged();
        partial void OnKeywordsChanging(string value);
        partial void OnKeywordsChanged();
        #endregion

        public Thread()
        {
            OnCreated();
        }

        [Column(Name = @"threadid", Storage = "_Threadid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"prefixid", Storage = "_Prefixid", CanBeNull = false, DbType = "varchar(25) NOT NULL")]
        public string Prefixid
        {
            get
            {
                return this._Prefixid;
            }
            set
            {
                if (this._Prefixid != value)
                {
                    this.OnPrefixidChanging(value);
                    this.SendPropertyChanging();
                    this._Prefixid = value;
                    this.SendPropertyChanged("Prefixid");
                    this.OnPrefixidChanged();
                }
            }
        }

        [Column(Name = @"firstpostid", Storage = "_Firstpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Firstpostid
        {
            get
            {
                return this._Firstpostid;
            }
            set
            {
                if (this._Firstpostid != value)
                {
                    this.OnFirstpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Firstpostid = value;
                    this.SendPropertyChanged("Firstpostid");
                    this.OnFirstpostidChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"forumid", Storage = "_Forumid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Forumid
        {
            get
            {
                return this._Forumid;
            }
            set
            {
                if (this._Forumid != value)
                {
                    this.OnForumidChanging(value);
                    this.SendPropertyChanging();
                    this._Forumid = value;
                    this.SendPropertyChanged("Forumid");
                    this.OnForumidChanged();
                }
            }
        }

        [Column(Name = @"pollid", Storage = "_Pollid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pollid
        {
            get
            {
                return this._Pollid;
            }
            set
            {
                if (this._Pollid != value)
                {
                    this.OnPollidChanging(value);
                    this.SendPropertyChanging();
                    this._Pollid = value;
                    this.SendPropertyChanged("Pollid");
                    this.OnPollidChanged();
                }
            }
        }

        [Column(Name = @"open", Storage = "_Open", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Open
        {
            get
            {
                return this._Open;
            }
            set
            {
                if (this._Open != value)
                {
                    this.OnOpenChanging(value);
                    this.SendPropertyChanging();
                    this._Open = value;
                    this.SendPropertyChanged("Open");
                    this.OnOpenChanged();
                }
            }
        }

        [Column(Name = @"replycount", Storage = "_Replycount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Replycount
        {
            get
            {
                return this._Replycount;
            }
            set
            {
                if (this._Replycount != value)
                {
                    this.OnReplycountChanging(value);
                    this.SendPropertyChanging();
                    this._Replycount = value;
                    this.SendPropertyChanged("Replycount");
                    this.OnReplycountChanged();
                }
            }
        }

        [Column(Name = @"hiddencount", Storage = "_Hiddencount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Hiddencount
        {
            get
            {
                return this._Hiddencount;
            }
            set
            {
                if (this._Hiddencount != value)
                {
                    this.OnHiddencountChanging(value);
                    this.SendPropertyChanging();
                    this._Hiddencount = value;
                    this.SendPropertyChanged("Hiddencount");
                    this.OnHiddencountChanged();
                }
            }
        }

        [Column(Name = @"deletedcount", Storage = "_Deletedcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Deletedcount
        {
            get
            {
                return this._Deletedcount;
            }
            set
            {
                if (this._Deletedcount != value)
                {
                    this.OnDeletedcountChanging(value);
                    this.SendPropertyChanging();
                    this._Deletedcount = value;
                    this.SendPropertyChanged("Deletedcount");
                    this.OnDeletedcountChanged();
                }
            }
        }

        [Column(Name = @"postusername", Storage = "_Postusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Postusername
        {
            get
            {
                return this._Postusername;
            }
            set
            {
                if (this._Postusername != value)
                {
                    this.OnPostusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Postusername = value;
                    this.SendPropertyChanged("Postusername");
                    this.OnPostusernameChanged();
                }
            }
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"lastposter", Storage = "_Lastposter", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Lastposter
        {
            get
            {
                return this._Lastposter;
            }
            set
            {
                if (this._Lastposter != value)
                {
                    this.OnLastposterChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposter = value;
                    this.SendPropertyChanged("Lastposter");
                    this.OnLastposterChanged();
                }
            }
        }

        [Column(Name = @"lastposterid", Storage = "_Lastposterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastposterid
        {
            get
            {
                return this._Lastposterid;
            }
            set
            {
                if (this._Lastposterid != value)
                {
                    this.OnLastposteridChanging(value);
                    this.SendPropertyChanging();
                    this._Lastposterid = value;
                    this.SendPropertyChanged("Lastposterid");
                    this.OnLastposteridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"views", Storage = "_Views", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Views
        {
            get
            {
                return this._Views;
            }
            set
            {
                if (this._Views != value)
                {
                    this.OnViewsChanging(value);
                    this.SendPropertyChanging();
                    this._Views = value;
                    this.SendPropertyChanged("Views");
                    this.OnViewsChanged();
                }
            }
        }

        [Column(Name = @"iconid", Storage = "_Iconid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Iconid
        {
            get
            {
                return this._Iconid;
            }
            set
            {
                if (this._Iconid != value)
                {
                    this.OnIconidChanging(value);
                    this.SendPropertyChanging();
                    this._Iconid = value;
                    this.SendPropertyChanged("Iconid");
                    this.OnIconidChanged();
                }
            }
        }

        [Column(Name = @"notes", Storage = "_Notes", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

        [Column(Name = @"visible", Storage = "_Visible", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if (this._Visible != value)
                {
                    this.OnVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }

        [Column(Name = @"sticky", Storage = "_Sticky", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Sticky
        {
            get
            {
                return this._Sticky;
            }
            set
            {
                if (this._Sticky != value)
                {
                    this.OnStickyChanging(value);
                    this.SendPropertyChanging();
                    this._Sticky = value;
                    this.SendPropertyChanged("Sticky");
                    this.OnStickyChanged();
                }
            }
        }

        [Column(Name = @"votenum", Storage = "_Votenum", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Votenum
        {
            get
            {
                return this._Votenum;
            }
            set
            {
                if (this._Votenum != value)
                {
                    this.OnVotenumChanging(value);
                    this.SendPropertyChanging();
                    this._Votenum = value;
                    this.SendPropertyChanged("Votenum");
                    this.OnVotenumChanged();
                }
            }
        }

        [Column(Name = @"votetotal", Storage = "_Votetotal", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Votetotal
        {
            get
            {
                return this._Votetotal;
            }
            set
            {
                if (this._Votetotal != value)
                {
                    this.OnVotetotalChanging(value);
                    this.SendPropertyChanging();
                    this._Votetotal = value;
                    this.SendPropertyChanged("Votetotal");
                    this.OnVotetotalChanged();
                }
            }
        }

        [Column(Name = @"attach", Storage = "_Attach", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Attach
        {
            get
            {
                return this._Attach;
            }
            set
            {
                if (this._Attach != value)
                {
                    this.OnAttachChanging(value);
                    this.SendPropertyChanging();
                    this._Attach = value;
                    this.SendPropertyChanged("Attach");
                    this.OnAttachChanged();
                }
            }
        }

        [Column(Name = @"similar", Storage = "_Similar", CanBeNull = false, DbType = "varchar(55) NOT NULL")]
        public string Similar
        {
            get
            {
                return this._Similar;
            }
            set
            {
                if (this._Similar != value)
                {
                    this.OnSimilarChanging(value);
                    this.SendPropertyChanging();
                    this._Similar = value;
                    this.SendPropertyChanged("Similar");
                    this.OnSimilarChanged();
                }
            }
        }

        [Column(Name = @"taglist", Storage = "_Taglist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Taglist
        {
            get
            {
                return this._Taglist;
            }
            set
            {
                if (this._Taglist != value)
                {
                    this.OnTaglistChanging(value);
                    this.SendPropertyChanging();
                    this._Taglist = value;
                    this.SendPropertyChanged("Taglist");
                    this.OnTaglistChanged();
                }
            }
        }

        [Column(Name = @"keywords", Storage = "_Keywords", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Keywords
        {
            get
            {
                return this._Keywords;
            }
            set
            {
                if (this._Keywords != value)
                {
                    this.OnKeywordsChanging(value);
                    this.SendPropertyChanging();
                    this._Keywords = value;
                    this.SendPropertyChanged("Keywords");
                    this.OnKeywordsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.threadrate")]
    public partial class Threadrate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Threadrateid;

        private long _Threadid;

        private long _Userid;

        private short _Vote;

        private string _Ipaddress;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnThreadrateidChanging(long value);
        partial void OnThreadrateidChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnVoteChanging(short value);
        partial void OnVoteChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        #endregion

        public Threadrate()
        {
            OnCreated();
        }

        [Column(Name = @"threadrateid", Storage = "_Threadrateid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Threadrateid
        {
            get
            {
                return this._Threadrateid;
            }
            set
            {
                if (this._Threadrateid != value)
                {
                    this.OnThreadrateidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadrateid = value;
                    this.SendPropertyChanged("Threadrateid");
                    this.OnThreadrateidChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"vote", Storage = "_Vote", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Vote
        {
            get
            {
                return this._Vote;
            }
            set
            {
                if (this._Vote != value)
                {
                    this.OnVoteChanging(value);
                    this.SendPropertyChanging();
                    this._Vote = value;
                    this.SendPropertyChanged("Vote");
                    this.OnVoteChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.threadread")]
    public partial class Threadread : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Threadid;

        private long _Readtime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnReadtimeChanging(long value);
        partial void OnReadtimeChanged();
        #endregion

        public Threadread()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"readtime", Storage = "_Readtime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Readtime
        {
            get
            {
                return this._Readtime;
            }
            set
            {
                if (this._Readtime != value)
                {
                    this.OnReadtimeChanging(value);
                    this.SendPropertyChanging();
                    this._Readtime = value;
                    this.SendPropertyChanged("Readtime");
                    this.OnReadtimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.threadredirect")]
    public partial class Threadredirect : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Threadid;

        private long _Expires;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        partial void OnExpiresChanging(long value);
        partial void OnExpiresChanged();
        #endregion

        public Threadredirect()
        {
            OnCreated();
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }

        [Column(Name = @"expires", Storage = "_Expires", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Expires
        {
            get
            {
                return this._Expires;
            }
            set
            {
                if (this._Expires != value)
                {
                    this.OnExpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Expires = value;
                    this.SendPropertyChanged("Expires");
                    this.OnExpiresChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.threadviews")]
    public partial class Threadview : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Threadid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnThreadidChanging(long value);
        partial void OnThreadidChanged();
        #endregion

        public Threadview()
        {
            OnCreated();
        }

        [Column(Name = @"threadid", Storage = "_Threadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Threadid
        {
            get
            {
                return this._Threadid;
            }
            set
            {
                if (this._Threadid != value)
                {
                    this.OnThreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Threadid = value;
                    this.SendPropertyChanged("Threadid");
                    this.OnThreadidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.upgradelog")]
    public partial class Upgradelog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Upgradelogid;

        private string _Script;

        private string _Steptitle;

        private int _Step;

        private long _Startat;

        private int _Perpage;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUpgradelogidChanging(long value);
        partial void OnUpgradelogidChanged();
        partial void OnScriptChanging(string value);
        partial void OnScriptChanged();
        partial void OnSteptitleChanging(string value);
        partial void OnSteptitleChanged();
        partial void OnStepChanging(int value);
        partial void OnStepChanged();
        partial void OnStartatChanging(long value);
        partial void OnStartatChanged();
        partial void OnPerpageChanging(int value);
        partial void OnPerpageChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Upgradelog()
        {
            OnCreated();
        }

        [Column(Name = @"upgradelogid", Storage = "_Upgradelogid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Upgradelogid
        {
            get
            {
                return this._Upgradelogid;
            }
            set
            {
                if (this._Upgradelogid != value)
                {
                    this.OnUpgradelogidChanging(value);
                    this.SendPropertyChanging();
                    this._Upgradelogid = value;
                    this.SendPropertyChanged("Upgradelogid");
                    this.OnUpgradelogidChanged();
                }
            }
        }

        [Column(Name = @"script", Storage = "_Script", CanBeNull = false, DbType = "varchar(50) NOT NULL")]
        public string Script
        {
            get
            {
                return this._Script;
            }
            set
            {
                if (this._Script != value)
                {
                    this.OnScriptChanging(value);
                    this.SendPropertyChanging();
                    this._Script = value;
                    this.SendPropertyChanged("Script");
                    this.OnScriptChanged();
                }
            }
        }

        [Column(Name = @"steptitle", Storage = "_Steptitle", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Steptitle
        {
            get
            {
                return this._Steptitle;
            }
            set
            {
                if (this._Steptitle != value)
                {
                    this.OnSteptitleChanging(value);
                    this.SendPropertyChanging();
                    this._Steptitle = value;
                    this.SendPropertyChanged("Steptitle");
                    this.OnSteptitleChanged();
                }
            }
        }

        [Column(Name = @"step", Storage = "_Step", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Step
        {
            get
            {
                return this._Step;
            }
            set
            {
                if (this._Step != value)
                {
                    this.OnStepChanging(value);
                    this.SendPropertyChanging();
                    this._Step = value;
                    this.SendPropertyChanged("Step");
                    this.OnStepChanged();
                }
            }
        }

        [Column(Name = @"startat", Storage = "_Startat", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Startat
        {
            get
            {
                return this._Startat;
            }
            set
            {
                if (this._Startat != value)
                {
                    this.OnStartatChanging(value);
                    this.SendPropertyChanging();
                    this._Startat = value;
                    this.SendPropertyChanged("Startat");
                    this.OnStartatChanged();
                }
            }
        }

        [Column(Name = @"perpage", Storage = "_Perpage", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Perpage
        {
            get
            {
                return this._Perpage;
            }
            set
            {
                if (this._Perpage != value)
                {
                    this.OnPerpageChanging(value);
                    this.SendPropertyChanging();
                    this._Perpage = value;
                    this.SendPropertyChanged("Perpage");
                    this.OnPerpageChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.user")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Usergroupid;

        private string _Membergroupids;

        private int _Displaygroupid;

        private string _Username;

        private string _Password;

        private System.DateTime _Passworddate;

        private string _Email;

        private int _Styleid;

        private string _Parentemail;

        private string _Homepage;

        private string _Icq;

        private string _Aim;

        private string _Yahoo;

        private string _Msn;

        private string _Skype;

        private int _Showvbcode;

        private int _Showbirthday;

        private string _Usertitle;

        private short _Customtitle;

        private int _Joindate;

        private short _Daysprune;

        private long _Lastvisit;

        private long _Lastactivity;

        private long _Lastpost;

        private long _Lastpostid;

        private long _Posts;

        private int _Reputation;

        private long _Reputationlevelid;

        private string _Timezoneoffset;

        private short _Pmpopup;

        private short _Avatarid;

        private long _Avatarrevision;

        private long _Profilepicrevision;

        private long _Sigpicrevision;

        private long _Options;

        private string _Birthday;

        private System.DateTime _Birthdaysearch;

        private short _Maxposts;

        private short _Startofweek;

        private string _Ipaddress;

        private long _Referrerid;

        private int _Languageid;

        private long _Emailstamp;

        private int _Threadedmode;

        private short _Autosubscribe;

        private int _Pmtotal;

        private int _Pmunread;

        private string _Salt;

        private long _Ipoints;

        private long _Infractions;

        private long _Warnings;

        private string _Infractiongroupids;

        private int _Infractiongroupid;

        private long _Adminoptions;

        private long _Profilevisits;

        private long _Friendcount;

        private long _Friendreqcount;

        private long _Vmunreadcount;

        private long _Vmmoderatedcount;

        private long _Socgroupinvitecount;

        private long _Socgroupreqcount;

        private long _Pcunreadcount;

        private long _Pcmoderatedcount;

        private long _Gmmoderatedcount;

        private string _Assetposthash;

        private long _Bloggroupreqcount;

        private long _Showblogcss;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnMembergroupidsChanging(string value);
        partial void OnMembergroupidsChanged();
        partial void OnDisplaygroupidChanging(int value);
        partial void OnDisplaygroupidChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPassworddateChanging(System.DateTime value);
        partial void OnPassworddateChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnStyleidChanging(int value);
        partial void OnStyleidChanged();
        partial void OnParentemailChanging(string value);
        partial void OnParentemailChanged();
        partial void OnHomepageChanging(string value);
        partial void OnHomepageChanged();
        partial void OnIcqChanging(string value);
        partial void OnIcqChanged();
        partial void OnAimChanging(string value);
        partial void OnAimChanged();
        partial void OnYahooChanging(string value);
        partial void OnYahooChanged();
        partial void OnMsnChanging(string value);
        partial void OnMsnChanged();
        partial void OnSkypeChanging(string value);
        partial void OnSkypeChanged();
        partial void OnShowvbcodeChanging(int value);
        partial void OnShowvbcodeChanged();
        partial void OnShowbirthdayChanging(int value);
        partial void OnShowbirthdayChanged();
        partial void OnUsertitleChanging(string value);
        partial void OnUsertitleChanged();
        partial void OnCustomtitleChanging(short value);
        partial void OnCustomtitleChanged();
        partial void OnJoindateChanging(long value);
        partial void OnJoindateChanged();
        partial void OnDayspruneChanging(short value);
        partial void OnDayspruneChanged();
        partial void OnLastvisitChanging(long value);
        partial void OnLastvisitChanged();
        partial void OnLastactivityChanging(long value);
        partial void OnLastactivityChanged();
        partial void OnLastpostChanging(long value);
        partial void OnLastpostChanged();
        partial void OnLastpostidChanging(long value);
        partial void OnLastpostidChanged();
        partial void OnPostsChanging(long value);
        partial void OnPostsChanged();
        partial void OnReputationChanging(int value);
        partial void OnReputationChanged();
        partial void OnReputationlevelidChanging(long value);
        partial void OnReputationlevelidChanged();
        partial void OnTimezoneoffsetChanging(string value);
        partial void OnTimezoneoffsetChanged();
        partial void OnPmpopupChanging(short value);
        partial void OnPmpopupChanged();
        partial void OnAvataridChanging(short value);
        partial void OnAvataridChanged();
        partial void OnAvatarrevisionChanging(long value);
        partial void OnAvatarrevisionChanged();
        partial void OnProfilepicrevisionChanging(long value);
        partial void OnProfilepicrevisionChanged();
        partial void OnSigpicrevisionChanging(long value);
        partial void OnSigpicrevisionChanged();
        partial void OnOptionsChanging(long value);
        partial void OnOptionsChanged();
        partial void OnBirthdayChanging(string value);
        partial void OnBirthdayChanged();
        partial void OnBirthdaysearchChanging(System.DateTime value);
        partial void OnBirthdaysearchChanged();
        partial void OnMaxpostsChanging(short value);
        partial void OnMaxpostsChanged();
        partial void OnStartofweekChanging(short value);
        partial void OnStartofweekChanged();
        partial void OnIpaddressChanging(string value);
        partial void OnIpaddressChanged();
        partial void OnReferreridChanging(long value);
        partial void OnReferreridChanged();
        partial void OnLanguageidChanging(int value);
        partial void OnLanguageidChanged();
        partial void OnEmailstampChanging(long value);
        partial void OnEmailstampChanged();
        partial void OnThreadedmodeChanging(int value);
        partial void OnThreadedmodeChanged();
        partial void OnAutosubscribeChanging(short value);
        partial void OnAutosubscribeChanged();
        partial void OnPmtotalChanging(int value);
        partial void OnPmtotalChanged();
        partial void OnPmunreadChanging(int value);
        partial void OnPmunreadChanged();
        partial void OnSaltChanging(string value);
        partial void OnSaltChanged();
        partial void OnIpointsChanging(long value);
        partial void OnIpointsChanged();
        partial void OnInfractionsChanging(long value);
        partial void OnInfractionsChanged();
        partial void OnWarningsChanging(long value);
        partial void OnWarningsChanged();
        partial void OnInfractiongroupidsChanging(string value);
        partial void OnInfractiongroupidsChanged();
        partial void OnInfractiongroupidChanging(int value);
        partial void OnInfractiongroupidChanged();
        partial void OnAdminoptionsChanging(long value);
        partial void OnAdminoptionsChanged();
        partial void OnProfilevisitsChanging(long value);
        partial void OnProfilevisitsChanged();
        partial void OnFriendcountChanging(long value);
        partial void OnFriendcountChanged();
        partial void OnFriendreqcountChanging(long value);
        partial void OnFriendreqcountChanged();
        partial void OnVmunreadcountChanging(long value);
        partial void OnVmunreadcountChanged();
        partial void OnVmmoderatedcountChanging(long value);
        partial void OnVmmoderatedcountChanged();
        partial void OnSocgroupinvitecountChanging(long value);
        partial void OnSocgroupinvitecountChanged();
        partial void OnSocgroupreqcountChanging(long value);
        partial void OnSocgroupreqcountChanged();
        partial void OnPcunreadcountChanging(long value);
        partial void OnPcunreadcountChanged();
        partial void OnPcmoderatedcountChanging(long value);
        partial void OnPcmoderatedcountChanged();
        partial void OnGmmoderatedcountChanging(long value);
        partial void OnGmmoderatedcountChanged();
        partial void OnAssetposthashChanging(string value);
        partial void OnAssetposthashChanged();
        partial void OnBloggroupreqcountChanging(long value);
        partial void OnBloggroupreqcountChanged();
        partial void OnShowblogcssChanging(long value);
        partial void OnShowblogcssChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"membergroupids", Storage = "_Membergroupids", CanBeNull = false, DbType = "char(250) NOT NULL")]
        public string Membergroupids
        {
            get
            {
                return this._Membergroupids;
            }
            set
            {
                if (this._Membergroupids != value)
                {
                    this.OnMembergroupidsChanging(value);
                    this.SendPropertyChanging();
                    this._Membergroupids = value;
                    this.SendPropertyChanged("Membergroupids");
                    this.OnMembergroupidsChanged();
                }
            }
        }

        [Column(Name = @"displaygroupid", Storage = "_Displaygroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displaygroupid
        {
            get
            {
                return this._Displaygroupid;
            }
            set
            {
                if (this._Displaygroupid != value)
                {
                    this.OnDisplaygroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Displaygroupid = value;
                    this.SendPropertyChanged("Displaygroupid");
                    this.OnDisplaygroupidChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Name = @"passworddate", Storage = "_Passworddate", CanBeNull = false, DbType = "date NOT NULL")]
        public System.DateTime Passworddate
        {
            get
            {
                return this._Passworddate;
            }
            set
            {
                if (this._Passworddate != value)
                {
                    this.OnPassworddateChanging(value);
                    this.SendPropertyChanging();
                    this._Passworddate = value;
                    this.SendPropertyChanged("Passworddate");
                    this.OnPassworddateChanged();
                }
            }
        }

        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        [Column(Name = @"styleid", Storage = "_Styleid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Styleid
        {
            get
            {
                return this._Styleid;
            }
            set
            {
                if (this._Styleid != value)
                {
                    this.OnStyleidChanging(value);
                    this.SendPropertyChanging();
                    this._Styleid = value;
                    this.SendPropertyChanged("Styleid");
                    this.OnStyleidChanged();
                }
            }
        }

        [Column(Name = @"parentemail", Storage = "_Parentemail", CanBeNull = false, DbType = "char(50) NOT NULL")]
        public string Parentemail
        {
            get
            {
                return this._Parentemail;
            }
            set
            {
                if (this._Parentemail != value)
                {
                    this.OnParentemailChanging(value);
                    this.SendPropertyChanging();
                    this._Parentemail = value;
                    this.SendPropertyChanged("Parentemail");
                    this.OnParentemailChanged();
                }
            }
        }

        [Column(Name = @"homepage", Storage = "_Homepage", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Homepage
        {
            get
            {
                return this._Homepage;
            }
            set
            {
                if (this._Homepage != value)
                {
                    this.OnHomepageChanging(value);
                    this.SendPropertyChanging();
                    this._Homepage = value;
                    this.SendPropertyChanged("Homepage");
                    this.OnHomepageChanged();
                }
            }
        }

        [Column(Name = @"icq", Storage = "_Icq", CanBeNull = false, DbType = "char(20) NOT NULL")]
        public string Icq
        {
            get
            {
                return this._Icq;
            }
            set
            {
                if (this._Icq != value)
                {
                    this.OnIcqChanging(value);
                    this.SendPropertyChanging();
                    this._Icq = value;
                    this.SendPropertyChanged("Icq");
                    this.OnIcqChanged();
                }
            }
        }

        [Column(Name = @"aim", Storage = "_Aim", CanBeNull = false, DbType = "char(20) NOT NULL")]
        public string Aim
        {
            get
            {
                return this._Aim;
            }
            set
            {
                if (this._Aim != value)
                {
                    this.OnAimChanging(value);
                    this.SendPropertyChanging();
                    this._Aim = value;
                    this.SendPropertyChanged("Aim");
                    this.OnAimChanged();
                }
            }
        }

        [Column(Name = @"yahoo", Storage = "_Yahoo", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Yahoo
        {
            get
            {
                return this._Yahoo;
            }
            set
            {
                if (this._Yahoo != value)
                {
                    this.OnYahooChanging(value);
                    this.SendPropertyChanging();
                    this._Yahoo = value;
                    this.SendPropertyChanged("Yahoo");
                    this.OnYahooChanged();
                }
            }
        }

        [Column(Name = @"msn", Storage = "_Msn", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Msn
        {
            get
            {
                return this._Msn;
            }
            set
            {
                if (this._Msn != value)
                {
                    this.OnMsnChanging(value);
                    this.SendPropertyChanging();
                    this._Msn = value;
                    this.SendPropertyChanged("Msn");
                    this.OnMsnChanged();
                }
            }
        }

        [Column(Name = @"skype", Storage = "_Skype", CanBeNull = false, DbType = "char(32) NOT NULL")]
        public string Skype
        {
            get
            {
                return this._Skype;
            }
            set
            {
                if (this._Skype != value)
                {
                    this.OnSkypeChanging(value);
                    this.SendPropertyChanging();
                    this._Skype = value;
                    this.SendPropertyChanged("Skype");
                    this.OnSkypeChanged();
                }
            }
        }

        [Column(Name = @"showvbcode", Storage = "_Showvbcode", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Showvbcode
        {
            get
            {
                return this._Showvbcode;
            }
            set
            {
                if (this._Showvbcode != value)
                {
                    this.OnShowvbcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Showvbcode = value;
                    this.SendPropertyChanged("Showvbcode");
                    this.OnShowvbcodeChanged();
                }
            }
        }

        [Column(Name = @"showbirthday", Storage = "_Showbirthday", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Showbirthday
        {
            get
            {
                return this._Showbirthday;
            }
            set
            {
                if (this._Showbirthday != value)
                {
                    this.OnShowbirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Showbirthday = value;
                    this.SendPropertyChanged("Showbirthday");
                    this.OnShowbirthdayChanged();
                }
            }
        }

        [Column(Name = @"usertitle", Storage = "_Usertitle", CanBeNull = false, DbType = "char(250) NOT NULL")]
        public string Usertitle
        {
            get
            {
                return this._Usertitle;
            }
            set
            {
                if (this._Usertitle != value)
                {
                    this.OnUsertitleChanging(value);
                    this.SendPropertyChanging();
                    this._Usertitle = value;
                    this.SendPropertyChanged("Usertitle");
                    this.OnUsertitleChanged();
                }
            }
        }

        [Column(Name = @"customtitle", Storage = "_Customtitle", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Customtitle
        {
            get
            {
                return this._Customtitle;
            }
            set
            {
                if (this._Customtitle != value)
                {
                    this.OnCustomtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Customtitle = value;
                    this.SendPropertyChanged("Customtitle");
                    this.OnCustomtitleChanged();
                }
            }
        }

        [Column(Name = @"joindate", Storage = "_Joindate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public int Joindate
        {
            get
            {
                return this._Joindate;
            }
            set
            {
                if (this._Joindate != value)
                {
                    this.OnJoindateChanging(value);
                    this.SendPropertyChanging();
                    this._Joindate = value;
                    this.SendPropertyChanged("Joindate");
                    this.OnJoindateChanged();
                }
            }
        }

        [Column(Name = @"daysprune", Storage = "_Daysprune", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Daysprune
        {
            get
            {
                return this._Daysprune;
            }
            set
            {
                if (this._Daysprune != value)
                {
                    this.OnDayspruneChanging(value);
                    this.SendPropertyChanging();
                    this._Daysprune = value;
                    this.SendPropertyChanged("Daysprune");
                    this.OnDayspruneChanged();
                }
            }
        }

        [Column(Name = @"lastvisit", Storage = "_Lastvisit", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastvisit
        {
            get
            {
                return this._Lastvisit;
            }
            set
            {
                if (this._Lastvisit != value)
                {
                    this.OnLastvisitChanging(value);
                    this.SendPropertyChanging();
                    this._Lastvisit = value;
                    this.SendPropertyChanged("Lastvisit");
                    this.OnLastvisitChanged();
                }
            }
        }

        [Column(Name = @"lastactivity", Storage = "_Lastactivity", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastactivity
        {
            get
            {
                return this._Lastactivity;
            }
            set
            {
                if (this._Lastactivity != value)
                {
                    this.OnLastactivityChanging(value);
                    this.SendPropertyChanging();
                    this._Lastactivity = value;
                    this.SendPropertyChanged("Lastactivity");
                    this.OnLastactivityChanged();
                }
            }
        }

        [Column(Name = @"lastpost", Storage = "_Lastpost", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpost
        {
            get
            {
                return this._Lastpost;
            }
            set
            {
                if (this._Lastpost != value)
                {
                    this.OnLastpostChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpost = value;
                    this.SendPropertyChanged("Lastpost");
                    this.OnLastpostChanged();
                }
            }
        }

        [Column(Name = @"lastpostid", Storage = "_Lastpostid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Lastpostid
        {
            get
            {
                return this._Lastpostid;
            }
            set
            {
                if (this._Lastpostid != value)
                {
                    this.OnLastpostidChanging(value);
                    this.SendPropertyChanging();
                    this._Lastpostid = value;
                    this.SendPropertyChanged("Lastpostid");
                    this.OnLastpostidChanged();
                }
            }
        }

        [Column(Name = @"posts", Storage = "_Posts", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Posts
        {
            get
            {
                return this._Posts;
            }
            set
            {
                if (this._Posts != value)
                {
                    this.OnPostsChanging(value);
                    this.SendPropertyChanging();
                    this._Posts = value;
                    this.SendPropertyChanged("Posts");
                    this.OnPostsChanged();
                }
            }
        }

        [Column(Name = @"reputation", Storage = "_Reputation", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Reputation
        {
            get
            {
                return this._Reputation;
            }
            set
            {
                if (this._Reputation != value)
                {
                    this.OnReputationChanging(value);
                    this.SendPropertyChanging();
                    this._Reputation = value;
                    this.SendPropertyChanged("Reputation");
                    this.OnReputationChanged();
                }
            }
        }

        [Column(Name = @"reputationlevelid", Storage = "_Reputationlevelid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reputationlevelid
        {
            get
            {
                return this._Reputationlevelid;
            }
            set
            {
                if (this._Reputationlevelid != value)
                {
                    this.OnReputationlevelidChanging(value);
                    this.SendPropertyChanging();
                    this._Reputationlevelid = value;
                    this.SendPropertyChanged("Reputationlevelid");
                    this.OnReputationlevelidChanged();
                }
            }
        }

        [Column(Name = @"timezoneoffset", Storage = "_Timezoneoffset", CanBeNull = false, DbType = "char(4) NOT NULL")]
        public string Timezoneoffset
        {
            get
            {
                return this._Timezoneoffset;
            }
            set
            {
                if (this._Timezoneoffset != value)
                {
                    this.OnTimezoneoffsetChanging(value);
                    this.SendPropertyChanging();
                    this._Timezoneoffset = value;
                    this.SendPropertyChanged("Timezoneoffset");
                    this.OnTimezoneoffsetChanged();
                }
            }
        }

        [Column(Name = @"pmpopup", Storage = "_Pmpopup", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Pmpopup
        {
            get
            {
                return this._Pmpopup;
            }
            set
            {
                if (this._Pmpopup != value)
                {
                    this.OnPmpopupChanging(value);
                    this.SendPropertyChanging();
                    this._Pmpopup = value;
                    this.SendPropertyChanged("Pmpopup");
                    this.OnPmpopupChanged();
                }
            }
        }

        [Column(Name = @"avatarid", Storage = "_Avatarid", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Avatarid
        {
            get
            {
                return this._Avatarid;
            }
            set
            {
                if (this._Avatarid != value)
                {
                    this.OnAvataridChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarid = value;
                    this.SendPropertyChanged("Avatarid");
                    this.OnAvataridChanged();
                }
            }
        }

        [Column(Name = @"avatarrevision", Storage = "_Avatarrevision", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Avatarrevision
        {
            get
            {
                return this._Avatarrevision;
            }
            set
            {
                if (this._Avatarrevision != value)
                {
                    this.OnAvatarrevisionChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarrevision = value;
                    this.SendPropertyChanged("Avatarrevision");
                    this.OnAvatarrevisionChanged();
                }
            }
        }

        [Column(Name = @"profilepicrevision", Storage = "_Profilepicrevision", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Profilepicrevision
        {
            get
            {
                return this._Profilepicrevision;
            }
            set
            {
                if (this._Profilepicrevision != value)
                {
                    this.OnProfilepicrevisionChanging(value);
                    this.SendPropertyChanging();
                    this._Profilepicrevision = value;
                    this.SendPropertyChanged("Profilepicrevision");
                    this.OnProfilepicrevisionChanged();
                }
            }
        }

        [Column(Name = @"sigpicrevision", Storage = "_Sigpicrevision", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Sigpicrevision
        {
            get
            {
                return this._Sigpicrevision;
            }
            set
            {
                if (this._Sigpicrevision != value)
                {
                    this.OnSigpicrevisionChanging(value);
                    this.SendPropertyChanging();
                    this._Sigpicrevision = value;
                    this.SendPropertyChanged("Sigpicrevision");
                    this.OnSigpicrevisionChanged();
                }
            }
        }

        [Column(Name = @"options", Storage = "_Options", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Options
        {
            get
            {
                return this._Options;
            }
            set
            {
                if (this._Options != value)
                {
                    this.OnOptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Options = value;
                    this.SendPropertyChanged("Options");
                    this.OnOptionsChanged();
                }
            }
        }

        [Column(Name = @"birthday", Storage = "_Birthday", CanBeNull = false, DbType = "char(10) NOT NULL")]
        public string Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

        [Column(Name = @"birthday_search", Storage = "_Birthdaysearch", CanBeNull = false, DbType = "date NOT NULL")]
        public System.DateTime Birthdaysearch
        {
            get
            {
                return this._Birthdaysearch;
            }
            set
            {
                if (this._Birthdaysearch != value)
                {
                    this.OnBirthdaysearchChanging(value);
                    this.SendPropertyChanging();
                    this._Birthdaysearch = value;
                    this.SendPropertyChanged("Birthdaysearch");
                    this.OnBirthdaysearchChanged();
                }
            }
        }

        [Column(Name = @"maxposts", Storage = "_Maxposts", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Maxposts
        {
            get
            {
                return this._Maxposts;
            }
            set
            {
                if (this._Maxposts != value)
                {
                    this.OnMaxpostsChanging(value);
                    this.SendPropertyChanging();
                    this._Maxposts = value;
                    this.SendPropertyChanged("Maxposts");
                    this.OnMaxpostsChanged();
                }
            }
        }

        [Column(Name = @"startofweek", Storage = "_Startofweek", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Startofweek
        {
            get
            {
                return this._Startofweek;
            }
            set
            {
                if (this._Startofweek != value)
                {
                    this.OnStartofweekChanging(value);
                    this.SendPropertyChanging();
                    this._Startofweek = value;
                    this.SendPropertyChanged("Startofweek");
                    this.OnStartofweekChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "char(15) NOT NULL")]
        public string Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"referrerid", Storage = "_Referrerid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Referrerid
        {
            get
            {
                return this._Referrerid;
            }
            set
            {
                if (this._Referrerid != value)
                {
                    this.OnReferreridChanging(value);
                    this.SendPropertyChanging();
                    this._Referrerid = value;
                    this.SendPropertyChanged("Referrerid");
                    this.OnReferreridChanged();
                }
            }
        }

        [Column(Name = @"languageid", Storage = "_Languageid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Languageid
        {
            get
            {
                return this._Languageid;
            }
            set
            {
                if (this._Languageid != value)
                {
                    this.OnLanguageidChanging(value);
                    this.SendPropertyChanging();
                    this._Languageid = value;
                    this.SendPropertyChanged("Languageid");
                    this.OnLanguageidChanged();
                }
            }
        }

        [Column(Name = @"emailstamp", Storage = "_Emailstamp", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Emailstamp
        {
            get
            {
                return this._Emailstamp;
            }
            set
            {
                if (this._Emailstamp != value)
                {
                    this.OnEmailstampChanging(value);
                    this.SendPropertyChanging();
                    this._Emailstamp = value;
                    this.SendPropertyChanged("Emailstamp");
                    this.OnEmailstampChanged();
                }
            }
        }

        [Column(Name = @"threadedmode", Storage = "_Threadedmode", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Threadedmode
        {
            get
            {
                return this._Threadedmode;
            }
            set
            {
                if (this._Threadedmode != value)
                {
                    this.OnThreadedmodeChanging(value);
                    this.SendPropertyChanging();
                    this._Threadedmode = value;
                    this.SendPropertyChanged("Threadedmode");
                    this.OnThreadedmodeChanged();
                }
            }
        }

        [Column(Name = @"autosubscribe", Storage = "_Autosubscribe", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Autosubscribe
        {
            get
            {
                return this._Autosubscribe;
            }
            set
            {
                if (this._Autosubscribe != value)
                {
                    this.OnAutosubscribeChanging(value);
                    this.SendPropertyChanging();
                    this._Autosubscribe = value;
                    this.SendPropertyChanged("Autosubscribe");
                    this.OnAutosubscribeChanged();
                }
            }
        }

        [Column(Name = @"pmtotal", Storage = "_Pmtotal", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Pmtotal
        {
            get
            {
                return this._Pmtotal;
            }
            set
            {
                if (this._Pmtotal != value)
                {
                    this.OnPmtotalChanging(value);
                    this.SendPropertyChanging();
                    this._Pmtotal = value;
                    this.SendPropertyChanged("Pmtotal");
                    this.OnPmtotalChanged();
                }
            }
        }

        [Column(Name = @"pmunread", Storage = "_Pmunread", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Pmunread
        {
            get
            {
                return this._Pmunread;
            }
            set
            {
                if (this._Pmunread != value)
                {
                    this.OnPmunreadChanging(value);
                    this.SendPropertyChanging();
                    this._Pmunread = value;
                    this.SendPropertyChanged("Pmunread");
                    this.OnPmunreadChanged();
                }
            }
        }

        [Column(Name = @"salt", Storage = "_Salt", CanBeNull = false, DbType = "char(3) NOT NULL")]
        public string Salt
        {
            get
            {
                return this._Salt;
            }
            set
            {
                if (this._Salt != value)
                {
                    this.OnSaltChanging(value);
                    this.SendPropertyChanging();
                    this._Salt = value;
                    this.SendPropertyChanged("Salt");
                    this.OnSaltChanged();
                }
            }
        }

        [Column(Name = @"ipoints", Storage = "_Ipoints", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipoints
        {
            get
            {
                return this._Ipoints;
            }
            set
            {
                if (this._Ipoints != value)
                {
                    this.OnIpointsChanging(value);
                    this.SendPropertyChanging();
                    this._Ipoints = value;
                    this.SendPropertyChanged("Ipoints");
                    this.OnIpointsChanged();
                }
            }
        }

        [Column(Name = @"infractions", Storage = "_Infractions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Infractions
        {
            get
            {
                return this._Infractions;
            }
            set
            {
                if (this._Infractions != value)
                {
                    this.OnInfractionsChanging(value);
                    this.SendPropertyChanging();
                    this._Infractions = value;
                    this.SendPropertyChanged("Infractions");
                    this.OnInfractionsChanged();
                }
            }
        }

        [Column(Name = @"warnings", Storage = "_Warnings", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Warnings
        {
            get
            {
                return this._Warnings;
            }
            set
            {
                if (this._Warnings != value)
                {
                    this.OnWarningsChanging(value);
                    this.SendPropertyChanging();
                    this._Warnings = value;
                    this.SendPropertyChanged("Warnings");
                    this.OnWarningsChanged();
                }
            }
        }

        [Column(Name = @"infractiongroupids", Storage = "_Infractiongroupids", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Infractiongroupids
        {
            get
            {
                return this._Infractiongroupids;
            }
            set
            {
                if (this._Infractiongroupids != value)
                {
                    this.OnInfractiongroupidsChanging(value);
                    this.SendPropertyChanging();
                    this._Infractiongroupids = value;
                    this.SendPropertyChanged("Infractiongroupids");
                    this.OnInfractiongroupidsChanged();
                }
            }
        }

        [Column(Name = @"infractiongroupid", Storage = "_Infractiongroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Infractiongroupid
        {
            get
            {
                return this._Infractiongroupid;
            }
            set
            {
                if (this._Infractiongroupid != value)
                {
                    this.OnInfractiongroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Infractiongroupid = value;
                    this.SendPropertyChanged("Infractiongroupid");
                    this.OnInfractiongroupidChanged();
                }
            }
        }

        [Column(Name = @"adminoptions", Storage = "_Adminoptions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminoptions
        {
            get
            {
                return this._Adminoptions;
            }
            set
            {
                if (this._Adminoptions != value)
                {
                    this.OnAdminoptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Adminoptions = value;
                    this.SendPropertyChanged("Adminoptions");
                    this.OnAdminoptionsChanged();
                }
            }
        }

        [Column(Name = @"profilevisits", Storage = "_Profilevisits", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Profilevisits
        {
            get
            {
                return this._Profilevisits;
            }
            set
            {
                if (this._Profilevisits != value)
                {
                    this.OnProfilevisitsChanging(value);
                    this.SendPropertyChanging();
                    this._Profilevisits = value;
                    this.SendPropertyChanged("Profilevisits");
                    this.OnProfilevisitsChanged();
                }
            }
        }

        [Column(Name = @"friendcount", Storage = "_Friendcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Friendcount
        {
            get
            {
                return this._Friendcount;
            }
            set
            {
                if (this._Friendcount != value)
                {
                    this.OnFriendcountChanging(value);
                    this.SendPropertyChanging();
                    this._Friendcount = value;
                    this.SendPropertyChanged("Friendcount");
                    this.OnFriendcountChanged();
                }
            }
        }

        [Column(Name = @"friendreqcount", Storage = "_Friendreqcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Friendreqcount
        {
            get
            {
                return this._Friendreqcount;
            }
            set
            {
                if (this._Friendreqcount != value)
                {
                    this.OnFriendreqcountChanging(value);
                    this.SendPropertyChanging();
                    this._Friendreqcount = value;
                    this.SendPropertyChanged("Friendreqcount");
                    this.OnFriendreqcountChanged();
                }
            }
        }

        [Column(Name = @"vmunreadcount", Storage = "_Vmunreadcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vmunreadcount
        {
            get
            {
                return this._Vmunreadcount;
            }
            set
            {
                if (this._Vmunreadcount != value)
                {
                    this.OnVmunreadcountChanging(value);
                    this.SendPropertyChanging();
                    this._Vmunreadcount = value;
                    this.SendPropertyChanged("Vmunreadcount");
                    this.OnVmunreadcountChanged();
                }
            }
        }

        [Column(Name = @"vmmoderatedcount", Storage = "_Vmmoderatedcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vmmoderatedcount
        {
            get
            {
                return this._Vmmoderatedcount;
            }
            set
            {
                if (this._Vmmoderatedcount != value)
                {
                    this.OnVmmoderatedcountChanging(value);
                    this.SendPropertyChanging();
                    this._Vmmoderatedcount = value;
                    this.SendPropertyChanged("Vmmoderatedcount");
                    this.OnVmmoderatedcountChanged();
                }
            }
        }

        [Column(Name = @"socgroupinvitecount", Storage = "_Socgroupinvitecount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Socgroupinvitecount
        {
            get
            {
                return this._Socgroupinvitecount;
            }
            set
            {
                if (this._Socgroupinvitecount != value)
                {
                    this.OnSocgroupinvitecountChanging(value);
                    this.SendPropertyChanging();
                    this._Socgroupinvitecount = value;
                    this.SendPropertyChanged("Socgroupinvitecount");
                    this.OnSocgroupinvitecountChanged();
                }
            }
        }

        [Column(Name = @"socgroupreqcount", Storage = "_Socgroupreqcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Socgroupreqcount
        {
            get
            {
                return this._Socgroupreqcount;
            }
            set
            {
                if (this._Socgroupreqcount != value)
                {
                    this.OnSocgroupreqcountChanging(value);
                    this.SendPropertyChanging();
                    this._Socgroupreqcount = value;
                    this.SendPropertyChanged("Socgroupreqcount");
                    this.OnSocgroupreqcountChanged();
                }
            }
        }

        [Column(Name = @"pcunreadcount", Storage = "_Pcunreadcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pcunreadcount
        {
            get
            {
                return this._Pcunreadcount;
            }
            set
            {
                if (this._Pcunreadcount != value)
                {
                    this.OnPcunreadcountChanging(value);
                    this.SendPropertyChanging();
                    this._Pcunreadcount = value;
                    this.SendPropertyChanged("Pcunreadcount");
                    this.OnPcunreadcountChanged();
                }
            }
        }

        [Column(Name = @"pcmoderatedcount", Storage = "_Pcmoderatedcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pcmoderatedcount
        {
            get
            {
                return this._Pcmoderatedcount;
            }
            set
            {
                if (this._Pcmoderatedcount != value)
                {
                    this.OnPcmoderatedcountChanging(value);
                    this.SendPropertyChanging();
                    this._Pcmoderatedcount = value;
                    this.SendPropertyChanged("Pcmoderatedcount");
                    this.OnPcmoderatedcountChanged();
                }
            }
        }

        [Column(Name = @"gmmoderatedcount", Storage = "_Gmmoderatedcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Gmmoderatedcount
        {
            get
            {
                return this._Gmmoderatedcount;
            }
            set
            {
                if (this._Gmmoderatedcount != value)
                {
                    this.OnGmmoderatedcountChanging(value);
                    this.SendPropertyChanging();
                    this._Gmmoderatedcount = value;
                    this.SendPropertyChanged("Gmmoderatedcount");
                    this.OnGmmoderatedcountChanged();
                }
            }
        }

        [Column(Name = @"assetposthash", Storage = "_Assetposthash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Assetposthash
        {
            get
            {
                return this._Assetposthash;
            }
            set
            {
                if (this._Assetposthash != value)
                {
                    this.OnAssetposthashChanging(value);
                    this.SendPropertyChanging();
                    this._Assetposthash = value;
                    this.SendPropertyChanged("Assetposthash");
                    this.OnAssetposthashChanged();
                }
            }
        }

        [Column(Name = @"bloggroupreqcount", Storage = "_Bloggroupreqcount", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Bloggroupreqcount
        {
            get
            {
                return this._Bloggroupreqcount;
            }
            set
            {
                if (this._Bloggroupreqcount != value)
                {
                    this.OnBloggroupreqcountChanging(value);
                    this.SendPropertyChanging();
                    this._Bloggroupreqcount = value;
                    this.SendPropertyChanged("Bloggroupreqcount");
                    this.OnBloggroupreqcountChanged();
                }
            }
        }

        [Column(Name = @"showblogcss", Storage = "_Showblogcss", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Showblogcss
        {
            get
            {
                return this._Showblogcss;
            }
            set
            {
                if (this._Showblogcss != value)
                {
                    this.OnShowblogcssChanging(value);
                    this.SendPropertyChanging();
                    this._Showblogcss = value;
                    this.SendPropertyChanged("Showblogcss");
                    this.OnShowblogcssChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.useractivation")]
    public partial class Useractivation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Useractivationid;

        private long _Userid;

        private long _Dateline;

        private string _Activationid;

        private int _Type;

        private int _Usergroupid;

        private int _Emailchange;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseractivationidChanging(long value);
        partial void OnUseractivationidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnActivationidChanging(string value);
        partial void OnActivationidChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnEmailchangeChanging(int value);
        partial void OnEmailchangeChanged();
        #endregion

        public Useractivation()
        {
            OnCreated();
        }

        [Column(Name = @"useractivationid", Storage = "_Useractivationid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Useractivationid
        {
            get
            {
                return this._Useractivationid;
            }
            set
            {
                if (this._Useractivationid != value)
                {
                    this.OnUseractivationidChanging(value);
                    this.SendPropertyChanging();
                    this._Useractivationid = value;
                    this.SendPropertyChanged("Useractivationid");
                    this.OnUseractivationidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"activationid", Storage = "_Activationid", CanBeNull = false, DbType = "varchar(40) NOT NULL")]
        public string Activationid
        {
            get
            {
                return this._Activationid;
            }
            set
            {
                if (this._Activationid != value)
                {
                    this.OnActivationidChanging(value);
                    this.SendPropertyChanging();
                    this._Activationid = value;
                    this.SendPropertyChanged("Activationid");
                    this.OnActivationidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"emailchange", Storage = "_Emailchange", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Emailchange
        {
            get
            {
                return this._Emailchange;
            }
            set
            {
                if (this._Emailchange != value)
                {
                    this.OnEmailchangeChanging(value);
                    this.SendPropertyChanging();
                    this._Emailchange = value;
                    this.SendPropertyChanged("Emailchange");
                    this.OnEmailchangeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.userban")]
    public partial class Userban : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private int _Usergroupid;

        private int _Displaygroupid;

        private string _Usertitle;

        private short _Customtitle;

        private long _Adminid;

        private long _Bandate;

        private long _Liftdate;

        private string _Reason;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnDisplaygroupidChanging(int value);
        partial void OnDisplaygroupidChanged();
        partial void OnUsertitleChanging(string value);
        partial void OnUsertitleChanged();
        partial void OnCustomtitleChanging(short value);
        partial void OnCustomtitleChanged();
        partial void OnAdminidChanging(long value);
        partial void OnAdminidChanged();
        partial void OnBandateChanging(long value);
        partial void OnBandateChanged();
        partial void OnLiftdateChanging(long value);
        partial void OnLiftdateChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        #endregion

        public Userban()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"displaygroupid", Storage = "_Displaygroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Displaygroupid
        {
            get
            {
                return this._Displaygroupid;
            }
            set
            {
                if (this._Displaygroupid != value)
                {
                    this.OnDisplaygroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Displaygroupid = value;
                    this.SendPropertyChanged("Displaygroupid");
                    this.OnDisplaygroupidChanged();
                }
            }
        }

        [Column(Name = @"usertitle", Storage = "_Usertitle", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Usertitle
        {
            get
            {
                return this._Usertitle;
            }
            set
            {
                if (this._Usertitle != value)
                {
                    this.OnUsertitleChanging(value);
                    this.SendPropertyChanging();
                    this._Usertitle = value;
                    this.SendPropertyChanged("Usertitle");
                    this.OnUsertitleChanged();
                }
            }
        }

        [Column(Name = @"customtitle", Storage = "_Customtitle", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Customtitle
        {
            get
            {
                return this._Customtitle;
            }
            set
            {
                if (this._Customtitle != value)
                {
                    this.OnCustomtitleChanging(value);
                    this.SendPropertyChanging();
                    this._Customtitle = value;
                    this.SendPropertyChanged("Customtitle");
                    this.OnCustomtitleChanged();
                }
            }
        }

        [Column(Name = @"adminid", Storage = "_Adminid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminid
        {
            get
            {
                return this._Adminid;
            }
            set
            {
                if (this._Adminid != value)
                {
                    this.OnAdminidChanging(value);
                    this.SendPropertyChanging();
                    this._Adminid = value;
                    this.SendPropertyChanged("Adminid");
                    this.OnAdminidChanged();
                }
            }
        }

        [Column(Name = @"bandate", Storage = "_Bandate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Bandate
        {
            get
            {
                return this._Bandate;
            }
            set
            {
                if (this._Bandate != value)
                {
                    this.OnBandateChanging(value);
                    this.SendPropertyChanging();
                    this._Bandate = value;
                    this.SendPropertyChanged("Bandate");
                    this.OnBandateChanged();
                }
            }
        }

        [Column(Name = @"liftdate", Storage = "_Liftdate", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Liftdate
        {
            get
            {
                return this._Liftdate;
            }
            set
            {
                if (this._Liftdate != value)
                {
                    this.OnLiftdateChanging(value);
                    this.SendPropertyChanging();
                    this._Liftdate = value;
                    this.SendPropertyChanged("Liftdate");
                    this.OnLiftdateChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.userchangelog")]
    public partial class Userchangelog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Changeid;

        private long _Userid;

        private string _Fieldname;

        private string _Newvalue;

        private string _Oldvalue;

        private long _Adminid;

        private long _Changetime;

        private string _Changeuniq;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnChangeidChanging(long value);
        partial void OnChangeidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnFieldnameChanging(string value);
        partial void OnFieldnameChanged();
        partial void OnNewvalueChanging(string value);
        partial void OnNewvalueChanged();
        partial void OnOldvalueChanging(string value);
        partial void OnOldvalueChanged();
        partial void OnAdminidChanging(long value);
        partial void OnAdminidChanged();
        partial void OnChangetimeChanging(long value);
        partial void OnChangetimeChanged();
        partial void OnChangeuniqChanging(string value);
        partial void OnChangeuniqChanged();
        #endregion

        public Userchangelog()
        {
            OnCreated();
        }

        [Column(Name = @"changeid", Storage = "_Changeid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Changeid
        {
            get
            {
                return this._Changeid;
            }
            set
            {
                if (this._Changeid != value)
                {
                    this.OnChangeidChanging(value);
                    this.SendPropertyChanging();
                    this._Changeid = value;
                    this.SendPropertyChanged("Changeid");
                    this.OnChangeidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"fieldname", Storage = "_Fieldname", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Fieldname
        {
            get
            {
                return this._Fieldname;
            }
            set
            {
                if (this._Fieldname != value)
                {
                    this.OnFieldnameChanging(value);
                    this.SendPropertyChanging();
                    this._Fieldname = value;
                    this.SendPropertyChanged("Fieldname");
                    this.OnFieldnameChanged();
                }
            }
        }

        [Column(Name = @"newvalue", Storage = "_Newvalue", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Newvalue
        {
            get
            {
                return this._Newvalue;
            }
            set
            {
                if (this._Newvalue != value)
                {
                    this.OnNewvalueChanging(value);
                    this.SendPropertyChanging();
                    this._Newvalue = value;
                    this.SendPropertyChanged("Newvalue");
                    this.OnNewvalueChanged();
                }
            }
        }

        [Column(Name = @"oldvalue", Storage = "_Oldvalue", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Oldvalue
        {
            get
            {
                return this._Oldvalue;
            }
            set
            {
                if (this._Oldvalue != value)
                {
                    this.OnOldvalueChanging(value);
                    this.SendPropertyChanging();
                    this._Oldvalue = value;
                    this.SendPropertyChanged("Oldvalue");
                    this.OnOldvalueChanged();
                }
            }
        }

        [Column(Name = @"adminid", Storage = "_Adminid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminid
        {
            get
            {
                return this._Adminid;
            }
            set
            {
                if (this._Adminid != value)
                {
                    this.OnAdminidChanging(value);
                    this.SendPropertyChanging();
                    this._Adminid = value;
                    this.SendPropertyChanged("Adminid");
                    this.OnAdminidChanged();
                }
            }
        }

        [Column(Name = @"change_time", Storage = "_Changetime", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Changetime
        {
            get
            {
                return this._Changetime;
            }
            set
            {
                if (this._Changetime != value)
                {
                    this.OnChangetimeChanging(value);
                    this.SendPropertyChanging();
                    this._Changetime = value;
                    this.SendPropertyChanged("Changetime");
                    this.OnChangetimeChanged();
                }
            }
        }

        [Column(Name = @"change_uniq", Storage = "_Changeuniq", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Changeuniq
        {
            get
            {
                return this._Changeuniq;
            }
            set
            {
                if (this._Changeuniq != value)
                {
                    this.OnChangeuniqChanging(value);
                    this.SendPropertyChanging();
                    this._Changeuniq = value;
                    this.SendPropertyChanged("Changeuniq");
                    this.OnChangeuniqChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usercss")]
    public partial class Usercss : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Selector;

        private string _Property;

        private string _Value;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnSelectorChanging(string value);
        partial void OnSelectorChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Usercss()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"selector", Storage = "_Selector", CanBeNull = false, DbType = "varchar(30) NOT NULL", IsPrimaryKey = true)]
        public string Selector
        {
            get
            {
                return this._Selector;
            }
            set
            {
                if (this._Selector != value)
                {
                    this.OnSelectorChanging(value);
                    this.SendPropertyChanging();
                    this._Selector = value;
                    this.SendPropertyChanged("Selector");
                    this.OnSelectorChanged();
                }
            }
        }

        [Column(Name = @"property", Storage = "_Property", CanBeNull = false, DbType = "varchar(30) NOT NULL", IsPrimaryKey = true)]
        public string Property
        {
            get
            {
                return this._Property;
            }
            set
            {
                if (this._Property != value)
                {
                    this.OnPropertyChanging(value);
                    this.SendPropertyChanging();
                    this._Property = value;
                    this.SendPropertyChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }

        [Column(Name = @"value", Storage = "_Value", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usercsscache")]
    public partial class Usercsscache : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Cachedcss;

        private long _Buildpermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnCachedcssChanging(string value);
        partial void OnCachedcssChanged();
        partial void OnBuildpermissionsChanging(long value);
        partial void OnBuildpermissionsChanged();
        #endregion

        public Usercsscache()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"cachedcss", Storage = "_Cachedcss", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Cachedcss
        {
            get
            {
                return this._Cachedcss;
            }
            set
            {
                if (this._Cachedcss != value)
                {
                    this.OnCachedcssChanging(value);
                    this.SendPropertyChanging();
                    this._Cachedcss = value;
                    this.SendPropertyChanged("Cachedcss");
                    this.OnCachedcssChanged();
                }
            }
        }

        [Column(Name = @"buildpermissions", Storage = "_Buildpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Buildpermissions
        {
            get
            {
                return this._Buildpermissions;
            }
            set
            {
                if (this._Buildpermissions != value)
                {
                    this.OnBuildpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Buildpermissions = value;
                    this.SendPropertyChanged("Buildpermissions");
                    this.OnBuildpermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.userfield")]
    public partial class Userfield : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Temp;

        private string _Field1;

        private string _Field2;

        private string _Field3;

        private string _Field4;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnTempChanging(string value);
        partial void OnTempChanged();
        partial void OnField1Changing(string value);
        partial void OnField1Changed();
        partial void OnField2Changing(string value);
        partial void OnField2Changed();
        partial void OnField3Changing(string value);
        partial void OnField3Changed();
        partial void OnField4Changing(string value);
        partial void OnField4Changed();
        #endregion

        public Userfield()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"temp", Storage = "_Temp", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Temp
        {
            get
            {
                return this._Temp;
            }
            set
            {
                if (this._Temp != value)
                {
                    this.OnTempChanging(value);
                    this.SendPropertyChanging();
                    this._Temp = value;
                    this.SendPropertyChanged("Temp");
                    this.OnTempChanged();
                }
            }
        }

        [Column(Name = @"field1", Storage = "_Field1", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Field1
        {
            get
            {
                return this._Field1;
            }
            set
            {
                if (this._Field1 != value)
                {
                    this.OnField1Changing(value);
                    this.SendPropertyChanging();
                    this._Field1 = value;
                    this.SendPropertyChanged("Field1");
                    this.OnField1Changed();
                }
            }
        }

        [Column(Name = @"field2", Storage = "_Field2", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Field2
        {
            get
            {
                return this._Field2;
            }
            set
            {
                if (this._Field2 != value)
                {
                    this.OnField2Changing(value);
                    this.SendPropertyChanging();
                    this._Field2 = value;
                    this.SendPropertyChanged("Field2");
                    this.OnField2Changed();
                }
            }
        }

        [Column(Name = @"field3", Storage = "_Field3", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Field3
        {
            get
            {
                return this._Field3;
            }
            set
            {
                if (this._Field3 != value)
                {
                    this.OnField3Changing(value);
                    this.SendPropertyChanging();
                    this._Field3 = value;
                    this.SendPropertyChanged("Field3");
                    this.OnField3Changed();
                }
            }
        }

        [Column(Name = @"field4", Storage = "_Field4", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Field4
        {
            get
            {
                return this._Field4;
            }
            set
            {
                if (this._Field4 != value)
                {
                    this.OnField4Changing(value);
                    this.SendPropertyChanging();
                    this._Field4 = value;
                    this.SendPropertyChanged("Field4");
                    this.OnField4Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usergroup")]
    public partial class Usergroup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Usergroupid;

        private string _Title;

        private string _Description;

        private string _Usertitle;

        private int _Passwordexpires;

        private int _Passwordhistory;

        private int _Pmquota;

        private int _Pmsendmax;

        private string _Opentag;

        private string _Closetag;

        private int _Canoverride;

        private int _Ispublicgroup;

        private long _Forumpermissions;

        private long _Pmpermissions;

        private long _Calendarpermissions;

        private long _Wolpermissions;

        private long _Adminpermissions;

        private long _Genericpermissions;

        private long _Genericpermissions2;

        private long _Genericoptions;

        private long _Signaturepermissions;

        private long _Visitormessagepermissions;

        private long _Attachlimit;

        private int _Avatarmaxwidth;

        private int _Avatarmaxheight;

        private long _Avatarmaxsize;

        private int _Profilepicmaxwidth;

        private int _Profilepicmaxheight;

        private long _Profilepicmaxsize;

        private int _Sigpicmaxwidth;

        private int _Sigpicmaxheight;

        private long _Sigpicmaxsize;

        private int _Sigmaximages;

        private int _Sigmaxsizebbcode;

        private int _Sigmaxchars;

        private int _Sigmaxrawchars;

        private int _Sigmaxlines;

        private long _Usercsspermissions;

        private long _Albumpermissions;

        private int _Albumpicmaxwidth;

        private int _Albumpicmaxheight;

        private long _Albumpicmaxsize;

        private long _Albummaxpics;

        private long _Albummaxsize;

        private long _Socialgrouppermissions;

        private long _Pmthrottlequantity;

        private long _Groupiconmaxsize;

        private long _Maximumsocialgroups;

        private long _Vbbloggeneralpermissions;

        private long _Vbblogentrypermissions;

        private long _Vbblogcommentpermissions;

        private long _Vbblogcustomblocks;

        private long _Vbblogcustompages;

        private long _Vbcmspermissions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUsertitleChanging(string value);
        partial void OnUsertitleChanged();
        partial void OnPasswordexpiresChanging(int value);
        partial void OnPasswordexpiresChanged();
        partial void OnPasswordhistoryChanging(int value);
        partial void OnPasswordhistoryChanged();
        partial void OnPmquotaChanging(int value);
        partial void OnPmquotaChanged();
        partial void OnPmsendmaxChanging(int value);
        partial void OnPmsendmaxChanged();
        partial void OnOpentagChanging(string value);
        partial void OnOpentagChanged();
        partial void OnClosetagChanging(string value);
        partial void OnClosetagChanged();
        partial void OnCanoverrideChanging(int value);
        partial void OnCanoverrideChanged();
        partial void OnIspublicgroupChanging(int value);
        partial void OnIspublicgroupChanged();
        partial void OnForumpermissionsChanging(long value);
        partial void OnForumpermissionsChanged();
        partial void OnPmpermissionsChanging(long value);
        partial void OnPmpermissionsChanged();
        partial void OnCalendarpermissionsChanging(long value);
        partial void OnCalendarpermissionsChanged();
        partial void OnWolpermissionsChanging(long value);
        partial void OnWolpermissionsChanged();
        partial void OnAdminpermissionsChanging(long value);
        partial void OnAdminpermissionsChanged();
        partial void OnGenericpermissionsChanging(long value);
        partial void OnGenericpermissionsChanged();
        partial void OnGenericpermissions2Changing(long value);
        partial void OnGenericpermissions2Changed();
        partial void OnGenericoptionsChanging(long value);
        partial void OnGenericoptionsChanged();
        partial void OnSignaturepermissionsChanging(long value);
        partial void OnSignaturepermissionsChanged();
        partial void OnVisitormessagepermissionsChanging(long value);
        partial void OnVisitormessagepermissionsChanged();
        partial void OnAttachlimitChanging(long value);
        partial void OnAttachlimitChanged();
        partial void OnAvatarmaxwidthChanging(int value);
        partial void OnAvatarmaxwidthChanged();
        partial void OnAvatarmaxheightChanging(int value);
        partial void OnAvatarmaxheightChanged();
        partial void OnAvatarmaxsizeChanging(long value);
        partial void OnAvatarmaxsizeChanged();
        partial void OnProfilepicmaxwidthChanging(int value);
        partial void OnProfilepicmaxwidthChanged();
        partial void OnProfilepicmaxheightChanging(int value);
        partial void OnProfilepicmaxheightChanged();
        partial void OnProfilepicmaxsizeChanging(long value);
        partial void OnProfilepicmaxsizeChanged();
        partial void OnSigpicmaxwidthChanging(int value);
        partial void OnSigpicmaxwidthChanged();
        partial void OnSigpicmaxheightChanging(int value);
        partial void OnSigpicmaxheightChanged();
        partial void OnSigpicmaxsizeChanging(long value);
        partial void OnSigpicmaxsizeChanged();
        partial void OnSigmaximagesChanging(int value);
        partial void OnSigmaximagesChanged();
        partial void OnSigmaxsizebbcodeChanging(int value);
        partial void OnSigmaxsizebbcodeChanged();
        partial void OnSigmaxcharsChanging(int value);
        partial void OnSigmaxcharsChanged();
        partial void OnSigmaxrawcharsChanging(int value);
        partial void OnSigmaxrawcharsChanged();
        partial void OnSigmaxlinesChanging(int value);
        partial void OnSigmaxlinesChanged();
        partial void OnUsercsspermissionsChanging(long value);
        partial void OnUsercsspermissionsChanged();
        partial void OnAlbumpermissionsChanging(long value);
        partial void OnAlbumpermissionsChanged();
        partial void OnAlbumpicmaxwidthChanging(int value);
        partial void OnAlbumpicmaxwidthChanged();
        partial void OnAlbumpicmaxheightChanging(int value);
        partial void OnAlbumpicmaxheightChanged();
        partial void OnAlbumpicmaxsizeChanging(long value);
        partial void OnAlbumpicmaxsizeChanged();
        partial void OnAlbummaxpicsChanging(long value);
        partial void OnAlbummaxpicsChanged();
        partial void OnAlbummaxsizeChanging(long value);
        partial void OnAlbummaxsizeChanged();
        partial void OnSocialgrouppermissionsChanging(long value);
        partial void OnSocialgrouppermissionsChanged();
        partial void OnPmthrottlequantityChanging(long value);
        partial void OnPmthrottlequantityChanged();
        partial void OnGroupiconmaxsizeChanging(long value);
        partial void OnGroupiconmaxsizeChanged();
        partial void OnMaximumsocialgroupsChanging(long value);
        partial void OnMaximumsocialgroupsChanged();
        partial void OnVbbloggeneralpermissionsChanging(long value);
        partial void OnVbbloggeneralpermissionsChanged();
        partial void OnVbblogentrypermissionsChanging(long value);
        partial void OnVbblogentrypermissionsChanged();
        partial void OnVbblogcommentpermissionsChanging(long value);
        partial void OnVbblogcommentpermissionsChanged();
        partial void OnVbblogcustomblocksChanging(long value);
        partial void OnVbblogcustomblocksChanged();
        partial void OnVbblogcustompagesChanging(long value);
        partial void OnVbblogcustompagesChanged();
        partial void OnVbcmspermissionsChanging(long value);
        partial void OnVbcmspermissionsChanged();
        #endregion

        public Usergroup()
        {
            OnCreated();
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"usertitle", Storage = "_Usertitle", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Usertitle
        {
            get
            {
                return this._Usertitle;
            }
            set
            {
                if (this._Usertitle != value)
                {
                    this.OnUsertitleChanging(value);
                    this.SendPropertyChanging();
                    this._Usertitle = value;
                    this.SendPropertyChanged("Usertitle");
                    this.OnUsertitleChanged();
                }
            }
        }

        [Column(Name = @"passwordexpires", Storage = "_Passwordexpires", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Passwordexpires
        {
            get
            {
                return this._Passwordexpires;
            }
            set
            {
                if (this._Passwordexpires != value)
                {
                    this.OnPasswordexpiresChanging(value);
                    this.SendPropertyChanging();
                    this._Passwordexpires = value;
                    this.SendPropertyChanged("Passwordexpires");
                    this.OnPasswordexpiresChanged();
                }
            }
        }

        [Column(Name = @"passwordhistory", Storage = "_Passwordhistory", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Passwordhistory
        {
            get
            {
                return this._Passwordhistory;
            }
            set
            {
                if (this._Passwordhistory != value)
                {
                    this.OnPasswordhistoryChanging(value);
                    this.SendPropertyChanging();
                    this._Passwordhistory = value;
                    this.SendPropertyChanged("Passwordhistory");
                    this.OnPasswordhistoryChanged();
                }
            }
        }

        [Column(Name = @"pmquota", Storage = "_Pmquota", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Pmquota
        {
            get
            {
                return this._Pmquota;
            }
            set
            {
                if (this._Pmquota != value)
                {
                    this.OnPmquotaChanging(value);
                    this.SendPropertyChanging();
                    this._Pmquota = value;
                    this.SendPropertyChanged("Pmquota");
                    this.OnPmquotaChanged();
                }
            }
        }

        [Column(Name = @"pmsendmax", Storage = "_Pmsendmax", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Pmsendmax
        {
            get
            {
                return this._Pmsendmax;
            }
            set
            {
                if (this._Pmsendmax != value)
                {
                    this.OnPmsendmaxChanging(value);
                    this.SendPropertyChanging();
                    this._Pmsendmax = value;
                    this.SendPropertyChanged("Pmsendmax");
                    this.OnPmsendmaxChanged();
                }
            }
        }

        [Column(Name = @"opentag", Storage = "_Opentag", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Opentag
        {
            get
            {
                return this._Opentag;
            }
            set
            {
                if (this._Opentag != value)
                {
                    this.OnOpentagChanging(value);
                    this.SendPropertyChanging();
                    this._Opentag = value;
                    this.SendPropertyChanged("Opentag");
                    this.OnOpentagChanged();
                }
            }
        }

        [Column(Name = @"closetag", Storage = "_Closetag", CanBeNull = false, DbType = "char(100) NOT NULL")]
        public string Closetag
        {
            get
            {
                return this._Closetag;
            }
            set
            {
                if (this._Closetag != value)
                {
                    this.OnClosetagChanging(value);
                    this.SendPropertyChanging();
                    this._Closetag = value;
                    this.SendPropertyChanged("Closetag");
                    this.OnClosetagChanged();
                }
            }
        }

        [Column(Name = @"canoverride", Storage = "_Canoverride", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Canoverride
        {
            get
            {
                return this._Canoverride;
            }
            set
            {
                if (this._Canoverride != value)
                {
                    this.OnCanoverrideChanging(value);
                    this.SendPropertyChanging();
                    this._Canoverride = value;
                    this.SendPropertyChanged("Canoverride");
                    this.OnCanoverrideChanged();
                }
            }
        }

        [Column(Name = @"ispublicgroup", Storage = "_Ispublicgroup", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Ispublicgroup
        {
            get
            {
                return this._Ispublicgroup;
            }
            set
            {
                if (this._Ispublicgroup != value)
                {
                    this.OnIspublicgroupChanging(value);
                    this.SendPropertyChanging();
                    this._Ispublicgroup = value;
                    this.SendPropertyChanged("Ispublicgroup");
                    this.OnIspublicgroupChanged();
                }
            }
        }

        [Column(Name = @"forumpermissions", Storage = "_Forumpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Forumpermissions
        {
            get
            {
                return this._Forumpermissions;
            }
            set
            {
                if (this._Forumpermissions != value)
                {
                    this.OnForumpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Forumpermissions = value;
                    this.SendPropertyChanged("Forumpermissions");
                    this.OnForumpermissionsChanged();
                }
            }
        }

        [Column(Name = @"pmpermissions", Storage = "_Pmpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pmpermissions
        {
            get
            {
                return this._Pmpermissions;
            }
            set
            {
                if (this._Pmpermissions != value)
                {
                    this.OnPmpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Pmpermissions = value;
                    this.SendPropertyChanged("Pmpermissions");
                    this.OnPmpermissionsChanged();
                }
            }
        }

        [Column(Name = @"calendarpermissions", Storage = "_Calendarpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Calendarpermissions
        {
            get
            {
                return this._Calendarpermissions;
            }
            set
            {
                if (this._Calendarpermissions != value)
                {
                    this.OnCalendarpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Calendarpermissions = value;
                    this.SendPropertyChanged("Calendarpermissions");
                    this.OnCalendarpermissionsChanged();
                }
            }
        }

        [Column(Name = @"wolpermissions", Storage = "_Wolpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Wolpermissions
        {
            get
            {
                return this._Wolpermissions;
            }
            set
            {
                if (this._Wolpermissions != value)
                {
                    this.OnWolpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Wolpermissions = value;
                    this.SendPropertyChanged("Wolpermissions");
                    this.OnWolpermissionsChanged();
                }
            }
        }

        [Column(Name = @"adminpermissions", Storage = "_Adminpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Adminpermissions
        {
            get
            {
                return this._Adminpermissions;
            }
            set
            {
                if (this._Adminpermissions != value)
                {
                    this.OnAdminpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Adminpermissions = value;
                    this.SendPropertyChanged("Adminpermissions");
                    this.OnAdminpermissionsChanged();
                }
            }
        }

        [Column(Name = @"genericpermissions", Storage = "_Genericpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Genericpermissions
        {
            get
            {
                return this._Genericpermissions;
            }
            set
            {
                if (this._Genericpermissions != value)
                {
                    this.OnGenericpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Genericpermissions = value;
                    this.SendPropertyChanged("Genericpermissions");
                    this.OnGenericpermissionsChanged();
                }
            }
        }

        [Column(Name = @"genericpermissions2", Storage = "_Genericpermissions2", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Genericpermissions2
        {
            get
            {
                return this._Genericpermissions2;
            }
            set
            {
                if (this._Genericpermissions2 != value)
                {
                    this.OnGenericpermissions2Changing(value);
                    this.SendPropertyChanging();
                    this._Genericpermissions2 = value;
                    this.SendPropertyChanged("Genericpermissions2");
                    this.OnGenericpermissions2Changed();
                }
            }
        }

        [Column(Name = @"genericoptions", Storage = "_Genericoptions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Genericoptions
        {
            get
            {
                return this._Genericoptions;
            }
            set
            {
                if (this._Genericoptions != value)
                {
                    this.OnGenericoptionsChanging(value);
                    this.SendPropertyChanging();
                    this._Genericoptions = value;
                    this.SendPropertyChanged("Genericoptions");
                    this.OnGenericoptionsChanged();
                }
            }
        }

        [Column(Name = @"signaturepermissions", Storage = "_Signaturepermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Signaturepermissions
        {
            get
            {
                return this._Signaturepermissions;
            }
            set
            {
                if (this._Signaturepermissions != value)
                {
                    this.OnSignaturepermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Signaturepermissions = value;
                    this.SendPropertyChanged("Signaturepermissions");
                    this.OnSignaturepermissionsChanged();
                }
            }
        }

        [Column(Name = @"visitormessagepermissions", Storage = "_Visitormessagepermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Visitormessagepermissions
        {
            get
            {
                return this._Visitormessagepermissions;
            }
            set
            {
                if (this._Visitormessagepermissions != value)
                {
                    this.OnVisitormessagepermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Visitormessagepermissions = value;
                    this.SendPropertyChanged("Visitormessagepermissions");
                    this.OnVisitormessagepermissionsChanged();
                }
            }
        }

        [Column(Name = @"attachlimit", Storage = "_Attachlimit", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Attachlimit
        {
            get
            {
                return this._Attachlimit;
            }
            set
            {
                if (this._Attachlimit != value)
                {
                    this.OnAttachlimitChanging(value);
                    this.SendPropertyChanging();
                    this._Attachlimit = value;
                    this.SendPropertyChanged("Attachlimit");
                    this.OnAttachlimitChanged();
                }
            }
        }

        [Column(Name = @"avatarmaxwidth", Storage = "_Avatarmaxwidth", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Avatarmaxwidth
        {
            get
            {
                return this._Avatarmaxwidth;
            }
            set
            {
                if (this._Avatarmaxwidth != value)
                {
                    this.OnAvatarmaxwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarmaxwidth = value;
                    this.SendPropertyChanged("Avatarmaxwidth");
                    this.OnAvatarmaxwidthChanged();
                }
            }
        }

        [Column(Name = @"avatarmaxheight", Storage = "_Avatarmaxheight", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Avatarmaxheight
        {
            get
            {
                return this._Avatarmaxheight;
            }
            set
            {
                if (this._Avatarmaxheight != value)
                {
                    this.OnAvatarmaxheightChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarmaxheight = value;
                    this.SendPropertyChanged("Avatarmaxheight");
                    this.OnAvatarmaxheightChanged();
                }
            }
        }

        [Column(Name = @"avatarmaxsize", Storage = "_Avatarmaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Avatarmaxsize
        {
            get
            {
                return this._Avatarmaxsize;
            }
            set
            {
                if (this._Avatarmaxsize != value)
                {
                    this.OnAvatarmaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Avatarmaxsize = value;
                    this.SendPropertyChanged("Avatarmaxsize");
                    this.OnAvatarmaxsizeChanged();
                }
            }
        }

        [Column(Name = @"profilepicmaxwidth", Storage = "_Profilepicmaxwidth", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Profilepicmaxwidth
        {
            get
            {
                return this._Profilepicmaxwidth;
            }
            set
            {
                if (this._Profilepicmaxwidth != value)
                {
                    this.OnProfilepicmaxwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Profilepicmaxwidth = value;
                    this.SendPropertyChanged("Profilepicmaxwidth");
                    this.OnProfilepicmaxwidthChanged();
                }
            }
        }

        [Column(Name = @"profilepicmaxheight", Storage = "_Profilepicmaxheight", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Profilepicmaxheight
        {
            get
            {
                return this._Profilepicmaxheight;
            }
            set
            {
                if (this._Profilepicmaxheight != value)
                {
                    this.OnProfilepicmaxheightChanging(value);
                    this.SendPropertyChanging();
                    this._Profilepicmaxheight = value;
                    this.SendPropertyChanged("Profilepicmaxheight");
                    this.OnProfilepicmaxheightChanged();
                }
            }
        }

        [Column(Name = @"profilepicmaxsize", Storage = "_Profilepicmaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Profilepicmaxsize
        {
            get
            {
                return this._Profilepicmaxsize;
            }
            set
            {
                if (this._Profilepicmaxsize != value)
                {
                    this.OnProfilepicmaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Profilepicmaxsize = value;
                    this.SendPropertyChanged("Profilepicmaxsize");
                    this.OnProfilepicmaxsizeChanged();
                }
            }
        }

        [Column(Name = @"sigpicmaxwidth", Storage = "_Sigpicmaxwidth", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigpicmaxwidth
        {
            get
            {
                return this._Sigpicmaxwidth;
            }
            set
            {
                if (this._Sigpicmaxwidth != value)
                {
                    this.OnSigpicmaxwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Sigpicmaxwidth = value;
                    this.SendPropertyChanged("Sigpicmaxwidth");
                    this.OnSigpicmaxwidthChanged();
                }
            }
        }

        [Column(Name = @"sigpicmaxheight", Storage = "_Sigpicmaxheight", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigpicmaxheight
        {
            get
            {
                return this._Sigpicmaxheight;
            }
            set
            {
                if (this._Sigpicmaxheight != value)
                {
                    this.OnSigpicmaxheightChanging(value);
                    this.SendPropertyChanging();
                    this._Sigpicmaxheight = value;
                    this.SendPropertyChanged("Sigpicmaxheight");
                    this.OnSigpicmaxheightChanged();
                }
            }
        }

        [Column(Name = @"sigpicmaxsize", Storage = "_Sigpicmaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Sigpicmaxsize
        {
            get
            {
                return this._Sigpicmaxsize;
            }
            set
            {
                if (this._Sigpicmaxsize != value)
                {
                    this.OnSigpicmaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Sigpicmaxsize = value;
                    this.SendPropertyChanged("Sigpicmaxsize");
                    this.OnSigpicmaxsizeChanged();
                }
            }
        }

        [Column(Name = @"sigmaximages", Storage = "_Sigmaximages", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigmaximages
        {
            get
            {
                return this._Sigmaximages;
            }
            set
            {
                if (this._Sigmaximages != value)
                {
                    this.OnSigmaximagesChanging(value);
                    this.SendPropertyChanging();
                    this._Sigmaximages = value;
                    this.SendPropertyChanged("Sigmaximages");
                    this.OnSigmaximagesChanged();
                }
            }
        }

        [Column(Name = @"sigmaxsizebbcode", Storage = "_Sigmaxsizebbcode", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigmaxsizebbcode
        {
            get
            {
                return this._Sigmaxsizebbcode;
            }
            set
            {
                if (this._Sigmaxsizebbcode != value)
                {
                    this.OnSigmaxsizebbcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Sigmaxsizebbcode = value;
                    this.SendPropertyChanged("Sigmaxsizebbcode");
                    this.OnSigmaxsizebbcodeChanged();
                }
            }
        }

        [Column(Name = @"sigmaxchars", Storage = "_Sigmaxchars", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigmaxchars
        {
            get
            {
                return this._Sigmaxchars;
            }
            set
            {
                if (this._Sigmaxchars != value)
                {
                    this.OnSigmaxcharsChanging(value);
                    this.SendPropertyChanging();
                    this._Sigmaxchars = value;
                    this.SendPropertyChanged("Sigmaxchars");
                    this.OnSigmaxcharsChanged();
                }
            }
        }

        [Column(Name = @"sigmaxrawchars", Storage = "_Sigmaxrawchars", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigmaxrawchars
        {
            get
            {
                return this._Sigmaxrawchars;
            }
            set
            {
                if (this._Sigmaxrawchars != value)
                {
                    this.OnSigmaxrawcharsChanging(value);
                    this.SendPropertyChanging();
                    this._Sigmaxrawchars = value;
                    this.SendPropertyChanged("Sigmaxrawchars");
                    this.OnSigmaxrawcharsChanged();
                }
            }
        }

        [Column(Name = @"sigmaxlines", Storage = "_Sigmaxlines", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Sigmaxlines
        {
            get
            {
                return this._Sigmaxlines;
            }
            set
            {
                if (this._Sigmaxlines != value)
                {
                    this.OnSigmaxlinesChanging(value);
                    this.SendPropertyChanging();
                    this._Sigmaxlines = value;
                    this.SendPropertyChanged("Sigmaxlines");
                    this.OnSigmaxlinesChanged();
                }
            }
        }

        [Column(Name = @"usercsspermissions", Storage = "_Usercsspermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usercsspermissions
        {
            get
            {
                return this._Usercsspermissions;
            }
            set
            {
                if (this._Usercsspermissions != value)
                {
                    this.OnUsercsspermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Usercsspermissions = value;
                    this.SendPropertyChanged("Usercsspermissions");
                    this.OnUsercsspermissionsChanged();
                }
            }
        }

        [Column(Name = @"albumpermissions", Storage = "_Albumpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Albumpermissions
        {
            get
            {
                return this._Albumpermissions;
            }
            set
            {
                if (this._Albumpermissions != value)
                {
                    this.OnAlbumpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Albumpermissions = value;
                    this.SendPropertyChanged("Albumpermissions");
                    this.OnAlbumpermissionsChanged();
                }
            }
        }

        [Column(Name = @"albumpicmaxwidth", Storage = "_Albumpicmaxwidth", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Albumpicmaxwidth
        {
            get
            {
                return this._Albumpicmaxwidth;
            }
            set
            {
                if (this._Albumpicmaxwidth != value)
                {
                    this.OnAlbumpicmaxwidthChanging(value);
                    this.SendPropertyChanging();
                    this._Albumpicmaxwidth = value;
                    this.SendPropertyChanged("Albumpicmaxwidth");
                    this.OnAlbumpicmaxwidthChanged();
                }
            }
        }

        [Column(Name = @"albumpicmaxheight", Storage = "_Albumpicmaxheight", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Albumpicmaxheight
        {
            get
            {
                return this._Albumpicmaxheight;
            }
            set
            {
                if (this._Albumpicmaxheight != value)
                {
                    this.OnAlbumpicmaxheightChanging(value);
                    this.SendPropertyChanging();
                    this._Albumpicmaxheight = value;
                    this.SendPropertyChanged("Albumpicmaxheight");
                    this.OnAlbumpicmaxheightChanged();
                }
            }
        }

        [Column(Name = @"albumpicmaxsize", Storage = "_Albumpicmaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Albumpicmaxsize
        {
            get
            {
                return this._Albumpicmaxsize;
            }
            set
            {
                if (this._Albumpicmaxsize != value)
                {
                    this.OnAlbumpicmaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Albumpicmaxsize = value;
                    this.SendPropertyChanged("Albumpicmaxsize");
                    this.OnAlbumpicmaxsizeChanged();
                }
            }
        }

        [Column(Name = @"albummaxpics", Storage = "_Albummaxpics", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Albummaxpics
        {
            get
            {
                return this._Albummaxpics;
            }
            set
            {
                if (this._Albummaxpics != value)
                {
                    this.OnAlbummaxpicsChanging(value);
                    this.SendPropertyChanging();
                    this._Albummaxpics = value;
                    this.SendPropertyChanged("Albummaxpics");
                    this.OnAlbummaxpicsChanged();
                }
            }
        }

        [Column(Name = @"albummaxsize", Storage = "_Albummaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Albummaxsize
        {
            get
            {
                return this._Albummaxsize;
            }
            set
            {
                if (this._Albummaxsize != value)
                {
                    this.OnAlbummaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Albummaxsize = value;
                    this.SendPropertyChanged("Albummaxsize");
                    this.OnAlbummaxsizeChanged();
                }
            }
        }

        [Column(Name = @"socialgrouppermissions", Storage = "_Socialgrouppermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Socialgrouppermissions
        {
            get
            {
                return this._Socialgrouppermissions;
            }
            set
            {
                if (this._Socialgrouppermissions != value)
                {
                    this.OnSocialgrouppermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Socialgrouppermissions = value;
                    this.SendPropertyChanged("Socialgrouppermissions");
                    this.OnSocialgrouppermissionsChanged();
                }
            }
        }

        [Column(Name = @"pmthrottlequantity", Storage = "_Pmthrottlequantity", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Pmthrottlequantity
        {
            get
            {
                return this._Pmthrottlequantity;
            }
            set
            {
                if (this._Pmthrottlequantity != value)
                {
                    this.OnPmthrottlequantityChanging(value);
                    this.SendPropertyChanging();
                    this._Pmthrottlequantity = value;
                    this.SendPropertyChanged("Pmthrottlequantity");
                    this.OnPmthrottlequantityChanged();
                }
            }
        }

        [Column(Name = @"groupiconmaxsize", Storage = "_Groupiconmaxsize", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Groupiconmaxsize
        {
            get
            {
                return this._Groupiconmaxsize;
            }
            set
            {
                if (this._Groupiconmaxsize != value)
                {
                    this.OnGroupiconmaxsizeChanging(value);
                    this.SendPropertyChanging();
                    this._Groupiconmaxsize = value;
                    this.SendPropertyChanged("Groupiconmaxsize");
                    this.OnGroupiconmaxsizeChanged();
                }
            }
        }

        [Column(Name = @"maximumsocialgroups", Storage = "_Maximumsocialgroups", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Maximumsocialgroups
        {
            get
            {
                return this._Maximumsocialgroups;
            }
            set
            {
                if (this._Maximumsocialgroups != value)
                {
                    this.OnMaximumsocialgroupsChanging(value);
                    this.SendPropertyChanging();
                    this._Maximumsocialgroups = value;
                    this.SendPropertyChanged("Maximumsocialgroups");
                    this.OnMaximumsocialgroupsChanged();
                }
            }
        }

        [Column(Name = @"vbblog_general_permissions", Storage = "_Vbbloggeneralpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbbloggeneralpermissions
        {
            get
            {
                return this._Vbbloggeneralpermissions;
            }
            set
            {
                if (this._Vbbloggeneralpermissions != value)
                {
                    this.OnVbbloggeneralpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Vbbloggeneralpermissions = value;
                    this.SendPropertyChanged("Vbbloggeneralpermissions");
                    this.OnVbbloggeneralpermissionsChanged();
                }
            }
        }

        [Column(Name = @"vbblog_entry_permissions", Storage = "_Vbblogentrypermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbblogentrypermissions
        {
            get
            {
                return this._Vbblogentrypermissions;
            }
            set
            {
                if (this._Vbblogentrypermissions != value)
                {
                    this.OnVbblogentrypermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Vbblogentrypermissions = value;
                    this.SendPropertyChanged("Vbblogentrypermissions");
                    this.OnVbblogentrypermissionsChanged();
                }
            }
        }

        [Column(Name = @"vbblog_comment_permissions", Storage = "_Vbblogcommentpermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbblogcommentpermissions
        {
            get
            {
                return this._Vbblogcommentpermissions;
            }
            set
            {
                if (this._Vbblogcommentpermissions != value)
                {
                    this.OnVbblogcommentpermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Vbblogcommentpermissions = value;
                    this.SendPropertyChanged("Vbblogcommentpermissions");
                    this.OnVbblogcommentpermissionsChanged();
                }
            }
        }

        [Column(Name = @"vbblog_customblocks", Storage = "_Vbblogcustomblocks", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbblogcustomblocks
        {
            get
            {
                return this._Vbblogcustomblocks;
            }
            set
            {
                if (this._Vbblogcustomblocks != value)
                {
                    this.OnVbblogcustomblocksChanging(value);
                    this.SendPropertyChanging();
                    this._Vbblogcustomblocks = value;
                    this.SendPropertyChanged("Vbblogcustomblocks");
                    this.OnVbblogcustomblocksChanged();
                }
            }
        }

        [Column(Name = @"vbblog_custompages", Storage = "_Vbblogcustompages", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbblogcustompages
        {
            get
            {
                return this._Vbblogcustompages;
            }
            set
            {
                if (this._Vbblogcustompages != value)
                {
                    this.OnVbblogcustompagesChanging(value);
                    this.SendPropertyChanging();
                    this._Vbblogcustompages = value;
                    this.SendPropertyChanged("Vbblogcustompages");
                    this.OnVbblogcustompagesChanged();
                }
            }
        }

        [Column(Name = @"vbcmspermissions", Storage = "_Vbcmspermissions", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Vbcmspermissions
        {
            get
            {
                return this._Vbcmspermissions;
            }
            set
            {
                if (this._Vbcmspermissions != value)
                {
                    this.OnVbcmspermissionsChanging(value);
                    this.SendPropertyChanging();
                    this._Vbcmspermissions = value;
                    this.SendPropertyChanged("Vbcmspermissions");
                    this.OnVbcmspermissionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usergroupleader")]
    public partial class Usergroupleader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Usergroupleaderid;

        private long _Userid;

        private int _Usergroupid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsergroupleaderidChanging(int value);
        partial void OnUsergroupleaderidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        #endregion

        public Usergroupleader()
        {
            OnCreated();
        }

        [Column(Name = @"usergroupleaderid", Storage = "_Usergroupleaderid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Usergroupleaderid
        {
            get
            {
                return this._Usergroupleaderid;
            }
            set
            {
                if (this._Usergroupleaderid != value)
                {
                    this.OnUsergroupleaderidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupleaderid = value;
                    this.SendPropertyChanged("Usergroupleaderid");
                    this.OnUsergroupleaderidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usergrouprequest")]
    public partial class Usergrouprequest : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Usergrouprequestid;

        private long _Userid;

        private int _Usergroupid;

        private string _Reason;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsergrouprequestidChanging(long value);
        partial void OnUsergrouprequestidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnUsergroupidChanging(int value);
        partial void OnUsergroupidChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Usergrouprequest()
        {
            OnCreated();
        }

        [Column(Name = @"usergrouprequestid", Storage = "_Usergrouprequestid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Usergrouprequestid
        {
            get
            {
                return this._Usergrouprequestid;
            }
            set
            {
                if (this._Usergrouprequestid != value)
                {
                    this.OnUsergrouprequestidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergrouprequestid = value;
                    this.SendPropertyChanged("Usergrouprequestid");
                    this.OnUsergrouprequestidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"reason", Storage = "_Reason", CanBeNull = false, DbType = "varchar(250) NOT NULL")]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.userlist")]
    public partial class Userlist : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private long _Relationid;

        private string _Type;

        private string _Friend;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnRelationidChanging(long value);
        partial void OnRelationidChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnFriendChanging(string value);
        partial void OnFriendChanged();
        #endregion

        public Userlist()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"relationid", Storage = "_Relationid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Relationid
        {
            get
            {
                return this._Relationid;
            }
            set
            {
                if (this._Relationid != value)
                {
                    this.OnRelationidChanging(value);
                    this.SendPropertyChanging();
                    this._Relationid = value;
                    this.SendPropertyChanged("Relationid");
                    this.OnRelationidChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "enum NOT NULL", IsPrimaryKey = true)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"friend", Storage = "_Friend", CanBeNull = false, DbType = "enum NOT NULL")]
        public string Friend
        {
            get
            {
                return this._Friend;
            }
            set
            {
                if (this._Friend != value)
                {
                    this.OnFriendChanging(value);
                    this.SendPropertyChanging();
                    this._Friend = value;
                    this.SendPropertyChanged("Friend");
                    this.OnFriendChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usernote")]
    public partial class Usernote : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Usernoteid;

        private long _Userid;

        private long _Posterid;

        private string _Username;

        private long _Dateline;

        private string _Message;

        private string _Title;

        private short _Allowsmilies;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsernoteidChanging(long value);
        partial void OnUsernoteidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPosteridChanging(long value);
        partial void OnPosteridChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnAllowsmiliesChanging(short value);
        partial void OnAllowsmiliesChanged();
        #endregion

        public Usernote()
        {
            OnCreated();
        }

        [Column(Name = @"usernoteid", Storage = "_Usernoteid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Usernoteid
        {
            get
            {
                return this._Usernoteid;
            }
            set
            {
                if (this._Usernoteid != value)
                {
                    this.OnUsernoteidChanging(value);
                    this.SendPropertyChanging();
                    this._Usernoteid = value;
                    this.SendPropertyChanged("Usernoteid");
                    this.OnUsernoteidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"posterid", Storage = "_Posterid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Posterid
        {
            get
            {
                return this._Posterid;
            }
            set
            {
                if (this._Posterid != value)
                {
                    this.OnPosteridChanging(value);
                    this.SendPropertyChanging();
                    this._Posterid = value;
                    this.SendPropertyChanged("Posterid");
                    this.OnPosteridChanged();
                }
            }
        }

        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"message", Storage = "_Message", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"allowsmilies", Storage = "_Allowsmilies", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Allowsmilies
        {
            get
            {
                return this._Allowsmilies;
            }
            set
            {
                if (this._Allowsmilies != value)
                {
                    this.OnAllowsmiliesChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilies = value;
                    this.SendPropertyChanged("Allowsmilies");
                    this.OnAllowsmiliesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.userpromotion")]
    public partial class Userpromotion : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userpromotionid;

        private long _Usergroupid;

        private long _Joinusergroupid;

        private int _Reputation;

        private long _Date;

        private long _Posts;

        private short _Strategy;

        private short _Type;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUserpromotionidChanging(long value);
        partial void OnUserpromotionidChanged();
        partial void OnUsergroupidChanging(long value);
        partial void OnUsergroupidChanged();
        partial void OnJoinusergroupidChanging(long value);
        partial void OnJoinusergroupidChanged();
        partial void OnReputationChanging(int value);
        partial void OnReputationChanged();
        partial void OnDateChanging(long value);
        partial void OnDateChanged();
        partial void OnPostsChanging(long value);
        partial void OnPostsChanged();
        partial void OnStrategyChanging(short value);
        partial void OnStrategyChanged();
        partial void OnTypeChanging(short value);
        partial void OnTypeChanged();
        #endregion

        public Userpromotion()
        {
            OnCreated();
        }

        [Column(Name = @"userpromotionid", Storage = "_Userpromotionid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Userpromotionid
        {
            get
            {
                return this._Userpromotionid;
            }
            set
            {
                if (this._Userpromotionid != value)
                {
                    this.OnUserpromotionidChanging(value);
                    this.SendPropertyChanging();
                    this._Userpromotionid = value;
                    this.SendPropertyChanged("Userpromotionid");
                    this.OnUserpromotionidChanged();
                }
            }
        }

        [Column(Name = @"usergroupid", Storage = "_Usergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Usergroupid
        {
            get
            {
                return this._Usergroupid;
            }
            set
            {
                if (this._Usergroupid != value)
                {
                    this.OnUsergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Usergroupid = value;
                    this.SendPropertyChanged("Usergroupid");
                    this.OnUsergroupidChanged();
                }
            }
        }

        [Column(Name = @"joinusergroupid", Storage = "_Joinusergroupid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Joinusergroupid
        {
            get
            {
                return this._Joinusergroupid;
            }
            set
            {
                if (this._Joinusergroupid != value)
                {
                    this.OnJoinusergroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Joinusergroupid = value;
                    this.SendPropertyChanged("Joinusergroupid");
                    this.OnJoinusergroupidChanged();
                }
            }
        }

        [Column(Name = @"reputation", Storage = "_Reputation", CanBeNull = false, DbType = "int(11) NOT NULL")]
        public int Reputation
        {
            get
            {
                return this._Reputation;
            }
            set
            {
                if (this._Reputation != value)
                {
                    this.OnReputationChanging(value);
                    this.SendPropertyChanging();
                    this._Reputation = value;
                    this.SendPropertyChanged("Reputation");
                    this.OnReputationChanged();
                }
            }
        }

        [Column(Name = @"date", Storage = "_Date", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [Column(Name = @"posts", Storage = "_Posts", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Posts
        {
            get
            {
                return this._Posts;
            }
            set
            {
                if (this._Posts != value)
                {
                    this.OnPostsChanging(value);
                    this.SendPropertyChanging();
                    this._Posts = value;
                    this.SendPropertyChanged("Posts");
                    this.OnPostsChanged();
                }
            }
        }

        [Column(Name = @"strategy", Storage = "_Strategy", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Strategy
        {
            get
            {
                return this._Strategy;
            }
            set
            {
                if (this._Strategy != value)
                {
                    this.OnStrategyChanging(value);
                    this.SendPropertyChanging();
                    this._Strategy = value;
                    this.SendPropertyChanged("Strategy");
                    this.OnStrategyChanged();
                }
            }
        }

        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "smallint(6) NOT NULL")]
        public short Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usertextfield")]
    public partial class Usertextfield : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Userid;

        private string _Subfolders;

        private string _Pmfolders;

        private string _Buddylist;

        private string _Ignorelist;

        private string _Signature;

        private string _Searchprefs;

        private string _Rank;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnSubfoldersChanging(string value);
        partial void OnSubfoldersChanged();
        partial void OnPmfoldersChanging(string value);
        partial void OnPmfoldersChanged();
        partial void OnBuddylistChanging(string value);
        partial void OnBuddylistChanged();
        partial void OnIgnorelistChanging(string value);
        partial void OnIgnorelistChanged();
        partial void OnSignatureChanging(string value);
        partial void OnSignatureChanged();
        partial void OnSearchprefsChanging(string value);
        partial void OnSearchprefsChanged();
        partial void OnRankChanging(string value);
        partial void OnRankChanged();
        #endregion

        public Usertextfield()
        {
            OnCreated();
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL", IsPrimaryKey = true)]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"subfolders", Storage = "_Subfolders", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Subfolders
        {
            get
            {
                return this._Subfolders;
            }
            set
            {
                if (this._Subfolders != value)
                {
                    this.OnSubfoldersChanging(value);
                    this.SendPropertyChanging();
                    this._Subfolders = value;
                    this.SendPropertyChanged("Subfolders");
                    this.OnSubfoldersChanged();
                }
            }
        }

        [Column(Name = @"pmfolders", Storage = "_Pmfolders", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pmfolders
        {
            get
            {
                return this._Pmfolders;
            }
            set
            {
                if (this._Pmfolders != value)
                {
                    this.OnPmfoldersChanging(value);
                    this.SendPropertyChanging();
                    this._Pmfolders = value;
                    this.SendPropertyChanged("Pmfolders");
                    this.OnPmfoldersChanged();
                }
            }
        }

        [Column(Name = @"buddylist", Storage = "_Buddylist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Buddylist
        {
            get
            {
                return this._Buddylist;
            }
            set
            {
                if (this._Buddylist != value)
                {
                    this.OnBuddylistChanging(value);
                    this.SendPropertyChanging();
                    this._Buddylist = value;
                    this.SendPropertyChanged("Buddylist");
                    this.OnBuddylistChanged();
                }
            }
        }

        [Column(Name = @"ignorelist", Storage = "_Ignorelist", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Ignorelist
        {
            get
            {
                return this._Ignorelist;
            }
            set
            {
                if (this._Ignorelist != value)
                {
                    this.OnIgnorelistChanging(value);
                    this.SendPropertyChanging();
                    this._Ignorelist = value;
                    this.SendPropertyChanged("Ignorelist");
                    this.OnIgnorelistChanged();
                }
            }
        }

        [Column(Name = @"signature", Storage = "_Signature", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Signature
        {
            get
            {
                return this._Signature;
            }
            set
            {
                if (this._Signature != value)
                {
                    this.OnSignatureChanging(value);
                    this.SendPropertyChanging();
                    this._Signature = value;
                    this.SendPropertyChanged("Signature");
                    this.OnSignatureChanged();
                }
            }
        }

        [Column(Name = @"searchprefs", Storage = "_Searchprefs", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Searchprefs
        {
            get
            {
                return this._Searchprefs;
            }
            set
            {
                if (this._Searchprefs != value)
                {
                    this.OnSearchprefsChanging(value);
                    this.SendPropertyChanging();
                    this._Searchprefs = value;
                    this.SendPropertyChanged("Searchprefs");
                    this.OnSearchprefsChanged();
                }
            }
        }

        [Column(Name = @"rank", Storage = "_Rank", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Rank
        {
            get
            {
                return this._Rank;
            }
            set
            {
                if (this._Rank != value)
                {
                    this.OnRankChanging(value);
                    this.SendPropertyChanging();
                    this._Rank = value;
                    this.SendPropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.usertitle")]
    public partial class Usertitle : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Usertitleid;

        private long _Minposts;

        private string _Title;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsertitleidChanging(int value);
        partial void OnUsertitleidChanged();
        partial void OnMinpostsChanging(long value);
        partial void OnMinpostsChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        #endregion

        public Usertitle()
        {
            OnCreated();
        }

        [Column(Name = @"usertitleid", Storage = "_Usertitleid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "smallint(5) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Usertitleid
        {
            get
            {
                return this._Usertitleid;
            }
            set
            {
                if (this._Usertitleid != value)
                {
                    this.OnUsertitleidChanging(value);
                    this.SendPropertyChanging();
                    this._Usertitleid = value;
                    this.SendPropertyChanged("Usertitleid");
                    this.OnUsertitleidChanged();
                }
            }
        }

        [Column(Name = @"minposts", Storage = "_Minposts", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Minposts
        {
            get
            {
                return this._Minposts;
            }
            set
            {
                if (this._Minposts != value)
                {
                    this.OnMinpostsChanging(value);
                    this.SendPropertyChanging();
                    this._Minposts = value;
                    this.SendPropertyChanged("Minposts");
                    this.OnMinpostsChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "char(250) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.visitormessage")]
    public partial class Visitormessage : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Vmid;

        private long _Userid;

        private long _Postuserid;

        private string _Postusername;

        private long _Dateline;

        private string _State;

        private string _Title;

        private string _Pagetext;

        private long _Ipaddress;

        private int _Allowsmilie;

        private long _Reportthreadid;

        private int _Messageread;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVmidChanging(long value);
        partial void OnVmidChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnPostusernameChanging(string value);
        partial void OnPostusernameChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPagetextChanging(string value);
        partial void OnPagetextChanged();
        partial void OnIpaddressChanging(long value);
        partial void OnIpaddressChanged();
        partial void OnAllowsmilieChanging(int value);
        partial void OnAllowsmilieChanged();
        partial void OnReportthreadidChanging(long value);
        partial void OnReportthreadidChanged();
        partial void OnMessagereadChanging(int value);
        partial void OnMessagereadChanged();
        #endregion

        public Visitormessage()
        {
            OnCreated();
        }

        [Column(Name = @"vmid", Storage = "_Vmid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Vmid
        {
            get
            {
                return this._Vmid;
            }
            set
            {
                if (this._Vmid != value)
                {
                    this.OnVmidChanging(value);
                    this.SendPropertyChanging();
                    this._Vmid = value;
                    this.SendPropertyChanged("Vmid");
                    this.OnVmidChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"postusername", Storage = "_Postusername", CanBeNull = false, DbType = "varchar(100) NOT NULL")]
        public string Postusername
        {
            get
            {
                return this._Postusername;
            }
            set
            {
                if (this._Postusername != value)
                {
                    this.OnPostusernameChanging(value);
                    this.SendPropertyChanging();
                    this._Postusername = value;
                    this.SendPropertyChanged("Postusername");
                    this.OnPostusernameChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }

        [Column(Name = @"state", Storage = "_State", CanBeNull = false, DbType = "enum NOT NULL")]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [Column(Name = @"title", Storage = "_Title", CanBeNull = false, DbType = "varchar(255) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = @"pagetext", Storage = "_Pagetext", DbType = "mediumtext", UpdateCheck = UpdateCheck.Never)]
        public string Pagetext
        {
            get
            {
                return this._Pagetext;
            }
            set
            {
                if (this._Pagetext != value)
                {
                    this.OnPagetextChanging(value);
                    this.SendPropertyChanging();
                    this._Pagetext = value;
                    this.SendPropertyChanged("Pagetext");
                    this.OnPagetextChanged();
                }
            }
        }

        [Column(Name = @"ipaddress", Storage = "_Ipaddress", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Ipaddress
        {
            get
            {
                return this._Ipaddress;
            }
            set
            {
                if (this._Ipaddress != value)
                {
                    this.OnIpaddressChanging(value);
                    this.SendPropertyChanging();
                    this._Ipaddress = value;
                    this.SendPropertyChanged("Ipaddress");
                    this.OnIpaddressChanged();
                }
            }
        }

        [Column(Name = @"allowsmilie", Storage = "_Allowsmilie", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Allowsmilie
        {
            get
            {
                return this._Allowsmilie;
            }
            set
            {
                if (this._Allowsmilie != value)
                {
                    this.OnAllowsmilieChanging(value);
                    this.SendPropertyChanging();
                    this._Allowsmilie = value;
                    this.SendPropertyChanged("Allowsmilie");
                    this.OnAllowsmilieChanged();
                }
            }
        }

        [Column(Name = @"reportthreadid", Storage = "_Reportthreadid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Reportthreadid
        {
            get
            {
                return this._Reportthreadid;
            }
            set
            {
                if (this._Reportthreadid != value)
                {
                    this.OnReportthreadidChanging(value);
                    this.SendPropertyChanging();
                    this._Reportthreadid = value;
                    this.SendPropertyChanged("Reportthreadid");
                    this.OnReportthreadidChanged();
                }
            }
        }

        [Column(Name = @"messageread", Storage = "_Messageread", CanBeNull = false, DbType = "smallint(5) NOT NULL")]
        public int Messageread
        {
            get
            {
                return this._Messageread;
            }
            set
            {
                if (this._Messageread != value)
                {
                    this.OnMessagereadChanging(value);
                    this.SendPropertyChanging();
                    this._Messageread = value;
                    this.SendPropertyChanged("Messageread");
                    this.OnMessagereadChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"forum.visitormessage_hash")]
    public partial class Visitormessagehash : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Postuserid;

        private long _Userid;

        private string _Dupehash;

        private long _Dateline;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPostuseridChanging(long value);
        partial void OnPostuseridChanged();
        partial void OnUseridChanging(long value);
        partial void OnUseridChanged();
        partial void OnDupehashChanging(string value);
        partial void OnDupehashChanged();
        partial void OnDatelineChanging(long value);
        partial void OnDatelineChanged();
        #endregion

        public Visitormessagehash()
        {
            OnCreated();
        }

        [Column(Name = @"postuserid", Storage = "_Postuserid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Postuserid
        {
            get
            {
                return this._Postuserid;
            }
            set
            {
                if (this._Postuserid != value)
                {
                    this.OnPostuseridChanging(value);
                    this.SendPropertyChanging();
                    this._Postuserid = value;
                    this.SendPropertyChanged("Postuserid");
                    this.OnPostuseridChanged();
                }
            }
        }

        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

        [Column(Name = @"dupehash", Storage = "_Dupehash", CanBeNull = false, DbType = "varchar(32) NOT NULL")]
        public string Dupehash
        {
            get
            {
                return this._Dupehash;
            }
            set
            {
                if (this._Dupehash != value)
                {
                    this.OnDupehashChanging(value);
                    this.SendPropertyChanging();
                    this._Dupehash = value;
                    this.SendPropertyChanged("Dupehash");
                    this.OnDupehashChanged();
                }
            }
        }

        [Column(Name = @"dateline", Storage = "_Dateline", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Dateline
        {
            get
            {
                return this._Dateline;
            }
            set
            {
                if (this._Dateline != value)
                {
                    this.OnDatelineChanging(value);
                    this.SendPropertyChanging();
                    this._Dateline = value;
                    this.SendPropertyChanged("Dateline");
                    this.OnDatelineChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
