//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AppFrameClient {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MasterDB")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MasterDB : global::System.Data.DataSet {
        
        private product_sizeDataTable tableproduct_size;
        
        private product_colorDataTable tableproduct_color;
        
        private product_typeDataTable tableproduct_type;
        
        private product_masterDataTable tableproduct_master;
        
        private productDataTable tableproduct;
        
        private DepartmentDataTable tableDepartment;
        
        private stock_inDataTable tablestock_in;
        
        private confirm_stock_inDataTable tableconfirm_stock_in;
        
        private confirm_stock_in_detailDataTable tableconfirm_stock_in_detail;
        
        private confirm_stock_outDataTable tableconfirm_stock_out;
        
        private confirm_stock_out_detailDataTable tableconfirm_stock_out_detail;
        
        private global::System.Data.DataRelation relationproduct_master_ibfk_2;
        
        private global::System.Data.DataRelation relationproduct_master_ibfk_3;
        
        private global::System.Data.DataRelation relationproduct_master_ibfk_4;
        
        private global::System.Data.DataRelation relationproduct_ibfk_1;
        
        private global::System.Data.DataRelation relationfk_product_2;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MasterDB() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MasterDB(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["product_size"] != null)) {
                    base.Tables.Add(new product_sizeDataTable(ds.Tables["product_size"]));
                }
                if ((ds.Tables["product_color"] != null)) {
                    base.Tables.Add(new product_colorDataTable(ds.Tables["product_color"]));
                }
                if ((ds.Tables["product_type"] != null)) {
                    base.Tables.Add(new product_typeDataTable(ds.Tables["product_type"]));
                }
                if ((ds.Tables["product_master"] != null)) {
                    base.Tables.Add(new product_masterDataTable(ds.Tables["product_master"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["stock_in"] != null)) {
                    base.Tables.Add(new stock_inDataTable(ds.Tables["stock_in"]));
                }
                if ((ds.Tables["confirm_stock_in"] != null)) {
                    base.Tables.Add(new confirm_stock_inDataTable(ds.Tables["confirm_stock_in"]));
                }
                if ((ds.Tables["confirm_stock_in_detail"] != null)) {
                    base.Tables.Add(new confirm_stock_in_detailDataTable(ds.Tables["confirm_stock_in_detail"]));
                }
                if ((ds.Tables["confirm_stock_out"] != null)) {
                    base.Tables.Add(new confirm_stock_outDataTable(ds.Tables["confirm_stock_out"]));
                }
                if ((ds.Tables["confirm_stock_out_detail"] != null)) {
                    base.Tables.Add(new confirm_stock_out_detailDataTable(ds.Tables["confirm_stock_out_detail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public product_sizeDataTable product_size {
            get {
                return this.tableproduct_size;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public product_colorDataTable product_color {
            get {
                return this.tableproduct_color;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public product_typeDataTable product_type {
            get {
                return this.tableproduct_type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public product_masterDataTable product_master {
            get {
                return this.tableproduct_master;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public productDataTable product {
            get {
                return this.tableproduct;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepartmentDataTable Department {
            get {
                return this.tableDepartment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stock_inDataTable stock_in {
            get {
                return this.tablestock_in;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public confirm_stock_inDataTable confirm_stock_in {
            get {
                return this.tableconfirm_stock_in;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public confirm_stock_in_detailDataTable confirm_stock_in_detail {
            get {
                return this.tableconfirm_stock_in_detail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public confirm_stock_outDataTable confirm_stock_out {
            get {
                return this.tableconfirm_stock_out;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public confirm_stock_out_detailDataTable confirm_stock_out_detail {
            get {
                return this.tableconfirm_stock_out_detail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MasterDB cln = ((MasterDB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["product_size"] != null)) {
                    base.Tables.Add(new product_sizeDataTable(ds.Tables["product_size"]));
                }
                if ((ds.Tables["product_color"] != null)) {
                    base.Tables.Add(new product_colorDataTable(ds.Tables["product_color"]));
                }
                if ((ds.Tables["product_type"] != null)) {
                    base.Tables.Add(new product_typeDataTable(ds.Tables["product_type"]));
                }
                if ((ds.Tables["product_master"] != null)) {
                    base.Tables.Add(new product_masterDataTable(ds.Tables["product_master"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["stock_in"] != null)) {
                    base.Tables.Add(new stock_inDataTable(ds.Tables["stock_in"]));
                }
                if ((ds.Tables["confirm_stock_in"] != null)) {
                    base.Tables.Add(new confirm_stock_inDataTable(ds.Tables["confirm_stock_in"]));
                }
                if ((ds.Tables["confirm_stock_in_detail"] != null)) {
                    base.Tables.Add(new confirm_stock_in_detailDataTable(ds.Tables["confirm_stock_in_detail"]));
                }
                if ((ds.Tables["confirm_stock_out"] != null)) {
                    base.Tables.Add(new confirm_stock_outDataTable(ds.Tables["confirm_stock_out"]));
                }
                if ((ds.Tables["confirm_stock_out_detail"] != null)) {
                    base.Tables.Add(new confirm_stock_out_detailDataTable(ds.Tables["confirm_stock_out_detail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableproduct_size = ((product_sizeDataTable)(base.Tables["product_size"]));
            if ((initTable == true)) {
                if ((this.tableproduct_size != null)) {
                    this.tableproduct_size.InitVars();
                }
            }
            this.tableproduct_color = ((product_colorDataTable)(base.Tables["product_color"]));
            if ((initTable == true)) {
                if ((this.tableproduct_color != null)) {
                    this.tableproduct_color.InitVars();
                }
            }
            this.tableproduct_type = ((product_typeDataTable)(base.Tables["product_type"]));
            if ((initTable == true)) {
                if ((this.tableproduct_type != null)) {
                    this.tableproduct_type.InitVars();
                }
            }
            this.tableproduct_master = ((product_masterDataTable)(base.Tables["product_master"]));
            if ((initTable == true)) {
                if ((this.tableproduct_master != null)) {
                    this.tableproduct_master.InitVars();
                }
            }
            this.tableproduct = ((productDataTable)(base.Tables["product"]));
            if ((initTable == true)) {
                if ((this.tableproduct != null)) {
                    this.tableproduct.InitVars();
                }
            }
            this.tableDepartment = ((DepartmentDataTable)(base.Tables["Department"]));
            if ((initTable == true)) {
                if ((this.tableDepartment != null)) {
                    this.tableDepartment.InitVars();
                }
            }
            this.tablestock_in = ((stock_inDataTable)(base.Tables["stock_in"]));
            if ((initTable == true)) {
                if ((this.tablestock_in != null)) {
                    this.tablestock_in.InitVars();
                }
            }
            this.tableconfirm_stock_in = ((confirm_stock_inDataTable)(base.Tables["confirm_stock_in"]));
            if ((initTable == true)) {
                if ((this.tableconfirm_stock_in != null)) {
                    this.tableconfirm_stock_in.InitVars();
                }
            }
            this.tableconfirm_stock_in_detail = ((confirm_stock_in_detailDataTable)(base.Tables["confirm_stock_in_detail"]));
            if ((initTable == true)) {
                if ((this.tableconfirm_stock_in_detail != null)) {
                    this.tableconfirm_stock_in_detail.InitVars();
                }
            }
            this.tableconfirm_stock_out = ((confirm_stock_outDataTable)(base.Tables["confirm_stock_out"]));
            if ((initTable == true)) {
                if ((this.tableconfirm_stock_out != null)) {
                    this.tableconfirm_stock_out.InitVars();
                }
            }
            this.tableconfirm_stock_out_detail = ((confirm_stock_out_detailDataTable)(base.Tables["confirm_stock_out_detail"]));
            if ((initTable == true)) {
                if ((this.tableconfirm_stock_out_detail != null)) {
                    this.tableconfirm_stock_out_detail.InitVars();
                }
            }
            this.relationproduct_master_ibfk_2 = this.Relations["product_master_ibfk_2"];
            this.relationproduct_master_ibfk_3 = this.Relations["product_master_ibfk_3"];
            this.relationproduct_master_ibfk_4 = this.Relations["product_master_ibfk_4"];
            this.relationproduct_ibfk_1 = this.Relations["product_ibfk_1"];
            this.relationfk_product_2 = this.Relations["fk_product_2"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MasterDB";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MasterDB.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableproduct_size = new product_sizeDataTable();
            base.Tables.Add(this.tableproduct_size);
            this.tableproduct_color = new product_colorDataTable();
            base.Tables.Add(this.tableproduct_color);
            this.tableproduct_type = new product_typeDataTable();
            base.Tables.Add(this.tableproduct_type);
            this.tableproduct_master = new product_masterDataTable();
            base.Tables.Add(this.tableproduct_master);
            this.tableproduct = new productDataTable();
            base.Tables.Add(this.tableproduct);
            this.tableDepartment = new DepartmentDataTable();
            base.Tables.Add(this.tableDepartment);
            this.tablestock_in = new stock_inDataTable();
            base.Tables.Add(this.tablestock_in);
            this.tableconfirm_stock_in = new confirm_stock_inDataTable();
            base.Tables.Add(this.tableconfirm_stock_in);
            this.tableconfirm_stock_in_detail = new confirm_stock_in_detailDataTable();
            base.Tables.Add(this.tableconfirm_stock_in_detail);
            this.tableconfirm_stock_out = new confirm_stock_outDataTable();
            base.Tables.Add(this.tableconfirm_stock_out);
            this.tableconfirm_stock_out_detail = new confirm_stock_out_detailDataTable();
            base.Tables.Add(this.tableconfirm_stock_out_detail);
            this.relationproduct_master_ibfk_2 = new global::System.Data.DataRelation("product_master_ibfk_2", new global::System.Data.DataColumn[] {
                        this.tableproduct_type.TYPE_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct_master.TYPE_IDColumn}, false);
            this.Relations.Add(this.relationproduct_master_ibfk_2);
            this.relationproduct_master_ibfk_3 = new global::System.Data.DataRelation("product_master_ibfk_3", new global::System.Data.DataColumn[] {
                        this.tableproduct_size.SIZE_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct_master.SIZE_IDColumn}, false);
            this.Relations.Add(this.relationproduct_master_ibfk_3);
            this.relationproduct_master_ibfk_4 = new global::System.Data.DataRelation("product_master_ibfk_4", new global::System.Data.DataColumn[] {
                        this.tableproduct_color.COLOR_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct_master.COLOR_IDColumn}, false);
            this.Relations.Add(this.relationproduct_master_ibfk_4);
            this.relationproduct_ibfk_1 = new global::System.Data.DataRelation("product_ibfk_1", new global::System.Data.DataColumn[] {
                        this.tableproduct_master.PRODUCT_MASTER_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableproduct.PRODUCT_MASTER_IDColumn}, false);
            this.Relations.Add(this.relationproduct_ibfk_1);
            this.relationfk_product_2 = new global::System.Data.DataRelation("fk_product_2", new global::System.Data.DataColumn[] {
                        this.tableproduct_master.PRODUCT_MASTER_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableconfirm_stock_in_detail.PRODUCT_MASTER_IDColumn}, false);
            this.Relations.Add(this.relationfk_product_2);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct_size() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct_color() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct_type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct_master() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDepartment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestock_in() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeconfirm_stock_in() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeconfirm_stock_in_detail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeconfirm_stock_out() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeconfirm_stock_out_detail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MasterDB ds = new MasterDB();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void product_sizeRowChangeEventHandler(object sender, product_sizeRowChangeEvent e);
        
        public delegate void product_colorRowChangeEventHandler(object sender, product_colorRowChangeEvent e);
        
        public delegate void product_typeRowChangeEventHandler(object sender, product_typeRowChangeEvent e);
        
        public delegate void product_masterRowChangeEventHandler(object sender, product_masterRowChangeEvent e);
        
        public delegate void productRowChangeEventHandler(object sender, productRowChangeEvent e);
        
        public delegate void DepartmentRowChangeEventHandler(object sender, DepartmentRowChangeEvent e);
        
        public delegate void stock_inRowChangeEventHandler(object sender, stock_inRowChangeEvent e);
        
        public delegate void confirm_stock_inRowChangeEventHandler(object sender, confirm_stock_inRowChangeEvent e);
        
        public delegate void confirm_stock_in_detailRowChangeEventHandler(object sender, confirm_stock_in_detailRowChangeEvent e);
        
        public delegate void confirm_stock_outRowChangeEventHandler(object sender, confirm_stock_outRowChangeEvent e);
        
        public delegate void confirm_stock_out_detailRowChangeEventHandler(object sender, confirm_stock_out_detailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class product_sizeDataTable : global::System.Data.TypedTableBase<product_sizeRow> {
            
            private global::System.Data.DataColumn columnSIZE_ID;
            
            private global::System.Data.DataColumn columnSIZE_NAME;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeDataTable() {
                this.TableName = "product_size";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_sizeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected product_sizeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIZE_IDColumn {
                get {
                    return this.columnSIZE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIZE_NAMEColumn {
                get {
                    return this.columnSIZE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow this[int index] {
                get {
                    return ((product_sizeRow)(this.Rows[index]));
                }
            }
            
            public event product_sizeRowChangeEventHandler product_sizeRowChanging;
            
            public event product_sizeRowChangeEventHandler product_sizeRowChanged;
            
            public event product_sizeRowChangeEventHandler product_sizeRowDeleting;
            
            public event product_sizeRowChangeEventHandler product_sizeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addproduct_sizeRow(product_sizeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow Addproduct_sizeRow(uint SIZE_ID, string SIZE_NAME, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG) {
                product_sizeRow rowproduct_sizeRow = ((product_sizeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SIZE_ID,
                        SIZE_NAME,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG};
                rowproduct_sizeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproduct_sizeRow);
                return rowproduct_sizeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow FindBySIZE_ID(uint SIZE_ID) {
                return ((product_sizeRow)(this.Rows.Find(new object[] {
                            SIZE_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                product_sizeDataTable cln = ((product_sizeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new product_sizeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSIZE_ID = base.Columns["SIZE_ID"];
                this.columnSIZE_NAME = base.Columns["SIZE_NAME"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSIZE_ID = new global::System.Data.DataColumn("SIZE_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIZE_ID);
                this.columnSIZE_NAME = new global::System.Data.DataColumn("SIZE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIZE_NAME);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSIZE_ID}, true));
                this.columnSIZE_ID.AllowDBNull = false;
                this.columnSIZE_ID.Unique = true;
                this.columnSIZE_NAME.MaxLength = 500;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow Newproduct_sizeRow() {
                return ((product_sizeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new product_sizeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(product_sizeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.product_sizeRowChanged != null)) {
                    this.product_sizeRowChanged(this, new product_sizeRowChangeEvent(((product_sizeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.product_sizeRowChanging != null)) {
                    this.product_sizeRowChanging(this, new product_sizeRowChangeEvent(((product_sizeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.product_sizeRowDeleted != null)) {
                    this.product_sizeRowDeleted(this, new product_sizeRowChangeEvent(((product_sizeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.product_sizeRowDeleting != null)) {
                    this.product_sizeRowDeleting(this, new product_sizeRowChangeEvent(((product_sizeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeproduct_sizeRow(product_sizeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "product_sizeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class product_colorDataTable : global::System.Data.TypedTableBase<product_colorRow> {
            
            private global::System.Data.DataColumn columnCOLOR_ID;
            
            private global::System.Data.DataColumn columnCOLOR_NAME;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorDataTable() {
                this.TableName = "product_color";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_colorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected product_colorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLOR_IDColumn {
                get {
                    return this.columnCOLOR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLOR_NAMEColumn {
                get {
                    return this.columnCOLOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow this[int index] {
                get {
                    return ((product_colorRow)(this.Rows[index]));
                }
            }
            
            public event product_colorRowChangeEventHandler product_colorRowChanging;
            
            public event product_colorRowChangeEventHandler product_colorRowChanged;
            
            public event product_colorRowChangeEventHandler product_colorRowDeleting;
            
            public event product_colorRowChangeEventHandler product_colorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addproduct_colorRow(product_colorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow Addproduct_colorRow(uint COLOR_ID, string COLOR_NAME, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG) {
                product_colorRow rowproduct_colorRow = ((product_colorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        COLOR_ID,
                        COLOR_NAME,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG};
                rowproduct_colorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproduct_colorRow);
                return rowproduct_colorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow FindByCOLOR_ID(uint COLOR_ID) {
                return ((product_colorRow)(this.Rows.Find(new object[] {
                            COLOR_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                product_colorDataTable cln = ((product_colorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new product_colorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOLOR_ID = base.Columns["COLOR_ID"];
                this.columnCOLOR_NAME = base.Columns["COLOR_NAME"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOLOR_ID = new global::System.Data.DataColumn("COLOR_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOR_ID);
                this.columnCOLOR_NAME = new global::System.Data.DataColumn("COLOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOR_NAME);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCOLOR_ID}, true));
                this.columnCOLOR_ID.AllowDBNull = false;
                this.columnCOLOR_ID.Unique = true;
                this.columnCOLOR_NAME.MaxLength = 500;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow Newproduct_colorRow() {
                return ((product_colorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new product_colorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(product_colorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.product_colorRowChanged != null)) {
                    this.product_colorRowChanged(this, new product_colorRowChangeEvent(((product_colorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.product_colorRowChanging != null)) {
                    this.product_colorRowChanging(this, new product_colorRowChangeEvent(((product_colorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.product_colorRowDeleted != null)) {
                    this.product_colorRowDeleted(this, new product_colorRowChangeEvent(((product_colorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.product_colorRowDeleting != null)) {
                    this.product_colorRowDeleting(this, new product_colorRowChangeEvent(((product_colorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeproduct_colorRow(product_colorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "product_colorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class product_typeDataTable : global::System.Data.TypedTableBase<product_typeRow> {
            
            private global::System.Data.DataColumn columnTYPE_ID;
            
            private global::System.Data.DataColumn columnTYPE_NAME;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeDataTable() {
                this.TableName = "product_type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_typeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected product_typeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPE_IDColumn {
                get {
                    return this.columnTYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPE_NAMEColumn {
                get {
                    return this.columnTYPE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow this[int index] {
                get {
                    return ((product_typeRow)(this.Rows[index]));
                }
            }
            
            public event product_typeRowChangeEventHandler product_typeRowChanging;
            
            public event product_typeRowChangeEventHandler product_typeRowChanged;
            
            public event product_typeRowChangeEventHandler product_typeRowDeleting;
            
            public event product_typeRowChangeEventHandler product_typeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addproduct_typeRow(product_typeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow Addproduct_typeRow(uint TYPE_ID, string TYPE_NAME, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG) {
                product_typeRow rowproduct_typeRow = ((product_typeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TYPE_ID,
                        TYPE_NAME,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG};
                rowproduct_typeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproduct_typeRow);
                return rowproduct_typeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow FindByTYPE_ID(uint TYPE_ID) {
                return ((product_typeRow)(this.Rows.Find(new object[] {
                            TYPE_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                product_typeDataTable cln = ((product_typeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new product_typeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTYPE_ID = base.Columns["TYPE_ID"];
                this.columnTYPE_NAME = base.Columns["TYPE_NAME"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTYPE_ID = new global::System.Data.DataColumn("TYPE_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE_ID);
                this.columnTYPE_NAME = new global::System.Data.DataColumn("TYPE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE_NAME);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTYPE_ID}, true));
                this.columnTYPE_ID.AllowDBNull = false;
                this.columnTYPE_ID.Unique = true;
                this.columnTYPE_NAME.MaxLength = 500;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow Newproduct_typeRow() {
                return ((product_typeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new product_typeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(product_typeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.product_typeRowChanged != null)) {
                    this.product_typeRowChanged(this, new product_typeRowChangeEvent(((product_typeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.product_typeRowChanging != null)) {
                    this.product_typeRowChanging(this, new product_typeRowChangeEvent(((product_typeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.product_typeRowDeleted != null)) {
                    this.product_typeRowDeleted(this, new product_typeRowChangeEvent(((product_typeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.product_typeRowDeleting != null)) {
                    this.product_typeRowDeleting(this, new product_typeRowChangeEvent(((product_typeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeproduct_typeRow(product_typeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "product_typeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class product_masterDataTable : global::System.Data.TypedTableBase<product_masterRow> {
            
            private global::System.Data.DataColumn columnPRODUCT_MASTER_ID;
            
            private global::System.Data.DataColumn columnPRODUCT_NAME;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnIMAGE_PATH;
            
            private global::System.Data.DataColumn columnCATEGORY_ID;
            
            private global::System.Data.DataColumn columnCOUNTRY_ID;
            
            private global::System.Data.DataColumn columnTYPE_ID;
            
            private global::System.Data.DataColumn columnSIZE_ID;
            
            private global::System.Data.DataColumn columnUNIT_ID;
            
            private global::System.Data.DataColumn columnCOLOR_ID;
            
            private global::System.Data.DataColumn columnMANUFACTURER_ID;
            
            private global::System.Data.DataColumn columnSUPPLIER_ID;
            
            private global::System.Data.DataColumn columnPACKAGER_ID;
            
            private global::System.Data.DataColumn columnDISTRIBUTOR_ID;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnBARCODE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterDataTable() {
                this.TableName = "product_master";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_masterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected product_masterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_MASTER_IDColumn {
                get {
                    return this.columnPRODUCT_MASTER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_NAMEColumn {
                get {
                    return this.columnPRODUCT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMAGE_PATHColumn {
                get {
                    return this.columnIMAGE_PATH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_IDColumn {
                get {
                    return this.columnCATEGORY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTRY_IDColumn {
                get {
                    return this.columnCOUNTRY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPE_IDColumn {
                get {
                    return this.columnTYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIZE_IDColumn {
                get {
                    return this.columnSIZE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_IDColumn {
                get {
                    return this.columnUNIT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLOR_IDColumn {
                get {
                    return this.columnCOLOR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANUFACTURER_IDColumn {
                get {
                    return this.columnMANUFACTURER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLIER_IDColumn {
                get {
                    return this.columnSUPPLIER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PACKAGER_IDColumn {
                get {
                    return this.columnPACKAGER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTRIBUTOR_IDColumn {
                get {
                    return this.columnDISTRIBUTOR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARCODEColumn {
                get {
                    return this.columnBARCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow this[int index] {
                get {
                    return ((product_masterRow)(this.Rows[index]));
                }
            }
            
            public event product_masterRowChangeEventHandler product_masterRowChanging;
            
            public event product_masterRowChangeEventHandler product_masterRowChanged;
            
            public event product_masterRowChangeEventHandler product_masterRowDeleting;
            
            public event product_masterRowChangeEventHandler product_masterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addproduct_masterRow(product_masterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow Addproduct_masterRow(
                        string PRODUCT_MASTER_ID, 
                        string PRODUCT_NAME, 
                        string DESCRIPTION, 
                        string IMAGE_PATH, 
                        uint CATEGORY_ID, 
                        uint COUNTRY_ID, 
                        product_typeRow parentproduct_typeRowByproduct_master_ibfk_2, 
                        product_sizeRow parentproduct_sizeRowByproduct_master_ibfk_3, 
                        uint UNIT_ID, 
                        product_colorRow parentproduct_colorRowByproduct_master_ibfk_4, 
                        uint MANUFACTURER_ID, 
                        uint SUPPLIER_ID, 
                        uint PACKAGER_ID, 
                        uint DISTRIBUTOR_ID, 
                        System.DateTime CREATE_DATE, 
                        string CREATE_ID, 
                        System.DateTime UPDATE_DATE, 
                        string UPDATE_ID, 
                        uint EXCLUSIVE_KEY, 
                        uint DEL_FLG, 
                        string BARCODE) {
                product_masterRow rowproduct_masterRow = ((product_masterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PRODUCT_MASTER_ID,
                        PRODUCT_NAME,
                        DESCRIPTION,
                        IMAGE_PATH,
                        CATEGORY_ID,
                        COUNTRY_ID,
                        null,
                        null,
                        UNIT_ID,
                        null,
                        MANUFACTURER_ID,
                        SUPPLIER_ID,
                        PACKAGER_ID,
                        DISTRIBUTOR_ID,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        BARCODE};
                if ((parentproduct_typeRowByproduct_master_ibfk_2 != null)) {
                    columnValuesArray[6] = parentproduct_typeRowByproduct_master_ibfk_2[0];
                }
                if ((parentproduct_sizeRowByproduct_master_ibfk_3 != null)) {
                    columnValuesArray[7] = parentproduct_sizeRowByproduct_master_ibfk_3[0];
                }
                if ((parentproduct_colorRowByproduct_master_ibfk_4 != null)) {
                    columnValuesArray[9] = parentproduct_colorRowByproduct_master_ibfk_4[0];
                }
                rowproduct_masterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproduct_masterRow);
                return rowproduct_masterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow FindByPRODUCT_MASTER_ID(string PRODUCT_MASTER_ID) {
                return ((product_masterRow)(this.Rows.Find(new object[] {
                            PRODUCT_MASTER_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                product_masterDataTable cln = ((product_masterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new product_masterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPRODUCT_MASTER_ID = base.Columns["PRODUCT_MASTER_ID"];
                this.columnPRODUCT_NAME = base.Columns["PRODUCT_NAME"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnIMAGE_PATH = base.Columns["IMAGE_PATH"];
                this.columnCATEGORY_ID = base.Columns["CATEGORY_ID"];
                this.columnCOUNTRY_ID = base.Columns["COUNTRY_ID"];
                this.columnTYPE_ID = base.Columns["TYPE_ID"];
                this.columnSIZE_ID = base.Columns["SIZE_ID"];
                this.columnUNIT_ID = base.Columns["UNIT_ID"];
                this.columnCOLOR_ID = base.Columns["COLOR_ID"];
                this.columnMANUFACTURER_ID = base.Columns["MANUFACTURER_ID"];
                this.columnSUPPLIER_ID = base.Columns["SUPPLIER_ID"];
                this.columnPACKAGER_ID = base.Columns["PACKAGER_ID"];
                this.columnDISTRIBUTOR_ID = base.Columns["DISTRIBUTOR_ID"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnBARCODE = base.Columns["BARCODE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPRODUCT_MASTER_ID = new global::System.Data.DataColumn("PRODUCT_MASTER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_MASTER_ID);
                this.columnPRODUCT_NAME = new global::System.Data.DataColumn("PRODUCT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_NAME);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnIMAGE_PATH = new global::System.Data.DataColumn("IMAGE_PATH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMAGE_PATH);
                this.columnCATEGORY_ID = new global::System.Data.DataColumn("CATEGORY_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_ID);
                this.columnCOUNTRY_ID = new global::System.Data.DataColumn("COUNTRY_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTRY_ID);
                this.columnTYPE_ID = new global::System.Data.DataColumn("TYPE_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE_ID);
                this.columnSIZE_ID = new global::System.Data.DataColumn("SIZE_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIZE_ID);
                this.columnUNIT_ID = new global::System.Data.DataColumn("UNIT_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_ID);
                this.columnCOLOR_ID = new global::System.Data.DataColumn("COLOR_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOR_ID);
                this.columnMANUFACTURER_ID = new global::System.Data.DataColumn("MANUFACTURER_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANUFACTURER_ID);
                this.columnSUPPLIER_ID = new global::System.Data.DataColumn("SUPPLIER_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLIER_ID);
                this.columnPACKAGER_ID = new global::System.Data.DataColumn("PACKAGER_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPACKAGER_ID);
                this.columnDISTRIBUTOR_ID = new global::System.Data.DataColumn("DISTRIBUTOR_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRIBUTOR_ID);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnBARCODE = new global::System.Data.DataColumn("BARCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBARCODE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPRODUCT_MASTER_ID}, true));
                this.columnPRODUCT_MASTER_ID.AllowDBNull = false;
                this.columnPRODUCT_MASTER_ID.Unique = true;
                this.columnPRODUCT_MASTER_ID.MaxLength = 13;
                this.columnPRODUCT_NAME.MaxLength = 500;
                this.columnDESCRIPTION.MaxLength = 5000;
                this.columnIMAGE_PATH.MaxLength = 500;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
                this.columnBARCODE.MaxLength = 13;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow Newproduct_masterRow() {
                return ((product_masterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new product_masterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(product_masterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.product_masterRowChanged != null)) {
                    this.product_masterRowChanged(this, new product_masterRowChangeEvent(((product_masterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.product_masterRowChanging != null)) {
                    this.product_masterRowChanging(this, new product_masterRowChangeEvent(((product_masterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.product_masterRowDeleted != null)) {
                    this.product_masterRowDeleted(this, new product_masterRowChangeEvent(((product_masterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.product_masterRowDeleting != null)) {
                    this.product_masterRowDeleting(this, new product_masterRowChangeEvent(((product_masterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeproduct_masterRow(product_masterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "product_masterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class productDataTable : global::System.Data.TypedTableBase<productRow> {
            
            private global::System.Data.DataColumn columnPRODUCT_ID;
            
            private global::System.Data.DataColumn columnPRODUCT_MASTER_ID;
            
            private global::System.Data.DataColumn columnBLOCK_ID;
            
            private global::System.Data.DataColumn columnBLOCK_DETAIL_ID;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnPRICE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productDataTable() {
                this.TableName = "product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected productDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_IDColumn {
                get {
                    return this.columnPRODUCT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_MASTER_IDColumn {
                get {
                    return this.columnPRODUCT_MASTER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOCK_IDColumn {
                get {
                    return this.columnBLOCK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOCK_DETAIL_IDColumn {
                get {
                    return this.columnBLOCK_DETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow this[int index] {
                get {
                    return ((productRow)(this.Rows[index]));
                }
            }
            
            public event productRowChangeEventHandler productRowChanging;
            
            public event productRowChangeEventHandler productRowChanged;
            
            public event productRowChangeEventHandler productRowDeleting;
            
            public event productRowChangeEventHandler productRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddproductRow(productRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow AddproductRow(string PRODUCT_ID, product_masterRow parentproduct_masterRowByproduct_ibfk_1, uint BLOCK_ID, string BLOCK_DETAIL_ID, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG, uint QUANTITY, uint PRICE) {
                productRow rowproductRow = ((productRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PRODUCT_ID,
                        null,
                        BLOCK_ID,
                        BLOCK_DETAIL_ID,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        QUANTITY,
                        PRICE};
                if ((parentproduct_masterRowByproduct_ibfk_1 != null)) {
                    columnValuesArray[1] = parentproduct_masterRowByproduct_ibfk_1[0];
                }
                rowproductRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproductRow);
                return rowproductRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow FindByPRODUCT_ID(string PRODUCT_ID) {
                return ((productRow)(this.Rows.Find(new object[] {
                            PRODUCT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                productDataTable cln = ((productDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new productDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPRODUCT_ID = base.Columns["PRODUCT_ID"];
                this.columnPRODUCT_MASTER_ID = base.Columns["PRODUCT_MASTER_ID"];
                this.columnBLOCK_ID = base.Columns["BLOCK_ID"];
                this.columnBLOCK_DETAIL_ID = base.Columns["BLOCK_DETAIL_ID"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnPRICE = base.Columns["PRICE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPRODUCT_ID = new global::System.Data.DataColumn("PRODUCT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_ID);
                this.columnPRODUCT_MASTER_ID = new global::System.Data.DataColumn("PRODUCT_MASTER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_MASTER_ID);
                this.columnBLOCK_ID = new global::System.Data.DataColumn("BLOCK_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOCK_ID);
                this.columnBLOCK_DETAIL_ID = new global::System.Data.DataColumn("BLOCK_DETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOCK_DETAIL_ID);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPRODUCT_ID}, true));
                this.columnPRODUCT_ID.AllowDBNull = false;
                this.columnPRODUCT_ID.Unique = true;
                this.columnPRODUCT_ID.MaxLength = 20;
                this.columnPRODUCT_MASTER_ID.MaxLength = 13;
                this.columnBLOCK_DETAIL_ID.MaxLength = 10;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow NewproductRow() {
                return ((productRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new productRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(productRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.productRowChanged != null)) {
                    this.productRowChanged(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.productRowChanging != null)) {
                    this.productRowChanging(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.productRowDeleted != null)) {
                    this.productRowDeleted(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.productRowDeleting != null)) {
                    this.productRowDeleting(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveproductRow(productRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "productDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DepartmentDataTable : global::System.Data.TypedTableBase<DepartmentRow> {
            
            private global::System.Data.DataColumn columnDEPARTMENT_ID;
            
            private global::System.Data.DataColumn columnDEPARTMENT_NAME;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnMANAGER_ID;
            
            private global::System.Data.DataColumn columnACTIVE;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnSTART_DATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentDataTable() {
                this.TableName = "Department";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DepartmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENT_IDColumn {
                get {
                    return this.columnDEPARTMENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENT_NAMEColumn {
                get {
                    return this.columnDEPARTMENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANAGER_IDColumn {
                get {
                    return this.columnMANAGER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTIVEColumn {
                get {
                    return this.columnACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_DATEColumn {
                get {
                    return this.columnSTART_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow this[int index] {
                get {
                    return ((DepartmentRow)(this.Rows[index]));
                }
            }
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanging;
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanged;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleting;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDepartmentRow(DepartmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow AddDepartmentRow(uint DEPARTMENT_ID, string DEPARTMENT_NAME, string ADDRESS, uint MANAGER_ID, uint ACTIVE, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG, System.DateTime START_DATE) {
                DepartmentRow rowDepartmentRow = ((DepartmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DEPARTMENT_ID,
                        DEPARTMENT_NAME,
                        ADDRESS,
                        MANAGER_ID,
                        ACTIVE,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        START_DATE};
                rowDepartmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDepartmentRow);
                return rowDepartmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow FindByDEPARTMENT_ID(uint DEPARTMENT_ID) {
                return ((DepartmentRow)(this.Rows.Find(new object[] {
                            DEPARTMENT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DepartmentDataTable cln = ((DepartmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DepartmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEPARTMENT_ID = base.Columns["DEPARTMENT_ID"];
                this.columnDEPARTMENT_NAME = base.Columns["DEPARTMENT_NAME"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnMANAGER_ID = base.Columns["MANAGER_ID"];
                this.columnACTIVE = base.Columns["ACTIVE"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnSTART_DATE = base.Columns["START_DATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEPARTMENT_ID = new global::System.Data.DataColumn("DEPARTMENT_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT_ID);
                this.columnDEPARTMENT_NAME = new global::System.Data.DataColumn("DEPARTMENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT_NAME);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnMANAGER_ID = new global::System.Data.DataColumn("MANAGER_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANAGER_ID);
                this.columnACTIVE = new global::System.Data.DataColumn("ACTIVE", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVE);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnSTART_DATE = new global::System.Data.DataColumn("START_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_DATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDEPARTMENT_ID}, true));
                this.columnDEPARTMENT_ID.AllowDBNull = false;
                this.columnDEPARTMENT_ID.Unique = true;
                this.columnDEPARTMENT_NAME.MaxLength = 500;
                this.columnADDRESS.MaxLength = 500;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow NewDepartmentRow() {
                return ((DepartmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DepartmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DepartmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepartmentRowChanged != null)) {
                    this.DepartmentRowChanged(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepartmentRowChanging != null)) {
                    this.DepartmentRowChanging(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepartmentRowDeleted != null)) {
                    this.DepartmentRowDeleted(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepartmentRowDeleting != null)) {
                    this.DepartmentRowDeleting(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDepartmentRow(DepartmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DepartmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class stock_inDataTable : global::System.Data.TypedTableBase<stock_inRow> {
            
            private global::System.Data.DataColumn columnStockInId;
            
            private global::System.Data.DataColumn columnStockInDate;
            
            private global::System.Data.DataColumn columnTotalQuantity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inDataTable() {
                this.TableName = "stock_in";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stock_inDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected stock_inDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockInIdColumn {
                get {
                    return this.columnStockInId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockInDateColumn {
                get {
                    return this.columnStockInDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalQuantityColumn {
                get {
                    return this.columnTotalQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRow this[int index] {
                get {
                    return ((stock_inRow)(this.Rows[index]));
                }
            }
            
            public event stock_inRowChangeEventHandler stock_inRowChanging;
            
            public event stock_inRowChangeEventHandler stock_inRowChanged;
            
            public event stock_inRowChangeEventHandler stock_inRowDeleting;
            
            public event stock_inRowChangeEventHandler stock_inRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addstock_inRow(stock_inRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRow Addstock_inRow(string StockInId, System.DateTime StockInDate, decimal TotalQuantity) {
                stock_inRow rowstock_inRow = ((stock_inRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StockInId,
                        StockInDate,
                        TotalQuantity};
                rowstock_inRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstock_inRow);
                return rowstock_inRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRow FindByStockInId(string StockInId) {
                return ((stock_inRow)(this.Rows.Find(new object[] {
                            StockInId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                stock_inDataTable cln = ((stock_inDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new stock_inDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockInId = base.Columns["StockInId"];
                this.columnStockInDate = base.Columns["StockInDate"];
                this.columnTotalQuantity = base.Columns["TotalQuantity"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockInId = new global::System.Data.DataColumn("StockInId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockInId);
                this.columnStockInDate = new global::System.Data.DataColumn("StockInDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockInDate);
                this.columnTotalQuantity = new global::System.Data.DataColumn("TotalQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalQuantity);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockInId}, true));
                this.columnStockInId.AllowDBNull = false;
                this.columnStockInId.Unique = true;
                this.columnStockInId.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRow Newstock_inRow() {
                return ((stock_inRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new stock_inRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(stock_inRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stock_inRowChanged != null)) {
                    this.stock_inRowChanged(this, new stock_inRowChangeEvent(((stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stock_inRowChanging != null)) {
                    this.stock_inRowChanging(this, new stock_inRowChangeEvent(((stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stock_inRowDeleted != null)) {
                    this.stock_inRowDeleted(this, new stock_inRowChangeEvent(((stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stock_inRowDeleting != null)) {
                    this.stock_inRowDeleting(this, new stock_inRowChangeEvent(((stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removestock_inRow(stock_inRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "stock_inDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class confirm_stock_inDataTable : global::System.Data.TypedTableBase<confirm_stock_inRow> {
            
            private global::System.Data.DataColumn columnSTOCK_IN_ID;
            
            private global::System.Data.DataColumn columnSTOCK_IN_DATE;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnSTOCK_IN_COST;
            
            private global::System.Data.DataColumn columnSTOCK_IN_TYPE;
            
            private global::System.Data.DataColumn columnCONFIRM_FLG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inDataTable() {
                this.TableName = "confirm_stock_in";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_inDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected confirm_stock_inDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_IDColumn {
                get {
                    return this.columnSTOCK_IN_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_DATEColumn {
                get {
                    return this.columnSTOCK_IN_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_COSTColumn {
                get {
                    return this.columnSTOCK_IN_COST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_TYPEColumn {
                get {
                    return this.columnSTOCK_IN_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONFIRM_FLGColumn {
                get {
                    return this.columnCONFIRM_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRow this[int index] {
                get {
                    return ((confirm_stock_inRow)(this.Rows[index]));
                }
            }
            
            public event confirm_stock_inRowChangeEventHandler confirm_stock_inRowChanging;
            
            public event confirm_stock_inRowChangeEventHandler confirm_stock_inRowChanged;
            
            public event confirm_stock_inRowChangeEventHandler confirm_stock_inRowDeleting;
            
            public event confirm_stock_inRowChangeEventHandler confirm_stock_inRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addconfirm_stock_inRow(confirm_stock_inRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRow Addconfirm_stock_inRow(string STOCK_IN_ID, System.DateTime STOCK_IN_DATE, System.DateTime CREATE_DATE, string DESCRIPTION, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG, uint STOCK_IN_COST, uint STOCK_IN_TYPE, uint CONFIRM_FLG) {
                confirm_stock_inRow rowconfirm_stock_inRow = ((confirm_stock_inRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STOCK_IN_ID,
                        STOCK_IN_DATE,
                        CREATE_DATE,
                        DESCRIPTION,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        STOCK_IN_COST,
                        STOCK_IN_TYPE,
                        CONFIRM_FLG};
                rowconfirm_stock_inRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowconfirm_stock_inRow);
                return rowconfirm_stock_inRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRow FindBySTOCK_IN_ID(string STOCK_IN_ID) {
                return ((confirm_stock_inRow)(this.Rows.Find(new object[] {
                            STOCK_IN_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                confirm_stock_inDataTable cln = ((confirm_stock_inDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new confirm_stock_inDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTOCK_IN_ID = base.Columns["STOCK_IN_ID"];
                this.columnSTOCK_IN_DATE = base.Columns["STOCK_IN_DATE"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnSTOCK_IN_COST = base.Columns["STOCK_IN_COST"];
                this.columnSTOCK_IN_TYPE = base.Columns["STOCK_IN_TYPE"];
                this.columnCONFIRM_FLG = base.Columns["CONFIRM_FLG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTOCK_IN_ID = new global::System.Data.DataColumn("STOCK_IN_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_ID);
                this.columnSTOCK_IN_DATE = new global::System.Data.DataColumn("STOCK_IN_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_DATE);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnSTOCK_IN_COST = new global::System.Data.DataColumn("STOCK_IN_COST", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_COST);
                this.columnSTOCK_IN_TYPE = new global::System.Data.DataColumn("STOCK_IN_TYPE", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_TYPE);
                this.columnCONFIRM_FLG = new global::System.Data.DataColumn("CONFIRM_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONFIRM_FLG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTOCK_IN_ID}, true));
                this.columnSTOCK_IN_ID.AllowDBNull = false;
                this.columnSTOCK_IN_ID.Unique = true;
                this.columnSTOCK_IN_ID.MaxLength = 11;
                this.columnDESCRIPTION.MaxLength = 2000;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRow Newconfirm_stock_inRow() {
                return ((confirm_stock_inRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new confirm_stock_inRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(confirm_stock_inRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.confirm_stock_inRowChanged != null)) {
                    this.confirm_stock_inRowChanged(this, new confirm_stock_inRowChangeEvent(((confirm_stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.confirm_stock_inRowChanging != null)) {
                    this.confirm_stock_inRowChanging(this, new confirm_stock_inRowChangeEvent(((confirm_stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.confirm_stock_inRowDeleted != null)) {
                    this.confirm_stock_inRowDeleted(this, new confirm_stock_inRowChangeEvent(((confirm_stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.confirm_stock_inRowDeleting != null)) {
                    this.confirm_stock_inRowDeleting(this, new confirm_stock_inRowChangeEvent(((confirm_stock_inRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeconfirm_stock_inRow(confirm_stock_inRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "confirm_stock_inDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class confirm_stock_in_detailDataTable : global::System.Data.TypedTableBase<confirm_stock_in_detailRow> {
            
            private global::System.Data.DataColumn columnSTOCK_IN_ID;
            
            private global::System.Data.DataColumn columnPRODUCT_ID;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnPRICE;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnSTOCK_IN_TYPE;
            
            private global::System.Data.DataColumn columnPRODUCT_NAME;
            
            private global::System.Data.DataColumn columnPRODUCT_MASTER_ID;
            
            private global::System.Data.DataColumn columnCOLOR_NAME;
            
            private global::System.Data.DataColumn columnSIZE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailDataTable() {
                this.TableName = "confirm_stock_in_detail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_in_detailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected confirm_stock_in_detailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_IDColumn {
                get {
                    return this.columnSTOCK_IN_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_IDColumn {
                get {
                    return this.columnPRODUCT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IN_TYPEColumn {
                get {
                    return this.columnSTOCK_IN_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_NAMEColumn {
                get {
                    return this.columnPRODUCT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_MASTER_IDColumn {
                get {
                    return this.columnPRODUCT_MASTER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLOR_NAMEColumn {
                get {
                    return this.columnCOLOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIZE_NAMEColumn {
                get {
                    return this.columnSIZE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow this[int index] {
                get {
                    return ((confirm_stock_in_detailRow)(this.Rows[index]));
                }
            }
            
            public event confirm_stock_in_detailRowChangeEventHandler confirm_stock_in_detailRowChanging;
            
            public event confirm_stock_in_detailRowChangeEventHandler confirm_stock_in_detailRowChanged;
            
            public event confirm_stock_in_detailRowChangeEventHandler confirm_stock_in_detailRowDeleting;
            
            public event confirm_stock_in_detailRowChangeEventHandler confirm_stock_in_detailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addconfirm_stock_in_detailRow(confirm_stock_in_detailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow Addconfirm_stock_in_detailRow(string STOCK_IN_ID, string PRODUCT_ID, uint QUANTITY, uint PRICE, System.DateTime CREATE_DATE, string CREATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG, uint STOCK_IN_TYPE, string PRODUCT_NAME, product_masterRow parentproduct_masterRowByfk_product_2, string COLOR_NAME, string SIZE_NAME) {
                confirm_stock_in_detailRow rowconfirm_stock_in_detailRow = ((confirm_stock_in_detailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STOCK_IN_ID,
                        PRODUCT_ID,
                        QUANTITY,
                        PRICE,
                        CREATE_DATE,
                        CREATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        STOCK_IN_TYPE,
                        PRODUCT_NAME,
                        null,
                        COLOR_NAME,
                        SIZE_NAME};
                if ((parentproduct_masterRowByfk_product_2 != null)) {
                    columnValuesArray[10] = parentproduct_masterRowByfk_product_2[0];
                }
                rowconfirm_stock_in_detailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowconfirm_stock_in_detailRow);
                return rowconfirm_stock_in_detailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow FindBySTOCK_IN_IDPRODUCT_ID(string STOCK_IN_ID, string PRODUCT_ID) {
                return ((confirm_stock_in_detailRow)(this.Rows.Find(new object[] {
                            STOCK_IN_ID,
                            PRODUCT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                confirm_stock_in_detailDataTable cln = ((confirm_stock_in_detailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new confirm_stock_in_detailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTOCK_IN_ID = base.Columns["STOCK_IN_ID"];
                this.columnPRODUCT_ID = base.Columns["PRODUCT_ID"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnPRICE = base.Columns["PRICE"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnSTOCK_IN_TYPE = base.Columns["STOCK_IN_TYPE"];
                this.columnPRODUCT_NAME = base.Columns["PRODUCT_NAME"];
                this.columnPRODUCT_MASTER_ID = base.Columns["PRODUCT_MASTER_ID"];
                this.columnCOLOR_NAME = base.Columns["COLOR_NAME"];
                this.columnSIZE_NAME = base.Columns["SIZE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTOCK_IN_ID = new global::System.Data.DataColumn("STOCK_IN_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_ID);
                this.columnPRODUCT_ID = new global::System.Data.DataColumn("PRODUCT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_ID);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnSTOCK_IN_TYPE = new global::System.Data.DataColumn("STOCK_IN_TYPE", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_IN_TYPE);
                this.columnPRODUCT_NAME = new global::System.Data.DataColumn("PRODUCT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_NAME);
                this.columnPRODUCT_MASTER_ID = new global::System.Data.DataColumn("PRODUCT_MASTER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_MASTER_ID);
                this.columnCOLOR_NAME = new global::System.Data.DataColumn("COLOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOR_NAME);
                this.columnSIZE_NAME = new global::System.Data.DataColumn("SIZE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIZE_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTOCK_IN_ID,
                                this.columnPRODUCT_ID}, true));
                this.columnSTOCK_IN_ID.AllowDBNull = false;
                this.columnSTOCK_IN_ID.MaxLength = 11;
                this.columnPRODUCT_ID.AllowDBNull = false;
                this.columnPRODUCT_ID.MaxLength = 20;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnPRODUCT_NAME.MaxLength = 500;
                this.columnPRODUCT_MASTER_ID.MaxLength = 13;
                this.columnCOLOR_NAME.MaxLength = 500;
                this.columnSIZE_NAME.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow Newconfirm_stock_in_detailRow() {
                return ((confirm_stock_in_detailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new confirm_stock_in_detailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(confirm_stock_in_detailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.confirm_stock_in_detailRowChanged != null)) {
                    this.confirm_stock_in_detailRowChanged(this, new confirm_stock_in_detailRowChangeEvent(((confirm_stock_in_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.confirm_stock_in_detailRowChanging != null)) {
                    this.confirm_stock_in_detailRowChanging(this, new confirm_stock_in_detailRowChangeEvent(((confirm_stock_in_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.confirm_stock_in_detailRowDeleted != null)) {
                    this.confirm_stock_in_detailRowDeleted(this, new confirm_stock_in_detailRowChangeEvent(((confirm_stock_in_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.confirm_stock_in_detailRowDeleting != null)) {
                    this.confirm_stock_in_detailRowDeleting(this, new confirm_stock_in_detailRowChangeEvent(((confirm_stock_in_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeconfirm_stock_in_detailRow(confirm_stock_in_detailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "confirm_stock_in_detailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class confirm_stock_outDataTable : global::System.Data.TypedTableBase<confirm_stock_outRow> {
            
            private global::System.Data.DataColumn columnSTOCKOUT_ID;
            
            private global::System.Data.DataColumn columnSTOCK_OUT_DATE;
            
            private global::System.Data.DataColumn columnDEPARTMENT_ID;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnSTOCK_ID;
            
            private global::System.Data.DataColumn columnDEFECT_STATUS_ID;
            
            private global::System.Data.DataColumn columnTotalQuantity;
            
            private global::System.Data.DataColumn columnDEPARTMENT_NAME;
            
            private global::System.Data.DataColumn columnDEFECT_STATUS_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outDataTable() {
                this.TableName = "confirm_stock_out";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_outDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected confirm_stock_outDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCKOUT_IDColumn {
                get {
                    return this.columnSTOCKOUT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_OUT_DATEColumn {
                get {
                    return this.columnSTOCK_OUT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENT_IDColumn {
                get {
                    return this.columnDEPARTMENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_IDColumn {
                get {
                    return this.columnSTOCK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFECT_STATUS_IDColumn {
                get {
                    return this.columnDEFECT_STATUS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalQuantityColumn {
                get {
                    return this.columnTotalQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENT_NAMEColumn {
                get {
                    return this.columnDEPARTMENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFECT_STATUS_NAMEColumn {
                get {
                    return this.columnDEFECT_STATUS_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRow this[int index] {
                get {
                    return ((confirm_stock_outRow)(this.Rows[index]));
                }
            }
            
            public event confirm_stock_outRowChangeEventHandler confirm_stock_outRowChanging;
            
            public event confirm_stock_outRowChangeEventHandler confirm_stock_outRowChanged;
            
            public event confirm_stock_outRowChangeEventHandler confirm_stock_outRowDeleting;
            
            public event confirm_stock_outRowChangeEventHandler confirm_stock_outRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addconfirm_stock_outRow(confirm_stock_outRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRow Addconfirm_stock_outRow(uint STOCKOUT_ID, System.DateTime STOCK_OUT_DATE, uint DEPARTMENT_ID, System.DateTime CREATE_DATE, string CREATE_ID, System.DateTime UPDATE_DATE, string UPDATE_ID, uint EXCLUSIVE_KEY, uint DEL_FLG, uint STOCK_ID, uint DEFECT_STATUS_ID, uint TotalQuantity, string DEPARTMENT_NAME, string DEFECT_STATUS_NAME) {
                confirm_stock_outRow rowconfirm_stock_outRow = ((confirm_stock_outRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STOCKOUT_ID,
                        STOCK_OUT_DATE,
                        DEPARTMENT_ID,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        STOCK_ID,
                        DEFECT_STATUS_ID,
                        TotalQuantity,
                        DEPARTMENT_NAME,
                        DEFECT_STATUS_NAME};
                rowconfirm_stock_outRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowconfirm_stock_outRow);
                return rowconfirm_stock_outRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRow FindBySTOCKOUT_ID(uint STOCKOUT_ID) {
                return ((confirm_stock_outRow)(this.Rows.Find(new object[] {
                            STOCKOUT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                confirm_stock_outDataTable cln = ((confirm_stock_outDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new confirm_stock_outDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTOCKOUT_ID = base.Columns["STOCKOUT_ID"];
                this.columnSTOCK_OUT_DATE = base.Columns["STOCK_OUT_DATE"];
                this.columnDEPARTMENT_ID = base.Columns["DEPARTMENT_ID"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnSTOCK_ID = base.Columns["STOCK_ID"];
                this.columnDEFECT_STATUS_ID = base.Columns["DEFECT_STATUS_ID"];
                this.columnTotalQuantity = base.Columns["TotalQuantity"];
                this.columnDEPARTMENT_NAME = base.Columns["DEPARTMENT_NAME"];
                this.columnDEFECT_STATUS_NAME = base.Columns["DEFECT_STATUS_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTOCKOUT_ID = new global::System.Data.DataColumn("STOCKOUT_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCKOUT_ID);
                this.columnSTOCK_OUT_DATE = new global::System.Data.DataColumn("STOCK_OUT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_OUT_DATE);
                this.columnDEPARTMENT_ID = new global::System.Data.DataColumn("DEPARTMENT_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT_ID);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnSTOCK_ID = new global::System.Data.DataColumn("STOCK_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_ID);
                this.columnDEFECT_STATUS_ID = new global::System.Data.DataColumn("DEFECT_STATUS_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFECT_STATUS_ID);
                this.columnTotalQuantity = new global::System.Data.DataColumn("TotalQuantity", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalQuantity);
                this.columnDEPARTMENT_NAME = new global::System.Data.DataColumn("DEPARTMENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT_NAME);
                this.columnDEFECT_STATUS_NAME = new global::System.Data.DataColumn("DEFECT_STATUS_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFECT_STATUS_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTOCKOUT_ID}, true));
                this.columnSTOCKOUT_ID.AllowDBNull = false;
                this.columnSTOCKOUT_ID.Unique = true;
                this.columnDEPARTMENT_ID.AllowDBNull = false;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
                this.columnDEPARTMENT_NAME.MaxLength = 500;
                this.columnDEFECT_STATUS_NAME.AllowDBNull = false;
                this.columnDEFECT_STATUS_NAME.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRow Newconfirm_stock_outRow() {
                return ((confirm_stock_outRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new confirm_stock_outRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(confirm_stock_outRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.confirm_stock_outRowChanged != null)) {
                    this.confirm_stock_outRowChanged(this, new confirm_stock_outRowChangeEvent(((confirm_stock_outRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.confirm_stock_outRowChanging != null)) {
                    this.confirm_stock_outRowChanging(this, new confirm_stock_outRowChangeEvent(((confirm_stock_outRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.confirm_stock_outRowDeleted != null)) {
                    this.confirm_stock_outRowDeleted(this, new confirm_stock_outRowChangeEvent(((confirm_stock_outRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.confirm_stock_outRowDeleting != null)) {
                    this.confirm_stock_outRowDeleting(this, new confirm_stock_outRowChangeEvent(((confirm_stock_outRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeconfirm_stock_outRow(confirm_stock_outRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "confirm_stock_outDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class confirm_stock_out_detailDataTable : global::System.Data.TypedTableBase<confirm_stock_out_detailRow> {
            
            private global::System.Data.DataColumn columnSTOCK_OUT_DETAIL_ID;
            
            private global::System.Data.DataColumn columnSTOCKOUT_ID;
            
            private global::System.Data.DataColumn columnPRODUCT_ID;
            
            private global::System.Data.DataColumn columnPRODUCT_MASTER_ID;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATE_ID;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_ID;
            
            private global::System.Data.DataColumn columnEXCLUSIVE_KEY;
            
            private global::System.Data.DataColumn columnDEL_FLG;
            
            private global::System.Data.DataColumn columnDEFECT_STATUS_ID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnGOOD_QUANTITY;
            
            private global::System.Data.DataColumn columnERROR_QUANTITY;
            
            private global::System.Data.DataColumn columnDAMAGE_QUANTITY;
            
            private global::System.Data.DataColumn columnLOST_QUANTITY;
            
            private global::System.Data.DataColumn columnUNCONFIRM_QUANTITY;
            
            private global::System.Data.DataColumn columnPRODUCT_NAME;
            
            private global::System.Data.DataColumn columnCOLOR_NAME;
            
            private global::System.Data.DataColumn columnSIZE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailDataTable() {
                this.TableName = "confirm_stock_out_detail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_out_detailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected confirm_stock_out_detailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCK_OUT_DETAIL_IDColumn {
                get {
                    return this.columnSTOCK_OUT_DETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STOCKOUT_IDColumn {
                get {
                    return this.columnSTOCKOUT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_IDColumn {
                get {
                    return this.columnPRODUCT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_MASTER_IDColumn {
                get {
                    return this.columnPRODUCT_MASTER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_IDColumn {
                get {
                    return this.columnCREATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_IDColumn {
                get {
                    return this.columnUPDATE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCLUSIVE_KEYColumn {
                get {
                    return this.columnEXCLUSIVE_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEL_FLGColumn {
                get {
                    return this.columnDEL_FLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFECT_STATUS_IDColumn {
                get {
                    return this.columnDEFECT_STATUS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GOOD_QUANTITYColumn {
                get {
                    return this.columnGOOD_QUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ERROR_QUANTITYColumn {
                get {
                    return this.columnERROR_QUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DAMAGE_QUANTITYColumn {
                get {
                    return this.columnDAMAGE_QUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOST_QUANTITYColumn {
                get {
                    return this.columnLOST_QUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNCONFIRM_QUANTITYColumn {
                get {
                    return this.columnUNCONFIRM_QUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCT_NAMEColumn {
                get {
                    return this.columnPRODUCT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLOR_NAMEColumn {
                get {
                    return this.columnCOLOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIZE_NAMEColumn {
                get {
                    return this.columnSIZE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRow this[int index] {
                get {
                    return ((confirm_stock_out_detailRow)(this.Rows[index]));
                }
            }
            
            public event confirm_stock_out_detailRowChangeEventHandler confirm_stock_out_detailRowChanging;
            
            public event confirm_stock_out_detailRowChangeEventHandler confirm_stock_out_detailRowChanged;
            
            public event confirm_stock_out_detailRowChangeEventHandler confirm_stock_out_detailRowDeleting;
            
            public event confirm_stock_out_detailRowChangeEventHandler confirm_stock_out_detailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addconfirm_stock_out_detailRow(confirm_stock_out_detailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRow Addconfirm_stock_out_detailRow(
                        uint STOCK_OUT_DETAIL_ID, 
                        uint STOCKOUT_ID, 
                        string PRODUCT_ID, 
                        string PRODUCT_MASTER_ID, 
                        uint QUANTITY, 
                        System.DateTime CREATE_DATE, 
                        string CREATE_ID, 
                        System.DateTime UPDATE_DATE, 
                        string UPDATE_ID, 
                        uint EXCLUSIVE_KEY, 
                        uint DEL_FLG, 
                        uint DEFECT_STATUS_ID, 
                        string DESCRIPTION, 
                        uint GOOD_QUANTITY, 
                        uint ERROR_QUANTITY, 
                        uint DAMAGE_QUANTITY, 
                        uint LOST_QUANTITY, 
                        uint UNCONFIRM_QUANTITY, 
                        string PRODUCT_NAME, 
                        string COLOR_NAME, 
                        string SIZE_NAME) {
                confirm_stock_out_detailRow rowconfirm_stock_out_detailRow = ((confirm_stock_out_detailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STOCK_OUT_DETAIL_ID,
                        STOCKOUT_ID,
                        PRODUCT_ID,
                        PRODUCT_MASTER_ID,
                        QUANTITY,
                        CREATE_DATE,
                        CREATE_ID,
                        UPDATE_DATE,
                        UPDATE_ID,
                        EXCLUSIVE_KEY,
                        DEL_FLG,
                        DEFECT_STATUS_ID,
                        DESCRIPTION,
                        GOOD_QUANTITY,
                        ERROR_QUANTITY,
                        DAMAGE_QUANTITY,
                        LOST_QUANTITY,
                        UNCONFIRM_QUANTITY,
                        PRODUCT_NAME,
                        COLOR_NAME,
                        SIZE_NAME};
                rowconfirm_stock_out_detailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowconfirm_stock_out_detailRow);
                return rowconfirm_stock_out_detailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRow FindBySTOCK_OUT_DETAIL_ID(uint STOCK_OUT_DETAIL_ID) {
                return ((confirm_stock_out_detailRow)(this.Rows.Find(new object[] {
                            STOCK_OUT_DETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                confirm_stock_out_detailDataTable cln = ((confirm_stock_out_detailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new confirm_stock_out_detailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTOCK_OUT_DETAIL_ID = base.Columns["STOCK_OUT_DETAIL_ID"];
                this.columnSTOCKOUT_ID = base.Columns["STOCKOUT_ID"];
                this.columnPRODUCT_ID = base.Columns["PRODUCT_ID"];
                this.columnPRODUCT_MASTER_ID = base.Columns["PRODUCT_MASTER_ID"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATE_ID = base.Columns["CREATE_ID"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_ID = base.Columns["UPDATE_ID"];
                this.columnEXCLUSIVE_KEY = base.Columns["EXCLUSIVE_KEY"];
                this.columnDEL_FLG = base.Columns["DEL_FLG"];
                this.columnDEFECT_STATUS_ID = base.Columns["DEFECT_STATUS_ID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnGOOD_QUANTITY = base.Columns["GOOD_QUANTITY"];
                this.columnERROR_QUANTITY = base.Columns["ERROR_QUANTITY"];
                this.columnDAMAGE_QUANTITY = base.Columns["DAMAGE_QUANTITY"];
                this.columnLOST_QUANTITY = base.Columns["LOST_QUANTITY"];
                this.columnUNCONFIRM_QUANTITY = base.Columns["UNCONFIRM_QUANTITY"];
                this.columnPRODUCT_NAME = base.Columns["PRODUCT_NAME"];
                this.columnCOLOR_NAME = base.Columns["COLOR_NAME"];
                this.columnSIZE_NAME = base.Columns["SIZE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTOCK_OUT_DETAIL_ID = new global::System.Data.DataColumn("STOCK_OUT_DETAIL_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCK_OUT_DETAIL_ID);
                this.columnSTOCKOUT_ID = new global::System.Data.DataColumn("STOCKOUT_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTOCKOUT_ID);
                this.columnPRODUCT_ID = new global::System.Data.DataColumn("PRODUCT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_ID);
                this.columnPRODUCT_MASTER_ID = new global::System.Data.DataColumn("PRODUCT_MASTER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_MASTER_ID);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATE_ID = new global::System.Data.DataColumn("CREATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_ID);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_ID = new global::System.Data.DataColumn("UPDATE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_ID);
                this.columnEXCLUSIVE_KEY = new global::System.Data.DataColumn("EXCLUSIVE_KEY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUSIVE_KEY);
                this.columnDEL_FLG = new global::System.Data.DataColumn("DEL_FLG", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEL_FLG);
                this.columnDEFECT_STATUS_ID = new global::System.Data.DataColumn("DEFECT_STATUS_ID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFECT_STATUS_ID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnGOOD_QUANTITY = new global::System.Data.DataColumn("GOOD_QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOOD_QUANTITY);
                this.columnERROR_QUANTITY = new global::System.Data.DataColumn("ERROR_QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnERROR_QUANTITY);
                this.columnDAMAGE_QUANTITY = new global::System.Data.DataColumn("DAMAGE_QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDAMAGE_QUANTITY);
                this.columnLOST_QUANTITY = new global::System.Data.DataColumn("LOST_QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOST_QUANTITY);
                this.columnUNCONFIRM_QUANTITY = new global::System.Data.DataColumn("UNCONFIRM_QUANTITY", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNCONFIRM_QUANTITY);
                this.columnPRODUCT_NAME = new global::System.Data.DataColumn("PRODUCT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT_NAME);
                this.columnCOLOR_NAME = new global::System.Data.DataColumn("COLOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLOR_NAME);
                this.columnSIZE_NAME = new global::System.Data.DataColumn("SIZE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIZE_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTOCK_OUT_DETAIL_ID}, true));
                this.columnSTOCK_OUT_DETAIL_ID.AllowDBNull = false;
                this.columnSTOCK_OUT_DETAIL_ID.Unique = true;
                this.columnSTOCKOUT_ID.AllowDBNull = false;
                this.columnPRODUCT_ID.AllowDBNull = false;
                this.columnPRODUCT_ID.MaxLength = 20;
                this.columnPRODUCT_MASTER_ID.MaxLength = 13;
                this.columnCREATE_ID.MaxLength = 50;
                this.columnUPDATE_ID.MaxLength = 50;
                this.columnDESCRIPTION.MaxLength = 500;
                this.columnPRODUCT_NAME.MaxLength = 500;
                this.columnCOLOR_NAME.MaxLength = 500;
                this.columnSIZE_NAME.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRow Newconfirm_stock_out_detailRow() {
                return ((confirm_stock_out_detailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new confirm_stock_out_detailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(confirm_stock_out_detailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.confirm_stock_out_detailRowChanged != null)) {
                    this.confirm_stock_out_detailRowChanged(this, new confirm_stock_out_detailRowChangeEvent(((confirm_stock_out_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.confirm_stock_out_detailRowChanging != null)) {
                    this.confirm_stock_out_detailRowChanging(this, new confirm_stock_out_detailRowChangeEvent(((confirm_stock_out_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.confirm_stock_out_detailRowDeleted != null)) {
                    this.confirm_stock_out_detailRowDeleted(this, new confirm_stock_out_detailRowChangeEvent(((confirm_stock_out_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.confirm_stock_out_detailRowDeleting != null)) {
                    this.confirm_stock_out_detailRowDeleting(this, new confirm_stock_out_detailRowChangeEvent(((confirm_stock_out_detailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeconfirm_stock_out_detailRow(confirm_stock_out_detailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MasterDB ds = new MasterDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "confirm_stock_out_detailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class product_sizeRow : global::System.Data.DataRow {
            
            private product_sizeDataTable tableproduct_size;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_sizeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct_size = ((product_sizeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint SIZE_ID {
                get {
                    return ((uint)(this[this.tableproduct_size.SIZE_IDColumn]));
                }
                set {
                    this[this.tableproduct_size.SIZE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SIZE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableproduct_size.SIZE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIZE_NAME\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.SIZE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_size.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_size.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_size.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_size.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_size.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_size.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'product_size\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_size.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSIZE_NAMENull() {
                return this.IsNull(this.tableproduct_size.SIZE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSIZE_NAMENull() {
                this[this.tableproduct_size.SIZE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableproduct_size.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableproduct_size.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableproduct_size.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableproduct_size.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableproduct_size.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableproduct_size.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableproduct_size.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableproduct_size.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableproduct_size.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableproduct_size.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableproduct_size.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableproduct_size.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow[] Getproduct_masterRows() {
                if ((this.Table.ChildRelations["product_master_ibfk_3"] == null)) {
                    return new product_masterRow[0];
                }
                else {
                    return ((product_masterRow[])(base.GetChildRows(this.Table.ChildRelations["product_master_ibfk_3"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class product_colorRow : global::System.Data.DataRow {
            
            private product_colorDataTable tableproduct_color;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_colorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct_color = ((product_colorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint COLOR_ID {
                get {
                    return ((uint)(this[this.tableproduct_color.COLOR_IDColumn]));
                }
                set {
                    this[this.tableproduct_color.COLOR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COLOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableproduct_color.COLOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOR_NAME\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.COLOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_color.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_color.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_color.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_color.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_color.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_color.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'product_color\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_color.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOLOR_NAMENull() {
                return this.IsNull(this.tableproduct_color.COLOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOLOR_NAMENull() {
                this[this.tableproduct_color.COLOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableproduct_color.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableproduct_color.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableproduct_color.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableproduct_color.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableproduct_color.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableproduct_color.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableproduct_color.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableproduct_color.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableproduct_color.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableproduct_color.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableproduct_color.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableproduct_color.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow[] Getproduct_masterRows() {
                if ((this.Table.ChildRelations["product_master_ibfk_4"] == null)) {
                    return new product_masterRow[0];
                }
                else {
                    return ((product_masterRow[])(base.GetChildRows(this.Table.ChildRelations["product_master_ibfk_4"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class product_typeRow : global::System.Data.DataRow {
            
            private product_typeDataTable tableproduct_type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_typeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct_type = ((product_typeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint TYPE_ID {
                get {
                    return ((uint)(this[this.tableproduct_type.TYPE_IDColumn]));
                }
                set {
                    this[this.tableproduct_type.TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableproduct_type.TYPE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE_NAME\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.TYPE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_type.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_type.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_type.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_type.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_type.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_type.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'product_type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_type.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPE_NAMENull() {
                return this.IsNull(this.tableproduct_type.TYPE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPE_NAMENull() {
                this[this.tableproduct_type.TYPE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableproduct_type.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableproduct_type.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableproduct_type.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableproduct_type.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableproduct_type.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableproduct_type.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableproduct_type.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableproduct_type.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableproduct_type.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableproduct_type.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableproduct_type.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableproduct_type.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow[] Getproduct_masterRows() {
                if ((this.Table.ChildRelations["product_master_ibfk_2"] == null)) {
                    return new product_masterRow[0];
                }
                else {
                    return ((product_masterRow[])(base.GetChildRows(this.Table.ChildRelations["product_master_ibfk_2"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class product_masterRow : global::System.Data.DataRow {
            
            private product_masterDataTable tableproduct_master;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal product_masterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct_master = ((product_masterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_MASTER_ID {
                get {
                    return ((string)(this[this.tableproduct_master.PRODUCT_MASTER_IDColumn]));
                }
                set {
                    this[this.tableproduct_master.PRODUCT_MASTER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.PRODUCT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_NAME\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.PRODUCT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMAGE_PATH {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.IMAGE_PATHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IMAGE_PATH\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.IMAGE_PATHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint CATEGORY_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.CATEGORY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.CATEGORY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint COUNTRY_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.COUNTRY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTRY_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.COUNTRY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint TYPE_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.TYPE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint SIZE_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.SIZE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIZE_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.SIZE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint UNIT_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.UNIT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.UNIT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint COLOR_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.COLOR_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOR_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.COLOR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint MANUFACTURER_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.MANUFACTURER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MANUFACTURER_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.MANUFACTURER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint SUPPLIER_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.SUPPLIER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUPPLIER_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.SUPPLIER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint PACKAGER_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.PACKAGER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PACKAGER_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.PACKAGER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DISTRIBUTOR_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.DISTRIBUTOR_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISTRIBUTOR_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.DISTRIBUTOR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_master.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct_master.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableproduct_master.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BARCODE {
                get {
                    try {
                        return ((string)(this[this.tableproduct_master.BARCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BARCODE\' in table \'product_master\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct_master.BARCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow product_typeRow {
                get {
                    return ((product_typeRow)(this.GetParentRow(this.Table.ParentRelations["product_master_ibfk_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["product_master_ibfk_2"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow product_sizeRow {
                get {
                    return ((product_sizeRow)(this.GetParentRow(this.Table.ParentRelations["product_master_ibfk_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["product_master_ibfk_3"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow product_colorRow {
                get {
                    return ((product_colorRow)(this.GetParentRow(this.Table.ParentRelations["product_master_ibfk_4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["product_master_ibfk_4"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_NAMENull() {
                return this.IsNull(this.tableproduct_master.PRODUCT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_NAMENull() {
                this[this.tableproduct_master.PRODUCT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableproduct_master.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableproduct_master.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMAGE_PATHNull() {
                return this.IsNull(this.tableproduct_master.IMAGE_PATHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMAGE_PATHNull() {
                this[this.tableproduct_master.IMAGE_PATHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORY_IDNull() {
                return this.IsNull(this.tableproduct_master.CATEGORY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORY_IDNull() {
                this[this.tableproduct_master.CATEGORY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTRY_IDNull() {
                return this.IsNull(this.tableproduct_master.COUNTRY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTRY_IDNull() {
                this[this.tableproduct_master.COUNTRY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPE_IDNull() {
                return this.IsNull(this.tableproduct_master.TYPE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPE_IDNull() {
                this[this.tableproduct_master.TYPE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSIZE_IDNull() {
                return this.IsNull(this.tableproduct_master.SIZE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSIZE_IDNull() {
                this[this.tableproduct_master.SIZE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_IDNull() {
                return this.IsNull(this.tableproduct_master.UNIT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_IDNull() {
                this[this.tableproduct_master.UNIT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOLOR_IDNull() {
                return this.IsNull(this.tableproduct_master.COLOR_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOLOR_IDNull() {
                this[this.tableproduct_master.COLOR_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANUFACTURER_IDNull() {
                return this.IsNull(this.tableproduct_master.MANUFACTURER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANUFACTURER_IDNull() {
                this[this.tableproduct_master.MANUFACTURER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLIER_IDNull() {
                return this.IsNull(this.tableproduct_master.SUPPLIER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLIER_IDNull() {
                this[this.tableproduct_master.SUPPLIER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPACKAGER_IDNull() {
                return this.IsNull(this.tableproduct_master.PACKAGER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPACKAGER_IDNull() {
                this[this.tableproduct_master.PACKAGER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTRIBUTOR_IDNull() {
                return this.IsNull(this.tableproduct_master.DISTRIBUTOR_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTRIBUTOR_IDNull() {
                this[this.tableproduct_master.DISTRIBUTOR_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableproduct_master.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableproduct_master.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableproduct_master.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableproduct_master.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableproduct_master.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableproduct_master.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableproduct_master.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableproduct_master.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableproduct_master.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableproduct_master.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableproduct_master.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableproduct_master.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARCODENull() {
                return this.IsNull(this.tableproduct_master.BARCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARCODENull() {
                this[this.tableproduct_master.BARCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow[] GetproductRows() {
                if ((this.Table.ChildRelations["product_ibfk_1"] == null)) {
                    return new productRow[0];
                }
                else {
                    return ((productRow[])(base.GetChildRows(this.Table.ChildRelations["product_ibfk_1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow[] Getconfirm_stock_in_detailRows() {
                if ((this.Table.ChildRelations["fk_product_2"] == null)) {
                    return new confirm_stock_in_detailRow[0];
                }
                else {
                    return ((confirm_stock_in_detailRow[])(base.GetChildRows(this.Table.ChildRelations["fk_product_2"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class productRow : global::System.Data.DataRow {
            
            private productDataTable tableproduct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct = ((productDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_ID {
                get {
                    return ((string)(this[this.tableproduct.PRODUCT_IDColumn]));
                }
                set {
                    this[this.tableproduct.PRODUCT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_MASTER_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct.PRODUCT_MASTER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_MASTER_ID\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.PRODUCT_MASTER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint BLOCK_ID {
                get {
                    try {
                        return ((uint)(this[this.tableproduct.BLOCK_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOCK_ID\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.BLOCK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLOCK_DETAIL_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct.BLOCK_DETAIL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOCK_DETAIL_ID\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.BLOCK_DETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableproduct.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableproduct.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableproduct.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableproduct.QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QUANTITY\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint PRICE {
                get {
                    try {
                        return ((uint)(this[this.tableproduct.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICE\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow product_masterRow {
                get {
                    return ((product_masterRow)(this.GetParentRow(this.Table.ParentRelations["product_ibfk_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["product_ibfk_1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_MASTER_IDNull() {
                return this.IsNull(this.tableproduct.PRODUCT_MASTER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_MASTER_IDNull() {
                this[this.tableproduct.PRODUCT_MASTER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOCK_IDNull() {
                return this.IsNull(this.tableproduct.BLOCK_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOCK_IDNull() {
                this[this.tableproduct.BLOCK_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOCK_DETAIL_IDNull() {
                return this.IsNull(this.tableproduct.BLOCK_DETAIL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOCK_DETAIL_IDNull() {
                this[this.tableproduct.BLOCK_DETAIL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableproduct.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableproduct.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableproduct.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableproduct.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableproduct.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableproduct.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableproduct.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableproduct.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableproduct.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableproduct.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableproduct.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableproduct.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tableproduct.QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tableproduct.QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tableproduct.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tableproduct.PRICEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DepartmentRow : global::System.Data.DataRow {
            
            private DepartmentDataTable tableDepartment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepartment = ((DepartmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEPARTMENT_ID {
                get {
                    return ((uint)(this[this.tableDepartment.DEPARTMENT_IDColumn]));
                }
                set {
                    this[this.tableDepartment.DEPARTMENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPARTMENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.DEPARTMENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEPARTMENT_NAME\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.DEPARTMENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint MANAGER_ID {
                get {
                    try {
                        return ((uint)(this[this.tableDepartment.MANAGER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MANAGER_ID\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.MANAGER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint ACTIVE {
                get {
                    try {
                        return ((uint)(this[this.tableDepartment.ACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTIVE\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDepartment.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDepartment.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableDepartment.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableDepartment.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime START_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDepartment.START_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_DATE\' in table \'Department\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.START_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPARTMENT_NAMENull() {
                return this.IsNull(this.tableDepartment.DEPARTMENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPARTMENT_NAMENull() {
                this[this.tableDepartment.DEPARTMENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tableDepartment.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tableDepartment.ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANAGER_IDNull() {
                return this.IsNull(this.tableDepartment.MANAGER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANAGER_IDNull() {
                this[this.tableDepartment.MANAGER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTIVENull() {
                return this.IsNull(this.tableDepartment.ACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTIVENull() {
                this[this.tableDepartment.ACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableDepartment.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableDepartment.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableDepartment.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableDepartment.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableDepartment.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableDepartment.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableDepartment.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableDepartment.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableDepartment.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableDepartment.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableDepartment.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableDepartment.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_DATENull() {
                return this.IsNull(this.tableDepartment.START_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_DATENull() {
                this[this.tableDepartment.START_DATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class stock_inRow : global::System.Data.DataRow {
            
            private stock_inDataTable tablestock_in;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stock_inRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestock_in = ((stock_inDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockInId {
                get {
                    return ((string)(this[this.tablestock_in.StockInIdColumn]));
                }
                set {
                    this[this.tablestock_in.StockInIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StockInDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablestock_in.StockInDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockInDate\' in table \'stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestock_in.StockInDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tablestock_in.TotalQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalQuantity\' in table \'stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestock_in.TotalQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockInDateNull() {
                return this.IsNull(this.tablestock_in.StockInDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockInDateNull() {
                this[this.tablestock_in.StockInDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalQuantityNull() {
                return this.IsNull(this.tablestock_in.TotalQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalQuantityNull() {
                this[this.tablestock_in.TotalQuantityColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class confirm_stock_inRow : global::System.Data.DataRow {
            
            private confirm_stock_inDataTable tableconfirm_stock_in;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_inRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableconfirm_stock_in = ((confirm_stock_inDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STOCK_IN_ID {
                get {
                    return ((string)(this[this.tableconfirm_stock_in.STOCK_IN_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_in.STOCK_IN_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STOCK_IN_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_in.STOCK_IN_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_IN_DATE\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.STOCK_IN_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_in.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_in.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCK_IN_COST {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in.STOCK_IN_COSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_IN_COST\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.STOCK_IN_COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCK_IN_TYPE {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in.STOCK_IN_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_IN_TYPE\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.STOCK_IN_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint CONFIRM_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in.CONFIRM_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONFIRM_FLG\' in table \'confirm_stock_in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in.CONFIRM_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_IN_DATENull() {
                return this.IsNull(this.tableconfirm_stock_in.STOCK_IN_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_IN_DATENull() {
                this[this.tableconfirm_stock_in.STOCK_IN_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_in.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableconfirm_stock_in.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableconfirm_stock_in.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableconfirm_stock_in.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_in.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableconfirm_stock_in.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_in.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableconfirm_stock_in.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_in.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableconfirm_stock_in.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableconfirm_stock_in.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableconfirm_stock_in.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableconfirm_stock_in.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableconfirm_stock_in.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_IN_COSTNull() {
                return this.IsNull(this.tableconfirm_stock_in.STOCK_IN_COSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_IN_COSTNull() {
                this[this.tableconfirm_stock_in.STOCK_IN_COSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_IN_TYPENull() {
                return this.IsNull(this.tableconfirm_stock_in.STOCK_IN_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_IN_TYPENull() {
                this[this.tableconfirm_stock_in.STOCK_IN_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONFIRM_FLGNull() {
                return this.IsNull(this.tableconfirm_stock_in.CONFIRM_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONFIRM_FLGNull() {
                this[this.tableconfirm_stock_in.CONFIRM_FLGColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class confirm_stock_in_detailRow : global::System.Data.DataRow {
            
            private confirm_stock_in_detailDataTable tableconfirm_stock_in_detail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_in_detailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableconfirm_stock_in_detail = ((confirm_stock_in_detailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STOCK_IN_ID {
                get {
                    return ((string)(this[this.tableconfirm_stock_in_detail.STOCK_IN_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_in_detail.STOCK_IN_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_ID {
                get {
                    return ((string)(this[this.tableconfirm_stock_in_detail.PRODUCT_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_in_detail.PRODUCT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in_detail.QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QUANTITY\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint PRICE {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in_detail.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICE\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_in_detail.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in_detail.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in_detail.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'confirm_stock_in_detail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in_detail.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCK_IN_TYPE {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_in_detail.STOCK_IN_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_IN_TYPE\' in table \'confirm_stock_in_detail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.STOCK_IN_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in_detail.PRODUCT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_NAME\' in table \'confirm_stock_in_detail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.PRODUCT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_MASTER_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in_detail.PRODUCT_MASTER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_MASTER_ID\' in table \'confirm_stock_in_detail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.PRODUCT_MASTER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COLOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in_detail.COLOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOR_NAME\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.COLOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SIZE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_in_detail.SIZE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIZE_NAME\' in table \'confirm_stock_in_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_in_detail.SIZE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow product_masterRow {
                get {
                    return ((product_masterRow)(this.GetParentRow(this.Table.ParentRelations["fk_product_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fk_product_2"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tableconfirm_stock_in_detail.QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tableconfirm_stock_in_detail.PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableconfirm_stock_in_detail.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableconfirm_stock_in_detail.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableconfirm_stock_in_detail.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableconfirm_stock_in_detail.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_IN_TYPENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.STOCK_IN_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_IN_TYPENull() {
                this[this.tableconfirm_stock_in_detail.STOCK_IN_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.PRODUCT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_NAMENull() {
                this[this.tableconfirm_stock_in_detail.PRODUCT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_MASTER_IDNull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.PRODUCT_MASTER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_MASTER_IDNull() {
                this[this.tableconfirm_stock_in_detail.PRODUCT_MASTER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOLOR_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.COLOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOLOR_NAMENull() {
                this[this.tableconfirm_stock_in_detail.COLOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSIZE_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_in_detail.SIZE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSIZE_NAMENull() {
                this[this.tableconfirm_stock_in_detail.SIZE_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class confirm_stock_outRow : global::System.Data.DataRow {
            
            private confirm_stock_outDataTable tableconfirm_stock_out;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_outRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableconfirm_stock_out = ((confirm_stock_outDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCKOUT_ID {
                get {
                    return ((uint)(this[this.tableconfirm_stock_out.STOCKOUT_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out.STOCKOUT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STOCK_OUT_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_out.STOCK_OUT_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_OUT_DATE\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.STOCK_OUT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEPARTMENT_ID {
                get {
                    return ((uint)(this[this.tableconfirm_stock_out.DEPARTMENT_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out.DEPARTMENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_out.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_out.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCK_ID {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out.STOCK_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STOCK_ID\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.STOCK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEFECT_STATUS_ID {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out.DEFECT_STATUS_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFECT_STATUS_ID\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.DEFECT_STATUS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint TotalQuantity {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out.TotalQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalQuantity\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.TotalQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPARTMENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out.DEPARTMENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEPARTMENT_NAME\' in table \'confirm_stock_out\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out.DEPARTMENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFECT_STATUS_NAME {
                get {
                    return ((string)(this[this.tableconfirm_stock_out.DEFECT_STATUS_NAMEColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out.DEFECT_STATUS_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_OUT_DATENull() {
                return this.IsNull(this.tableconfirm_stock_out.STOCK_OUT_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_OUT_DATENull() {
                this[this.tableconfirm_stock_out.STOCK_OUT_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_out.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableconfirm_stock_out.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableconfirm_stock_out.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_out.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableconfirm_stock_out.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableconfirm_stock_out.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableconfirm_stock_out.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableconfirm_stock_out.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableconfirm_stock_out.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableconfirm_stock_out.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTOCK_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out.STOCK_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTOCK_IDNull() {
                this[this.tableconfirm_stock_out.STOCK_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFECT_STATUS_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out.DEFECT_STATUS_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFECT_STATUS_IDNull() {
                this[this.tableconfirm_stock_out.DEFECT_STATUS_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalQuantityNull() {
                return this.IsNull(this.tableconfirm_stock_out.TotalQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalQuantityNull() {
                this[this.tableconfirm_stock_out.TotalQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPARTMENT_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_out.DEPARTMENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPARTMENT_NAMENull() {
                this[this.tableconfirm_stock_out.DEPARTMENT_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class confirm_stock_out_detailRow : global::System.Data.DataRow {
            
            private confirm_stock_out_detailDataTable tableconfirm_stock_out_detail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal confirm_stock_out_detailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableconfirm_stock_out_detail = ((confirm_stock_out_detailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCK_OUT_DETAIL_ID {
                get {
                    return ((uint)(this[this.tableconfirm_stock_out_detail.STOCK_OUT_DETAIL_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out_detail.STOCK_OUT_DETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint STOCKOUT_ID {
                get {
                    return ((uint)(this[this.tableconfirm_stock_out_detail.STOCKOUT_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out_detail.STOCKOUT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_ID {
                get {
                    return ((string)(this[this.tableconfirm_stock_out_detail.PRODUCT_IDColumn]));
                }
                set {
                    this[this.tableconfirm_stock_out_detail.PRODUCT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_MASTER_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.PRODUCT_MASTER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_MASTER_ID\' in table \'confirm_stock_out_detail\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.PRODUCT_MASTER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QUANTITY\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_out_detail.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'confirm_stock_out_detail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.CREATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_ID\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.CREATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableconfirm_stock_out_detail.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'confirm_stock_out_detail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_ID {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.UPDATE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_ID\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.UPDATE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint EXCLUSIVE_KEY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.EXCLUSIVE_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUSIVE_KEY\' in table \'confirm_stock_out_detail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.EXCLUSIVE_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEL_FLG {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.DEL_FLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEL_FLG\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.DEL_FLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DEFECT_STATUS_ID {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.DEFECT_STATUS_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFECT_STATUS_ID\' in table \'confirm_stock_out_detail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.DEFECT_STATUS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'confirm_stock_out_detail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint GOOD_QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.GOOD_QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GOOD_QUANTITY\' in table \'confirm_stock_out_detail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.GOOD_QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint ERROR_QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.ERROR_QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ERROR_QUANTITY\' in table \'confirm_stock_out_detail\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.ERROR_QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint DAMAGE_QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.DAMAGE_QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DAMAGE_QUANTITY\' in table \'confirm_stock_out_detail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.DAMAGE_QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint LOST_QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.LOST_QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOST_QUANTITY\' in table \'confirm_stock_out_detail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.LOST_QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint UNCONFIRM_QUANTITY {
                get {
                    try {
                        return ((uint)(this[this.tableconfirm_stock_out_detail.UNCONFIRM_QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNCONFIRM_QUANTITY\' in table \'confirm_stock_out_detail\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.UNCONFIRM_QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.PRODUCT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT_NAME\' in table \'confirm_stock_out_detail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.PRODUCT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COLOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.COLOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLOR_NAME\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.COLOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SIZE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableconfirm_stock_out_detail.SIZE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIZE_NAME\' in table \'confirm_stock_out_detail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfirm_stock_out_detail.SIZE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_MASTER_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.PRODUCT_MASTER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_MASTER_IDNull() {
                this[this.tableconfirm_stock_out_detail.PRODUCT_MASTER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableconfirm_stock_out_detail.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.CREATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_IDNull() {
                this[this.tableconfirm_stock_out_detail.CREATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableconfirm_stock_out_detail.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.UPDATE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_IDNull() {
                this[this.tableconfirm_stock_out_detail.UPDATE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCLUSIVE_KEYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.EXCLUSIVE_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCLUSIVE_KEYNull() {
                this[this.tableconfirm_stock_out_detail.EXCLUSIVE_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEL_FLGNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.DEL_FLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEL_FLGNull() {
                this[this.tableconfirm_stock_out_detail.DEL_FLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFECT_STATUS_IDNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.DEFECT_STATUS_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFECT_STATUS_IDNull() {
                this[this.tableconfirm_stock_out_detail.DEFECT_STATUS_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableconfirm_stock_out_detail.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGOOD_QUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.GOOD_QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGOOD_QUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.GOOD_QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsERROR_QUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.ERROR_QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetERROR_QUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.ERROR_QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDAMAGE_QUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.DAMAGE_QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDAMAGE_QUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.DAMAGE_QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOST_QUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.LOST_QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOST_QUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.LOST_QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNCONFIRM_QUANTITYNull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.UNCONFIRM_QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNCONFIRM_QUANTITYNull() {
                this[this.tableconfirm_stock_out_detail.UNCONFIRM_QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCT_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.PRODUCT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCT_NAMENull() {
                this[this.tableconfirm_stock_out_detail.PRODUCT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOLOR_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.COLOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOLOR_NAMENull() {
                this[this.tableconfirm_stock_out_detail.COLOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSIZE_NAMENull() {
                return this.IsNull(this.tableconfirm_stock_out_detail.SIZE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSIZE_NAMENull() {
                this[this.tableconfirm_stock_out_detail.SIZE_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class product_sizeRowChangeEvent : global::System.EventArgs {
            
            private product_sizeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRowChangeEvent(product_sizeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_sizeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class product_colorRowChangeEvent : global::System.EventArgs {
            
            private product_colorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRowChangeEvent(product_colorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_colorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class product_typeRowChangeEvent : global::System.EventArgs {
            
            private product_typeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRowChangeEvent(product_typeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_typeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class product_masterRowChangeEvent : global::System.EventArgs {
            
            private product_masterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRowChangeEvent(product_masterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public product_masterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class productRowChangeEvent : global::System.EventArgs {
            
            private productRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRowChangeEvent(productRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DepartmentRowChangeEvent : global::System.EventArgs {
            
            private DepartmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRowChangeEvent(DepartmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class stock_inRowChangeEvent : global::System.EventArgs {
            
            private stock_inRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRowChangeEvent(stock_inRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stock_inRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class confirm_stock_inRowChangeEvent : global::System.EventArgs {
            
            private confirm_stock_inRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRowChangeEvent(confirm_stock_inRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_inRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class confirm_stock_in_detailRowChangeEvent : global::System.EventArgs {
            
            private confirm_stock_in_detailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRowChangeEvent(confirm_stock_in_detailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_in_detailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class confirm_stock_outRowChangeEvent : global::System.EventArgs {
            
            private confirm_stock_outRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRowChangeEvent(confirm_stock_outRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_outRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class confirm_stock_out_detailRowChangeEvent : global::System.EventArgs {
            
            private confirm_stock_out_detailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRowChangeEvent(confirm_stock_out_detailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public confirm_stock_out_detailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AppFrameClient.MasterDBTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class product_sizeTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public product_sizeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product_size";
            tableMapping.ColumnMappings.Add("SIZE_ID", "SIZE_ID");
            tableMapping.ColumnMappings.Add("SIZE_NAME", "SIZE_NAME");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `pos`.`product_size` WHERE ((`SIZE_ID` = @Original_SIZE_ID) AND ((@IsNull_SIZE_NAME = 1 AND `SIZE_NAME` IS NULL) OR (`SIZE_NAME` = @Original_SIZE_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SIZE_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `pos`.`product_size` (`SIZE_ID`, `SIZE_NAME`, `CREATE_DATE`, `CREATE_" +
                "ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`) VALUES (@SIZE_ID, @" +
                "SIZE_NAME, @CREATE_DATE, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_KEY, @" +
                "DEL_FLG)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `pos`.`product_size` SET `SIZE_ID` = @SIZE_ID, `SIZE_NAME` = @SIZE_NAME, `CREATE_DATE` = @CREATE_DATE, `CREATE_ID` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `EXCLUSIVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG WHERE ((`SIZE_ID` = @Original_SIZE_ID) AND ((@IsNull_SIZE_NAME = 1 AND `SIZE_NAME` IS NULL) OR (`SIZE_NAME` = @Original_SIZE_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SIZE_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  product_size.*\r\nFROM     product_size";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.product_sizeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.product_sizeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.product_sizeDataTable dataTable = new MasterDB.product_sizeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.product_sizeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "product_size");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(uint Original_SIZE_ID, string Original_SIZE_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((uint)(Original_SIZE_ID));
            if ((Original_SIZE_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_SIZE_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(uint SIZE_ID, string SIZE_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((uint)(SIZE_ID));
            if ((SIZE_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SIZE_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    uint SIZE_ID, 
                    string SIZE_NAME, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    uint Original_SIZE_ID, 
                    string Original_SIZE_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((uint)(SIZE_ID));
            if ((SIZE_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SIZE_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(Original_SIZE_ID));
            if ((Original_SIZE_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_SIZE_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SIZE_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG, uint Original_SIZE_ID, string Original_SIZE_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            return this.Update(Original_SIZE_ID, SIZE_NAME, CREATE_DATE, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, Original_SIZE_ID, Original_SIZE_NAME, Original_CREATE_DATE, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class product_colorTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public product_colorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product_color";
            tableMapping.ColumnMappings.Add("COLOR_ID", "COLOR_ID");
            tableMapping.ColumnMappings.Add("COLOR_NAME", "COLOR_NAME");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `pos`.`product_color` WHERE ((`COLOR_ID` = @Original_COLOR_ID) AND ((@IsNull_COLOR_NAME = 1 AND `COLOR_NAME` IS NULL) OR (`COLOR_NAME` = @Original_COLOR_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COLOR_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `pos`.`product_color` (`COLOR_ID`, `COLOR_NAME`, `CREATE_DATE`, `CREA" +
                "TE_ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`) VALUES (@COLOR_I" +
                "D, @COLOR_NAME, @CREATE_DATE, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_K" +
                "EY, @DEL_FLG)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `pos`.`product_color` SET `COLOR_ID` = @COLOR_ID, `COLOR_NAME` = @COLOR_NAME, `CREATE_DATE` = @CREATE_DATE, `CREATE_ID` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `EXCLUSIVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG WHERE ((`COLOR_ID` = @Original_COLOR_ID) AND ((@IsNull_COLOR_NAME = 1 AND `COLOR_NAME` IS NULL) OR (`COLOR_NAME` = @Original_COLOR_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COLOR_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  product_color.*\r\nFROM     product_color";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.product_colorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.product_colorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.product_colorDataTable dataTable = new MasterDB.product_colorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.product_colorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "product_color");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(uint Original_COLOR_ID, string Original_COLOR_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((uint)(Original_COLOR_ID));
            if ((Original_COLOR_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_COLOR_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(uint COLOR_ID, string COLOR_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((uint)(COLOR_ID));
            if ((COLOR_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(COLOR_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    uint COLOR_ID, 
                    string COLOR_NAME, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    uint Original_COLOR_ID, 
                    string Original_COLOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((uint)(COLOR_ID));
            if ((COLOR_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(COLOR_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(Original_COLOR_ID));
            if ((Original_COLOR_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_COLOR_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string COLOR_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG, uint Original_COLOR_ID, string Original_COLOR_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            return this.Update(Original_COLOR_ID, COLOR_NAME, CREATE_DATE, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, Original_COLOR_ID, Original_COLOR_NAME, Original_CREATE_DATE, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class product_typeTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public product_typeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product_type";
            tableMapping.ColumnMappings.Add("TYPE_ID", "TYPE_ID");
            tableMapping.ColumnMappings.Add("TYPE_NAME", "TYPE_NAME");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `pos`.`product_type` WHERE ((`TYPE_ID` = @Original_TYPE_ID) AND ((@IsNull_TYPE_NAME = 1 AND `TYPE_NAME` IS NULL) OR (`TYPE_NAME` = @Original_TYPE_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_TYPE_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `pos`.`product_type` (`TYPE_ID`, `TYPE_NAME`, `CREATE_DATE`, `CREATE_" +
                "ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`) VALUES (@TYPE_ID, @" +
                "TYPE_NAME, @CREATE_DATE, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_KEY, @" +
                "DEL_FLG)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `pos`.`product_type` SET `TYPE_ID` = @TYPE_ID, `TYPE_NAME` = @TYPE_NAME, `CREATE_DATE` = @CREATE_DATE, `CREATE_ID` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `EXCLUSIVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG WHERE ((`TYPE_ID` = @Original_TYPE_ID) AND ((@IsNull_TYPE_NAME = 1 AND `TYPE_NAME` IS NULL) OR (`TYPE_NAME` = @Original_TYPE_NAME)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_TYPE_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  product_type.*\r\nFROM     product_type";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.product_typeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.product_typeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.product_typeDataTable dataTable = new MasterDB.product_typeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.product_typeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "product_type");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(uint Original_TYPE_ID, string Original_TYPE_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((uint)(Original_TYPE_ID));
            if ((Original_TYPE_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TYPE_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(uint TYPE_ID, string TYPE_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((uint)(TYPE_ID));
            if ((TYPE_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TYPE_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    uint TYPE_ID, 
                    string TYPE_NAME, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    uint Original_TYPE_ID, 
                    string Original_TYPE_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((uint)(TYPE_ID));
            if ((TYPE_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TYPE_NAME));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(Original_TYPE_ID));
            if ((Original_TYPE_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_TYPE_NAME));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TYPE_NAME, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG, uint Original_TYPE_ID, string Original_TYPE_NAME, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG) {
            return this.Update(Original_TYPE_ID, TYPE_NAME, CREATE_DATE, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, Original_TYPE_ID, Original_TYPE_NAME, Original_CREATE_DATE, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class product_masterTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public product_masterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product_master";
            tableMapping.ColumnMappings.Add("PRODUCT_MASTER_ID", "PRODUCT_MASTER_ID");
            tableMapping.ColumnMappings.Add("PRODUCT_NAME", "PRODUCT_NAME");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("IMAGE_PATH", "IMAGE_PATH");
            tableMapping.ColumnMappings.Add("CATEGORY_ID", "CATEGORY_ID");
            tableMapping.ColumnMappings.Add("COUNTRY_ID", "COUNTRY_ID");
            tableMapping.ColumnMappings.Add("TYPE_ID", "TYPE_ID");
            tableMapping.ColumnMappings.Add("SIZE_ID", "SIZE_ID");
            tableMapping.ColumnMappings.Add("UNIT_ID", "UNIT_ID");
            tableMapping.ColumnMappings.Add("COLOR_ID", "COLOR_ID");
            tableMapping.ColumnMappings.Add("MANUFACTURER_ID", "MANUFACTURER_ID");
            tableMapping.ColumnMappings.Add("SUPPLIER_ID", "SUPPLIER_ID");
            tableMapping.ColumnMappings.Add("PACKAGER_ID", "PACKAGER_ID");
            tableMapping.ColumnMappings.Add("DISTRIBUTOR_ID", "DISTRIBUTOR_ID");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("BARCODE", "BARCODE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `pos`.`product_master` WHERE ((`PRODUCT_MASTER_ID` = @Original_PRODUC" +
                "T_MASTER_ID) AND ((@IsNull_PRODUCT_NAME = 1 AND `PRODUCT_NAME` IS NULL) OR (`PRO" +
                "DUCT_NAME` = @Original_PRODUCT_NAME)) AND ((@IsNull_DESCRIPTION = 1 AND `DESCRIP" +
                "TION` IS NULL) OR (`DESCRIPTION` = @Original_DESCRIPTION)) AND ((@IsNull_IMAGE_P" +
                "ATH = 1 AND `IMAGE_PATH` IS NULL) OR (`IMAGE_PATH` = @Original_IMAGE_PATH)) AND " +
                "((@IsNull_CATEGORY_ID = 1 AND `CATEGORY_ID` IS NULL) OR (`CATEGORY_ID` = @Origin" +
                "al_CATEGORY_ID)) AND ((@IsNull_COUNTRY_ID = 1 AND `COUNTRY_ID` IS NULL) OR (`COU" +
                "NTRY_ID` = @Original_COUNTRY_ID)) AND ((@IsNull_TYPE_ID = 1 AND `TYPE_ID` IS NUL" +
                "L) OR (`TYPE_ID` = @Original_TYPE_ID)) AND ((@IsNull_SIZE_ID = 1 AND `SIZE_ID` I" +
                "S NULL) OR (`SIZE_ID` = @Original_SIZE_ID)) AND ((@IsNull_UNIT_ID = 1 AND `UNIT_" +
                "ID` IS NULL) OR (`UNIT_ID` = @Original_UNIT_ID)) AND ((@IsNull_COLOR_ID = 1 AND " +
                "`COLOR_ID` IS NULL) OR (`COLOR_ID` = @Original_COLOR_ID)) AND ((@IsNull_MANUFACT" +
                "URER_ID = 1 AND `MANUFACTURER_ID` IS NULL) OR (`MANUFACTURER_ID` = @Original_MAN" +
                "UFACTURER_ID)) AND ((@IsNull_SUPPLIER_ID = 1 AND `SUPPLIER_ID` IS NULL) OR (`SUP" +
                "PLIER_ID` = @Original_SUPPLIER_ID)) AND ((@IsNull_PACKAGER_ID = 1 AND `PACKAGER_" +
                "ID` IS NULL) OR (`PACKAGER_ID` = @Original_PACKAGER_ID)) AND ((@IsNull_DISTRIBUT" +
                "OR_ID = 1 AND `DISTRIBUTOR_ID` IS NULL) OR (`DISTRIBUTOR_ID` = @Original_DISTRIB" +
                "UTOR_ID)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_D" +
                "ATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NU" +
                "LL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `U" +
                "PDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_U" +
                "PDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AN" +
                "D ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` =" +
                " @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (" +
                "`DEL_FLG` = @Original_DEL_FLG)) AND ((@IsNull_BARCODE = 1 AND `BARCODE` IS NULL)" +
                " OR (`BARCODE` = @Original_BARCODE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DESCRIPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_IMAGE_PATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_IMAGE_PATH";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CATEGORY_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CATEGORY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COUNTRY_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COUNTRY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_TYPE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SIZE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UNIT_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UNIT_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COLOR_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PACKAGER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PACKAGER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BARCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BARCODE";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `pos`.`product_master` (`PRODUCT_MASTER_ID`, `PRODUCT_NAME`, `DESCRIPTION`, `IMAGE_PATH`, `CATEGORY_ID`, `COUNTRY_ID`, `TYPE_ID`, `SIZE_ID`, `UNIT_ID`, `COLOR_ID`, `MANUFACTURER_ID`, `SUPPLIER_ID`, `PACKAGER_ID`, `DISTRIBUTOR_ID`, `CREATE_DATE`, `CREATE_ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`, `BARCODE`) VALUES (@PRODUCT_MASTER_ID, @PRODUCT_NAME, @DESCRIPTION, @IMAGE_PATH, @CATEGORY_ID, @COUNTRY_ID, @TYPE_ID, @SIZE_ID, @UNIT_ID, @COLOR_ID, @MANUFACTURER_ID, @SUPPLIER_ID, @PACKAGER_ID, @DISTRIBUTOR_ID, @CREATE_DATE, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_KEY, @DEL_FLG, @BARCODE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IMAGE_PATH";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CATEGORY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COUNTRY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UNIT_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PACKAGER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BARCODE";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `pos`.`product_master` SET `PRODUCT_MASTER_ID` = @PRODUCT_MASTER_ID, `PROD" +
                "UCT_NAME` = @PRODUCT_NAME, `DESCRIPTION` = @DESCRIPTION, `IMAGE_PATH` = @IMAGE_P" +
                "ATH, `CATEGORY_ID` = @CATEGORY_ID, `COUNTRY_ID` = @COUNTRY_ID, `TYPE_ID` = @TYPE" +
                "_ID, `SIZE_ID` = @SIZE_ID, `UNIT_ID` = @UNIT_ID, `COLOR_ID` = @COLOR_ID, `MANUFA" +
                "CTURER_ID` = @MANUFACTURER_ID, `SUPPLIER_ID` = @SUPPLIER_ID, `PACKAGER_ID` = @PA" +
                "CKAGER_ID, `DISTRIBUTOR_ID` = @DISTRIBUTOR_ID, `CREATE_DATE` = @CREATE_DATE, `CR" +
                "EATE_ID` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `" +
                "EXCLUSIVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG, `BARCODE` = @BARCODE WHER" +
                "E ((`PRODUCT_MASTER_ID` = @Original_PRODUCT_MASTER_ID) AND ((@IsNull_PRODUCT_NAM" +
                "E = 1 AND `PRODUCT_NAME` IS NULL) OR (`PRODUCT_NAME` = @Original_PRODUCT_NAME)) " +
                "AND ((@IsNull_DESCRIPTION = 1 AND `DESCRIPTION` IS NULL) OR (`DESCRIPTION` = @Or" +
                "iginal_DESCRIPTION)) AND ((@IsNull_IMAGE_PATH = 1 AND `IMAGE_PATH` IS NULL) OR (" +
                "`IMAGE_PATH` = @Original_IMAGE_PATH)) AND ((@IsNull_CATEGORY_ID = 1 AND `CATEGOR" +
                "Y_ID` IS NULL) OR (`CATEGORY_ID` = @Original_CATEGORY_ID)) AND ((@IsNull_COUNTRY" +
                "_ID = 1 AND `COUNTRY_ID` IS NULL) OR (`COUNTRY_ID` = @Original_COUNTRY_ID)) AND " +
                "((@IsNull_TYPE_ID = 1 AND `TYPE_ID` IS NULL) OR (`TYPE_ID` = @Original_TYPE_ID))" +
                " AND ((@IsNull_SIZE_ID = 1 AND `SIZE_ID` IS NULL) OR (`SIZE_ID` = @Original_SIZE" +
                "_ID)) AND ((@IsNull_UNIT_ID = 1 AND `UNIT_ID` IS NULL) OR (`UNIT_ID` = @Original" +
                "_UNIT_ID)) AND ((@IsNull_COLOR_ID = 1 AND `COLOR_ID` IS NULL) OR (`COLOR_ID` = @" +
                "Original_COLOR_ID)) AND ((@IsNull_MANUFACTURER_ID = 1 AND `MANUFACTURER_ID` IS N" +
                "ULL) OR (`MANUFACTURER_ID` = @Original_MANUFACTURER_ID)) AND ((@IsNull_SUPPLIER_" +
                "ID = 1 AND `SUPPLIER_ID` IS NULL) OR (`SUPPLIER_ID` = @Original_SUPPLIER_ID)) AN" +
                "D ((@IsNull_PACKAGER_ID = 1 AND `PACKAGER_ID` IS NULL) OR (`PACKAGER_ID` = @Orig" +
                "inal_PACKAGER_ID)) AND ((@IsNull_DISTRIBUTOR_ID = 1 AND `DISTRIBUTOR_ID` IS NULL" +
                ") OR (`DISTRIBUTOR_ID` = @Original_DISTRIBUTOR_ID)) AND ((@IsNull_CREATE_DATE = " +
                "1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@" +
                "IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE" +
                "_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE`" +
                " = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) " +
                "OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXC" +
                "LUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNu" +
                "ll_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)) AND ((" +
                "@IsNull_BARCODE = 1 AND `BARCODE` IS NULL) OR (`BARCODE` = @Original_BARCODE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IMAGE_PATH";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CATEGORY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COUNTRY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UNIT_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PACKAGER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BARCODE";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_NAME";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DESCRIPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_IMAGE_PATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_IMAGE_PATH";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "IMAGE_PATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CATEGORY_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CATEGORY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CATEGORY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COUNTRY_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COUNTRY_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COUNTRY_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_TYPE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_TYPE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "TYPE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SIZE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SIZE_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SIZE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UNIT_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UNIT_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "UNIT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_COLOR_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_COLOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "COLOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_MANUFACTURER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "MANUFACTURER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_SUPPLIER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "SUPPLIER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PACKAGER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PACKAGER_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PACKAGER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DISTRIBUTOR_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DISTRIBUTOR_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BARCODE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BARCODE";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BARCODE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  product_master.*\r\nFROM     product_master";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.product_masterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.product_masterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.product_masterDataTable dataTable = new MasterDB.product_masterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.product_masterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "product_master");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_PRODUCT_MASTER_ID, 
                    string Original_PRODUCT_NAME, 
                    string Original_DESCRIPTION, 
                    string Original_IMAGE_PATH, 
                    global::System.Nullable<uint> Original_CATEGORY_ID, 
                    global::System.Nullable<uint> Original_COUNTRY_ID, 
                    global::System.Nullable<uint> Original_TYPE_ID, 
                    global::System.Nullable<uint> Original_SIZE_ID, 
                    global::System.Nullable<uint> Original_UNIT_ID, 
                    global::System.Nullable<uint> Original_COLOR_ID, 
                    global::System.Nullable<uint> Original_MANUFACTURER_ID, 
                    global::System.Nullable<uint> Original_SUPPLIER_ID, 
                    global::System.Nullable<uint> Original_PACKAGER_ID, 
                    global::System.Nullable<uint> Original_DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    string Original_BARCODE) {
            if ((Original_PRODUCT_MASTER_ID == null)) {
                throw new global::System.ArgumentNullException("Original_PRODUCT_MASTER_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PRODUCT_MASTER_ID));
            }
            if ((Original_PRODUCT_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PRODUCT_NAME));
            }
            if ((Original_DESCRIPTION == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_DESCRIPTION));
            }
            if ((Original_IMAGE_PATH == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_IMAGE_PATH));
            }
            if ((Original_CATEGORY_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((uint)(Original_CATEGORY_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_COUNTRY_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((uint)(Original_COUNTRY_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((uint)(Original_TYPE_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_SIZE_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((uint)(Original_SIZE_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_UNIT_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((uint)(Original_UNIT_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_COLOR_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((uint)(Original_COLOR_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_MANUFACTURER_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((uint)(Original_MANUFACTURER_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_SUPPLIER_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((uint)(Original_SUPPLIER_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PACKAGER_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((uint)(Original_PACKAGER_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_DISTRIBUTOR_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((uint)(Original_DISTRIBUTOR_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_BARCODE == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_BARCODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string PRODUCT_MASTER_ID, 
                    string PRODUCT_NAME, 
                    string DESCRIPTION, 
                    string IMAGE_PATH, 
                    global::System.Nullable<uint> CATEGORY_ID, 
                    global::System.Nullable<uint> COUNTRY_ID, 
                    global::System.Nullable<uint> TYPE_ID, 
                    global::System.Nullable<uint> SIZE_ID, 
                    global::System.Nullable<uint> UNIT_ID, 
                    global::System.Nullable<uint> COLOR_ID, 
                    global::System.Nullable<uint> MANUFACTURER_ID, 
                    global::System.Nullable<uint> SUPPLIER_ID, 
                    global::System.Nullable<uint> PACKAGER_ID, 
                    global::System.Nullable<uint> DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    string BARCODE) {
            if ((PRODUCT_MASTER_ID == null)) {
                throw new global::System.ArgumentNullException("PRODUCT_MASTER_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PRODUCT_MASTER_ID));
            }
            if ((PRODUCT_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRODUCT_NAME));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION));
            }
            if ((IMAGE_PATH == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IMAGE_PATH));
            }
            if ((CATEGORY_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((uint)(CATEGORY_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((COUNTRY_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((uint)(COUNTRY_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TYPE_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((uint)(TYPE_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SIZE_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((uint)(SIZE_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((UNIT_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((uint)(UNIT_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((COLOR_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((uint)(COLOR_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((MANUFACTURER_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((uint)(MANUFACTURER_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SUPPLIER_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((uint)(SUPPLIER_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PACKAGER_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((uint)(PACKAGER_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DISTRIBUTOR_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((uint)(DISTRIBUTOR_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((BARCODE == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(BARCODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRODUCT_MASTER_ID, 
                    string PRODUCT_NAME, 
                    string DESCRIPTION, 
                    string IMAGE_PATH, 
                    global::System.Nullable<uint> CATEGORY_ID, 
                    global::System.Nullable<uint> COUNTRY_ID, 
                    global::System.Nullable<uint> TYPE_ID, 
                    global::System.Nullable<uint> SIZE_ID, 
                    global::System.Nullable<uint> UNIT_ID, 
                    global::System.Nullable<uint> COLOR_ID, 
                    global::System.Nullable<uint> MANUFACTURER_ID, 
                    global::System.Nullable<uint> SUPPLIER_ID, 
                    global::System.Nullable<uint> PACKAGER_ID, 
                    global::System.Nullable<uint> DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    string BARCODE, 
                    string Original_PRODUCT_MASTER_ID, 
                    string Original_PRODUCT_NAME, 
                    string Original_DESCRIPTION, 
                    string Original_IMAGE_PATH, 
                    global::System.Nullable<uint> Original_CATEGORY_ID, 
                    global::System.Nullable<uint> Original_COUNTRY_ID, 
                    global::System.Nullable<uint> Original_TYPE_ID, 
                    global::System.Nullable<uint> Original_SIZE_ID, 
                    global::System.Nullable<uint> Original_UNIT_ID, 
                    global::System.Nullable<uint> Original_COLOR_ID, 
                    global::System.Nullable<uint> Original_MANUFACTURER_ID, 
                    global::System.Nullable<uint> Original_SUPPLIER_ID, 
                    global::System.Nullable<uint> Original_PACKAGER_ID, 
                    global::System.Nullable<uint> Original_DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    string Original_BARCODE) {
            if ((PRODUCT_MASTER_ID == null)) {
                throw new global::System.ArgumentNullException("PRODUCT_MASTER_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PRODUCT_MASTER_ID));
            }
            if ((PRODUCT_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRODUCT_NAME));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION));
            }
            if ((IMAGE_PATH == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IMAGE_PATH));
            }
            if ((CATEGORY_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((uint)(CATEGORY_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((COUNTRY_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((uint)(COUNTRY_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TYPE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((uint)(TYPE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SIZE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((uint)(SIZE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((UNIT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(UNIT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((COLOR_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((uint)(COLOR_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((MANUFACTURER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((uint)(MANUFACTURER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SUPPLIER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((uint)(SUPPLIER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PACKAGER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((uint)(PACKAGER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DISTRIBUTOR_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((uint)(DISTRIBUTOR_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((BARCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(BARCODE));
            }
            if ((Original_PRODUCT_MASTER_ID == null)) {
                throw new global::System.ArgumentNullException("Original_PRODUCT_MASTER_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_PRODUCT_MASTER_ID));
            }
            if ((Original_PRODUCT_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_PRODUCT_NAME));
            }
            if ((Original_DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_DESCRIPTION));
            }
            if ((Original_IMAGE_PATH == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_IMAGE_PATH));
            }
            if ((Original_CATEGORY_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((uint)(Original_CATEGORY_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_COUNTRY_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((uint)(Original_COUNTRY_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((uint)(Original_TYPE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_SIZE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((uint)(Original_SIZE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_UNIT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((uint)(Original_UNIT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_COLOR_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((uint)(Original_COLOR_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_MANUFACTURER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((uint)(Original_MANUFACTURER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_SUPPLIER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((uint)(Original_SUPPLIER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_PACKAGER_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((uint)(Original_PACKAGER_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_DISTRIBUTOR_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((uint)(Original_DISTRIBUTOR_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_BARCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_BARCODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRODUCT_NAME, 
                    string DESCRIPTION, 
                    string IMAGE_PATH, 
                    global::System.Nullable<uint> CATEGORY_ID, 
                    global::System.Nullable<uint> COUNTRY_ID, 
                    global::System.Nullable<uint> TYPE_ID, 
                    global::System.Nullable<uint> SIZE_ID, 
                    global::System.Nullable<uint> UNIT_ID, 
                    global::System.Nullable<uint> COLOR_ID, 
                    global::System.Nullable<uint> MANUFACTURER_ID, 
                    global::System.Nullable<uint> SUPPLIER_ID, 
                    global::System.Nullable<uint> PACKAGER_ID, 
                    global::System.Nullable<uint> DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    string BARCODE, 
                    string Original_PRODUCT_MASTER_ID, 
                    string Original_PRODUCT_NAME, 
                    string Original_DESCRIPTION, 
                    string Original_IMAGE_PATH, 
                    global::System.Nullable<uint> Original_CATEGORY_ID, 
                    global::System.Nullable<uint> Original_COUNTRY_ID, 
                    global::System.Nullable<uint> Original_TYPE_ID, 
                    global::System.Nullable<uint> Original_SIZE_ID, 
                    global::System.Nullable<uint> Original_UNIT_ID, 
                    global::System.Nullable<uint> Original_COLOR_ID, 
                    global::System.Nullable<uint> Original_MANUFACTURER_ID, 
                    global::System.Nullable<uint> Original_SUPPLIER_ID, 
                    global::System.Nullable<uint> Original_PACKAGER_ID, 
                    global::System.Nullable<uint> Original_DISTRIBUTOR_ID, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    string Original_BARCODE) {
            return this.Update(Original_PRODUCT_MASTER_ID, PRODUCT_NAME, DESCRIPTION, IMAGE_PATH, CATEGORY_ID, COUNTRY_ID, TYPE_ID, SIZE_ID, UNIT_ID, COLOR_ID, MANUFACTURER_ID, SUPPLIER_ID, PACKAGER_ID, DISTRIBUTOR_ID, CREATE_DATE, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, BARCODE, Original_PRODUCT_MASTER_ID, Original_PRODUCT_NAME, Original_DESCRIPTION, Original_IMAGE_PATH, Original_CATEGORY_ID, Original_COUNTRY_ID, Original_TYPE_ID, Original_SIZE_ID, Original_UNIT_ID, Original_COLOR_ID, Original_MANUFACTURER_ID, Original_SUPPLIER_ID, Original_PACKAGER_ID, Original_DISTRIBUTOR_ID, Original_CREATE_DATE, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG, Original_BARCODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class productTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public productTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product";
            tableMapping.ColumnMappings.Add("PRODUCT_ID", "PRODUCT_ID");
            tableMapping.ColumnMappings.Add("PRODUCT_MASTER_ID", "PRODUCT_MASTER_ID");
            tableMapping.ColumnMappings.Add("BLOCK_ID", "BLOCK_ID");
            tableMapping.ColumnMappings.Add("BLOCK_DETAIL_ID", "BLOCK_DETAIL_ID");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY");
            tableMapping.ColumnMappings.Add("PRICE", "PRICE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `pos`.`product` WHERE ((`PRODUCT_ID` = @Original_PRODUCT_ID) AND ((@IsNull_PRODUCT_MASTER_ID = 1 AND `PRODUCT_MASTER_ID` IS NULL) OR (`PRODUCT_MASTER_ID` = @Original_PRODUCT_MASTER_ID)) AND ((@IsNull_BLOCK_ID = 1 AND `BLOCK_ID` IS NULL) OR (`BLOCK_ID` = @Original_BLOCK_ID)) AND ((@IsNull_BLOCK_DETAIL_ID = 1 AND `BLOCK_DETAIL_ID` IS NULL) OR (`BLOCK_DETAIL_ID` = @Original_BLOCK_DETAIL_ID)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)) AND ((@IsNull_QUANTITY = 1 AND `QUANTITY` IS NULL) OR (`QUANTITY` = @Original_QUANTITY)) AND ((@IsNull_PRICE = 1 AND `PRICE` IS NULL) OR (`PRICE` = @Original_PRICE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BLOCK_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BLOCK_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_QUANTITY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_QUANTITY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRICE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRICE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `pos`.`product` (`PRODUCT_ID`, `PRODUCT_MASTER_ID`, `BLOCK_ID`, `BLOCK_DETAIL_ID`, `CREATE_DATE`, `CREATE_ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`, `QUANTITY`, `PRICE`) VALUES (@PRODUCT_ID, @PRODUCT_MASTER_ID, @BLOCK_ID, @BLOCK_DETAIL_ID, @CREATE_DATE, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_KEY, @DEL_FLG, @QUANTITY, @PRICE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BLOCK_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@QUANTITY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRICE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `pos`.`product` SET `PRODUCT_ID` = @PRODUCT_ID, `PRODUCT_MASTER_ID` = @PRODUCT_MASTER_ID, `BLOCK_ID` = @BLOCK_ID, `BLOCK_DETAIL_ID` = @BLOCK_DETAIL_ID, `CREATE_DATE` = @CREATE_DATE, `CREATE_ID` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `EXCLUSIVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG, `QUANTITY` = @QUANTITY, `PRICE` = @PRICE WHERE ((`PRODUCT_ID` = @Original_PRODUCT_ID) AND ((@IsNull_PRODUCT_MASTER_ID = 1 AND `PRODUCT_MASTER_ID` IS NULL) OR (`PRODUCT_MASTER_ID` = @Original_PRODUCT_MASTER_ID)) AND ((@IsNull_BLOCK_ID = 1 AND `BLOCK_ID` IS NULL) OR (`BLOCK_ID` = @Original_BLOCK_ID)) AND ((@IsNull_BLOCK_DETAIL_ID = 1 AND `BLOCK_DETAIL_ID` IS NULL) OR (`BLOCK_DETAIL_ID` = @Original_BLOCK_DETAIL_ID)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)) AND ((@IsNull_QUANTITY = 1 AND `QUANTITY` IS NULL) OR (`QUANTITY` = @Original_QUANTITY)) AND ((@IsNull_PRICE = 1 AND `PRICE` IS NULL) OR (`PRICE` = @Original_PRICE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BLOCK_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@QUANTITY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@PRICE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRODUCT_MASTER_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "PRODUCT_MASTER_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BLOCK_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BLOCK_ID";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_BLOCK_DETAIL_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "BLOCK_DETAIL_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_QUANTITY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_QUANTITY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "QUANTITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_PRICE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_PRICE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "PRICE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  product.*\r\nFROM     product";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.productDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.productDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.productDataTable dataTable = new MasterDB.productDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.productDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "product");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_PRODUCT_ID, string Original_PRODUCT_MASTER_ID, global::System.Nullable<uint> Original_BLOCK_ID, string Original_BLOCK_DETAIL_ID, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG, global::System.Nullable<uint> Original_QUANTITY, global::System.Nullable<uint> Original_PRICE) {
            if ((Original_PRODUCT_ID == null)) {
                throw new global::System.ArgumentNullException("Original_PRODUCT_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PRODUCT_ID));
            }
            if ((Original_PRODUCT_MASTER_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PRODUCT_MASTER_ID));
            }
            if ((Original_BLOCK_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((uint)(Original_BLOCK_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_BLOCK_DETAIL_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_BLOCK_DETAIL_ID));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_QUANTITY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((uint)(Original_QUANTITY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_PRICE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((uint)(Original_PRICE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PRODUCT_ID, string PRODUCT_MASTER_ID, global::System.Nullable<uint> BLOCK_ID, string BLOCK_DETAIL_ID, global::System.Nullable<global::System.DateTime> CREATE_DATE, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG, global::System.Nullable<uint> QUANTITY, global::System.Nullable<uint> PRICE) {
            if ((PRODUCT_ID == null)) {
                throw new global::System.ArgumentNullException("PRODUCT_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PRODUCT_ID));
            }
            if ((PRODUCT_MASTER_ID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRODUCT_MASTER_ID));
            }
            if ((BLOCK_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((uint)(BLOCK_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((BLOCK_DETAIL_ID == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BLOCK_DETAIL_ID));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((QUANTITY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((uint)(QUANTITY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PRICE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((uint)(PRICE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRODUCT_ID, 
                    string PRODUCT_MASTER_ID, 
                    global::System.Nullable<uint> BLOCK_ID, 
                    string BLOCK_DETAIL_ID, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    global::System.Nullable<uint> QUANTITY, 
                    global::System.Nullable<uint> PRICE, 
                    string Original_PRODUCT_ID, 
                    string Original_PRODUCT_MASTER_ID, 
                    global::System.Nullable<uint> Original_BLOCK_ID, 
                    string Original_BLOCK_DETAIL_ID, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    global::System.Nullable<uint> Original_QUANTITY, 
                    global::System.Nullable<uint> Original_PRICE) {
            if ((PRODUCT_ID == null)) {
                throw new global::System.ArgumentNullException("PRODUCT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PRODUCT_ID));
            }
            if ((PRODUCT_MASTER_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRODUCT_MASTER_ID));
            }
            if ((BLOCK_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((uint)(BLOCK_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((BLOCK_DETAIL_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BLOCK_DETAIL_ID));
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((QUANTITY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((uint)(QUANTITY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PRICE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((uint)(PRICE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_PRODUCT_ID == null)) {
                throw new global::System.ArgumentNullException("Original_PRODUCT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_PRODUCT_ID));
            }
            if ((Original_PRODUCT_MASTER_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_PRODUCT_MASTER_ID));
            }
            if ((Original_BLOCK_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((uint)(Original_BLOCK_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_BLOCK_DETAIL_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_BLOCK_DETAIL_ID));
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_QUANTITY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((uint)(Original_QUANTITY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_PRICE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((uint)(Original_PRICE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRODUCT_MASTER_ID, 
                    global::System.Nullable<uint> BLOCK_ID, 
                    string BLOCK_DETAIL_ID, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    global::System.Nullable<uint> QUANTITY, 
                    global::System.Nullable<uint> PRICE, 
                    string Original_PRODUCT_ID, 
                    string Original_PRODUCT_MASTER_ID, 
                    global::System.Nullable<uint> Original_BLOCK_ID, 
                    string Original_BLOCK_DETAIL_ID, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    global::System.Nullable<uint> Original_QUANTITY, 
                    global::System.Nullable<uint> Original_PRICE) {
            return this.Update(Original_PRODUCT_ID, PRODUCT_MASTER_ID, BLOCK_ID, BLOCK_DETAIL_ID, CREATE_DATE, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, QUANTITY, PRICE, Original_PRODUCT_ID, Original_PRODUCT_MASTER_ID, Original_BLOCK_ID, Original_BLOCK_DETAIL_ID, Original_CREATE_DATE, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG, Original_QUANTITY, Original_PRICE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DepartmentTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepartmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Department";
            tableMapping.ColumnMappings.Add("DEPARTMENT_ID", "DEPARTMENT_ID");
            tableMapping.ColumnMappings.Add("DEPARTMENT_NAME", "DEPARTMENT_NAME");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("MANAGER_ID", "MANAGER_ID");
            tableMapping.ColumnMappings.Add("ACTIVE", "ACTIVE");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("START_DATE", "START_DATE");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "`pos`.`Department`";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.DepartmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.DepartmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MasterDB.DepartmentDataTable dataTable = new MasterDB.DepartmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class stock_inTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public stock_inTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "stock_in";
            tableMapping.ColumnMappings.Add("StockInId", "StockInId");
            tableMapping.ColumnMappings.Add("StockInDate", "StockInDate");
            tableMapping.ColumnMappings.Add("TotalQuantity", "TotalQuantity");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     stock_in.STOCK_IN_ID AS StockInId, stock_in.STOCK_IN_DATE AS StockInDate, SUM(stock_in_detail.QUANTITY) AS TotalQuantity
FROM         stock_in INNER JOIN
                      stock_in_detail ON stock_in.STOCK_IN_ID = stock_in_detail.STOCK_IN_ID
WHERE     (stock_in.STOCK_IN_DATE >= @FromDate) AND (stock_in.STOCK_IN_DATE <= @ToDate) AND (stock_in.DEL_FLG = 0) AND 
                      (stock_in.CONFIRM_FLG = 0)
GROUP BY stock_in.STOCK_IN_ID, stock_in.STOCK_IN_DATE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@FromDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "StockInDate";
            this._commandCollection[0].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ToDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "StockInDate";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.stock_inDataTable dataTable, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.stock_inDataTable GetData(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MasterDB.stock_inDataTable dataTable = new MasterDB.stock_inDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class confirm_stock_inTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public confirm_stock_inTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "confirm_stock_in";
            tableMapping.ColumnMappings.Add("STOCK_IN_ID", "STOCK_IN_ID");
            tableMapping.ColumnMappings.Add("STOCK_IN_DATE", "STOCK_IN_DATE");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("STOCK_IN_COST", "STOCK_IN_COST");
            tableMapping.ColumnMappings.Add("STOCK_IN_TYPE", "STOCK_IN_TYPE");
            tableMapping.ColumnMappings.Add("CONFIRM_FLG", "CONFIRM_FLG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `pos`.`stock_in` WHERE ((`STOCK_IN_ID` = @Original_STOCK_IN_ID) AND ((@IsNull_STOCK_IN_DATE = 1 AND `STOCK_IN_DATE` IS NULL) OR (`STOCK_IN_DATE` = @Original_STOCK_IN_DATE)) AND ((@IsNull_CREATE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE)) AND ((@IsNull_DESCRIPTION = 1 AND `DESCRIPTION` IS NULL) OR (`DESCRIPTION` = @Original_DESCRIPTION)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR (`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_DATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_ID = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@IsNull_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Original_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FLG` = @Original_DEL_FLG)) AND ((@IsNull_STOCK_IN_COST = 1 AND `STOCK_IN_COST` IS NULL) OR (`STOCK_IN_COST` = @Original_STOCK_IN_COST)) AND ((@IsNull_STOCK_IN_TYPE = 1 AND `STOCK_IN_TYPE` IS NULL) OR (`STOCK_IN_TYPE` = @Original_STOCK_IN_TYPE)) AND ((@IsNull_CONFIRM_FLG = 1 AND `CONFIRM_FLG` IS NULL) OR (`CONFIRM_FLG` = @Original_CONFIRM_FLG)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DESCRIPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `pos`.`stock_in` (`STOCK_IN_ID`, `STOCK_IN_DATE`, `CREATE_DATE`, `DESCRIPTION`, `CREATE_ID`, `UPDATE_DATE`, `UPDATE_ID`, `EXCLUSIVE_KEY`, `DEL_FLG`, `STOCK_IN_COST`, `STOCK_IN_TYPE`, `CONFIRM_FLG`) VALUES (@STOCK_IN_ID, @STOCK_IN_DATE, @CREATE_DATE, @DESCRIPTION, @CREATE_ID, @UPDATE_DATE, @UPDATE_ID, @EXCLUSIVE_KEY, @DEL_FLG, @STOCK_IN_COST, @STOCK_IN_TYPE, @CONFIRM_FLG)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `pos`.`stock_in` SET `STOCK_IN_ID` = @STOCK_IN_ID, `STOCK_IN_DATE` = @STOC" +
                "K_IN_DATE, `CREATE_DATE` = @CREATE_DATE, `DESCRIPTION` = @DESCRIPTION, `CREATE_I" +
                "D` = @CREATE_ID, `UPDATE_DATE` = @UPDATE_DATE, `UPDATE_ID` = @UPDATE_ID, `EXCLUS" +
                "IVE_KEY` = @EXCLUSIVE_KEY, `DEL_FLG` = @DEL_FLG, `STOCK_IN_COST` = @STOCK_IN_COS" +
                "T, `STOCK_IN_TYPE` = @STOCK_IN_TYPE, `CONFIRM_FLG` = @CONFIRM_FLG WHERE ((`STOCK" +
                "_IN_ID` = @Original_STOCK_IN_ID) AND ((@IsNull_STOCK_IN_DATE = 1 AND `STOCK_IN_D" +
                "ATE` IS NULL) OR (`STOCK_IN_DATE` = @Original_STOCK_IN_DATE)) AND ((@IsNull_CREA" +
                "TE_DATE = 1 AND `CREATE_DATE` IS NULL) OR (`CREATE_DATE` = @Original_CREATE_DATE" +
                ")) AND ((@IsNull_DESCRIPTION = 1 AND `DESCRIPTION` IS NULL) OR (`DESCRIPTION` = " +
                "@Original_DESCRIPTION)) AND ((@IsNull_CREATE_ID = 1 AND `CREATE_ID` IS NULL) OR " +
                "(`CREATE_ID` = @Original_CREATE_ID)) AND ((@IsNull_UPDATE_DATE = 1 AND `UPDATE_D" +
                "ATE` IS NULL) OR (`UPDATE_DATE` = @Original_UPDATE_DATE)) AND ((@IsNull_UPDATE_I" +
                "D = 1 AND `UPDATE_ID` IS NULL) OR (`UPDATE_ID` = @Original_UPDATE_ID)) AND ((@Is" +
                "Null_EXCLUSIVE_KEY = 1 AND `EXCLUSIVE_KEY` IS NULL) OR (`EXCLUSIVE_KEY` = @Origi" +
                "nal_EXCLUSIVE_KEY)) AND ((@IsNull_DEL_FLG = 1 AND `DEL_FLG` IS NULL) OR (`DEL_FL" +
                "G` = @Original_DEL_FLG)) AND ((@IsNull_STOCK_IN_COST = 1 AND `STOCK_IN_COST` IS " +
                "NULL) OR (`STOCK_IN_COST` = @Original_STOCK_IN_COST)) AND ((@IsNull_STOCK_IN_TYP" +
                "E = 1 AND `STOCK_IN_TYPE` IS NULL) OR (`STOCK_IN_TYPE` = @Original_STOCK_IN_TYPE" +
                ")) AND ((@IsNull_CONFIRM_FLG = 1 AND `CONFIRM_FLG` IS NULL) OR (`CONFIRM_FLG` = " +
                "@Original_CONFIRM_FLG)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DESCRIPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DESCRIPTION";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DESCRIPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CREATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CREATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CREATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_DATE";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_DATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_UPDATE_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_UPDATE_ID";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "UPDATE_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_EXCLUSIVE_KEY";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "EXCLUSIVE_KEY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_DEL_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_DEL_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "DEL_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_COST";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_COST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_STOCK_IN_TYPE";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_CONFIRM_FLG";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     STOCK_IN_ID, STOCK_IN_DATE, CREATE_DATE, DESCRIPTION, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, 
                      STOCK_IN_COST, STOCK_IN_TYPE, CONFIRM_FLG
FROM         stock_in
WHERE     (CONFIRM_FLG = @ConfirmFlg) AND (DEL_FLG = 0) AND (STOCK_IN_DATE >= @FromDate) AND (STOCK_IN_DATE <= @ToDate)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ConfirmFlg";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CONFIRM_FLG";
            this._commandCollection[0].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@FromDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            this._commandCollection[0].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ToDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_DATE";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.confirm_stock_inDataTable dataTable, global::System.Nullable<int> ConfirmFlg, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ConfirmFlg.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ConfirmFlg.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.confirm_stock_inDataTable GetData(global::System.Nullable<int> ConfirmFlg, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ConfirmFlg.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ConfirmFlg.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            MasterDB.confirm_stock_inDataTable dataTable = new MasterDB.confirm_stock_inDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB.confirm_stock_inDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MasterDB dataSet) {
            return this.Adapter.Update(dataSet, "confirm_stock_in");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_STOCK_IN_ID, global::System.Nullable<global::System.DateTime> Original_STOCK_IN_DATE, global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, string Original_DESCRIPTION, string Original_CREATE_ID, global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, string Original_UPDATE_ID, global::System.Nullable<uint> Original_EXCLUSIVE_KEY, global::System.Nullable<uint> Original_DEL_FLG, global::System.Nullable<uint> Original_STOCK_IN_COST, global::System.Nullable<uint> Original_STOCK_IN_TYPE, global::System.Nullable<uint> Original_CONFIRM_FLG) {
            if ((Original_STOCK_IN_ID == null)) {
                throw new global::System.ArgumentNullException("Original_STOCK_IN_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_STOCK_IN_ID));
            }
            if ((Original_STOCK_IN_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_STOCK_IN_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DESCRIPTION == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DESCRIPTION));
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_STOCK_IN_COST.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((uint)(Original_STOCK_IN_COST.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_STOCK_IN_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((uint)(Original_STOCK_IN_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_CONFIRM_FLG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((uint)(Original_CONFIRM_FLG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string STOCK_IN_ID, global::System.Nullable<global::System.DateTime> STOCK_IN_DATE, global::System.Nullable<global::System.DateTime> CREATE_DATE, string DESCRIPTION, string CREATE_ID, global::System.Nullable<global::System.DateTime> UPDATE_DATE, string UPDATE_ID, global::System.Nullable<uint> EXCLUSIVE_KEY, global::System.Nullable<uint> DEL_FLG, global::System.Nullable<uint> STOCK_IN_COST, global::System.Nullable<uint> STOCK_IN_TYPE, global::System.Nullable<uint> CONFIRM_FLG) {
            if ((STOCK_IN_ID == null)) {
                throw new global::System.ArgumentNullException("STOCK_IN_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(STOCK_IN_ID));
            }
            if ((STOCK_IN_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(STOCK_IN_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DESCRIPTION));
            }
            if ((CREATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((STOCK_IN_COST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((uint)(STOCK_IN_COST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((STOCK_IN_TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((uint)(STOCK_IN_TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CONFIRM_FLG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((uint)(CONFIRM_FLG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string STOCK_IN_ID, 
                    global::System.Nullable<global::System.DateTime> STOCK_IN_DATE, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string DESCRIPTION, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    global::System.Nullable<uint> STOCK_IN_COST, 
                    global::System.Nullable<uint> STOCK_IN_TYPE, 
                    global::System.Nullable<uint> CONFIRM_FLG, 
                    string Original_STOCK_IN_ID, 
                    global::System.Nullable<global::System.DateTime> Original_STOCK_IN_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_DESCRIPTION, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    global::System.Nullable<uint> Original_STOCK_IN_COST, 
                    global::System.Nullable<uint> Original_STOCK_IN_TYPE, 
                    global::System.Nullable<uint> Original_CONFIRM_FLG) {
            if ((STOCK_IN_ID == null)) {
                throw new global::System.ArgumentNullException("STOCK_IN_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(STOCK_IN_ID));
            }
            if ((STOCK_IN_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(STOCK_IN_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DESCRIPTION));
            }
            if ((CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CREATE_ID));
            }
            if ((UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(UPDATE_ID));
            }
            if ((EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((uint)(EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((uint)(DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((STOCK_IN_COST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((uint)(STOCK_IN_COST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((STOCK_IN_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((uint)(STOCK_IN_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CONFIRM_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((uint)(CONFIRM_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_STOCK_IN_ID == null)) {
                throw new global::System.ArgumentNullException("Original_STOCK_IN_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_STOCK_IN_ID));
            }
            if ((Original_STOCK_IN_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_STOCK_IN_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_CREATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_CREATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_DESCRIPTION));
            }
            if ((Original_CREATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CREATE_ID));
            }
            if ((Original_UPDATE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_UPDATE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_UPDATE_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_UPDATE_ID));
            }
            if ((Original_EXCLUSIVE_KEY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((uint)(Original_EXCLUSIVE_KEY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_DEL_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((uint)(Original_DEL_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_STOCK_IN_COST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((uint)(Original_STOCK_IN_COST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_STOCK_IN_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((uint)(Original_STOCK_IN_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_CONFIRM_FLG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((uint)(Original_CONFIRM_FLG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<global::System.DateTime> STOCK_IN_DATE, 
                    global::System.Nullable<global::System.DateTime> CREATE_DATE, 
                    string DESCRIPTION, 
                    string CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> UPDATE_DATE, 
                    string UPDATE_ID, 
                    global::System.Nullable<uint> EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> DEL_FLG, 
                    global::System.Nullable<uint> STOCK_IN_COST, 
                    global::System.Nullable<uint> STOCK_IN_TYPE, 
                    global::System.Nullable<uint> CONFIRM_FLG, 
                    string Original_STOCK_IN_ID, 
                    global::System.Nullable<global::System.DateTime> Original_STOCK_IN_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_CREATE_DATE, 
                    string Original_DESCRIPTION, 
                    string Original_CREATE_ID, 
                    global::System.Nullable<global::System.DateTime> Original_UPDATE_DATE, 
                    string Original_UPDATE_ID, 
                    global::System.Nullable<uint> Original_EXCLUSIVE_KEY, 
                    global::System.Nullable<uint> Original_DEL_FLG, 
                    global::System.Nullable<uint> Original_STOCK_IN_COST, 
                    global::System.Nullable<uint> Original_STOCK_IN_TYPE, 
                    global::System.Nullable<uint> Original_CONFIRM_FLG) {
            return this.Update(Original_STOCK_IN_ID, STOCK_IN_DATE, CREATE_DATE, DESCRIPTION, CREATE_ID, UPDATE_DATE, UPDATE_ID, EXCLUSIVE_KEY, DEL_FLG, STOCK_IN_COST, STOCK_IN_TYPE, CONFIRM_FLG, Original_STOCK_IN_ID, Original_STOCK_IN_DATE, Original_CREATE_DATE, Original_DESCRIPTION, Original_CREATE_ID, Original_UPDATE_DATE, Original_UPDATE_ID, Original_EXCLUSIVE_KEY, Original_DEL_FLG, Original_STOCK_IN_COST, Original_STOCK_IN_TYPE, Original_CONFIRM_FLG);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class confirm_stock_in_detailTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public confirm_stock_in_detailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "confirm_stock_in_detail";
            tableMapping.ColumnMappings.Add("STOCK_IN_ID", "STOCK_IN_ID");
            tableMapping.ColumnMappings.Add("PRODUCT_ID", "PRODUCT_ID");
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY");
            tableMapping.ColumnMappings.Add("PRICE", "PRICE");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("STOCK_IN_TYPE", "STOCK_IN_TYPE");
            tableMapping.ColumnMappings.Add("PRODUCT_NAME", "PRODUCT_NAME");
            tableMapping.ColumnMappings.Add("PRODUCT_MASTER_ID", "PRODUCT_MASTER_ID");
            tableMapping.ColumnMappings.Add("COLOR_NAME", "COLOR_NAME");
            tableMapping.ColumnMappings.Add("SIZE_NAME", "SIZE_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     stock_in_detail.STOCK_IN_ID, stock_in_detail.PRODUCT_ID, stock_in_detail.QUANTITY, stock_in_detail.PRICE, stock_in_detail.CREATE_DATE, 
                      stock_in_detail.CREATE_ID, stock_in_detail.EXCLUSIVE_KEY, stock_in_detail.DEL_FLG, stock_in_detail.STOCK_IN_TYPE, 
                      product_master.PRODUCT_NAME, product.PRODUCT_MASTER_ID, product_color.COLOR_NAME, product_size.SIZE_NAME
FROM         stock_in_detail INNER JOIN
                      product ON stock_in_detail.PRODUCT_ID = product.PRODUCT_ID INNER JOIN
                      product_master ON product.PRODUCT_MASTER_ID = product_master.PRODUCT_MASTER_ID INNER JOIN
                      product_color ON product_master.COLOR_ID = product_color.COLOR_ID INNER JOIN
                      product_size ON product_master.SIZE_ID = product_size.SIZE_ID
WHERE     (stock_in_detail.STOCK_IN_ID = @StockInId)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@StockInId";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_IN_ID";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.confirm_stock_in_detailDataTable dataTable, string StockInId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StockInId == null)) {
                throw new global::System.ArgumentNullException("StockInId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(StockInId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.confirm_stock_in_detailDataTable GetData(string StockInId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StockInId == null)) {
                throw new global::System.ArgumentNullException("StockInId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(StockInId));
            }
            MasterDB.confirm_stock_in_detailDataTable dataTable = new MasterDB.confirm_stock_in_detailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class confirm_stock_outTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public confirm_stock_outTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "confirm_stock_out";
            tableMapping.ColumnMappings.Add("STOCKOUT_ID", "STOCKOUT_ID");
            tableMapping.ColumnMappings.Add("STOCK_OUT_DATE", "STOCK_OUT_DATE");
            tableMapping.ColumnMappings.Add("DEPARTMENT_ID", "DEPARTMENT_ID");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("STOCK_ID", "STOCK_ID");
            tableMapping.ColumnMappings.Add("DEFECT_STATUS_ID", "DEFECT_STATUS_ID");
            tableMapping.ColumnMappings.Add("TotalQuantity", "TotalQuantity");
            tableMapping.ColumnMappings.Add("DEPARTMENT_NAME", "DEPARTMENT_NAME");
            tableMapping.ColumnMappings.Add("DEFECT_STATUS_NAME", "DEFECT_STATUS_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     stock_out.STOCKOUT_ID, stock_out.STOCK_OUT_DATE, stock_out.DEPARTMENT_ID, stock_out.CREATE_DATE, stock_out.CREATE_ID, 
                      stock_out.UPDATE_DATE, stock_out.UPDATE_ID, stock_out.EXCLUSIVE_KEY, stock_out.DEL_FLG, stock_out.STOCK_ID, 
                      stock_out.DEFECT_STATUS_ID, stock_out_detail.QUANTITY AS TotalQuantity, department.DEPARTMENT_NAME, 
                      stock_defect_status.DEFECT_STATUS_NAME
FROM         stock_out INNER JOIN
                      stock_out_detail ON stock_out.STOCKOUT_ID = stock_out_detail.STOCKOUT_ID INNER JOIN
                      department ON stock_out.DEPARTMENT_ID = department.DEPARTMENT_ID INNER JOIN
                      stock_defect_status ON stock_out.DEFECT_STATUS_ID = stock_defect_status.DEFECT_STATUS_ID
WHERE     (stock_out.DEL_FLG = 0) AND (stock_out.STOCK_OUT_DATE >= @FromDate) AND (stock_out.STOCK_OUT_DATE <= @ToDate)
GROUP BY stock_out.STOCKOUT_ID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@FromDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_OUT_DATE";
            this._commandCollection[0].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ToDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Datetime;
            param.IsNullable = true;
            param.SourceColumn = "STOCK_OUT_DATE";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.confirm_stock_outDataTable dataTable, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.confirm_stock_outDataTable GetData(global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MasterDB.confirm_stock_outDataTable dataTable = new MasterDB.confirm_stock_outDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class confirm_stock_out_detailTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public confirm_stock_out_detailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "confirm_stock_out_detail";
            tableMapping.ColumnMappings.Add("STOCK_OUT_DETAIL_ID", "STOCK_OUT_DETAIL_ID");
            tableMapping.ColumnMappings.Add("STOCKOUT_ID", "STOCKOUT_ID");
            tableMapping.ColumnMappings.Add("PRODUCT_ID", "PRODUCT_ID");
            tableMapping.ColumnMappings.Add("PRODUCT_MASTER_ID", "PRODUCT_MASTER_ID");
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY");
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE");
            tableMapping.ColumnMappings.Add("CREATE_ID", "CREATE_ID");
            tableMapping.ColumnMappings.Add("UPDATE_DATE", "UPDATE_DATE");
            tableMapping.ColumnMappings.Add("UPDATE_ID", "UPDATE_ID");
            tableMapping.ColumnMappings.Add("EXCLUSIVE_KEY", "EXCLUSIVE_KEY");
            tableMapping.ColumnMappings.Add("DEL_FLG", "DEL_FLG");
            tableMapping.ColumnMappings.Add("DEFECT_STATUS_ID", "DEFECT_STATUS_ID");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("GOOD_QUANTITY", "GOOD_QUANTITY");
            tableMapping.ColumnMappings.Add("ERROR_QUANTITY", "ERROR_QUANTITY");
            tableMapping.ColumnMappings.Add("DAMAGE_QUANTITY", "DAMAGE_QUANTITY");
            tableMapping.ColumnMappings.Add("LOST_QUANTITY", "LOST_QUANTITY");
            tableMapping.ColumnMappings.Add("UNCONFIRM_QUANTITY", "UNCONFIRM_QUANTITY");
            tableMapping.ColumnMappings.Add("PRODUCT_NAME", "PRODUCT_NAME");
            tableMapping.ColumnMappings.Add("COLOR_NAME", "COLOR_NAME");
            tableMapping.ColumnMappings.Add("SIZE_NAME", "SIZE_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::AppFrameClient.Properties.Settings.Default.posConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        stock_out_detail.STOCK_OUT_DETAIL_ID, stock_out_detail.STOCKOUT_ID, stock_out_detail.PRODUCT_ID, stock_out_detail.PRODUCT_MASTER_ID, 
                         stock_out_detail.QUANTITY, stock_out_detail.CREATE_DATE, stock_out_detail.CREATE_ID, stock_out_detail.UPDATE_DATE, stock_out_detail.UPDATE_ID, 
                         stock_out_detail.EXCLUSIVE_KEY, stock_out_detail.DEL_FLG, stock_out_detail.DEFECT_STATUS_ID, stock_out_detail.DESCRIPTION, 
                         stock_out_detail.GOOD_QUANTITY, stock_out_detail.ERROR_QUANTITY, stock_out_detail.DAMAGE_QUANTITY, stock_out_detail.LOST_QUANTITY, 
                         stock_out_detail.UNCONFIRM_QUANTITY, product_master.PRODUCT_NAME, product_color.COLOR_NAME, product_size.SIZE_NAME
FROM            stock_out INNER JOIN
                         stock_out_detail ON stock_out.STOCKOUT_ID = stock_out_detail.STOCKOUT_ID INNER JOIN
                         product ON stock_out_detail.PRODUCT_ID = product.PRODUCT_ID INNER JOIN
                         product_master ON stock_out_detail.PRODUCT_MASTER_ID = product_master.PRODUCT_MASTER_ID INNER JOIN
                         product_color ON product_master.COLOR_ID = product_color.COLOR_ID INNER JOIN
                         product_size ON product_master.SIZE_ID = product_size.SIZE_ID
WHERE        (stock_out_detail.STOCKOUT_ID = @StockOutId)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@StockOutId";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "STOCKOUT_ID";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MasterDB.confirm_stock_out_detailDataTable dataTable, int StockOutId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StockOutId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MasterDB.confirm_stock_out_detailDataTable GetData(int StockOutId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StockOutId));
            MasterDB.confirm_stock_out_detailDataTable dataTable = new MasterDB.confirm_stock_out_detailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private product_sizeTableAdapter _product_sizeTableAdapter;
        
        private product_colorTableAdapter _product_colorTableAdapter;
        
        private product_typeTableAdapter _product_typeTableAdapter;
        
        private product_masterTableAdapter _product_masterTableAdapter;
        
        private productTableAdapter _productTableAdapter;
        
        private confirm_stock_inTableAdapter _confirm_stock_inTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public product_sizeTableAdapter product_sizeTableAdapter {
            get {
                return this._product_sizeTableAdapter;
            }
            set {
                this._product_sizeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public product_colorTableAdapter product_colorTableAdapter {
            get {
                return this._product_colorTableAdapter;
            }
            set {
                this._product_colorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public product_typeTableAdapter product_typeTableAdapter {
            get {
                return this._product_typeTableAdapter;
            }
            set {
                this._product_typeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public product_masterTableAdapter product_masterTableAdapter {
            get {
                return this._product_masterTableAdapter;
            }
            set {
                this._product_masterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public productTableAdapter productTableAdapter {
            get {
                return this._productTableAdapter;
            }
            set {
                this._productTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public confirm_stock_inTableAdapter confirm_stock_inTableAdapter {
            get {
                return this._confirm_stock_inTableAdapter;
            }
            set {
                this._confirm_stock_inTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._product_sizeTableAdapter != null) 
                            && (this._product_sizeTableAdapter.Connection != null))) {
                    return this._product_sizeTableAdapter.Connection;
                }
                if (((this._product_colorTableAdapter != null) 
                            && (this._product_colorTableAdapter.Connection != null))) {
                    return this._product_colorTableAdapter.Connection;
                }
                if (((this._product_typeTableAdapter != null) 
                            && (this._product_typeTableAdapter.Connection != null))) {
                    return this._product_typeTableAdapter.Connection;
                }
                if (((this._product_masterTableAdapter != null) 
                            && (this._product_masterTableAdapter.Connection != null))) {
                    return this._product_masterTableAdapter.Connection;
                }
                if (((this._productTableAdapter != null) 
                            && (this._productTableAdapter.Connection != null))) {
                    return this._productTableAdapter.Connection;
                }
                if (((this._confirm_stock_inTableAdapter != null) 
                            && (this._confirm_stock_inTableAdapter.Connection != null))) {
                    return this._confirm_stock_inTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._product_sizeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._product_colorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._product_typeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._product_masterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._productTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._confirm_stock_inTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(MasterDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._product_typeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.product_type.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._product_typeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._product_colorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.product_color.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._product_colorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._product_sizeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.product_size.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._product_sizeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._product_masterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.product_master.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._product_masterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._confirm_stock_inTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.confirm_stock_in.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._confirm_stock_inTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._productTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.product.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._productTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(MasterDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._product_typeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.product_type.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._product_typeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._product_colorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.product_color.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._product_colorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._product_sizeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.product_size.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._product_sizeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._product_masterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.product_master.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._product_masterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._confirm_stock_inTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.confirm_stock_in.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._confirm_stock_inTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._productTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.product.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._productTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(MasterDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._productTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.product.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._productTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._confirm_stock_inTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.confirm_stock_in.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._confirm_stock_inTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._product_masterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.product_master.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._product_masterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._product_sizeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.product_size.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._product_sizeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._product_colorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.product_color.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._product_colorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._product_typeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.product_type.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._product_typeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(MasterDB dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._product_sizeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._product_sizeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._product_colorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._product_colorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._product_typeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._product_typeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._product_masterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._product_masterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._productTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._productTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._confirm_stock_inTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._confirm_stock_inTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._product_sizeTableAdapter != null)) {
                    revertConnections.Add(this._product_sizeTableAdapter, this._product_sizeTableAdapter.Connection);
                    this._product_sizeTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._product_sizeTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._product_sizeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._product_sizeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._product_sizeTableAdapter.Adapter);
                    }
                }
                if ((this._product_colorTableAdapter != null)) {
                    revertConnections.Add(this._product_colorTableAdapter, this._product_colorTableAdapter.Connection);
                    this._product_colorTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._product_colorTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._product_colorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._product_colorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._product_colorTableAdapter.Adapter);
                    }
                }
                if ((this._product_typeTableAdapter != null)) {
                    revertConnections.Add(this._product_typeTableAdapter, this._product_typeTableAdapter.Connection);
                    this._product_typeTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._product_typeTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._product_typeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._product_typeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._product_typeTableAdapter.Adapter);
                    }
                }
                if ((this._product_masterTableAdapter != null)) {
                    revertConnections.Add(this._product_masterTableAdapter, this._product_masterTableAdapter.Connection);
                    this._product_masterTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._product_masterTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._product_masterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._product_masterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._product_masterTableAdapter.Adapter);
                    }
                }
                if ((this._productTableAdapter != null)) {
                    revertConnections.Add(this._productTableAdapter, this._productTableAdapter.Connection);
                    this._productTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._productTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._productTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._productTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._productTableAdapter.Adapter);
                    }
                }
                if ((this._confirm_stock_inTableAdapter != null)) {
                    revertConnections.Add(this._confirm_stock_inTableAdapter, this._confirm_stock_inTableAdapter.Connection);
                    this._confirm_stock_inTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._confirm_stock_inTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._confirm_stock_inTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._confirm_stock_inTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._confirm_stock_inTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._product_sizeTableAdapter != null)) {
                    this._product_sizeTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._product_sizeTableAdapter]));
                    this._product_sizeTableAdapter.Transaction = null;
                }
                if ((this._product_colorTableAdapter != null)) {
                    this._product_colorTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._product_colorTableAdapter]));
                    this._product_colorTableAdapter.Transaction = null;
                }
                if ((this._product_typeTableAdapter != null)) {
                    this._product_typeTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._product_typeTableAdapter]));
                    this._product_typeTableAdapter.Transaction = null;
                }
                if ((this._product_masterTableAdapter != null)) {
                    this._product_masterTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._product_masterTableAdapter]));
                    this._product_masterTableAdapter.Transaction = null;
                }
                if ((this._productTableAdapter != null)) {
                    this._productTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._productTableAdapter]));
                    this._productTableAdapter.Transaction = null;
                }
                if ((this._confirm_stock_inTableAdapter != null)) {
                    this._confirm_stock_inTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._confirm_stock_inTableAdapter]));
                    this._confirm_stock_inTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591