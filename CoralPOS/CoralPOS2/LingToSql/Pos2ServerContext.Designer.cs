//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 6/21/2010 9:13:37 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

namespace LinqToSql.ServerContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "POS2")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class Pos2ServerContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(Pos2ServerContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertActiveDept(ActiveDept instance);
        partial void UpdateActiveDept(ActiveDept instance);
        partial void DeleteActiveDept(ActiveDept instance);
        partial void InsertBlkIn(BlkIn instance);
        partial void UpdateBlkIn(BlkIn instance);
        partial void DeleteBlkIn(BlkIn instance);
        partial void InsertBlkInCost(BlkInCost instance);
        partial void UpdateBlkInCost(BlkInCost instance);
        partial void DeleteBlkInCost(BlkInCost instance);
        partial void InsertBlkInDet(BlkInDet instance);
        partial void UpdateBlkInDet(BlkInDet instance);
        partial void DeleteBlkInDet(BlkInDet instance);
        partial void InsertCashIoTran(CashIoTran instance);
        partial void UpdateCashIoTran(CashIoTran instance);
        partial void DeleteCashIoTran(CashIoTran instance);
        partial void InsertCat(Cat instance);
        partial void UpdateCat(Cat instance);
        partial void DeleteCat(Cat instance);
        partial void InsertContract(Contract instance);
        partial void UpdateContract(Contract instance);
        partial void DeleteContract(Contract instance);
        partial void InsertCoupon(Coupon instance);
        partial void UpdateCoupon(Coupon instance);
        partial void DeleteCoupon(Coupon instance);
        partial void InsertCouponTyp(CouponTyp instance);
        partial void UpdateCouponTyp(CouponTyp instance);
        partial void DeleteCouponTyp(CouponTyp instance);
        partial void InsertCtry(Ctry instance);
        partial void UpdateCtry(Ctry instance);
        partial void DeleteCtry(Ctry instance);
        partial void InsertCust(Cust instance);
        partial void UpdateCust(Cust instance);
        partial void DeleteCust(Cust instance);
        partial void InsertCustDet(CustDet instance);
        partial void UpdateCustDet(CustDet instance);
        partial void DeleteCustDet(CustDet instance);
        partial void InsertDept(Dept instance);
        partial void UpdateDept(Dept instance);
        partial void DeleteDept(Dept instance);
        partial void InsertDeptCost(DeptCost instance);
        partial void UpdateDeptCost(DeptCost instance);
        partial void DeleteDeptCost(DeptCost instance);
        partial void InsertDeptMng(DeptMng instance);
        partial void UpdateDeptMng(DeptMng instance);
        partial void DeleteDeptMng(DeptMng instance);
        partial void InsertDeptPo(DeptPo instance);
        partial void UpdateDeptPo(DeptPo instance);
        partial void DeleteDeptPo(DeptPo instance);
        partial void InsertDeptPoDet(DeptPoDet instance);
        partial void UpdateDeptPoDet(DeptPoDet instance);
        partial void DeleteDeptPoDet(DeptPoDet instance);
        partial void InsertDeptPoDetLog(DeptPoDetLog instance);
        partial void UpdateDeptPoDetLog(DeptPoDetLog instance);
        partial void DeleteDeptPoDetLog(DeptPoDetLog instance);
        partial void InsertDeptPoLog(DeptPoLog instance);
        partial void UpdateDeptPoLog(DeptPoLog instance);
        partial void DeleteDeptPoLog(DeptPoLog instance);
        partial void InsertDeptPoPromo(DeptPoPromo instance);
        partial void UpdateDeptPoPromo(DeptPoPromo instance);
        partial void DeleteDeptPoPromo(DeptPoPromo instance);
        partial void InsertDeptPrmtn(DeptPrmtn instance);
        partial void UpdateDeptPrmtn(DeptPrmtn instance);
        partial void DeleteDeptPrmtn(DeptPrmtn instance);
        partial void InsertDeptRet(DeptRet instance);
        partial void UpdateDeptRet(DeptRet instance);
        partial void DeleteDeptRet(DeptRet instance);
        partial void InsertDeptRetCost(DeptRetCost instance);
        partial void UpdateDeptRetCost(DeptRetCost instance);
        partial void DeleteDeptRetCost(DeptRetCost instance);
        partial void InsertDeptRetDet(DeptRetDet instance);
        partial void UpdateDeptRetDet(DeptRetDet instance);
        partial void DeleteDeptRetDet(DeptRetDet instance);
        partial void InsertDeptRetPo(DeptRetPo instance);
        partial void UpdateDeptRetPo(DeptRetPo instance);
        partial void DeleteDeptRetPo(DeptRetPo instance);
        partial void InsertDeptStk(DeptStk instance);
        partial void UpdateDeptStk(DeptStk instance);
        partial void DeleteDeptStk(DeptStk instance);
        partial void InsertDeptStkHis(DeptStkHis instance);
        partial void UpdateDeptStkHis(DeptStkHis instance);
        partial void DeleteDeptStkHis(DeptStkHis instance);
        partial void InsertDeptStkIn(DeptStkIn instance);
        partial void UpdateDeptStkIn(DeptStkIn instance);
        partial void DeleteDeptStkIn(DeptStkIn instance);
        partial void InsertDeptStkInCst(DeptStkInCst instance);
        partial void UpdateDeptStkInCst(DeptStkInCst instance);
        partial void DeleteDeptStkInCst(DeptStkInCst instance);
        partial void InsertDeptStkInDet(DeptStkInDet instance);
        partial void UpdateDeptStkInDet(DeptStkInDet instance);
        partial void DeleteDeptStkInDet(DeptStkInDet instance);
        partial void InsertDeptStkInHis(DeptStkInHis instance);
        partial void UpdateDeptStkInHis(DeptStkInHis instance);
        partial void DeleteDeptStkInHis(DeptStkInHis instance);
        partial void InsertDeptStkOut(DeptStkOut instance);
        partial void UpdateDeptStkOut(DeptStkOut instance);
        partial void DeleteDeptStkOut(DeptStkOut instance);
        partial void InsertDeptStkOutCst(DeptStkOutCst instance);
        partial void UpdateDeptStkOutCst(DeptStkOutCst instance);
        partial void DeleteDeptStkOutCst(DeptStkOutCst instance);
        partial void InsertDeptStkOutDet(DeptStkOutDet instance);
        partial void UpdateDeptStkOutDet(DeptStkOutDet instance);
        partial void DeleteDeptStkOutDet(DeptStkOutDet instance);
        partial void InsertDeptStkTempValid(DeptStkTempValid instance);
        partial void UpdateDeptStkTempValid(DeptStkTempValid instance);
        partial void DeleteDeptStkTempValid(DeptStkTempValid instance);
        partial void InsertDeptStkTempValidSave(DeptStkTempValidSave instance);
        partial void UpdateDeptStkTempValidSave(DeptStkTempValidSave instance);
        partial void DeleteDeptStkTempValidSave(DeptStkTempValidSave instance);
        partial void InsertDeptTimeline(DeptTimeline instance);
        partial void UpdateDeptTimeline(DeptTimeline instance);
        partial void DeleteDeptTimeline(DeptTimeline instance);
        partial void InsertDistbtor(Distbtor instance);
        partial void UpdateDistbtor(Distbtor instance);
        partial void DeleteDistbtor(Distbtor instance);
        partial void InsertEmp(Emp instance);
        partial void UpdateEmp(Emp instance);
        partial void DeleteEmp(Emp instance);
        partial void InsertEmpDayoff(EmpDayoff instance);
        partial void UpdateEmpDayoff(EmpDayoff instance);
        partial void DeleteEmpDayoff(EmpDayoff instance);
        partial void InsertEmpInfo(EmpInfo instance);
        partial void UpdateEmpInfo(EmpInfo instance);
        partial void DeleteEmpInfo(EmpInfo instance);
        partial void InsertEmpMoney(EmpMoney instance);
        partial void UpdateEmpMoney(EmpMoney instance);
        partial void DeleteEmpMoney(EmpMoney instance);
        partial void InsertEmpReward(EmpReward instance);
        partial void UpdateEmpReward(EmpReward instance);
        partial void DeleteEmpReward(EmpReward instance);
        partial void InsertEmpWrkgDay(EmpWrkgDay instance);
        partial void UpdateEmpWrkgDay(EmpWrkgDay instance);
        partial void DeleteEmpWrkgDay(EmpWrkgDay instance);
        partial void InsertExPrdColor(ExPrdColor instance);
        partial void UpdateExPrdColor(ExPrdColor instance);
        partial void DeleteExPrdColor(ExPrdColor instance);
        partial void InsertExPrdSize(ExPrdSize instance);
        partial void UpdateExPrdSize(ExPrdSize instance);
        partial void DeleteExPrdSize(ExPrdSize instance);
        partial void InsertGift(Gift instance);
        partial void UpdateGift(Gift instance);
        partial void DeleteGift(Gift instance);
        partial void InsertMnPrice(MnPrice instance);
        partial void UpdateMnPrice(MnPrice instance);
        partial void DeleteMnPrice(MnPrice instance);
        partial void InsertMnStk(MnStk instance);
        partial void UpdateMnStk(MnStk instance);
        partial void DeleteMnStk(MnStk instance);
        partial void InsertMnStkHis(MnStkHis instance);
        partial void UpdateMnStkHis(MnStkHis instance);
        partial void DeleteMnStkHis(MnStkHis instance);
        partial void InsertMnftr(Mnftr instance);
        partial void UpdateMnftr(Mnftr instance);
        partial void DeleteMnftr(Mnftr instance);
        partial void InsertOtherTransLog(OtherTransLog instance);
        partial void UpdateOtherTransLog(OtherTransLog instance);
        partial void DeleteOtherTransLog(OtherTransLog instance);
        partial void InsertPblshCpn(PblshCpn instance);
        partial void UpdatePblshCpn(PblshCpn instance);
        partial void DeletePblshCpn(PblshCpn instance);
        partial void InsertPkgr(Pkgr instance);
        partial void UpdatePkgr(Pkgr instance);
        partial void DeletePkgr(Pkgr instance);
        partial void InsertPosLog(PosLog instance);
        partial void UpdatePosLog(PosLog instance);
        partial void DeletePosLog(PosLog instance);
        partial void InsertPosTran(PosTran instance);
        partial void UpdatePosTran(PosTran instance);
        partial void DeletePosTran(PosTran instance);
        partial void InsertPrd(Prd instance);
        partial void UpdatePrd(Prd instance);
        partial void DeletePrd(Prd instance);
        partial void InsertPrdMst(PrdMst instance);
        partial void UpdatePrdMst(PrdMst instance);
        partial void DeletePrdMst(PrdMst instance);
        partial void InsertPrdTyp(PrdTyp instance);
        partial void UpdatePrdTyp(PrdTyp instance);
        partial void DeletePrdTyp(PrdTyp instance);
        partial void InsertPrdUnit(PrdUnit instance);
        partial void UpdatePrdUnit(PrdUnit instance);
        partial void DeletePrdUnit(PrdUnit instance);
        partial void InsertPromo(Promo instance);
        partial void UpdatePromo(Promo instance);
        partial void DeletePromo(Promo instance);
        partial void InsertReicpt(Reicpt instance);
        partial void UpdateReicpt(Reicpt instance);
        partial void DeleteReicpt(Reicpt instance);
        partial void InsertReicptOut(ReicptOut instance);
        partial void UpdateReicptOut(ReicptOut instance);
        partial void DeleteReicptOut(ReicptOut instance);
        partial void InsertReicptOutCst(ReicptOutCst instance);
        partial void UpdateReicptOutCst(ReicptOutCst instance);
        partial void DeleteReicptOutCst(ReicptOutCst instance);
        partial void InsertRetBlkIn(RetBlkIn instance);
        partial void UpdateRetBlkIn(RetBlkIn instance);
        partial void DeleteRetBlkIn(RetBlkIn instance);
        partial void InsertRetPrd(RetPrd instance);
        partial void UpdateRetPrd(RetPrd instance);
        partial void DeleteRetPrd(RetPrd instance);
        partial void InsertRetTran(RetTran instance);
        partial void UpdateRetTran(RetTran instance);
        partial void DeleteRetTran(RetTran instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertSaleTran(SaleTran instance);
        partial void UpdateSaleTran(SaleTran instance);
        partial void DeleteSaleTran(SaleTran instance);
        partial void InsertScheTmplate(ScheTmplate instance);
        partial void UpdateScheTmplate(ScheTmplate instance);
        partial void DeleteScheTmplate(ScheTmplate instance);
        partial void InsertSimPrd(SimPrd instance);
        partial void UpdateSimPrd(SimPrd instance);
        partial void DeleteSimPrd(SimPrd instance);
        partial void InsertStkDefStat(StkDefStat instance);
        partial void UpdateStkDefStat(StkDefStat instance);
        partial void DeleteStkDefStat(StkDefStat instance);
        partial void InsertStkIn(StkIn instance);
        partial void UpdateStkIn(StkIn instance);
        partial void DeleteStkIn(StkIn instance);
        partial void InsertStkInDet(StkInDet instance);
        partial void UpdateStkInDet(StkInDet instance);
        partial void DeleteStkInDet(StkInDet instance);
        partial void InsertStkOut(StkOut instance);
        partial void UpdateStkOut(StkOut instance);
        partial void DeleteStkOut(StkOut instance);
        partial void InsertStkOutCst(StkOutCst instance);
        partial void UpdateStkOutCst(StkOutCst instance);
        partial void DeleteStkOutCst(StkOutCst instance);
        partial void InsertStkOutDet(StkOutDet instance);
        partial void UpdateStkOutDet(StkOutDet instance);
        partial void DeleteStkOutDet(StkOutDet instance);
        partial void InsertStkOutTmp(StkOutTmp instance);
        partial void UpdateStkOutTmp(StkOutTmp instance);
        partial void DeleteStkOutTmp(StkOutTmp instance);
        partial void InsertSup(Sup instance);
        partial void UpdateSup(Sup instance);
        partial void DeleteSup(Sup instance);
        partial void InsertSyncStatus(SyncStatus instance);
        partial void UpdateSyncStatus(SyncStatus instance);
        partial void DeleteSyncStatus(SyncStatus instance);
        partial void InsertTax(Tax instance);
        partial void UpdateTax(Tax instance);
        partial void DeleteTax(Tax instance);
        partial void InsertTran(Tran instance);
        partial void UpdateTran(Tran instance);
        partial void DeleteTran(Tran instance);
        partial void InsertUsrInfo(UsrInfo instance);
        partial void UpdateUsrInfo(UsrInfo instance);
        partial void DeleteUsrInfo(UsrInfo instance);
        partial void InsertUsrRole(UsrRole instance);
        partial void UpdateUsrRole(UsrRole instance);
        partial void DeleteUsrRole(UsrRole instance);
        #endregion

        public Pos2ServerContext() :
        base(@"User Id=pos2;Password=admin;Server=localhost;Direct=True;Sid=XE;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public Pos2ServerContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ServerContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ServerContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pos2ServerContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<ActiveDept> ActiveDepts
        {
            get
            {
                return this.GetTable<ActiveDept>();
            }
        }

        public Devart.Data.Linq.Table<BlkIn> BlkIns
        {
            get
            {
                return this.GetTable<BlkIn>();
            }
        }

        public Devart.Data.Linq.Table<BlkInCost> BlkInCosts
        {
            get
            {
                return this.GetTable<BlkInCost>();
            }
        }

        public Devart.Data.Linq.Table<BlkInDet> BlkInDets
        {
            get
            {
                return this.GetTable<BlkInDet>();
            }
        }

        public Devart.Data.Linq.Table<CashIoTran> CashIoTrans
        {
            get
            {
                return this.GetTable<CashIoTran>();
            }
        }

        public Devart.Data.Linq.Table<Cat> Cats
        {
            get
            {
                return this.GetTable<Cat>();
            }
        }

        public Devart.Data.Linq.Table<Contract> Contracts
        {
            get
            {
                return this.GetTable<Contract>();
            }
        }

        public Devart.Data.Linq.Table<Coupon> Coupons
        {
            get
            {
                return this.GetTable<Coupon>();
            }
        }

        public Devart.Data.Linq.Table<CouponTyp> CouponTyps
        {
            get
            {
                return this.GetTable<CouponTyp>();
            }
        }

        public Devart.Data.Linq.Table<Ctry> Ctries
        {
            get
            {
                return this.GetTable<Ctry>();
            }
        }

        public Devart.Data.Linq.Table<Cust> Custs
        {
            get
            {
                return this.GetTable<Cust>();
            }
        }

        public Devart.Data.Linq.Table<CustDet> CustDets
        {
            get
            {
                return this.GetTable<CustDet>();
            }
        }

        public Devart.Data.Linq.Table<Dept> Depts
        {
            get
            {
                return this.GetTable<Dept>();
            }
        }

        public Devart.Data.Linq.Table<DeptCost> DeptCosts
        {
            get
            {
                return this.GetTable<DeptCost>();
            }
        }

        public Devart.Data.Linq.Table<DeptMng> DeptMngs
        {
            get
            {
                return this.GetTable<DeptMng>();
            }
        }

        public Devart.Data.Linq.Table<DeptPo> DeptPos
        {
            get
            {
                return this.GetTable<DeptPo>();
            }
        }

        public Devart.Data.Linq.Table<DeptPoDet> DeptPoDets
        {
            get
            {
                return this.GetTable<DeptPoDet>();
            }
        }

        public Devart.Data.Linq.Table<DeptPoDetLog> DeptPoDetLogs
        {
            get
            {
                return this.GetTable<DeptPoDetLog>();
            }
        }

        public Devart.Data.Linq.Table<DeptPoLog> DeptPoLogs
        {
            get
            {
                return this.GetTable<DeptPoLog>();
            }
        }

        public Devart.Data.Linq.Table<DeptPoPromo> DeptPoPromos
        {
            get
            {
                return this.GetTable<DeptPoPromo>();
            }
        }

        public Devart.Data.Linq.Table<DeptPrmtn> DeptPrmtns
        {
            get
            {
                return this.GetTable<DeptPrmtn>();
            }
        }

        public Devart.Data.Linq.Table<DeptRet> DeptRets
        {
            get
            {
                return this.GetTable<DeptRet>();
            }
        }

        public Devart.Data.Linq.Table<DeptRetCost> DeptRetCosts
        {
            get
            {
                return this.GetTable<DeptRetCost>();
            }
        }

        public Devart.Data.Linq.Table<DeptRetDet> DeptRetDets
        {
            get
            {
                return this.GetTable<DeptRetDet>();
            }
        }

        public Devart.Data.Linq.Table<DeptRetPo> DeptRetPos
        {
            get
            {
                return this.GetTable<DeptRetPo>();
            }
        }

        public Devart.Data.Linq.Table<DeptStk> DeptStks
        {
            get
            {
                return this.GetTable<DeptStk>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkHis> DeptStkHis
        {
            get
            {
                return this.GetTable<DeptStkHis>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkIn> DeptStkIns
        {
            get
            {
                return this.GetTable<DeptStkIn>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkInCst> DeptStkInCsts
        {
            get
            {
                return this.GetTable<DeptStkInCst>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkInDet> DeptStkInDets
        {
            get
            {
                return this.GetTable<DeptStkInDet>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkInHis> DeptStkInHis
        {
            get
            {
                return this.GetTable<DeptStkInHis>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkOut> DeptStkOuts
        {
            get
            {
                return this.GetTable<DeptStkOut>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkOutCst> DeptStkOutCsts
        {
            get
            {
                return this.GetTable<DeptStkOutCst>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkOutDet> DeptStkOutDets
        {
            get
            {
                return this.GetTable<DeptStkOutDet>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkTempValid> DeptStkTempValids
        {
            get
            {
                return this.GetTable<DeptStkTempValid>();
            }
        }

        public Devart.Data.Linq.Table<DeptStkTempValidSave> DeptStkTempValidSaves
        {
            get
            {
                return this.GetTable<DeptStkTempValidSave>();
            }
        }

        public Devart.Data.Linq.Table<DeptTimeline> DeptTimelines
        {
            get
            {
                return this.GetTable<DeptTimeline>();
            }
        }

        public Devart.Data.Linq.Table<Distbtor> Distbtors
        {
            get
            {
                return this.GetTable<Distbtor>();
            }
        }

        public Devart.Data.Linq.Table<Emp> Emps
        {
            get
            {
                return this.GetTable<Emp>();
            }
        }

        public Devart.Data.Linq.Table<EmpDayoff> EmpDayoffs
        {
            get
            {
                return this.GetTable<EmpDayoff>();
            }
        }

        public Devart.Data.Linq.Table<EmpInfo> EmpInfos
        {
            get
            {
                return this.GetTable<EmpInfo>();
            }
        }

        public Devart.Data.Linq.Table<EmpMoney> EmpMoneys
        {
            get
            {
                return this.GetTable<EmpMoney>();
            }
        }

        public Devart.Data.Linq.Table<EmpReward> EmpRewards
        {
            get
            {
                return this.GetTable<EmpReward>();
            }
        }

        public Devart.Data.Linq.Table<EmpWrkgDay> EmpWrkgDays
        {
            get
            {
                return this.GetTable<EmpWrkgDay>();
            }
        }

        public Devart.Data.Linq.Table<ExPrdColor> ExPrdColors
        {
            get
            {
                return this.GetTable<ExPrdColor>();
            }
        }

        public Devart.Data.Linq.Table<ExPrdSize> ExPrdSizes
        {
            get
            {
                return this.GetTable<ExPrdSize>();
            }
        }

        public Devart.Data.Linq.Table<Gift> Gifts
        {
            get
            {
                return this.GetTable<Gift>();
            }
        }

        public Devart.Data.Linq.Table<MnPrice> MnPrices
        {
            get
            {
                return this.GetTable<MnPrice>();
            }
        }

        public Devart.Data.Linq.Table<MnStk> MnStks
        {
            get
            {
                return this.GetTable<MnStk>();
            }
        }

        public Devart.Data.Linq.Table<MnStkHis> MnStkHis
        {
            get
            {
                return this.GetTable<MnStkHis>();
            }
        }

        public Devart.Data.Linq.Table<Mnftr> Mnftrs
        {
            get
            {
                return this.GetTable<Mnftr>();
            }
        }

        public Devart.Data.Linq.Table<OtherTransLog> OtherTransLogs
        {
            get
            {
                return this.GetTable<OtherTransLog>();
            }
        }

        public Devart.Data.Linq.Table<PblshCpn> PblshCpns
        {
            get
            {
                return this.GetTable<PblshCpn>();
            }
        }

        public Devart.Data.Linq.Table<Pkgr> Pkgrs
        {
            get
            {
                return this.GetTable<Pkgr>();
            }
        }

        public Devart.Data.Linq.Table<PosLog> PosLogs
        {
            get
            {
                return this.GetTable<PosLog>();
            }
        }

        public Devart.Data.Linq.Table<PosTran> PosTrans
        {
            get
            {
                return this.GetTable<PosTran>();
            }
        }

        public Devart.Data.Linq.Table<Prd> Prds
        {
            get
            {
                return this.GetTable<Prd>();
            }
        }

        public Devart.Data.Linq.Table<PrdMst> PrdMsts
        {
            get
            {
                return this.GetTable<PrdMst>();
            }
        }

        public Devart.Data.Linq.Table<PrdTyp> PrdTyps
        {
            get
            {
                return this.GetTable<PrdTyp>();
            }
        }

        public Devart.Data.Linq.Table<PrdUnit> PrdUnits
        {
            get
            {
                return this.GetTable<PrdUnit>();
            }
        }

        public Devart.Data.Linq.Table<Promo> Promos
        {
            get
            {
                return this.GetTable<Promo>();
            }
        }

        public Devart.Data.Linq.Table<Reicpt> Reicpts
        {
            get
            {
                return this.GetTable<Reicpt>();
            }
        }

        public Devart.Data.Linq.Table<ReicptOut> ReicptOuts
        {
            get
            {
                return this.GetTable<ReicptOut>();
            }
        }

        public Devart.Data.Linq.Table<ReicptOutCst> ReicptOutCsts
        {
            get
            {
                return this.GetTable<ReicptOutCst>();
            }
        }

        public Devart.Data.Linq.Table<RetBlkIn> RetBlkIns
        {
            get
            {
                return this.GetTable<RetBlkIn>();
            }
        }

        public Devart.Data.Linq.Table<RetPrd> RetPrds
        {
            get
            {
                return this.GetTable<RetPrd>();
            }
        }

        public Devart.Data.Linq.Table<RetTran> RetTrans
        {
            get
            {
                return this.GetTable<RetTran>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<SaleTran> SaleTrans
        {
            get
            {
                return this.GetTable<SaleTran>();
            }
        }

        public Devart.Data.Linq.Table<ScheTmplate> ScheTmplates
        {
            get
            {
                return this.GetTable<ScheTmplate>();
            }
        }

        public Devart.Data.Linq.Table<SimPrd> SimPrds
        {
            get
            {
                return this.GetTable<SimPrd>();
            }
        }

        public Devart.Data.Linq.Table<StkDefStat> StkDefStats
        {
            get
            {
                return this.GetTable<StkDefStat>();
            }
        }

        public Devart.Data.Linq.Table<StkIn> StkIns
        {
            get
            {
                return this.GetTable<StkIn>();
            }
        }

        public Devart.Data.Linq.Table<StkInDet> StkInDets
        {
            get
            {
                return this.GetTable<StkInDet>();
            }
        }

        public Devart.Data.Linq.Table<StkOut> StkOuts
        {
            get
            {
                return this.GetTable<StkOut>();
            }
        }

        public Devart.Data.Linq.Table<StkOutCst> StkOutCsts
        {
            get
            {
                return this.GetTable<StkOutCst>();
            }
        }

        public Devart.Data.Linq.Table<StkOutDet> StkOutDets
        {
            get
            {
                return this.GetTable<StkOutDet>();
            }
        }

        public Devart.Data.Linq.Table<StkOutTmp> StkOutTmps
        {
            get
            {
                return this.GetTable<StkOutTmp>();
            }
        }

        public Devart.Data.Linq.Table<Sup> Sups
        {
            get
            {
                return this.GetTable<Sup>();
            }
        }

        public Devart.Data.Linq.Table<SyncStatus> SyncStatus
        {
            get
            {
                return this.GetTable<SyncStatus>();
            }
        }

        public Devart.Data.Linq.Table<Tax> Taxes
        {
            get
            {
                return this.GetTable<Tax>();
            }
        }

        public Devart.Data.Linq.Table<Tran> Trans
        {
            get
            {
                return this.GetTable<Tran>();
            }
        }

        public Devart.Data.Linq.Table<UsrInfo> UsrInfos
        {
            get
            {
                return this.GetTable<UsrInfo>();
            }
        }

        public Devart.Data.Linq.Table<UsrRole> UsrRoles
        {
            get
            {
                return this.GetTable<UsrRole>();
            }
        }
    }


    /// <summary>
    /// There are no comments for ActiveDept in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_ACTIVE_DEPT")]
    [DataContract()]
    public partial class ActiveDept : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _DepartmentName;

        private System.Nullable<int> _Active;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        partial void OnActiveChanging(System.Nullable<int> value);
        partial void OnActiveChanged();
        #endregion

        public ActiveDept()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_NAME", Storage = "_DepartmentName", DbType = "VARCHAR2(50)")]
        [DataMember(Order=2)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"ACTIVE", Storage = "_Active", DbType = "NUMBER(1)")]
        [DataMember(Order=3)]
        public System.Nullable<int> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for BlkIn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_BLK_IN")]
    [DataContract()]
    public partial class BlkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _BlockId;

        private string _BlockName;

        private System.Nullable<System.DateTime> _ImportDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(double value);
        partial void OnBlockIdChanged();
        partial void OnBlockNameChanging(string value);
        partial void OnBlockNameChanged();
        partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
        partial void OnImportDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public BlkIn()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockName in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_NAME", Storage = "_BlockName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string BlockName
        {
            get
            {
                return this._BlockName;
            }
            set
            {
                if (this._BlockName != value)
                {
                    this.OnBlockNameChanging(value);
                    this.SendPropertyChanging();
                    this._BlockName = value;
                    this.SendPropertyChanged("BlockName");
                    this.OnBlockNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportDate in the schema.
        /// </summary>
        [Column(Name = @"IMPORT_DATE", Storage = "_ImportDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> ImportDate
        {
            get
            {
                return this._ImportDate;
            }
            set
            {
                if (this._ImportDate != value)
                {
                    this.OnImportDateChanging(value);
                    this.SendPropertyChanging();
                    this._ImportDate = value;
                    this.SendPropertyChanged("ImportDate");
                    this.OnImportDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for BlkInCost in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_BLK_IN_COST")]
    [DataContract()]
    public partial class BlkInCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _BlockId;

        private double _CostType;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(double value);
        partial void OnBlockIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public BlkInCost()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for BlkInDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_BLK_IN_DET")]
    [DataContract()]
    public partial class BlkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _BlockId;

        private string _BlockDetailId;

        private string _DetailValue;

        private System.Nullable<double> _ManufactureId;

        private System.Nullable<double> _PackagerId;

        private System.Nullable<double> _CountryId;

        private System.Nullable<double> _SupplierId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _StockInId;

        private System.Nullable<System.DateTime> _ImportDate;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockIdChanging(double value);
        partial void OnBlockIdChanged();
        partial void OnBlockDetailIdChanging(string value);
        partial void OnBlockDetailIdChanged();
        partial void OnDetailValueChanging(string value);
        partial void OnDetailValueChanged();
        partial void OnManufactureIdChanging(System.Nullable<double> value);
        partial void OnManufactureIdChanged();
        partial void OnPackagerIdChanging(System.Nullable<double> value);
        partial void OnPackagerIdChanged();
        partial void OnCountryIdChanging(System.Nullable<double> value);
        partial void OnCountryIdChanged();
        partial void OnSupplierIdChanging(System.Nullable<double> value);
        partial void OnSupplierIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInIdChanging(System.Nullable<double> value);
        partial void OnStockInIdChanged();
        partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
        partial void OnImportDateChanged();
        #endregion

        public BlkInDet()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DetailValue in the schema.
        /// </summary>
        [Column(Name = @"DETAIL_VALUE", Storage = "_DetailValue", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=3)]
        public string DetailValue
        {
            get
            {
                return this._DetailValue;
            }
            set
            {
                if (this._DetailValue != value)
                {
                    this.OnDetailValueChanging(value);
                    this.SendPropertyChanging();
                    this._DetailValue = value;
                    this.SendPropertyChanged("DetailValue");
                    this.OnDetailValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufactureId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURE_ID", Storage = "_ManufactureId", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> ManufactureId
        {
            get
            {
                return this._ManufactureId;
            }
            set
            {
                if (this._ManufactureId != value)
                {
                    this.OnManufactureIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufactureId = value;
                    this.SendPropertyChanged("ManufactureId");
                    this.OnManufactureIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportDate in the schema.
        /// </summary>
        [Column(Name = @"IMPORT_DATE", Storage = "_ImportDate", DbType = "DATE")]
        [DataMember(Order=20)]
        public System.Nullable<System.DateTime> ImportDate
        {
            get
            {
                return this._ImportDate;
            }
            set
            {
                if (this._ImportDate != value)
                {
                    this.OnImportDateChanging(value);
                    this.SendPropertyChanging();
                    this._ImportDate = value;
                    this.SendPropertyChanged("ImportDate");
                    this.OnImportDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for CashIoTran in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CASH_IO_TRANS")]
    [DataContract()]
    public partial class CashIoTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _CashInOutTransactionId;

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<decimal> _Amount;

        private System.Nullable<double> _ReasonCode;

        private string _CustomerId;

        private string _Comment;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCashInOutTransactionIdChanging(string value);
        partial void OnCashInOutTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnAmountChanging(System.Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnReasonCodeChanging(System.Nullable<double> value);
        partial void OnReasonCodeChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CashIoTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CashInOutTransactionId in the schema.
        /// </summary>
        [Column(Name = @"CASH_IN_OUT_TRANSACTION_ID", Storage = "_CashInOutTransactionId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string CashInOutTransactionId
        {
            get
            {
                return this._CashInOutTransactionId;
            }
            set
            {
                if (this._CashInOutTransactionId != value)
                {
                    this.OnCashInOutTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashInOutTransactionId = value;
                    this.SendPropertyChanged("CashInOutTransactionId");
                    this.OnCashInOutTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", CanBeNull = false, DbType = "VARCHAR2(48) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"STORE_ID", Storage = "_StoreId", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        [DataMember(Order=3)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"REGISTER_ID", Storage = "_RegisterId", CanBeNull = false, DbType = "VARCHAR2(8) NOT NULL")]
        [DataMember(Order=4)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"CASHIER_ID", Storage = "_CashierId", CanBeNull = false, DbType = "VARCHAR2(24) NOT NULL")]
        [DataMember(Order=5)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"AMOUNT", Storage = "_Amount", DbType = "FLOAT(126)")]
        [DataMember(Order=6)]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReasonCode in the schema.
        /// </summary>
        [Column(Name = @"REASON_CODE", Storage = "_ReasonCode", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ReasonCode
        {
            get
            {
                return this._ReasonCode;
            }
            set
            {
                if (this._ReasonCode != value)
                {
                    this.OnReasonCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ReasonCode = value;
                    this.SendPropertyChanged("ReasonCode");
                    this.OnReasonCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", DbType = "VARCHAR2(60)")]
        [DataMember(Order=8)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        /// <LongDescription>
        /// ORIGINAL NAME:Comment
        /// </LongDescription>
        [Column(Name = @"COMMENT_", Storage = "_Comment", DbType = "VARCHAR2(4000)")]
        [DataMember(Order=9)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Cat in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CAT")]
    [DataContract()]
    public partial class Cat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CategoryId;

        private System.Nullable<double> _ParentCategoryId;

        private string _CategoryName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(double value);
        partial void OnCategoryIdChanged();
        partial void OnParentCategoryIdChanging(System.Nullable<double> value);
        partial void OnParentCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Cat()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentCategoryId in the schema.
        /// </summary>
        [Column(Name = @"PARENT_CATEGORY_ID", Storage = "_ParentCategoryId", DbType = "NUMBER(10)")]
        [DataMember(Order=2)]
        public System.Nullable<double> ParentCategoryId
        {
            get
            {
                return this._ParentCategoryId;
            }
            set
            {
                if (this._ParentCategoryId != value)
                {
                    this.OnParentCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCategoryId = value;
                    this.SendPropertyChanged("ParentCategoryId");
                    this.OnParentCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_NAME", Storage = "_CategoryName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Contract in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CONTRACT")]
    [DataContract()]
    public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ContractId;

        private double _DepartmentId;

        private string _ContractName;

        private System.Nullable<double> _ContractType;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private string _EmployeeId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Emp> _Emp;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContractIdChanging(double value);
        partial void OnContractIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnContractNameChanging(string value);
        partial void OnContractNameChanged();
        partial void OnContractTypeChanging(System.Nullable<double> value);
        partial void OnContractTypeChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Contract()
        {
            this.Initialize();
            this._Emp  = default(EntityRef<Emp>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ContractId in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_ID", Storage = "_ContractId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ContractId
        {
            get
            {
                return this._ContractId;
            }
            set
            {
                if (this._ContractId != value)
                {
                    this.OnContractIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContractId = value;
                    this.SendPropertyChanged("ContractId");
                    this.OnContractIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractName in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_NAME", Storage = "_ContractName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string ContractName
        {
            get
            {
                return this._ContractName;
            }
            set
            {
                if (this._ContractName != value)
                {
                    this.OnContractNameChanging(value);
                    this.SendPropertyChanging();
                    this._ContractName = value;
                    this.SendPropertyChanged("ContractName");
                    this.OnContractNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractType in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_TYPE", Storage = "_ContractType", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> ContractType
        {
            get
            {
                return this._ContractType;
            }
            set
            {
                if (this._ContractType != value)
                {
                    this.OnContractTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ContractType = value;
                    this.SendPropertyChanged("ContractType");
                    this.OnContractTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=7)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Emp_Contract", Storage="_Emp", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId", IsForeignKey=true)]
        public Emp Emp
        {
            get
            {
                return this._Emp.Entity;
            }
            set
            {
                Emp previousValue = this._Emp.Entity;
                if ((previousValue != value) || (this._Emp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Emp.Entity = null;
                        previousValue.Contracts.Remove(this);
                    }
                    this._Emp.Entity = value;
                    if (value != null)
                    {
                        value.Contracts.Add(this);
                        this._EmployeeId = value.EmployeeId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._EmployeeId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Emp");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Emp = default(EntityRef<Emp>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Coupon in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_COUPON")]
    [DataContract()]
    public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CouponId;

        private string _CouponName;

        private System.Nullable<double> _CouponType;

        private System.Nullable<double> _DiscountValue;

        private System.Nullable<double> _DiscountPercent;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<CouponTyp> _CouponTyp;

        private EntitySet<PblshCpn> _PblshCpns;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(double value);
        partial void OnCouponIdChanged();
        partial void OnCouponNameChanging(string value);
        partial void OnCouponNameChanged();
        partial void OnCouponTypeChanging(System.Nullable<double> value);
        partial void OnCouponTypeChanged();
        partial void OnDiscountValueChanging(System.Nullable<double> value);
        partial void OnDiscountValueChanged();
        partial void OnDiscountPercentChanging(System.Nullable<double> value);
        partial void OnDiscountPercentChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Coupon()
        {
            this.Initialize();
            this._CouponTyp  = default(EntityRef<CouponTyp>);
            this._PblshCpns = new EntitySet<PblshCpn>(new Action<PblshCpn>(this.attach_PblshCpns), new Action<PblshCpn>(this.detach_PblshCpns));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_ID", Storage = "_CouponId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponName in the schema.
        /// </summary>
        [Column(Name = @"COUPON_NAME", Storage = "_CouponName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string CouponName
        {
            get
            {
                return this._CouponName;
            }
            set
            {
                if (this._CouponName != value)
                {
                    this.OnCouponNameChanging(value);
                    this.SendPropertyChanging();
                    this._CouponName = value;
                    this.SendPropertyChanged("CouponName");
                    this.OnCouponNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponType in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE", Storage = "_CouponType", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> CouponType
        {
            get
            {
                return this._CouponType;
            }
            set
            {
                if (this._CouponType != value)
                {
                    if (this._CouponTyp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCouponTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CouponType = value;
                    this.SendPropertyChanged("CouponType");
                    this.OnCouponTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountValue in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_VALUE", Storage = "_DiscountValue", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> DiscountValue
        {
            get
            {
                return this._DiscountValue;
            }
            set
            {
                if (this._DiscountValue != value)
                {
                    this.OnDiscountValueChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountValue = value;
                    this.SendPropertyChanged("DiscountValue");
                    this.OnDiscountValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPercent in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PERCENT", Storage = "_DiscountPercent", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> DiscountPercent
        {
            get
            {
                return this._DiscountPercent;
            }
            set
            {
                if (this._DiscountPercent != value)
                {
                    this.OnDiscountPercentChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPercent = value;
                    this.SendPropertyChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CouponTyp_Coupon", Storage="_CouponTyp", ThisKey="CouponType", IsForeignKey=true)]
        public CouponTyp CouponTyp
        {
            get
            {
                return this._CouponTyp.Entity;
            }
            set
            {
                CouponTyp previousValue = this._CouponTyp.Entity;
                if ((previousValue != value) || (this._CouponTyp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CouponTyp.Entity = null;
                        previousValue.Coupons.Remove(this);
                    }
                    this._CouponTyp.Entity = value;
                    if (value != null)
                    {
                        value.Coupons.Add(this);
                        this._CouponType = value.CouponTypeId;
                    }
                    else
                    {
                        this._CouponType = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("CouponTyp");
                }
            }
        }

        [Association(Name="Coupon_PblshCpn", Storage="_PblshCpns", OtherKey="CouponId")]
        [DataMember(Order=17, EmitDefaultValue=false)]
        public EntitySet<PblshCpn> PblshCpns
        {
            get
            {
                if ((this.serializing 
                  && (this._PblshCpns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._PblshCpns;
            }
            set
            {
                this._PblshCpns.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PblshCpns(PblshCpn entity)
        {
            this.SendPropertyChanging("PblshCpns");
            entity.Coupon = this;
        }
    
        private void detach_PblshCpns(PblshCpn entity)
        {
            this.SendPropertyChanging("PblshCpns");
            entity.Coupon = null;
        }

        private void Initialize()
        {
            this._CouponTyp = default(EntityRef<CouponTyp>);
            this._PblshCpns = new EntitySet<PblshCpn>(new Action<PblshCpn>(this.attach_PblshCpns), new Action<PblshCpn>(this.detach_PblshCpns));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CouponTyp in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_COUPON_TYP")]
    [DataContract()]
    public partial class CouponTyp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CouponTypeId;

        private string _CouponTypeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<Coupon> _Coupons;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponTypeIdChanging(double value);
        partial void OnCouponTypeIdChanged();
        partial void OnCouponTypeNameChanging(string value);
        partial void OnCouponTypeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public CouponTyp()
        {
            this.Initialize();
            this._Coupons = new EntitySet<Coupon>(new Action<Coupon>(this.attach_Coupons), new Action<Coupon>(this.detach_Coupons));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponTypeId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE_ID", Storage = "_CouponTypeId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CouponTypeId
        {
            get
            {
                return this._CouponTypeId;
            }
            set
            {
                if (this._CouponTypeId != value)
                {
                    this.OnCouponTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponTypeId = value;
                    this.SendPropertyChanged("CouponTypeId");
                    this.OnCouponTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CouponTypeName in the schema.
        /// </summary>
        [Column(Name = @"COUPON_TYPE_NAME", Storage = "_CouponTypeName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string CouponTypeName
        {
            get
            {
                return this._CouponTypeName;
            }
            set
            {
                if (this._CouponTypeName != value)
                {
                    this.OnCouponTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._CouponTypeName = value;
                    this.SendPropertyChanged("CouponTypeName");
                    this.OnCouponTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="CouponTyp_Coupon", Storage="_Coupons", OtherKey="CouponType")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<Coupon> Coupons
        {
            get
            {
                if ((this.serializing 
                  && (this._Coupons.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Coupons;
            }
            set
            {
                this._Coupons.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Coupons(Coupon entity)
        {
            this.SendPropertyChanging("Coupons");
            entity.CouponTyp = this;
        }
    
        private void detach_Coupons(Coupon entity)
        {
            this.SendPropertyChanging("Coupons");
            entity.CouponTyp = null;
        }

        private void Initialize()
        {
            this._Coupons = new EntitySet<Coupon>(new Action<Coupon>(this.attach_Coupons), new Action<Coupon>(this.detach_Coupons));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for Ctry in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CTRY")]
    [DataContract()]
    public partial class Ctry : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CountryId;

        private string _CountryName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCountryIdChanging(double value);
        partial void OnCountryIdChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Ctry()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryName in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_NAME", Storage = "_CountryName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string CountryName
        {
            get
            {
                return this._CountryName;
            }
            set
            {
                if (this._CountryName != value)
                {
                    this.OnCountryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CountryName = value;
                    this.SendPropertyChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Cust in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CUST")]
    [DataContract()]
    public partial class Cust : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CustomerId;

        private string _CustomerName;

        private System.Nullable<double> _MoneySpent;

        private System.Nullable<double> _BuyCount;

        private System.Nullable<System.DateTime> _NearestCome1;

        private System.Nullable<System.DateTime> _NearestCome2;

        private System.Nullable<System.DateTime> _NearestCome3;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<CustDet> _CustDets;

        private EntitySet<DeptPo> _DeptPos;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(double value);
        partial void OnCustomerIdChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnMoneySpentChanging(System.Nullable<double> value);
        partial void OnMoneySpentChanged();
        partial void OnBuyCountChanging(System.Nullable<double> value);
        partial void OnBuyCountChanged();
        partial void OnNearestCome1Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome1Changed();
        partial void OnNearestCome2Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome2Changed();
        partial void OnNearestCome3Changing(System.Nullable<System.DateTime> value);
        partial void OnNearestCome3Changed();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Cust()
        {
            this.Initialize();
            this._CustDets = new EntitySet<CustDet>(new Action<CustDet>(this.attach_CustDets), new Action<CustDet>(this.detach_CustDets));
            this._DeptPos = new EntitySet<DeptPo>(new Action<DeptPo>(this.attach_DeptPos), new Action<DeptPo>(this.detach_DeptPos));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerName in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_NAME", Storage = "_CustomerName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string CustomerName
        {
            get
            {
                return this._CustomerName;
            }
            set
            {
                if (this._CustomerName != value)
                {
                    this.OnCustomerNameChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerName = value;
                    this.SendPropertyChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneySpent in the schema.
        /// </summary>
        [Column(Name = @"MONEY_SPENT", Storage = "_MoneySpent", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> MoneySpent
        {
            get
            {
                return this._MoneySpent;
            }
            set
            {
                if (this._MoneySpent != value)
                {
                    this.OnMoneySpentChanging(value);
                    this.SendPropertyChanging();
                    this._MoneySpent = value;
                    this.SendPropertyChanged("MoneySpent");
                    this.OnMoneySpentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyCount in the schema.
        /// </summary>
        [Column(Name = @"BUY_COUNT", Storage = "_BuyCount", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> BuyCount
        {
            get
            {
                return this._BuyCount;
            }
            set
            {
                if (this._BuyCount != value)
                {
                    this.OnBuyCountChanging(value);
                    this.SendPropertyChanging();
                    this._BuyCount = value;
                    this.SendPropertyChanged("BuyCount");
                    this.OnBuyCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome1 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_1", Storage = "_NearestCome1", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> NearestCome1
        {
            get
            {
                return this._NearestCome1;
            }
            set
            {
                if (this._NearestCome1 != value)
                {
                    this.OnNearestCome1Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome1 = value;
                    this.SendPropertyChanged("NearestCome1");
                    this.OnNearestCome1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome2 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_2", Storage = "_NearestCome2", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> NearestCome2
        {
            get
            {
                return this._NearestCome2;
            }
            set
            {
                if (this._NearestCome2 != value)
                {
                    this.OnNearestCome2Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome2 = value;
                    this.SendPropertyChanged("NearestCome2");
                    this.OnNearestCome2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NearestCome3 in the schema.
        /// </summary>
        [Column(Name = @"NEAREST_COME_3", Storage = "_NearestCome3", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> NearestCome3
        {
            get
            {
                return this._NearestCome3;
            }
            set
            {
                if (this._NearestCome3 != value)
                {
                    this.OnNearestCome3Changing(value);
                    this.SendPropertyChanging();
                    this._NearestCome3 = value;
                    this.SendPropertyChanged("NearestCome3");
                    this.OnNearestCome3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Cust_CustDet", Storage="_CustDets", OtherKey="CustomerId")]
        [DataMember(Order=19, EmitDefaultValue=false)]
        public EntitySet<CustDet> CustDets
        {
            get
            {
                if ((this.serializing 
                  && (this._CustDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._CustDets;
            }
            set
            {
                this._CustDets.Assign(value);
            }
        }

        [Association(Name="Cust_DeptPo", Storage="_DeptPos", OtherKey="CustomerId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<DeptPo> DeptPos
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPos.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPos;
            }
            set
            {
                this._DeptPos.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CustDets(CustDet entity)
        {
            this.SendPropertyChanging("CustDets");
            entity.Cust = this;
        }
    
        private void detach_CustDets(CustDet entity)
        {
            this.SendPropertyChanging("CustDets");
            entity.Cust = null;
        }

        private void attach_DeptPos(DeptPo entity)
        {
            this.SendPropertyChanging("DeptPos");
            entity.Cust = this;
        }
    
        private void detach_DeptPos(DeptPo entity)
        {
            this.SendPropertyChanging("DeptPos");
            entity.Cust = null;
        }

        private void Initialize()
        {
            this._CustDets = new EntitySet<CustDet>(new Action<CustDet>(this.attach_CustDets), new Action<CustDet>(this.detach_CustDets));
            this._DeptPos = new EntitySet<DeptPo>(new Action<DeptPo>(this.attach_DeptPos), new Action<DeptPo>(this.detach_DeptPos));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for CustDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_CUST_DET")]
    [DataContract()]
    public partial class CustDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CustomerId;

        private string _Address;

        private System.Nullable<double> _CountryId;

        private System.Nullable<System.DateTime> _Birthday;

        private string _PassportNumber;

        private string _Cmnd;

        private System.Nullable<double> _MoneySpent;

        private System.Nullable<double> _BuyCount;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private EntityRef<Cust> _Cust;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(double value);
        partial void OnCustomerIdChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCountryIdChanging(System.Nullable<double> value);
        partial void OnCountryIdChanged();
        partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnPassportNumberChanging(string value);
        partial void OnPassportNumberChanged();
        partial void OnCmndChanging(string value);
        partial void OnCmndChanged();
        partial void OnMoneySpentChanging(System.Nullable<double> value);
        partial void OnMoneySpentChanged();
        partial void OnBuyCountChanging(System.Nullable<double> value);
        partial void OnBuyCountChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        #endregion

        public CustDet()
        {
            this.Initialize();
            this._Cust  = default(EntityRef<Cust>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Cust.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Birthday in the schema.
        /// </summary>
        [Column(Name = @"BIRTHDAY", Storage = "_Birthday", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PassportNumber in the schema.
        /// </summary>
        [Column(Name = @"PASSPORT_NUMBER", Storage = "_PassportNumber", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=5)]
        public string PassportNumber
        {
            get
            {
                return this._PassportNumber;
            }
            set
            {
                if (this._PassportNumber != value)
                {
                    this.OnPassportNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PassportNumber = value;
                    this.SendPropertyChanged("PassportNumber");
                    this.OnPassportNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cmnd in the schema.
        /// </summary>
        [Column(Name = @"CMND", Storage = "_Cmnd", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=6)]
        public string Cmnd
        {
            get
            {
                return this._Cmnd;
            }
            set
            {
                if (this._Cmnd != value)
                {
                    this.OnCmndChanging(value);
                    this.SendPropertyChanging();
                    this._Cmnd = value;
                    this.SendPropertyChanged("Cmnd");
                    this.OnCmndChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneySpent in the schema.
        /// </summary>
        [Column(Name = @"MONEY_SPENT", Storage = "_MoneySpent", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> MoneySpent
        {
            get
            {
                return this._MoneySpent;
            }
            set
            {
                if (this._MoneySpent != value)
                {
                    this.OnMoneySpentChanging(value);
                    this.SendPropertyChanging();
                    this._MoneySpent = value;
                    this.SendPropertyChanged("MoneySpent");
                    this.OnMoneySpentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BuyCount in the schema.
        /// </summary>
        [Column(Name = @"BUY_COUNT", Storage = "_BuyCount", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> BuyCount
        {
            get
            {
                return this._BuyCount;
            }
            set
            {
                if (this._BuyCount != value)
                {
                    this.OnBuyCountChanging(value);
                    this.SendPropertyChanging();
                    this._BuyCount = value;
                    this.SendPropertyChanged("BuyCount");
                    this.OnBuyCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

        [Association(Name="Cust_CustDet", Storage="_Cust", ThisKey="CustomerId", IsForeignKey=true)]
        public Cust Cust
        {
            get
            {
                return this._Cust.Entity;
            }
            set
            {
                Cust previousValue = this._Cust.Entity;
                if ((previousValue != value) || (this._Cust.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Cust.Entity = null;
                        previousValue.CustDets.Remove(this);
                    }
                    this._Cust.Entity = value;
                    if (value != null)
                    {
                        value.CustDets.Add(this);
                        this._CustomerId = value.CustomerId;
                    }
                    else
                    {
                        this._CustomerId = default(double);
                    }
                    this.SendPropertyChanged("Cust");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Cust = default(EntityRef<Cust>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Dept in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT")]
    [DataContract()]
    public partial class Dept : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _DepartmentName;

        private string _Address;

        private System.Nullable<double> _Active;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private EntitySet<DeptCost> _DeptCosts;

        private EntitySet<DeptMng> _DeptMngs;

        private EntitySet<DeptStkIn> _DeptStkIns;

        private EntitySet<DeptStkIn> _DeptStkIns1;

        private EntitySet<DeptStkOut> _DeptStkOuts;

        private EntitySet<DeptStkOut> _DeptStkOuts1;

        private EntitySet<ScheTmplate> _ScheTmplates;

        private EntitySet<StkOut> _StkOuts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnDepartmentNameChanging(string value);
        partial void OnDepartmentNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnActiveChanging(System.Nullable<double> value);
        partial void OnActiveChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        #endregion

        public Dept()
        {
            this.Initialize();
            this._DeptCosts = new EntitySet<DeptCost>(new Action<DeptCost>(this.attach_DeptCosts), new Action<DeptCost>(this.detach_DeptCosts));
            this._DeptMngs = new EntitySet<DeptMng>(new Action<DeptMng>(this.attach_DeptMngs), new Action<DeptMng>(this.detach_DeptMngs));
            this._DeptStkIns = new EntitySet<DeptStkIn>(new Action<DeptStkIn>(this.attach_DeptStkIns), new Action<DeptStkIn>(this.detach_DeptStkIns));
            this._DeptStkIns1 = new EntitySet<DeptStkIn>(new Action<DeptStkIn>(this.attach_DeptStkIns1), new Action<DeptStkIn>(this.detach_DeptStkIns1));
            this._DeptStkOuts = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts), new Action<DeptStkOut>(this.detach_DeptStkOuts));
            this._DeptStkOuts1 = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts1), new Action<DeptStkOut>(this.detach_DeptStkOuts1));
            this._ScheTmplates = new EntitySet<ScheTmplate>(new Action<ScheTmplate>(this.attach_ScheTmplates), new Action<ScheTmplate>(this.detach_ScheTmplates));
            this._StkOuts = new EntitySet<StkOut>(new Action<StkOut>(this.attach_StkOuts), new Action<StkOut>(this.detach_StkOuts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentName in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_NAME", Storage = "_DepartmentName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string DepartmentName
        {
            get
            {
                return this._DepartmentName;
            }
            set
            {
                if (this._DepartmentName != value)
                {
                    this.OnDepartmentNameChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentName = value;
                    this.SendPropertyChanged("DepartmentName");
                    this.OnDepartmentNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"ACTIVE", Storage = "_Active", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [Association(Name="Dept_DeptCost", Storage="_DeptCosts", OtherKey="DepartmentId")]
        [DataMember(Order=17, EmitDefaultValue=false)]
        public EntitySet<DeptCost> DeptCosts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptCosts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptCosts;
            }
            set
            {
                this._DeptCosts.Assign(value);
            }
        }

        [Association(Name="Dept_DeptMng", Storage="_DeptMngs", OtherKey="DepartmentId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<DeptMng> DeptMngs
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptMngs.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptMngs;
            }
            set
            {
                this._DeptMngs.Assign(value);
            }
        }

        [Association(Name="Dept_DeptStkIn", Storage="_DeptStkIns", OtherKey="SrcDepartmentId")]
        [DataMember(Order=19, EmitDefaultValue=false)]
        public EntitySet<DeptStkIn> DeptStkIns
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkIns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkIns;
            }
            set
            {
                this._DeptStkIns.Assign(value);
            }
        }

        [Association(Name="Dept_DeptStkIn1", Storage="_DeptStkIns1", OtherKey="DepartmentId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<DeptStkIn> DeptStkIns1
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkIns1.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkIns1;
            }
            set
            {
                this._DeptStkIns1.Assign(value);
            }
        }

        [Association(Name="Dept_DeptStkOut", Storage="_DeptStkOuts", OtherKey="DestDepartmentId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<DeptStkOut> DeptStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOuts;
            }
            set
            {
                this._DeptStkOuts.Assign(value);
            }
        }

        [Association(Name="Dept_DeptStkOut1", Storage="_DeptStkOuts1", OtherKey="DepartmentId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<DeptStkOut> DeptStkOuts1
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOuts1.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOuts1;
            }
            set
            {
                this._DeptStkOuts1.Assign(value);
            }
        }

        [Association(Name="Dept_ScheTmplate", Storage="_ScheTmplates", OtherKey="DepartmentId")]
        [DataMember(Order=23, EmitDefaultValue=false)]
        public EntitySet<ScheTmplate> ScheTmplates
        {
            get
            {
                if ((this.serializing 
                  && (this._ScheTmplates.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._ScheTmplates;
            }
            set
            {
                this._ScheTmplates.Assign(value);
            }
        }

        [Association(Name="Dept_StkOut", Storage="_StkOuts", OtherKey="DepartmentId")]
        [DataMember(Order=24, EmitDefaultValue=false)]
        public EntitySet<StkOut> StkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._StkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkOuts;
            }
            set
            {
                this._StkOuts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptCosts(DeptCost entity)
        {
            this.SendPropertyChanging("DeptCosts");
            entity.Dept = this;
        }
    
        private void detach_DeptCosts(DeptCost entity)
        {
            this.SendPropertyChanging("DeptCosts");
            entity.Dept = null;
        }

        private void attach_DeptMngs(DeptMng entity)
        {
            this.SendPropertyChanging("DeptMngs");
            entity.Dept = this;
        }
    
        private void detach_DeptMngs(DeptMng entity)
        {
            this.SendPropertyChanging("DeptMngs");
            entity.Dept = null;
        }

        private void attach_DeptStkIns(DeptStkIn entity)
        {
            this.SendPropertyChanging("DeptStkIns");
            entity.Dept = this;
        }
    
        private void detach_DeptStkIns(DeptStkIn entity)
        {
            this.SendPropertyChanging("DeptStkIns");
            entity.Dept = null;
        }

        private void attach_DeptStkIns1(DeptStkIn entity)
        {
            this.SendPropertyChanging("DeptStkIns1");
            entity.Dept1 = this;
        }
    
        private void detach_DeptStkIns1(DeptStkIn entity)
        {
            this.SendPropertyChanging("DeptStkIns1");
            entity.Dept1 = null;
        }

        private void attach_DeptStkOuts(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts");
            entity.Dept = this;
        }
    
        private void detach_DeptStkOuts(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts");
            entity.Dept = null;
        }

        private void attach_DeptStkOuts1(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts1");
            entity.Dept1 = this;
        }
    
        private void detach_DeptStkOuts1(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts1");
            entity.Dept1 = null;
        }

        private void attach_ScheTmplates(ScheTmplate entity)
        {
            this.SendPropertyChanging("ScheTmplates");
            entity.Dept = this;
        }
    
        private void detach_ScheTmplates(ScheTmplate entity)
        {
            this.SendPropertyChanging("ScheTmplates");
            entity.Dept = null;
        }

        private void attach_StkOuts(StkOut entity)
        {
            this.SendPropertyChanging("StkOuts");
            entity.Dept = this;
        }
    
        private void detach_StkOuts(StkOut entity)
        {
            this.SendPropertyChanging("StkOuts");
            entity.Dept = null;
        }

        private void Initialize()
        {
            this._DeptCosts = new EntitySet<DeptCost>(new Action<DeptCost>(this.attach_DeptCosts), new Action<DeptCost>(this.detach_DeptCosts));
            this._DeptMngs = new EntitySet<DeptMng>(new Action<DeptMng>(this.attach_DeptMngs), new Action<DeptMng>(this.detach_DeptMngs));
            this._DeptStkIns = new EntitySet<DeptStkIn>(new Action<DeptStkIn>(this.attach_DeptStkIns), new Action<DeptStkIn>(this.detach_DeptStkIns));
            this._DeptStkIns1 = new EntitySet<DeptStkIn>(new Action<DeptStkIn>(this.attach_DeptStkIns1), new Action<DeptStkIn>(this.detach_DeptStkIns1));
            this._DeptStkOuts = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts), new Action<DeptStkOut>(this.detach_DeptStkOuts));
            this._DeptStkOuts1 = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts1), new Action<DeptStkOut>(this.detach_DeptStkOuts1));
            this._ScheTmplates = new EntitySet<ScheTmplate>(new Action<ScheTmplate>(this.attach_ScheTmplates), new Action<ScheTmplate>(this.detach_ScheTmplates));
            this._StkOuts = new EntitySet<StkOut>(new Action<StkOut>(this.attach_StkOuts), new Action<StkOut>(this.detach_StkOuts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptCost in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_COST")]
    [DataContract()]
    public partial class DeptCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private System.DateTime _CostDate;

        private System.Nullable<double> _CostType;

        private string _CostName;

        private string _CostDescription;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Dept> _Dept;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCostDateChanging(System.DateTime value);
        partial void OnCostDateChanged();
        partial void OnCostTypeChanging(System.Nullable<double> value);
        partial void OnCostTypeChanged();
        partial void OnCostNameChanging(string value);
        partial void OnCostNameChanged();
        partial void OnCostDescriptionChanging(string value);
        partial void OnCostDescriptionChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptCost()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostDate in the schema.
        /// </summary>
        [Column(Name = @"COST_DATE", Storage = "_CostDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime CostDate
        {
            get
            {
                return this._CostDate;
            }
            set
            {
                if (this._CostDate != value)
                {
                    this.OnCostDateChanging(value);
                    this.SendPropertyChanging();
                    this._CostDate = value;
                    this.SendPropertyChanged("CostDate");
                    this.OnCostDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostName in the schema.
        /// </summary>
        [Column(Name = @"COST_NAME", Storage = "_CostName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=4)]
        public string CostName
        {
            get
            {
                return this._CostName;
            }
            set
            {
                if (this._CostName != value)
                {
                    this.OnCostNameChanging(value);
                    this.SendPropertyChanging();
                    this._CostName = value;
                    this.SendPropertyChanged("CostName");
                    this.OnCostNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostDescription in the schema.
        /// </summary>
        [Column(Name = @"COST_DESCRIPTION", Storage = "_CostDescription", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=5)]
        public string CostDescription
        {
            get
            {
                return this._CostDescription;
            }
            set
            {
                if (this._CostDescription != value)
                {
                    this.OnCostDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._CostDescription = value;
                    this.SendPropertyChanged("CostDescription");
                    this.OnCostDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Dept_DeptCost", Storage="_Dept", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.DeptCosts.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.DeptCosts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptMng in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_MNG")]
    [DataContract()]
    public partial class DeptMng : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _EmployeeId;

        private System.Nullable<double> _Position;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.DateTime _WorkingDay;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Dept> _Dept;

        private EntityRef<EmpInfo> _EmpInfo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnPositionChanging(System.Nullable<double> value);
        partial void OnPositionChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptMng()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            this._EmpInfo  = default(EntityRef<EmpInfo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    if (this._EmpInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        /// <LongDescription>
        /// 0: Normal ; 1: Manager
        /// </LongDescription>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(180)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(180)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=8)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Dept_DeptMng", Storage="_Dept", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.DeptMngs.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.DeptMngs.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }

        [Association(Name="EmpInfo_DeptMng", Storage="_EmpInfo", ThisKey="EmployeeId", IsForeignKey=true)]
        public EmpInfo EmpInfo
        {
            get
            {
                return this._EmpInfo.Entity;
            }
            set
            {
                EmpInfo previousValue = this._EmpInfo.Entity;
                if ((previousValue != value) || (this._EmpInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._EmpInfo.Entity = null;
                        previousValue.DeptMngs.Remove(this);
                    }
                    this._EmpInfo.Entity = value;
                    if (value != null)
                    {
                        value.DeptMngs.Add(this);
                        this._EmployeeId = value.EmployeeId;
                    }
                    else
                    {
                        this._EmployeeId = default(string);
                    }
                    this.SendPropertyChanged("EmpInfo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            this._EmpInfo = default(EntityRef<EmpInfo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptPo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PO")]
    [DataContract()]
    public partial class DeptPo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private double _DepartmentId;

        private System.Nullable<decimal> _PurchasePrice;

        private System.Nullable<double> _OrderStatus;

        private System.Nullable<double> _CustomerId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _PurchaseDescription;

        private System.Nullable<double> _PurchaseQuantity;

        private EntityRef<Cust> _Cust;

        private EntitySet<Reicpt> _Reicpts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchasePriceChanging(System.Nullable<decimal> value);
        partial void OnPurchasePriceChanged();
        partial void OnOrderStatusChanging(System.Nullable<double> value);
        partial void OnOrderStatusChanged();
        partial void OnCustomerIdChanging(System.Nullable<double> value);
        partial void OnCustomerIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnPurchaseDescriptionChanging(string value);
        partial void OnPurchaseDescriptionChanged();
        partial void OnPurchaseQuantityChanging(System.Nullable<double> value);
        partial void OnPurchaseQuantityChanged();
        #endregion

        public DeptPo()
        {
            this.Initialize();
            this._Cust  = default(EntityRef<Cust>);
            this._Reicpts = new EntitySet<Reicpt>(new Action<Reicpt>(this.attach_Reicpts), new Action<Reicpt>(this.detach_Reicpts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchasePrice in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_PRICE", Storage = "_PurchasePrice", DbType = "NUMBER(24)")]
        [DataMember(Order=3)]
        public System.Nullable<decimal> PurchasePrice
        {
            get
            {
                return this._PurchasePrice;
            }
            set
            {
                if (this._PurchasePrice != value)
                {
                    this.OnPurchasePriceChanging(value);
                    this.SendPropertyChanging();
                    this._PurchasePrice = value;
                    this.SendPropertyChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderStatus in the schema.
        /// </summary>
        [Column(Name = @"ORDER_STATUS", Storage = "_OrderStatus", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> OrderStatus
        {
            get
            {
                return this._OrderStatus;
            }
            set
            {
                if (this._OrderStatus != value)
                {
                    this.OnOrderStatusChanging(value);
                    this.SendPropertyChanging();
                    this._OrderStatus = value;
                    this.SendPropertyChanged("OrderStatus");
                    this.OnOrderStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Cust.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDescription in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_DESCRIPTION", Storage = "_PurchaseDescription", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=17)]
        public string PurchaseDescription
        {
            get
            {
                return this._PurchaseDescription;
            }
            set
            {
                if (this._PurchaseDescription != value)
                {
                    this.OnPurchaseDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseDescription = value;
                    this.SendPropertyChanged("PurchaseDescription");
                    this.OnPurchaseDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseQuantity in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_QUANTITY", Storage = "_PurchaseQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> PurchaseQuantity
        {
            get
            {
                return this._PurchaseQuantity;
            }
            set
            {
                if (this._PurchaseQuantity != value)
                {
                    this.OnPurchaseQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseQuantity = value;
                    this.SendPropertyChanged("PurchaseQuantity");
                    this.OnPurchaseQuantityChanged();
                }
            }
        }

        [Association(Name="Cust_DeptPo", Storage="_Cust", ThisKey="CustomerId", IsForeignKey=true)]
        public Cust Cust
        {
            get
            {
                return this._Cust.Entity;
            }
            set
            {
                Cust previousValue = this._Cust.Entity;
                if ((previousValue != value) || (this._Cust.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Cust.Entity = null;
                        previousValue.DeptPos.Remove(this);
                    }
                    this._Cust.Entity = value;
                    if (value != null)
                    {
                        value.DeptPos.Add(this);
                        this._CustomerId = value.CustomerId;
                    }
                    else
                    {
                        this._CustomerId = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Cust");
                }
            }
        }

        [Association(Name="DeptPo_Reicpt", Storage="_Reicpts", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId")]
        [DataMember(Order=19, EmitDefaultValue=false)]
        public EntitySet<Reicpt> Reicpts
        {
            get
            {
                if ((this.serializing 
                  && (this._Reicpts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Reicpts;
            }
            set
            {
                this._Reicpts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Reicpts(Reicpt entity)
        {
            this.SendPropertyChanging("Reicpts");
            entity.DeptPo = this;
        }
    
        private void detach_Reicpts(Reicpt entity)
        {
            this.SendPropertyChanging("Reicpts");
            entity.DeptPo = null;
        }

        private void Initialize()
        {
            this._Cust = default(EntityRef<Cust>);
            this._Reicpts = new EntitySet<Reicpt>(new Action<Reicpt>(this.attach_Reicpts), new Action<Reicpt>(this.detach_Reicpts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptPoDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PO_DET")]
    [DataContract()]
    public partial class DeptPoDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private double _PurchaseOrderDetailId;

        private double _DepartmentId;

        private string _ProductId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _PurchaseStatus;

        private System.Nullable<double> _TaxId;

        private System.Nullable<double> _PurchaseType;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _ProductMasterId;

        private string _Note;

        private System.Nullable<decimal> _AdhocCase;

        private EntitySet<DeptPoPromo> _DeptPoPromos;

        private EntityRef<Prd> _Prd;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(double value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnPurchaseStatusChanging(System.Nullable<double> value);
        partial void OnPurchaseStatusChanged();
        partial void OnTaxIdChanging(System.Nullable<double> value);
        partial void OnTaxIdChanged();
        partial void OnPurchaseTypeChanging(System.Nullable<double> value);
        partial void OnPurchaseTypeChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnAdhocCaseChanging(System.Nullable<decimal> value);
        partial void OnAdhocCaseChanged();
        #endregion

        public DeptPoDet()
        {
            this.Initialize();
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseStatus in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_STATUS", Storage = "_PurchaseStatus", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> PurchaseStatus
        {
            get
            {
                return this._PurchaseStatus;
            }
            set
            {
                if (this._PurchaseStatus != value)
                {
                    this.OnPurchaseStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseStatus = value;
                    this.SendPropertyChanged("PurchaseStatus");
                    this.OnPurchaseStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseType in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_TYPE", Storage = "_PurchaseType", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> PurchaseType
        {
            get
            {
                return this._PurchaseType;
            }
            set
            {
                if (this._PurchaseType != value)
                {
                    this.OnPurchaseTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseType = value;
                    this.SendPropertyChanged("PurchaseType");
                    this.OnPurchaseTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "VARCHAR2(52) NOT NULL")]
        [DataMember(Order=21)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Name = @"NOTE", Storage = "_Note", DbType = "VARCHAR2(800)")]
        [DataMember(Order=22)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging();
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdhocCase in the schema.
        /// </summary>
        [Column(Name = @"ADHOC_CASE", Storage = "_AdhocCase", DbType = "NUMBER")]
        [DataMember(Order=23)]
        public System.Nullable<decimal> AdhocCase
        {
            get
            {
                return this._AdhocCase;
            }
            set
            {
                if (this._AdhocCase != value)
                {
                    this.OnAdhocCaseChanging(value);
                    this.SendPropertyChanging();
                    this._AdhocCase = value;
                    this.SendPropertyChanged("AdhocCase");
                    this.OnAdhocCaseChanged();
                }
            }
        }

        [Association(Name="DeptPoDet_DeptPoPromo", Storage="_DeptPoPromos", ThisKey="PurchaseOrderId,PurchaseOrderDetailId,DepartmentId", OtherKey="PurchaseOrderId,PurchaseOrderDetailId,DepartmentId")]
        [DataMember(Order=24, EmitDefaultValue=false)]
        public EntitySet<DeptPoPromo> DeptPoPromos
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPoPromos.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPoPromos;
            }
            set
            {
                this._DeptPoPromos.Assign(value);
            }
        }

        [Association(Name="Prd_DeptPoDet", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptPoDets.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptPoDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.DeptPoDet = this;
        }
    
        private void detach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.DeptPoDet = null;
        }

        private void Initialize()
        {
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptPoDetLog in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PO_DET_LOG")]
    [DataContract()]
    public partial class DeptPoDetLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _PurchaseOrderDetailLogId;

        private double _DepartmentId;

        private System.Nullable<double> _PurchaseOrderDetailId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderDetailLogIdChanging(double value);
        partial void OnPurchaseOrderDetailLogIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(System.Nullable<double> value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptPoDetLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailLogId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_LOG_ID", Storage = "_PurchaseOrderDetailLogId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double PurchaseOrderDetailLogId
        {
            get
            {
                return this._PurchaseOrderDetailLogId;
            }
            set
            {
                if (this._PurchaseOrderDetailLogId != value)
                {
                    this.OnPurchaseOrderDetailLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailLogId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailLogId");
                    this.OnPurchaseOrderDetailLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptPoLog in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PO_LOG")]
    [DataContract()]
    public partial class DeptPoLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _PurchaseOrderLogId;

        private double _DepartmentId;

        private string _PurchaseOrderId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderLogIdChanging(double value);
        partial void OnPurchaseOrderLogIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptPoLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderLogId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_LOG_ID", Storage = "_PurchaseOrderLogId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double PurchaseOrderLogId
        {
            get
            {
                return this._PurchaseOrderLogId;
            }
            set
            {
                if (this._PurchaseOrderLogId != value)
                {
                    this.OnPurchaseOrderLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderLogId = value;
                    this.SendPropertyChanged("PurchaseOrderLogId");
                    this.OnPurchaseOrderLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=3)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptPoPromo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PO_PROMO")]
    [DataContract()]
    public partial class DeptPoPromo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private double _PurchaseOrderDetailId;

        private double _Id;

        private double _DepartmentId;

        private double _GiftDepartmentId;

        private System.Nullable<double> _DepartmentPromotionId;

        private System.Nullable<double> _GiftId;

        private System.Nullable<double> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptPoDet> _DeptPoDet;

        private EntityRef<DeptPrmtn> _DeptPrmtn;

        private EntityRef<Gift> _Gift;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(double value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnIdChanging(double value);
        partial void OnIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnGiftDepartmentIdChanging(double value);
        partial void OnGiftDepartmentIdChanged();
        partial void OnDepartmentPromotionIdChanging(System.Nullable<double> value);
        partial void OnDepartmentPromotionIdChanged();
        partial void OnGiftIdChanging(System.Nullable<double> value);
        partial void OnGiftIdChanged();
        partial void OnGiftProductIdChanging(System.Nullable<double> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptPoPromo()
        {
            this.Initialize();
            this._DeptPoDet  = default(EntityRef<DeptPoDet>);
            this._DeptPrmtn  = default(EntityRef<DeptPrmtn>);
            this._Gift  = default(EntityRef<Gift>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._DeptPoDet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    if (this._DeptPoDet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptPoDet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_DEPARTMENT_ID", Storage = "_GiftDepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=5)]
        public double GiftDepartmentId
        {
            get
            {
                return this._GiftDepartmentId;
            }
            set
            {
                if (this._GiftDepartmentId != value)
                {
                    if (this._Gift.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGiftDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftDepartmentId = value;
                    this.SendPropertyChanged("GiftDepartmentId");
                    this.OnGiftDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentPromotionId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_PROMOTION_ID", Storage = "_DepartmentPromotionId", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> DepartmentPromotionId
        {
            get
            {
                return this._DepartmentPromotionId;
            }
            set
            {
                if (this._DepartmentPromotionId != value)
                {
                    if (this._DeptPrmtn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentPromotionId = value;
                    this.SendPropertyChanged("DepartmentPromotionId");
                    this.OnDepartmentPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    if (this._Gift.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptPoDet_DeptPoPromo", Storage="_DeptPoDet", ThisKey="PurchaseOrderId,PurchaseOrderDetailId,DepartmentId", OtherKey="PurchaseOrderId,PurchaseOrderDetailId,DepartmentId", IsForeignKey=true)]
        public DeptPoDet DeptPoDet
        {
            get
            {
                return this._DeptPoDet.Entity;
            }
            set
            {
                DeptPoDet previousValue = this._DeptPoDet.Entity;
                if ((previousValue != value) || (this._DeptPoDet.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptPoDet.Entity = null;
                        previousValue.DeptPoPromos.Remove(this);
                    }
                    this._DeptPoDet.Entity = value;
                    if (value != null)
                    {
                        value.DeptPoPromos.Add(this);
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        this._PurchaseOrderDetailId = value.PurchaseOrderDetailId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._PurchaseOrderId = default(string);
                        this._PurchaseOrderDetailId = default(double);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptPoDet");
                }
            }
        }

        [Association(Name="DeptPrmtn_DeptPoPromo", Storage="_DeptPrmtn", ThisKey="DepartmentPromotionId", IsForeignKey=true)]
        public DeptPrmtn DeptPrmtn
        {
            get
            {
                return this._DeptPrmtn.Entity;
            }
            set
            {
                DeptPrmtn previousValue = this._DeptPrmtn.Entity;
                if ((previousValue != value) || (this._DeptPrmtn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptPrmtn.Entity = null;
                        previousValue.DeptPoPromos.Remove(this);
                    }
                    this._DeptPrmtn.Entity = value;
                    if (value != null)
                    {
                        value.DeptPoPromos.Add(this);
                        this._DepartmentPromotionId = value.DepartmentPromotionId;
                    }
                    else
                    {
                        this._DepartmentPromotionId = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("DeptPrmtn");
                }
            }
        }

        [Association(Name="Gift_DeptPoPromo", Storage="_Gift", ThisKey="GiftId,GiftDepartmentId", OtherKey="GiftId,DepartmentId", IsForeignKey=true)]
        public Gift Gift
        {
            get
            {
                return this._Gift.Entity;
            }
            set
            {
                Gift previousValue = this._Gift.Entity;
                if ((previousValue != value) || (this._Gift.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Gift.Entity = null;
                        previousValue.DeptPoPromos.Remove(this);
                    }
                    this._Gift.Entity = value;
                    if (value != null)
                    {
                        value.DeptPoPromos.Add(this);
                        this._GiftId = value.GiftId;
                        this._GiftDepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._GiftId = default(System.Nullable<double>);
                        this._GiftDepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Gift");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptPoDet = default(EntityRef<DeptPoDet>);
            this._DeptPrmtn = default(EntityRef<DeptPrmtn>);
            this._Gift = default(EntityRef<Gift>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptPrmtn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_PRMTN")]
    [DataContract()]
    public partial class DeptPrmtn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentPromotionId;

        private double _DepartmentId;

        private double _PromotionId;

        private string _ProductId;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptPoPromo> _DeptPoPromos;

        private EntityRef<Prd> _Prd;

        private EntityRef<Promo> _Promo;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentPromotionIdChanging(double value);
        partial void OnDepartmentPromotionIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPromotionIdChanging(double value);
        partial void OnPromotionIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptPrmtn()
        {
            this.Initialize();
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            this._Prd  = default(EntityRef<Prd>);
            this._Promo  = default(EntityRef<Promo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentPromotionId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_PROMOTION_ID", Storage = "_DepartmentPromotionId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentPromotionId
        {
            get
            {
                return this._DepartmentPromotionId;
            }
            set
            {
                if (this._DepartmentPromotionId != value)
                {
                    this.OnDepartmentPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentPromotionId = value;
                    this.SendPropertyChanged("DepartmentPromotionId");
                    this.OnDepartmentPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionId in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_ID", Storage = "_PromotionId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=3)]
        public double PromotionId
        {
            get
            {
                return this._PromotionId;
            }
            set
            {
                if (this._PromotionId != value)
                {
                    if (this._Promo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionId = value;
                    this.SendPropertyChanged("PromotionId");
                    this.OnPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=4)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptPrmtn_DeptPoPromo", Storage="_DeptPoPromos", OtherKey="DepartmentPromotionId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<DeptPoPromo> DeptPoPromos
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPoPromos.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPoPromos;
            }
            set
            {
                this._DeptPoPromos.Assign(value);
            }
        }

        [Association(Name="Prd_DeptPrmtn", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptPrmtns.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptPrmtns.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }

        [Association(Name="Promo_DeptPrmtn", Storage="_Promo", ThisKey="PromotionId", IsForeignKey=true)]
        public Promo Promo
        {
            get
            {
                return this._Promo.Entity;
            }
            set
            {
                Promo previousValue = this._Promo.Entity;
                if ((previousValue != value) || (this._Promo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Promo.Entity = null;
                        previousValue.DeptPrmtns.Remove(this);
                    }
                    this._Promo.Entity = value;
                    if (value != null)
                    {
                        value.DeptPrmtns.Add(this);
                        this._PromotionId = value.PromotionId;
                    }
                    else
                    {
                        this._PromotionId = default(double);
                    }
                    this.SendPropertyChanged("Promo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.DeptPrmtn = this;
        }
    
        private void detach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.DeptPrmtn = null;
        }

        private void Initialize()
        {
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            this._Prd = default(EntityRef<Prd>);
            this._Promo = default(EntityRef<Promo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptRet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_RET")]
    [DataContract()]
    public partial class DeptRet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentReturnId;

        private string _ProductId;

        private System.Nullable<double> _DepartmentId;

        private System.Nullable<double> _ReturnStatus;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptRetCost> _DeptRetCosts;

        private EntitySet<DeptRetDet> _DeptRetDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(double value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnDepartmentIdChanging(System.Nullable<double> value);
        partial void OnDepartmentIdChanged();
        partial void OnReturnStatusChanging(System.Nullable<double> value);
        partial void OnReturnStatusChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptRet()
        {
            this.Initialize();
            this._DeptRetCosts = new EntitySet<DeptRetCost>(new Action<DeptRetCost>(this.attach_DeptRetCosts), new Action<DeptRetCost>(this.detach_DeptRetCosts));
            this._DeptRetDets = new EntitySet<DeptRetDet>(new Action<DeptRetDet>(this.attach_DeptRetDets), new Action<DeptRetDet>(this.detach_DeptRetDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnStatus in the schema.
        /// </summary>
        [Column(Name = @"RETURN_STATUS", Storage = "_ReturnStatus", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> ReturnStatus
        {
            get
            {
                return this._ReturnStatus;
            }
            set
            {
                if (this._ReturnStatus != value)
                {
                    this.OnReturnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnStatus = value;
                    this.SendPropertyChanged("ReturnStatus");
                    this.OnReturnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptRet_DeptRetCost", Storage="_DeptRetCosts", OtherKey="DepartmentReturnId")]
        [DataMember(Order=16, EmitDefaultValue=false)]
        public EntitySet<DeptRetCost> DeptRetCosts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptRetCosts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptRetCosts;
            }
            set
            {
                this._DeptRetCosts.Assign(value);
            }
        }

        [Association(Name="DeptRet_DeptRetDet", Storage="_DeptRetDets", OtherKey="DepartmentReturnId")]
        [DataMember(Order=17, EmitDefaultValue=false)]
        public EntitySet<DeptRetDet> DeptRetDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptRetDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptRetDets;
            }
            set
            {
                this._DeptRetDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptRetCosts(DeptRetCost entity)
        {
            this.SendPropertyChanging("DeptRetCosts");
            entity.DeptRet = this;
        }
    
        private void detach_DeptRetCosts(DeptRetCost entity)
        {
            this.SendPropertyChanging("DeptRetCosts");
            entity.DeptRet = null;
        }

        private void attach_DeptRetDets(DeptRetDet entity)
        {
            this.SendPropertyChanging("DeptRetDets");
            entity.DeptRet = this;
        }
    
        private void detach_DeptRetDets(DeptRetDet entity)
        {
            this.SendPropertyChanging("DeptRetDets");
            entity.DeptRet = null;
        }

        private void Initialize()
        {
            this._DeptRetCosts = new EntitySet<DeptRetCost>(new Action<DeptRetCost>(this.attach_DeptRetCosts), new Action<DeptRetCost>(this.detach_DeptRetCosts));
            this._DeptRetDets = new EntitySet<DeptRetDet>(new Action<DeptRetDet>(this.attach_DeptRetDets), new Action<DeptRetDet>(this.detach_DeptRetDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptRetCost in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_RET_COST")]
    [DataContract()]
    public partial class DeptRetCost : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentReturnId;

        private double _CostType;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptRet> _DeptRet;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(double value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptRetCost()
        {
            this.Initialize();
            this._DeptRet  = default(EntityRef<DeptRet>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    if (this._DeptRet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptRet_DeptRetCost", Storage="_DeptRet", ThisKey="DepartmentReturnId", IsForeignKey=true)]
        public DeptRet DeptRet
        {
            get
            {
                return this._DeptRet.Entity;
            }
            set
            {
                DeptRet previousValue = this._DeptRet.Entity;
                if ((previousValue != value) || (this._DeptRet.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptRet.Entity = null;
                        previousValue.DeptRetCosts.Remove(this);
                    }
                    this._DeptRet.Entity = value;
                    if (value != null)
                    {
                        value.DeptRetCosts.Add(this);
                        this._DepartmentReturnId = value.DepartmentReturnId;
                    }
                    else
                    {
                        this._DepartmentReturnId = default(double);
                    }
                    this.SendPropertyChanged("DeptRet");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptRet = default(EntityRef<DeptRet>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptRetDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_RET_DET")]
    [DataContract()]
    public partial class DeptRetDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentReturnId;

        private string _ProductId;

        private string _ProductMasterId;

        private double _DepartmentId;

        private System.Nullable<double> _Quantity;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptRet> _DeptRet;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentReturnIdChanging(double value);
        partial void OnDepartmentReturnIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptRetDet()
        {
            this.Initialize();
            this._DeptRet  = default(EntityRef<DeptRet>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentReturnId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_RETURN_ID", Storage = "_DepartmentReturnId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentReturnId
        {
            get
            {
                return this._DepartmentReturnId;
            }
            set
            {
                if (this._DepartmentReturnId != value)
                {
                    if (this._DeptRet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentReturnId = value;
                    this.SendPropertyChanged("DepartmentReturnId");
                    this.OnDepartmentReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=6)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptRet_DeptRetDet", Storage="_DeptRet", ThisKey="DepartmentReturnId", IsForeignKey=true)]
        public DeptRet DeptRet
        {
            get
            {
                return this._DeptRet.Entity;
            }
            set
            {
                DeptRet previousValue = this._DeptRet.Entity;
                if ((previousValue != value) || (this._DeptRet.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptRet.Entity = null;
                        previousValue.DeptRetDets.Remove(this);
                    }
                    this._DeptRet.Entity = value;
                    if (value != null)
                    {
                        value.DeptRetDets.Add(this);
                        this._DepartmentReturnId = value.DepartmentReturnId;
                    }
                    else
                    {
                        this._DepartmentReturnId = default(double);
                    }
                    this.SendPropertyChanged("DeptRet");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptRet = default(EntityRef<DeptRet>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptRetPo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_RET_PO")]
    [DataContract()]
    public partial class DeptRetPo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PurchaseOrderId;

        private double _PurchaseOrderDetailId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _ReturnDate;

        private string _Description;

        private System.Nullable<double> _Quantity;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _NextPurchaseOrderId;

        private string _ProductId;

        private System.Nullable<double> _Price;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderDetailIdChanging(double value);
        partial void OnPurchaseOrderDetailIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReturnDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnNextPurchaseOrderIdChanging(string value);
        partial void OnNextPurchaseOrderIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        #endregion

        public DeptRetPo()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDetailId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_DETAIL_ID", Storage = "_PurchaseOrderDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double PurchaseOrderDetailId
        {
            get
            {
                return this._PurchaseOrderDetailId;
            }
            set
            {
                if (this._PurchaseOrderDetailId != value)
                {
                    this.OnPurchaseOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDetailId = value;
                    this.SendPropertyChanged("PurchaseOrderDetailId");
                    this.OnPurchaseOrderDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnDate in the schema.
        /// </summary>
        [Column(Name = @"RETURN_DATE", Storage = "_ReturnDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> ReturnDate
        {
            get
            {
                return this._ReturnDate;
            }
            set
            {
                if (this._ReturnDate != value)
                {
                    this.OnReturnDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnDate = value;
                    this.SendPropertyChanged("ReturnDate");
                    this.OnReturnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=5)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=7)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextPurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"NEXT_PURCHASE_ORDER_ID", Storage = "_NextPurchaseOrderId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=18)]
        public string NextPurchaseOrderId
        {
            get
            {
                return this._NextPurchaseOrderId;
            }
            set
            {
                if (this._NextPurchaseOrderId != value)
                {
                    this.OnNextPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._NextPurchaseOrderId = value;
                    this.SendPropertyChanged("NextPurchaseOrderId");
                    this.OnNextPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=19)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStk in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK")]
    [DataContract()]
    public partial class DeptStk : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _OnStorePrice;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _LostQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _UnconfirmQuantity;

        private string _Position;

        private EntityRef<Prd> _Prd;

        private EntityRef<PrdMst> _PrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<double> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<double> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        #endregion

        public DeptStk()
        {
            this.Initialize();
            this._Prd  = default(EntityRef<Prd>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "VARCHAR2(800)")]
        [DataMember(Order=22)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

        [Association(Name="Prd_DeptStk", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStks.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStks.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }

        [Association(Name="PrdMst_DeptStk", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.DeptStks.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.DeptStks.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Prd = default(EntityRef<Prd>);
            this._PrdMst = default(EntityRef<PrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkHis in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_HIS")]
    [DataContract()]
    public partial class DeptStkHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentStockHistoryId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Description;

        private System.Nullable<double> _GoodCount;

        private System.Nullable<double> _ErrorCount;

        private System.Nullable<double> _DamageCount;

        private System.Nullable<double> _LostCount;

        private System.Nullable<double> _UnconfirmCount;

        private double _DepartmentId;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentStockHistoryIdChanging(double value);
        partial void OnDepartmentStockHistoryIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodCountChanging(System.Nullable<double> value);
        partial void OnGoodCountChanged();
        partial void OnErrorCountChanging(System.Nullable<double> value);
        partial void OnErrorCountChanged();
        partial void OnDamageCountChanging(System.Nullable<double> value);
        partial void OnDamageCountChanged();
        partial void OnLostCountChanging(System.Nullable<double> value);
        partial void OnLostCountChanged();
        partial void OnUnconfirmCountChanging(System.Nullable<double> value);
        partial void OnUnconfirmCountChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        #endregion

        public DeptStkHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentStockHistoryId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_STOCK_HISTORY_ID", Storage = "_DepartmentStockHistoryId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentStockHistoryId
        {
            get
            {
                return this._DepartmentStockHistoryId;
            }
            set
            {
                if (this._DepartmentStockHistoryId != value)
                {
                    this.OnDepartmentStockHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentStockHistoryId = value;
                    this.SendPropertyChanged("DepartmentStockHistoryId");
                    this.OnDepartmentStockHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(800)")]
        [DataMember(Order=16)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodCount in the schema.
        /// </summary>
        [Column(Name = @"GOOD_COUNT", Storage = "_GoodCount", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> GoodCount
        {
            get
            {
                return this._GoodCount;
            }
            set
            {
                if (this._GoodCount != value)
                {
                    this.OnGoodCountChanging(value);
                    this.SendPropertyChanging();
                    this._GoodCount = value;
                    this.SendPropertyChanged("GoodCount");
                    this.OnGoodCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCount in the schema.
        /// </summary>
        [Column(Name = @"ERROR_COUNT", Storage = "_ErrorCount", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ErrorCount
        {
            get
            {
                return this._ErrorCount;
            }
            set
            {
                if (this._ErrorCount != value)
                {
                    this.OnErrorCountChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCount = value;
                    this.SendPropertyChanged("ErrorCount");
                    this.OnErrorCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageCount in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_COUNT", Storage = "_DamageCount", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> DamageCount
        {
            get
            {
                return this._DamageCount;
            }
            set
            {
                if (this._DamageCount != value)
                {
                    this.OnDamageCountChanging(value);
                    this.SendPropertyChanging();
                    this._DamageCount = value;
                    this.SendPropertyChanged("DamageCount");
                    this.OnDamageCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostCount in the schema.
        /// </summary>
        [Column(Name = @"LOST_COUNT", Storage = "_LostCount", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> LostCount
        {
            get
            {
                return this._LostCount;
            }
            set
            {
                if (this._LostCount != value)
                {
                    this.OnLostCountChanging(value);
                    this.SendPropertyChanging();
                    this._LostCount = value;
                    this.SendPropertyChanged("LostCount");
                    this.OnLostCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmCount in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_COUNT", Storage = "_UnconfirmCount", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> UnconfirmCount
        {
            get
            {
                return this._UnconfirmCount;
            }
            set
            {
                if (this._UnconfirmCount != value)
                {
                    this.OnUnconfirmCountChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmCount = value;
                    this.SendPropertyChanged("UnconfirmCount");
                    this.OnUnconfirmCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=22)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkIn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_IN")]
    [DataContract()]
    public partial class DeptStkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _StockInDate;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _ExportStatus;

        private System.Nullable<double> _StockInCost;

        private System.Nullable<double> _StockInType;

        private System.Nullable<double> _SrcDepartmentId;

        private System.Nullable<double> _TotalQuantity;

        private System.Nullable<double> _TotalAmount;

        private EntityRef<Dept> _Dept;

        private EntityRef<Dept> _Dept1;

        private EntitySet<DeptStkInCst> _DeptStkInCsts;

        private EntitySet<DeptStkInDet> _DeptStkInDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnStockInDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockInDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnExportStatusChanging(System.Nullable<double> value);
        partial void OnExportStatusChanged();
        partial void OnStockInCostChanging(System.Nullable<double> value);
        partial void OnStockInCostChanged();
        partial void OnStockInTypeChanging(System.Nullable<double> value);
        partial void OnStockInTypeChanged();
        partial void OnSrcDepartmentIdChanging(System.Nullable<double> value);
        partial void OnSrcDepartmentIdChanged();
        partial void OnTotalQuantityChanging(System.Nullable<double> value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalAmountChanging(System.Nullable<double> value);
        partial void OnTotalAmountChanged();
        #endregion

        public DeptStkIn()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            this._Dept1  = default(EntityRef<Dept>);
            this._DeptStkInCsts = new EntitySet<DeptStkInCst>(new Action<DeptStkInCst>(this.attach_DeptStkInCsts), new Action<DeptStkInCst>(this.detach_DeptStkInCsts));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_DATE", Storage = "_StockInDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StockInDate
        {
            get
            {
                return this._StockInDate;
            }
            set
            {
                if (this._StockInDate != value)
                {
                    this.OnStockInDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockInDate = value;
                    this.SendPropertyChanged("StockInDate");
                    this.OnStockInDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(4000)")]
        [DataMember(Order=4)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExportStatus in the schema.
        /// </summary>
        [Column(Name = @"EXPORT_STATUS", Storage = "_ExportStatus", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExportStatus
        {
            get
            {
                return this._ExportStatus;
            }
            set
            {
                if (this._ExportStatus != value)
                {
                    this.OnExportStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ExportStatus = value;
                    this.SendPropertyChanged("ExportStatus");
                    this.OnExportStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInCost in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_COST", Storage = "_StockInCost", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> StockInCost
        {
            get
            {
                return this._StockInCost;
            }
            set
            {
                if (this._StockInCost != value)
                {
                    this.OnStockInCostChanging(value);
                    this.SendPropertyChanging();
                    this._StockInCost = value;
                    this.SendPropertyChanged("StockInCost");
                    this.OnStockInCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        /// <LongDescription>
        /// 1 : ReStock ; 0: Normal
        /// </LongDescription>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SrcDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"SRC_DEPARTMENT_ID", Storage = "_SrcDepartmentId", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> SrcDepartmentId
        {
            get
            {
                return this._SrcDepartmentId;
            }
            set
            {
                if (this._SrcDepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSrcDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._SrcDepartmentId = value;
                    this.SendPropertyChanged("SrcDepartmentId");
                    this.OnSrcDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="Dept_DeptStkIn", Storage="_Dept", ThisKey="SrcDepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.DeptStkIns.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkIns.Add(this);
                        this._SrcDepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._SrcDepartmentId = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }

        [Association(Name="Dept_DeptStkIn1", Storage="_Dept1", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept1
        {
            get
            {
                return this._Dept1.Entity;
            }
            set
            {
                Dept previousValue = this._Dept1.Entity;
                if ((previousValue != value) || (this._Dept1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept1.Entity = null;
                        previousValue.DeptStkIns1.Remove(this);
                    }
                    this._Dept1.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkIns1.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept1");
                }
            }
        }

        [Association(Name="DeptStkIn_DeptStkInCst", Storage="_DeptStkInCsts", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<DeptStkInCst> DeptStkInCsts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkInCsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkInCsts;
            }
            set
            {
                this._DeptStkInCsts.Assign(value);
            }
        }

        [Association(Name="DeptStkIn_DeptStkInDet", Storage="_DeptStkInDets", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId")]
        [DataMember(Order=23, EmitDefaultValue=false)]
        public EntitySet<DeptStkInDet> DeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkInDets;
            }
            set
            {
                this._DeptStkInDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptStkInCsts(DeptStkInCst entity)
        {
            this.SendPropertyChanging("DeptStkInCsts");
            entity.DeptStkIn = this;
        }
    
        private void detach_DeptStkInCsts(DeptStkInCst entity)
        {
            this.SendPropertyChanging("DeptStkInCsts");
            entity.DeptStkIn = null;
        }

        private void attach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.DeptStkIn = this;
        }
    
        private void detach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.DeptStkIn = null;
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            this._Dept1 = default(EntityRef<Dept>);
            this._DeptStkInCsts = new EntitySet<DeptStkInCst>(new Action<DeptStkInCst>(this.attach_DeptStkInCsts), new Action<DeptStkInCst>(this.detach_DeptStkInCsts));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptStkInCst in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_IN_CST")]
    [DataContract()]
    public partial class DeptStkInCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private double _CostType;

        private double _DepartmentId;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptStkIn> _DeptStkIn;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptStkInCst()
        {
            this.Initialize();
            this._DeptStkIn  = default(EntityRef<DeptStkIn>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    if (this._DeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptStkIn_DeptStkInCst", Storage="_DeptStkIn", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId", IsForeignKey=true)]
        public DeptStkIn DeptStkIn
        {
            get
            {
                return this._DeptStkIn.Entity;
            }
            set
            {
                DeptStkIn previousValue = this._DeptStkIn.Entity;
                if ((previousValue != value) || (this._DeptStkIn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptStkIn.Entity = null;
                        previousValue.DeptStkInCsts.Remove(this);
                    }
                    this._DeptStkIn.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkInCsts.Add(this);
                        this._StockInId = value.StockInId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockInId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptStkIn");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptStkIn = default(EntityRef<DeptStkIn>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkInDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_IN_DET")]
    [DataContract()]
    public partial class DeptStkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private string _ProductId;

        private string _ProductMasterId;

        private double _DepartmentId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _OnStorePrice;

        private System.Nullable<double> _Sold;

        private EntityRef<DeptStkIn> _DeptStkIn;

        private EntityRef<Prd> _Prd;

        private EntityRef<PrdMst> _PrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnOnStorePriceChanging(System.Nullable<double> value);
        partial void OnOnStorePriceChanged();
        partial void OnSoldChanging(System.Nullable<double> value);
        partial void OnSoldChanged();
        #endregion

        public DeptStkInDet()
        {
            this.Initialize();
            this._DeptStkIn  = default(EntityRef<DeptStkIn>);
            this._Prd  = default(EntityRef<Prd>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    if (this._DeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptStkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sold in the schema.
        /// </summary>
        [Column(Name = @"SOLD", Storage = "_Sold", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> Sold
        {
            get
            {
                return this._Sold;
            }
            set
            {
                if (this._Sold != value)
                {
                    this.OnSoldChanging(value);
                    this.SendPropertyChanging();
                    this._Sold = value;
                    this.SendPropertyChanged("Sold");
                    this.OnSoldChanged();
                }
            }
        }

        [Association(Name="DeptStkIn_DeptStkInDet", Storage="_DeptStkIn", ThisKey="StockInId,DepartmentId", OtherKey="StockInId,DepartmentId", IsForeignKey=true)]
        public DeptStkIn DeptStkIn
        {
            get
            {
                return this._DeptStkIn.Entity;
            }
            set
            {
                DeptStkIn previousValue = this._DeptStkIn.Entity;
                if ((previousValue != value) || (this._DeptStkIn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptStkIn.Entity = null;
                        previousValue.DeptStkInDets.Remove(this);
                    }
                    this._DeptStkIn.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkInDets.Add(this);
                        this._StockInId = value.StockInId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockInId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptStkIn");
                }
            }
        }

        [Association(Name="Prd_DeptStkInDet", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStkInDets.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkInDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }

        [Association(Name="PrdMst_DeptStkInDet", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.DeptStkInDets.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkInDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptStkIn = default(EntityRef<DeptStkIn>);
            this._Prd = default(EntityRef<Prd>);
            this._PrdMst = default(EntityRef<PrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkInHis in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_IN_HIS")]
    [DataContract()]
    public partial class DeptStkInHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private double _SourceDepartmentid;

        private double _StockOutId;

        private double _DestDepartmentId;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnSourceDepartmentidChanging(double value);
        partial void OnSourceDepartmentidChanged();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnDestDepartmentIdChanging(double value);
        partial void OnDestDepartmentIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptStkInHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceDepartmentid in the schema.
        /// </summary>
        [Column(Name = @"SOURCE_DEPARTMENTID", Storage = "_SourceDepartmentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double SourceDepartmentid
        {
            get
            {
                return this._SourceDepartmentid;
            }
            set
            {
                if (this._SourceDepartmentid != value)
                {
                    this.OnSourceDepartmentidChanging(value);
                    this.SendPropertyChanging();
                    this._SourceDepartmentid = value;
                    this.SendPropertyChanged("SourceDepartmentid");
                    this.OnSourceDepartmentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DestDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEST_DEPARTMENT_ID", Storage = "_DestDepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public double DestDepartmentId
        {
            get
            {
                return this._DestDepartmentId;
            }
            set
            {
                if (this._DestDepartmentId != value)
                {
                    this.OnDestDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DestDepartmentId = value;
                    this.SendPropertyChanged("DestDepartmentId");
                    this.OnDestDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(800)")]
        [DataMember(Order=5)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkOut in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_OUT")]
    [DataContract()]
    public partial class DeptStkOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _StockOutDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Description;

        private System.Nullable<double> _DefectStatusId;

        private double _ConfirmFlg;

        private System.Nullable<double> _DestDepartmentId;

        private System.Nullable<double> _TotalQuantity;

        private System.Nullable<double> _TotalAmount;

        private EntityRef<Dept> _Dept;

        private EntityRef<Dept> _Dept1;

        private EntitySet<DeptStkOutCst> _DeptStkOutCsts;

        private EntitySet<DeptStkOutDet> _DeptStkOutDets;

        private EntityRef<Prd> _Prd;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<double> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(double value);
        partial void OnConfirmFlgChanged();
        partial void OnDestDepartmentIdChanging(System.Nullable<double> value);
        partial void OnDestDepartmentIdChanged();
        partial void OnTotalQuantityChanging(System.Nullable<double> value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalAmountChanging(System.Nullable<double> value);
        partial void OnTotalAmountChanged();
        #endregion

        public DeptStkOut()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            this._Dept1  = default(EntityRef<Dept>);
            this._DeptStkOutCsts = new EntitySet<DeptStkOutCst>(new Action<DeptStkOutCst>(this.attach_DeptStkOutCsts), new Action<DeptStkOutCst>(this.detach_DeptStkOutCsts));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(800)")]
        [DataMember(Order=15)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        /// <LongDescription>
        /// Neu tra cho nha sx thi confirm flag = 1
        /// </LongDescription>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=17)]
        public double ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DestDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEST_DEPARTMENT_ID", Storage = "_DestDepartmentId", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> DestDepartmentId
        {
            get
            {
                return this._DestDepartmentId;
            }
            set
            {
                if (this._DestDepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDestDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DestDepartmentId = value;
                    this.SendPropertyChanged("DestDepartmentId");
                    this.OnDestDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="Dept_DeptStkOut", Storage="_Dept", ThisKey="DestDepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.DeptStkOuts.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOuts.Add(this);
                        this._DestDepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DestDepartmentId = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }

        [Association(Name="Dept_DeptStkOut1", Storage="_Dept1", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept1
        {
            get
            {
                return this._Dept1.Entity;
            }
            set
            {
                Dept previousValue = this._Dept1.Entity;
                if ((previousValue != value) || (this._Dept1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept1.Entity = null;
                        previousValue.DeptStkOuts1.Remove(this);
                    }
                    this._Dept1.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOuts1.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept1");
                }
            }
        }

        [Association(Name="DeptStkOut_DeptStkOutCst", Storage="_DeptStkOutCsts", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<DeptStkOutCst> DeptStkOutCsts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOutCsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOutCsts;
            }
            set
            {
                this._DeptStkOutCsts.Assign(value);
            }
        }

        [Association(Name="DeptStkOut_DeptStkOutDet", Storage="_DeptStkOutDets", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<DeptStkOutDet> DeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOutDets;
            }
            set
            {
                this._DeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkOut", Storage="_Prd", ThisKey="CreateId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStkOuts.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOuts.Add(this);
                        this._CreateId = value.ProductId;
                    }
                    else
                    {
                        this._CreateId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptStkOutCsts(DeptStkOutCst entity)
        {
            this.SendPropertyChanging("DeptStkOutCsts");
            entity.DeptStkOut = this;
        }
    
        private void detach_DeptStkOutCsts(DeptStkOutCst entity)
        {
            this.SendPropertyChanging("DeptStkOutCsts");
            entity.DeptStkOut = null;
        }

        private void attach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.DeptStkOut = this;
        }
    
        private void detach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.DeptStkOut = null;
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            this._Dept1 = default(EntityRef<Dept>);
            this._DeptStkOutCsts = new EntitySet<DeptStkOutCst>(new Action<DeptStkOutCst>(this.attach_DeptStkOutCsts), new Action<DeptStkOutCst>(this.detach_DeptStkOutCsts));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for DeptStkOutCst in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_OUT_CST")]
    [DataContract()]
    public partial class DeptStkOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutId;

        private double _CostType;

        private double _DepartmentId;

        private double _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptStkOut> _DeptStkOut;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCostChanging(double value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptStkOutCst()
        {
            this.Initialize();
            this._DeptStkOut  = default(EntityRef<DeptStkOut>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    if (this._DeptStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=4)]
        public double Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptStkOut_DeptStkOutCst", Storage="_DeptStkOut", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId", IsForeignKey=true)]
        public DeptStkOut DeptStkOut
        {
            get
            {
                return this._DeptStkOut.Entity;
            }
            set
            {
                DeptStkOut previousValue = this._DeptStkOut.Entity;
                if ((previousValue != value) || (this._DeptStkOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptStkOut.Entity = null;
                        previousValue.DeptStkOutCsts.Remove(this);
                    }
                    this._DeptStkOut.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOutCsts.Add(this);
                        this._StockOutId = value.StockOutId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockOutId = default(double);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptStkOut");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptStkOut = default(EntityRef<DeptStkOut>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkOutDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_OUT_DET")]
    [DataContract()]
    public partial class DeptStkOutDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutId;

        private string _ProductId;

        private string _ProductMasterId;

        private double _DepartmentId;

        private System.Nullable<double> _Quantity;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _DefectStatusId;

        private double _StockOutDetailId;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _LostQuantity;

        private System.Nullable<double> _UnconfirmQuantity;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _Amount;

        private EntityRef<DeptStkOut> _DeptStkOut;

        private EntityRef<Prd> _Prd;

        private EntityRef<PrdMst> _PrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDefectStatusIdChanging(System.Nullable<double> value);
        partial void OnDefectStatusIdChanged();
        partial void OnStockOutDetailIdChanging(double value);
        partial void OnStockOutDetailIdChanged();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<double> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnAmountChanging(System.Nullable<double> value);
        partial void OnAmountChanged();
        #endregion

        public DeptStkOutDet()
        {
            this.Initialize();
            this._DeptStkOut  = default(EntityRef<DeptStkOut>);
            this._Prd  = default(EntityRef<Prd>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    if (this._DeptStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=4)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptStkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=6)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDetailId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DETAIL_ID", Storage = "_StockOutDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=19)]
        public double StockOutDetailId
        {
            get
            {
                return this._StockOutDetailId;
            }
            set
            {
                if (this._StockOutDetailId != value)
                {
                    this.OnStockOutDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDetailId = value;
                    this.SendPropertyChanged("StockOutDetailId");
                    this.OnStockOutDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=22)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=23)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=24)]
        public System.Nullable<double> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=25)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"AMOUNT", Storage = "_Amount", DbType = "NUMBER(10)")]
        [DataMember(Order=26)]
        public System.Nullable<double> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Association(Name="DeptStkOut_DeptStkOutDet", Storage="_DeptStkOut", ThisKey="StockOutId,DepartmentId", OtherKey="StockOutId,DepartmentId", IsForeignKey=true)]
        public DeptStkOut DeptStkOut
        {
            get
            {
                return this._DeptStkOut.Entity;
            }
            set
            {
                DeptStkOut previousValue = this._DeptStkOut.Entity;
                if ((previousValue != value) || (this._DeptStkOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptStkOut.Entity = null;
                        previousValue.DeptStkOutDets.Remove(this);
                    }
                    this._DeptStkOut.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOutDets.Add(this);
                        this._StockOutId = value.StockOutId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._StockOutId = default(double);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptStkOut");
                }
            }
        }

        [Association(Name="Prd_DeptStkOutDet", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStkOutDets.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOutDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }

        [Association(Name="PrdMst_DeptStkOutDet", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.DeptStkOutDets.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkOutDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptStkOut = default(EntityRef<DeptStkOut>);
            this._Prd = default(EntityRef<Prd>);
            this._PrdMst = default(EntityRef<PrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkTempValid in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_TEMP_VALID")]
    [DataContract()]
    public partial class DeptStkTempValid : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _OnStorePrice;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _LostQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _UnconfirmQuantity;

        private double _Fixed;

        private EntityRef<Prd> _Prd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<double> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<double> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnFixedChanging(double value);
        partial void OnFixedChanged();
        #endregion

        public DeptStkTempValid()
        {
            this.Initialize();
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=6)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fixed in the schema.
        /// </summary>
        [Column(Name = @"FIXED", Storage = "_Fixed", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=22)]
        public double Fixed
        {
            get
            {
                return this._Fixed;
            }
            set
            {
                if (this._Fixed != value)
                {
                    this.OnFixedChanging(value);
                    this.SendPropertyChanging();
                    this._Fixed = value;
                    this.SendPropertyChanged("Fixed");
                    this.OnFixedChanged();
                }
            }
        }

        [Association(Name="Prd_DeptStkTempValid", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStkTempValids.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkTempValids.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptStkTempValidSave in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_STK_TEMP_VALID_SAVE")]
    [DataContract()]
    public partial class DeptStkTempValidSave : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _OnStorePrice;

        private System.DateTime _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _LostQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _UnconfirmQuantity;

        private double _Fixed;

        private EntityRef<Prd> _Prd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnOnStorePriceChanging(System.Nullable<double> value);
        partial void OnOnStorePriceChanged();
        partial void OnCreateDateChanging(System.DateTime value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<double> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnFixedChanging(double value);
        partial void OnFixedChanged();
        #endregion

        public DeptStkTempValidSave()
        {
            this.Initialize();
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OnStorePrice in the schema.
        /// </summary>
        [Column(Name = @"ON_STORE_PRICE", Storage = "_OnStorePrice", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> OnStorePrice
        {
            get
            {
                return this._OnStorePrice;
            }
            set
            {
                if (this._OnStorePrice != value)
                {
                    this.OnOnStorePriceChanging(value);
                    this.SendPropertyChanging();
                    this._OnStorePrice = value;
                    this.SendPropertyChanged("OnStorePrice");
                    this.OnOnStorePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=6)]
        public System.DateTime CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fixed in the schema.
        /// </summary>
        [Column(Name = @"FIXED", Storage = "_Fixed", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=22)]
        public double Fixed
        {
            get
            {
                return this._Fixed;
            }
            set
            {
                if (this._Fixed != value)
                {
                    this.OnFixedChanging(value);
                    this.SendPropertyChanging();
                    this._Fixed = value;
                    this.SendPropertyChanged("Fixed");
                    this.OnFixedChanged();
                }
            }
        }

        [Association(Name="Prd_DeptStkTempValidSave", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.DeptStkTempValidSaves.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.DeptStkTempValidSaves.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for DeptTimeline in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DEPT_TIMELINE")]
    [DataContract()]
    public partial class DeptTimeline : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private double _Period;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;

        private System.DateTime _WorkingDay;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPeriodChanging(double value);
        partial void OnPeriodChanged();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public DeptTimeline()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Name = @"PERIOD", Storage = "_Period", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "DATE NOT NULL")]
        [DataMember(Order=5)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(180)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(180)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Distbtor in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_DISTBTOR")]
    [DataContract()]
    public partial class Distbtor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DistributorId;

        private string _DistributorName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDistributorIdChanging(double value);
        partial void OnDistributorIdChanged();
        partial void OnDistributorNameChanging(string value);
        partial void OnDistributorNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Distbtor()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_ID", Storage = "_DistributorId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DistributorName in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_NAME", Storage = "_DistributorName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string DistributorName
        {
            get
            {
                return this._DistributorName;
            }
            set
            {
                if (this._DistributorName != value)
                {
                    this.OnDistributorNameChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorName = value;
                    this.SendPropertyChanged("DistributorName");
                    this.OnDistributorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Emp in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP")]
    [DataContract()]
    public partial class Emp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private EntitySet<Contract> _Contracts;

        private EntitySet<EmpDayoff> _EmpDayoffs;

        private EntitySet<EmpReward> _EmpRewards;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        #endregion

        public Emp()
        {
            this.Initialize();
            this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
            this._EmpDayoffs = new EntitySet<EmpDayoff>(new Action<EmpDayoff>(this.attach_EmpDayoffs), new Action<EmpDayoff>(this.detach_EmpDayoffs));
            this._EmpRewards = new EntitySet<EmpReward>(new Action<EmpReward>(this.attach_EmpRewards), new Action<EmpReward>(this.detach_EmpRewards));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=14)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE")]
        [DataMember(Order=15)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [Association(Name="Emp_Contract", Storage="_Contracts", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId")]
        [DataMember(Order=16, EmitDefaultValue=false)]
        public EntitySet<Contract> Contracts
        {
            get
            {
                if ((this.serializing 
                  && (this._Contracts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Contracts;
            }
            set
            {
                this._Contracts.Assign(value);
            }
        }

        [Association(Name="Emp_EmpDayoff", Storage="_EmpDayoffs", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId")]
        [DataMember(Order=17, EmitDefaultValue=false)]
        public EntitySet<EmpDayoff> EmpDayoffs
        {
            get
            {
                if ((this.serializing 
                  && (this._EmpDayoffs.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._EmpDayoffs;
            }
            set
            {
                this._EmpDayoffs.Assign(value);
            }
        }

        [Association(Name="Emp_EmpReward", Storage="_EmpRewards", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<EmpReward> EmpRewards
        {
            get
            {
                if ((this.serializing 
                  && (this._EmpRewards.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._EmpRewards;
            }
            set
            {
                this._EmpRewards.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contracts(Contract entity)
        {
            this.SendPropertyChanging("Contracts");
            entity.Emp = this;
        }
    
        private void detach_Contracts(Contract entity)
        {
            this.SendPropertyChanging("Contracts");
            entity.Emp = null;
        }

        private void attach_EmpDayoffs(EmpDayoff entity)
        {
            this.SendPropertyChanging("EmpDayoffs");
            entity.Emp = this;
        }
    
        private void detach_EmpDayoffs(EmpDayoff entity)
        {
            this.SendPropertyChanging("EmpDayoffs");
            entity.Emp = null;
        }

        private void attach_EmpRewards(EmpReward entity)
        {
            this.SendPropertyChanging("EmpRewards");
            entity.Emp = this;
        }
    
        private void detach_EmpRewards(EmpReward entity)
        {
            this.SendPropertyChanging("EmpRewards");
            entity.Emp = null;
        }

        private void Initialize()
        {
            this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
            this._EmpDayoffs = new EntitySet<EmpDayoff>(new Action<EmpDayoff>(this.attach_EmpDayoffs), new Action<EmpDayoff>(this.detach_EmpDayoffs));
            this._EmpRewards = new EntitySet<EmpReward>(new Action<EmpReward>(this.attach_EmpRewards), new Action<EmpReward>(this.detach_EmpRewards));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for EmpDayoff in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP_DAYOFF")]
    [DataContract()]
    public partial class EmpDayoff : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _DayoffTime;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Emp> _Emp;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDayoffTimeChanging(System.DateTime value);
        partial void OnDayoffTimeChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public EmpDayoff()
        {
            this.Initialize();
            this._Emp  = default(EntityRef<Emp>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DayoffTime in the schema.
        /// </summary>
        [Column(Name = @"DAYOFF_TIME", Storage = "_DayoffTime", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime DayoffTime
        {
            get
            {
                return this._DayoffTime;
            }
            set
            {
                if (this._DayoffTime != value)
                {
                    this.OnDayoffTimeChanging(value);
                    this.SendPropertyChanging();
                    this._DayoffTime = value;
                    this.SendPropertyChanged("DayoffTime");
                    this.OnDayoffTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Emp_EmpDayoff", Storage="_Emp", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId", IsForeignKey=true)]
        public Emp Emp
        {
            get
            {
                return this._Emp.Entity;
            }
            set
            {
                Emp previousValue = this._Emp.Entity;
                if ((previousValue != value) || (this._Emp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Emp.Entity = null;
                        previousValue.EmpDayoffs.Remove(this);
                    }
                    this._Emp.Entity = value;
                    if (value != null)
                    {
                        value.EmpDayoffs.Add(this);
                        this._EmployeeId = value.EmployeeId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._EmployeeId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Emp");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Emp = default(EntityRef<Emp>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for EmpInfo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP_INFO")]
    [DataContract()]
    public partial class EmpInfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private string _EmployeeName;

        private string _Address;

        private System.Nullable<System.DateTime> _Birthday;

        private System.Nullable<double> _ContractId;

        private System.Nullable<double> _Salary;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private string _Manager;

        private string _Barcode;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptMng> _DeptMngs;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnEmployeeNameChanging(string value);
        partial void OnEmployeeNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnContractIdChanging(System.Nullable<double> value);
        partial void OnContractIdChanged();
        partial void OnSalaryChanging(System.Nullable<double> value);
        partial void OnSalaryChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnManagerChanging(string value);
        partial void OnManagerChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public EmpInfo()
        {
            this.Initialize();
            this._DeptMngs = new EntitySet<DeptMng>(new Action<DeptMng>(this.attach_DeptMngs), new Action<DeptMng>(this.detach_DeptMngs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeName in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_NAME", Storage = "_EmployeeName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string EmployeeName
        {
            get
            {
                return this._EmployeeName;
            }
            set
            {
                if (this._EmployeeName != value)
                {
                    this.OnEmployeeNameChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeName = value;
                    this.SendPropertyChanged("EmployeeName");
                    this.OnEmployeeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Birthday in the schema.
        /// </summary>
        [Column(Name = @"BIRTHDAY", Storage = "_Birthday", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractId in the schema.
        /// </summary>
        [Column(Name = @"CONTRACT_ID", Storage = "_ContractId", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> ContractId
        {
            get
            {
                return this._ContractId;
            }
            set
            {
                if (this._ContractId != value)
                {
                    this.OnContractIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContractId = value;
                    this.SendPropertyChanged("ContractId");
                    this.OnContractIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salary in the schema.
        /// </summary>
        [Column(Name = @"SALARY", Storage = "_Salary", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Salary
        {
            get
            {
                return this._Salary;
            }
            set
            {
                if (this._Salary != value)
                {
                    this.OnSalaryChanging(value);
                    this.SendPropertyChanging();
                    this._Salary = value;
                    this.SendPropertyChanged("Salary");
                    this.OnSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Manager in the schema.
        /// </summary>
        [Column(Name = @"MANAGER", Storage = "_Manager", DbType = "VARCHAR2(80)")]
        [DataMember(Order=11)]
        public string Manager
        {
            get
            {
                return this._Manager;
            }
            set
            {
                if (this._Manager != value)
                {
                    this.OnManagerChanging(value);
                    this.SendPropertyChanging();
                    this._Manager = value;
                    this.SendPropertyChanged("Manager");
                    this.OnManagerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "VARCHAR2(40)")]
        [DataMember(Order=12)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="EmpInfo_DeptMng", Storage="_DeptMngs", OtherKey="EmployeeId")]
        [DataMember(Order=20, EmitDefaultValue=false)]
        public EntitySet<DeptMng> DeptMngs
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptMngs.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptMngs;
            }
            set
            {
                this._DeptMngs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptMngs(DeptMng entity)
        {
            this.SendPropertyChanging("DeptMngs");
            entity.EmpInfo = this;
        }
    
        private void detach_DeptMngs(DeptMng entity)
        {
            this.SendPropertyChanging("DeptMngs");
            entity.EmpInfo = null;
        }

        private void Initialize()
        {
            this._DeptMngs = new EntitySet<DeptMng>(new Action<DeptMng>(this.attach_DeptMngs), new Action<DeptMng>(this.detach_DeptMngs));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for EmpMoney in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP_MONEY")]
    [DataContract()]
    public partial class EmpMoney : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _DateLogin;

        private System.Nullable<System.DateTime> _DateLogout;

        private string _WorkingDay;

        private System.Nullable<double> _InMoney;

        private System.Nullable<double> _OutMoney;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnDateLoginChanging(System.Nullable<System.DateTime> value);
        partial void OnDateLoginChanged();
        partial void OnDateLogoutChanging(System.Nullable<System.DateTime> value);
        partial void OnDateLogoutChanged();
        partial void OnWorkingDayChanging(string value);
        partial void OnWorkingDayChanged();
        partial void OnInMoneyChanging(System.Nullable<double> value);
        partial void OnInMoneyChanged();
        partial void OnOutMoneyChanging(System.Nullable<double> value);
        partial void OnOutMoneyChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public EmpMoney()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateLogin in the schema.
        /// </summary>
        [Column(Name = @"DATE_LOGIN", Storage = "_DateLogin", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> DateLogin
        {
            get
            {
                return this._DateLogin;
            }
            set
            {
                if (this._DateLogin != value)
                {
                    this.OnDateLoginChanging(value);
                    this.SendPropertyChanging();
                    this._DateLogin = value;
                    this.SendPropertyChanged("DateLogin");
                    this.OnDateLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateLogout in the schema.
        /// </summary>
        [Column(Name = @"DATE_LOGOUT", Storage = "_DateLogout", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> DateLogout
        {
            get
            {
                return this._DateLogout;
            }
            set
            {
                if (this._DateLogout != value)
                {
                    this.OnDateLogoutChanging(value);
                    this.SendPropertyChanging();
                    this._DateLogout = value;
                    this.SendPropertyChanged("DateLogout");
                    this.OnDateLogoutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "VARCHAR2(180) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=5)]
        public string WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InMoney in the schema.
        /// </summary>
        [Column(Name = @"IN_MONEY", Storage = "_InMoney", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> InMoney
        {
            get
            {
                return this._InMoney;
            }
            set
            {
                if (this._InMoney != value)
                {
                    this.OnInMoneyChanging(value);
                    this.SendPropertyChanging();
                    this._InMoney = value;
                    this.SendPropertyChanged("InMoney");
                    this.OnInMoneyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OutMoney in the schema.
        /// </summary>
        [Column(Name = @"OUT_MONEY", Storage = "_OutMoney", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> OutMoney
        {
            get
            {
                return this._OutMoney;
            }
            set
            {
                if (this._OutMoney != value)
                {
                    this.OnOutMoneyChanging(value);
                    this.SendPropertyChanging();
                    this._OutMoney = value;
                    this.SendPropertyChanged("OutMoney");
                    this.OnOutMoneyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for EmpReward in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP_REWARD")]
    [DataContract()]
    public partial class EmpReward : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _RewardDate;

        private double _DepartmentId;

        private System.Nullable<double> _RewardValue;

        private string _RewardName;

        private System.Nullable<double> _MoneyValue;

        private System.Nullable<double> _GiftId;

        private System.Nullable<double> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Emp> _Emp;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnRewardDateChanging(System.DateTime value);
        partial void OnRewardDateChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnRewardValueChanging(System.Nullable<double> value);
        partial void OnRewardValueChanged();
        partial void OnRewardNameChanging(string value);
        partial void OnRewardNameChanged();
        partial void OnMoneyValueChanging(System.Nullable<double> value);
        partial void OnMoneyValueChanged();
        partial void OnGiftIdChanging(System.Nullable<double> value);
        partial void OnGiftIdChanged();
        partial void OnGiftProductIdChanging(System.Nullable<double> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public EmpReward()
        {
            this.Initialize();
            this._Emp  = default(EntityRef<Emp>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardDate in the schema.
        /// </summary>
        [Column(Name = @"REWARD_DATE", Storage = "_RewardDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime RewardDate
        {
            get
            {
                return this._RewardDate;
            }
            set
            {
                if (this._RewardDate != value)
                {
                    this.OnRewardDateChanging(value);
                    this.SendPropertyChanging();
                    this._RewardDate = value;
                    this.SendPropertyChanged("RewardDate");
                    this.OnRewardDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Emp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardValue in the schema.
        /// </summary>
        [Column(Name = @"REWARD_VALUE", Storage = "_RewardValue", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> RewardValue
        {
            get
            {
                return this._RewardValue;
            }
            set
            {
                if (this._RewardValue != value)
                {
                    this.OnRewardValueChanging(value);
                    this.SendPropertyChanging();
                    this._RewardValue = value;
                    this.SendPropertyChanged("RewardValue");
                    this.OnRewardValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RewardName in the schema.
        /// </summary>
        [Column(Name = @"REWARD_NAME", Storage = "_RewardName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=5)]
        public string RewardName
        {
            get
            {
                return this._RewardName;
            }
            set
            {
                if (this._RewardName != value)
                {
                    this.OnRewardNameChanging(value);
                    this.SendPropertyChanging();
                    this._RewardName = value;
                    this.SendPropertyChanged("RewardName");
                    this.OnRewardNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MoneyValue in the schema.
        /// </summary>
        [Column(Name = @"MONEY_VALUE", Storage = "_MoneyValue", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> MoneyValue
        {
            get
            {
                return this._MoneyValue;
            }
            set
            {
                if (this._MoneyValue != value)
                {
                    this.OnMoneyValueChanging(value);
                    this.SendPropertyChanging();
                    this._MoneyValue = value;
                    this.SendPropertyChanged("MoneyValue");
                    this.OnMoneyValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=11)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=12)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Emp_EmpReward", Storage="_Emp", ThisKey="EmployeeId,DepartmentId", OtherKey="EmployeeId,DepartmentId", IsForeignKey=true)]
        public Emp Emp
        {
            get
            {
                return this._Emp.Entity;
            }
            set
            {
                Emp previousValue = this._Emp.Entity;
                if ((previousValue != value) || (this._Emp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Emp.Entity = null;
                        previousValue.EmpRewards.Remove(this);
                    }
                    this._Emp.Entity = value;
                    if (value != null)
                    {
                        value.EmpRewards.Add(this);
                        this._EmployeeId = value.EmployeeId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._EmployeeId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Emp");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Emp = default(EntityRef<Emp>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for EmpWrkgDay in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EMP_WRKG_DAYS")]
    [DataContract()]
    public partial class EmpWrkgDay : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private System.DateTime _WorkingDay;

        private System.Nullable<double> _Period;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartTime;

        private System.Nullable<System.DateTime> _EndTime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnWorkingDayChanging(System.DateTime value);
        partial void OnWorkingDayChanged();
        partial void OnPeriodChanging(System.Nullable<double> value);
        partial void OnPeriodChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnEndTimeChanged();
        #endregion

        public EmpWrkgDay()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkingDay in the schema.
        /// </summary>
        [Column(Name = @"WORKING_DAY", Storage = "_WorkingDay", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public System.DateTime WorkingDay
        {
            get
            {
                return this._WorkingDay;
            }
            set
            {
                if (this._WorkingDay != value)
                {
                    this.OnWorkingDayChanging(value);
                    this.SendPropertyChanging();
                    this._WorkingDay = value;
                    this.SendPropertyChanged("WorkingDay");
                    this.OnWorkingDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Name = @"PERIOD", Storage = "_Period", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=4)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Name = @"START_TIME", Storage = "_StartTime", DbType = "DATE")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Name = @"END_TIME", Storage = "_EndTime", DbType = "DATE")]
        [DataMember(Order=17)]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for ExPrdColor in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EX_PRD_COLOR")]
    [DataContract()]
    public partial class ExPrdColor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ColorId;

        private string _ColorName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<Prd> _Prds;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnColorIdChanging(double value);
        partial void OnColorIdChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public ExPrdColor()
        {
            this.Initialize();
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ColorId in the schema.
        /// </summary>
        [Column(Name = @"COLOR_ID", Storage = "_ColorId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ColorId
        {
            get
            {
                return this._ColorId;
            }
            set
            {
                if (this._ColorId != value)
                {
                    this.OnColorIdChanging(value);
                    this.SendPropertyChanging();
                    this._ColorId = value;
                    this.SendPropertyChanged("ColorId");
                    this.OnColorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorName in the schema.
        /// </summary>
        [Column(Name = @"COLOR_NAME", Storage = "_ColorName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="ExPrdColor_Prd", Storage="_Prds", OtherKey="ExFld1")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<Prd> Prds
        {
            get
            {
                if ((this.serializing 
                  && (this._Prds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Prds;
            }
            set
            {
                this._Prds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.ExPrdColor = this;
        }
    
        private void detach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.ExPrdColor = null;
        }

        private void Initialize()
        {
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for ExPrdSize in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_EX_PRD_SIZE")]
    [DataContract()]
    public partial class ExPrdSize : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _SizeId;

        private string _SizeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<Prd> _Prds;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSizeIdChanging(double value);
        partial void OnSizeIdChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public ExPrdSize()
        {
            this.Initialize();
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SizeId in the schema.
        /// </summary>
        [Column(Name = @"SIZE_ID", Storage = "_SizeId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double SizeId
        {
            get
            {
                return this._SizeId;
            }
            set
            {
                if (this._SizeId != value)
                {
                    this.OnSizeIdChanging(value);
                    this.SendPropertyChanging();
                    this._SizeId = value;
                    this.SendPropertyChanged("SizeId");
                    this.OnSizeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SizeName in the schema.
        /// </summary>
        [Column(Name = @"SIZE_NAME", Storage = "_SizeName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string SizeName
        {
            get
            {
                return this._SizeName;
            }
            set
            {
                if (this._SizeName != value)
                {
                    this.OnSizeNameChanging(value);
                    this.SendPropertyChanging();
                    this._SizeName = value;
                    this.SendPropertyChanged("SizeName");
                    this.OnSizeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="ExPrdSize_Prd", Storage="_Prds", OtherKey="ExFld2")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<Prd> Prds
        {
            get
            {
                if ((this.serializing 
                  && (this._Prds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Prds;
            }
            set
            {
                this._Prds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.ExPrdSize = this;
        }
    
        private void detach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.ExPrdSize = null;
        }

        private void Initialize()
        {
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for Gift in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_GIFT")]
    [DataContract()]
    public partial class Gift : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _GiftId;

        private double _DepartmentId;

        private string _GiftName;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _SupplierId;

        private System.Nullable<double> _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptPoPromo> _DeptPoPromos;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnGiftIdChanging(double value);
        partial void OnGiftIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnGiftNameChanging(string value);
        partial void OnGiftNameChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnSupplierIdChanging(System.Nullable<double> value);
        partial void OnSupplierIdChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Gift()
        {
            this.Initialize();
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GiftId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_ID", Storage = "_GiftId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double GiftId
        {
            get
            {
                return this._GiftId;
            }
            set
            {
                if (this._GiftId != value)
                {
                    this.OnGiftIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftId = value;
                    this.SendPropertyChanged("GiftId");
                    this.OnGiftIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftName in the schema.
        /// </summary>
        [Column(Name = @"GIFT_NAME", Storage = "_GiftName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string GiftName
        {
            get
            {
                return this._GiftName;
            }
            set
            {
                if (this._GiftName != value)
                {
                    this.OnGiftNameChanging(value);
                    this.SendPropertyChanging();
                    this._GiftName = value;
                    this.SendPropertyChanged("GiftName");
                    this.OnGiftNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Gift_DeptPoPromo", Storage="_DeptPoPromos", ThisKey="GiftId,DepartmentId", OtherKey="GiftId,GiftDepartmentId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<DeptPoPromo> DeptPoPromos
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPoPromos.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPoPromos;
            }
            set
            {
                this._DeptPoPromos.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.Gift = this;
        }
    
        private void detach_DeptPoPromos(DeptPoPromo entity)
        {
            this.SendPropertyChanging("DeptPoPromos");
            entity.Gift = null;
        }

        private void Initialize()
        {
            this._DeptPoPromos = new EntitySet<DeptPoPromo>(new Action<DeptPoPromo>(this.attach_DeptPoPromos), new Action<DeptPoPromo>(this.detach_DeptPoPromos));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for MnPrice in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_MN_PRICE")]
    [DataContract()]
    public partial class MnPrice : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DepartmentId;

        private string _ProductMasterId;

        private double _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _WholeSalePrice;

        private EntityRef<PrdMst> _PrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnPriceChanging(double value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnWholeSalePriceChanging(System.Nullable<double> value);
        partial void OnWholeSalePriceChanged();
        #endregion

        public MnPrice()
        {
            this.Initialize();
            this._PrdMst  = default(EntityRef<PrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "VARCHAR2(52) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=3)]
        public double Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WholeSalePrice in the schema.
        /// </summary>
        [Column(Name = @"WHOLE_SALE_PRICE", Storage = "_WholeSalePrice", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> WholeSalePrice
        {
            get
            {
                return this._WholeSalePrice;
            }
            set
            {
                if (this._WholeSalePrice != value)
                {
                    this.OnWholeSalePriceChanging(value);
                    this.SendPropertyChanging();
                    this._WholeSalePrice = value;
                    this.SendPropertyChanged("WholeSalePrice");
                    this.OnWholeSalePriceChanged();
                }
            }
        }

        [Association(Name="PrdMst_MnPrice", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.MnPrices.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.MnPrices.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._PrdMst = default(EntityRef<PrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for MnStk in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_MN_STK")]
    [DataContract()]
    public partial class MnStk : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _LostQuantity;

        private System.Nullable<double> _UnconfirmQuantity;

        private string _Position;

        private EntityRef<Prd> _Prd;

        private EntityRef<PrdMst> _PrdMst;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockIdChanging(double value);
        partial void OnStockIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        partial void OnUnconfirmQuantityChanging(System.Nullable<double> value);
        partial void OnUnconfirmQuantityChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        #endregion

        public MnStk()
        {
            this.Initialize();
            this._Prd  = default(EntityRef<Prd>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmQuantity in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_QUANTITY", Storage = "_UnconfirmQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> UnconfirmQuantity
        {
            get
            {
                return this._UnconfirmQuantity;
            }
            set
            {
                if (this._UnconfirmQuantity != value)
                {
                    this.OnUnconfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmQuantity = value;
                    this.SendPropertyChanged("UnconfirmQuantity");
                    this.OnUnconfirmQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"POSITION", Storage = "_Position", DbType = "VARCHAR2(800)")]
        [DataMember(Order=21)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

        [Association(Name="Prd_MnStk", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.MnStks.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.MnStks.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }

        [Association(Name="PrdMst_MnStk", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.MnStks.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.MnStks.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Prd = default(EntityRef<Prd>);
            this._PrdMst = default(EntityRef<PrdMst>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for MnStkHis in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_MN_STK_HIS")]
    [DataContract()]
    public partial class MnStkHis : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockHistoryId;

        private string _ProductId;

        private string _ProductMasterId;

        private double _Quantity;

        private string _CreateId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _UpdateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private double _StockId;

        private string _Description;

        private System.Nullable<double> _GoodCount;

        private System.Nullable<double> _ErrorCount;

        private System.Nullable<double> _DamageCount;

        private System.Nullable<double> _LostCount;

        private System.Nullable<double> _UnconfirmCount;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockHistoryIdChanging(double value);
        partial void OnStockHistoryIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockIdChanging(double value);
        partial void OnStockIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodCountChanging(System.Nullable<double> value);
        partial void OnGoodCountChanged();
        partial void OnErrorCountChanging(System.Nullable<double> value);
        partial void OnErrorCountChanged();
        partial void OnDamageCountChanging(System.Nullable<double> value);
        partial void OnDamageCountChanged();
        partial void OnLostCountChanging(System.Nullable<double> value);
        partial void OnLostCountChanged();
        partial void OnUnconfirmCountChanging(System.Nullable<double> value);
        partial void OnUnconfirmCountChanged();
        #endregion

        public MnStkHis()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockHistoryId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_HISTORY_ID", Storage = "_StockHistoryId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockHistoryId
        {
            get
            {
                return this._StockHistoryId;
            }
            set
            {
                if (this._StockHistoryId != value)
                {
                    this.OnStockHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockHistoryId = value;
                    this.SendPropertyChanged("StockHistoryId");
                    this.OnStockHistoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "VARCHAR2(52) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=4)]
        public double Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=16)]
        public double StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(800)")]
        [DataMember(Order=17)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodCount in the schema.
        /// </summary>
        [Column(Name = @"GOOD_COUNT", Storage = "_GoodCount", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> GoodCount
        {
            get
            {
                return this._GoodCount;
            }
            set
            {
                if (this._GoodCount != value)
                {
                    this.OnGoodCountChanging(value);
                    this.SendPropertyChanging();
                    this._GoodCount = value;
                    this.SendPropertyChanged("GoodCount");
                    this.OnGoodCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorCount in the schema.
        /// </summary>
        [Column(Name = @"ERROR_COUNT", Storage = "_ErrorCount", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> ErrorCount
        {
            get
            {
                return this._ErrorCount;
            }
            set
            {
                if (this._ErrorCount != value)
                {
                    this.OnErrorCountChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorCount = value;
                    this.SendPropertyChanged("ErrorCount");
                    this.OnErrorCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageCount in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_COUNT", Storage = "_DamageCount", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> DamageCount
        {
            get
            {
                return this._DamageCount;
            }
            set
            {
                if (this._DamageCount != value)
                {
                    this.OnDamageCountChanging(value);
                    this.SendPropertyChanging();
                    this._DamageCount = value;
                    this.SendPropertyChanged("DamageCount");
                    this.OnDamageCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostCount in the schema.
        /// </summary>
        [Column(Name = @"LOST_COUNT", Storage = "_LostCount", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> LostCount
        {
            get
            {
                return this._LostCount;
            }
            set
            {
                if (this._LostCount != value)
                {
                    this.OnLostCountChanging(value);
                    this.SendPropertyChanging();
                    this._LostCount = value;
                    this.SendPropertyChanged("LostCount");
                    this.OnLostCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnconfirmCount in the schema.
        /// </summary>
        [Column(Name = @"UNCONFIRM_COUNT", Storage = "_UnconfirmCount", DbType = "NUMBER(10)")]
        [DataMember(Order=22)]
        public System.Nullable<double> UnconfirmCount
        {
            get
            {
                return this._UnconfirmCount;
            }
            set
            {
                if (this._UnconfirmCount != value)
                {
                    this.OnUnconfirmCountChanging(value);
                    this.SendPropertyChanging();
                    this._UnconfirmCount = value;
                    this.SendPropertyChanged("UnconfirmCount");
                    this.OnUnconfirmCountChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Mnftr in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_MNFTR")]
    [DataContract()]
    public partial class Mnftr : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ManufacturerId;

        private string _ManufacturerName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnManufacturerIdChanging(double value);
        partial void OnManufacturerIdChanged();
        partial void OnManufacturerNameChanging(string value);
        partial void OnManufacturerNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Mnftr()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_ID", Storage = "_ManufacturerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufacturerName in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_NAME", Storage = "_ManufacturerName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string ManufacturerName
        {
            get
            {
                return this._ManufacturerName;
            }
            set
            {
                if (this._ManufacturerName != value)
                {
                    this.OnManufacturerNameChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerName = value;
                    this.SendPropertyChanged("ManufacturerName");
                    this.OnManufacturerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for OtherTransLog in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_OTHER_TRANS_LOG")]
    [DataContract()]
    public partial class OtherTransLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _TransactionDate;

        private double _TableName;

        private System.Nullable<double> _FieldName;

        private string _Action;

        private string _ValueBefore;

        private string _ValueAfter;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnTableNameChanging(double value);
        partial void OnTableNameChanged();
        partial void OnFieldNameChanging(System.Nullable<double> value);
        partial void OnFieldNameChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnValueBeforeChanging(string value);
        partial void OnValueBeforeChanged();
        partial void OnValueAfterChanging(string value);
        partial void OnValueAfterChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public OtherTransLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionDate in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_DATE", Storage = "_TransactionDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TableName in the schema.
        /// </summary>
        [Column(Name = @"TABLE_NAME", Storage = "_TableName", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=2)]
        public double TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if (this._TableName != value)
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging();
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FieldName in the schema.
        /// </summary>
        [Column(Name = @"FIELD_NAME", Storage = "_FieldName", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if (this._FieldName != value)
                {
                    this.OnFieldNameChanging(value);
                    this.SendPropertyChanging();
                    this._FieldName = value;
                    this.SendPropertyChanged("FieldName");
                    this.OnFieldNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Action in the schema.
        /// </summary>
        [Column(Name = @"ACTION", Storage = "_Action", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=4)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValueBefore in the schema.
        /// </summary>
        [Column(Name = @"VALUE_BEFORE", Storage = "_ValueBefore", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=5)]
        public string ValueBefore
        {
            get
            {
                return this._ValueBefore;
            }
            set
            {
                if (this._ValueBefore != value)
                {
                    this.OnValueBeforeChanging(value);
                    this.SendPropertyChanging();
                    this._ValueBefore = value;
                    this.SendPropertyChanged("ValueBefore");
                    this.OnValueBeforeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValueAfter in the schema.
        /// </summary>
        [Column(Name = @"VALUE_AFTER", Storage = "_ValueAfter", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=6)]
        public string ValueAfter
        {
            get
            {
                return this._ValueAfter;
            }
            set
            {
                if (this._ValueAfter != value)
                {
                    this.OnValueAfterChanging(value);
                    this.SendPropertyChanging();
                    this._ValueAfter = value;
                    this.SendPropertyChanged("ValueAfter");
                    this.OnValueAfterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for PblshCpn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PBLSH_CPN")]
    [DataContract()]
    public partial class PblshCpn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _CouponId;

        private double _PublishedCouponId;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<Coupon> _Coupon;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCouponIdChanging(double value);
        partial void OnCouponIdChanged();
        partial void OnPublishedCouponIdChanging(double value);
        partial void OnPublishedCouponIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public PblshCpn()
        {
            this.Initialize();
            this._Coupon  = default(EntityRef<Coupon>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CouponId in the schema.
        /// </summary>
        [Column(Name = @"COUPON_ID", Storage = "_CouponId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double CouponId
        {
            get
            {
                return this._CouponId;
            }
            set
            {
                if (this._CouponId != value)
                {
                    if (this._Coupon.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._CouponId = value;
                    this.SendPropertyChanged("CouponId");
                    this.OnCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublishedCouponId in the schema.
        /// </summary>
        [Column(Name = @"PUBLISHED_COUPON_ID", Storage = "_PublishedCouponId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double PublishedCouponId
        {
            get
            {
                return this._PublishedCouponId;
            }
            set
            {
                if (this._PublishedCouponId != value)
                {
                    this.OnPublishedCouponIdChanging(value);
                    this.SendPropertyChanging();
                    this._PublishedCouponId = value;
                    this.SendPropertyChanged("PublishedCouponId");
                    this.OnPublishedCouponIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Coupon_PblshCpn", Storage="_Coupon", ThisKey="CouponId", IsForeignKey=true)]
        public Coupon Coupon
        {
            get
            {
                return this._Coupon.Entity;
            }
            set
            {
                Coupon previousValue = this._Coupon.Entity;
                if ((previousValue != value) || (this._Coupon.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Coupon.Entity = null;
                        previousValue.PblshCpns.Remove(this);
                    }
                    this._Coupon.Entity = value;
                    if (value != null)
                    {
                        value.PblshCpns.Add(this);
                        this._CouponId = value.CouponId;
                    }
                    else
                    {
                        this._CouponId = default(double);
                    }
                    this.SendPropertyChanged("Coupon");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Coupon = default(EntityRef<Coupon>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Pkgr in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PKGR")]
    [DataContract()]
    public partial class Pkgr : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _PackagerId;

        private string _PackagerName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPackagerIdChanging(double value);
        partial void OnPackagerIdChanged();
        partial void OnPackagerNameChanging(string value);
        partial void OnPackagerNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Pkgr()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerName in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_NAME", Storage = "_PackagerName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string PackagerName
        {
            get
            {
                return this._PackagerName;
            }
            set
            {
                if (this._PackagerName != value)
                {
                    this.OnPackagerNameChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerName = value;
                    this.SendPropertyChanged("PackagerName");
                    this.OnPackagerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for PosLog in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_POS_LOG")]
    [DataContract()]
    public partial class PosLog : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private decimal _Id;

        private System.DateTime _Date;

        private string _Thread;

        private string _Level;

        private string _Logger;

        private string _Message;

        private string _Exception;

        private string _PosUser;

        private string _PosAction;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnThreadChanging(string value);
        partial void OnThreadChanged();
        partial void OnLevelChanging(string value);
        partial void OnLevelChanged();
        partial void OnLoggerChanging(string value);
        partial void OnLoggerChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnExceptionChanging(string value);
        partial void OnExceptionChanged();
        partial void OnPosUserChanging(string value);
        partial void OnPosUserChanged();
        partial void OnPosActionChanging(string value);
        partial void OnPosActionChanged();
        #endregion

        public PosLog()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(24) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        /// <LongDescription>
        /// ORIGINAL NAME:Date
        /// </LongDescription>
        [Column(Name = @"DATE_", Storage = "_Date", CanBeNull = false, DbType = "DATE NOT NULL")]
        [DataMember(Order=2)]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thread in the schema.
        /// </summary>
        [Column(Name = @"THREAD", Storage = "_Thread", CanBeNull = false, DbType = "VARCHAR2(1020) NOT NULL")]
        [DataMember(Order=3)]
        public string Thread
        {
            get
            {
                return this._Thread;
            }
            set
            {
                if (this._Thread != value)
                {
                    this.OnThreadChanging(value);
                    this.SendPropertyChanging();
                    this._Thread = value;
                    this.SendPropertyChanged("Thread");
                    this.OnThreadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        /// <LongDescription>
        /// ORIGINAL NAME:Level
        /// </LongDescription>
        [Column(Name = @"LEVEL_", Storage = "_Level", CanBeNull = false, DbType = "VARCHAR2(200) NOT NULL")]
        [DataMember(Order=4)]
        public string Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging();
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Logger in the schema.
        /// </summary>
        [Column(Name = @"LOGGER", Storage = "_Logger", CanBeNull = false, DbType = "VARCHAR2(1020) NOT NULL")]
        [DataMember(Order=5)]
        public string Logger
        {
            get
            {
                return this._Logger;
            }
            set
            {
                if (this._Logger != value)
                {
                    this.OnLoggerChanging(value);
                    this.SendPropertyChanging();
                    this._Logger = value;
                    this.SendPropertyChanged("Logger");
                    this.OnLoggerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Message in the schema.
        /// </summary>
        [Column(Name = @"MESSAGE", Storage = "_Message", CanBeNull = false, DbType = "CLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=6)]
        public string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this.SendPropertyChanging();
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Exception in the schema.
        /// </summary>
        [Column(Name = @"EXCEPTION", Storage = "_Exception", DbType = "VARCHAR2(4000)")]
        [DataMember(Order=7)]
        public string Exception
        {
            get
            {
                return this._Exception;
            }
            set
            {
                if (this._Exception != value)
                {
                    this.OnExceptionChanging(value);
                    this.SendPropertyChanging();
                    this._Exception = value;
                    this.SendPropertyChanged("Exception");
                    this.OnExceptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosUser in the schema.
        /// </summary>
        [Column(Name = @"POS_USER", Storage = "_PosUser", DbType = "VARCHAR2(400)")]
        [DataMember(Order=8)]
        public string PosUser
        {
            get
            {
                return this._PosUser;
            }
            set
            {
                if (this._PosUser != value)
                {
                    this.OnPosUserChanging(value);
                    this.SendPropertyChanging();
                    this._PosUser = value;
                    this.SendPropertyChanged("PosUser");
                    this.OnPosUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosAction in the schema.
        /// </summary>
        [Column(Name = @"POS_ACTION", Storage = "_PosAction", DbType = "VARCHAR2(400)")]
        [DataMember(Order=9)]
        public string PosAction
        {
            get
            {
                return this._PosAction;
            }
            set
            {
                if (this._PosAction != value)
                {
                    this.OnPosActionChanging(value);
                    this.SendPropertyChanging();
                    this._PosAction = value;
                    this.SendPropertyChanged("PosAction");
                    this.OnPosActionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for PosTran in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_POS_TRANS")]
    [DataContract()]
    public partial class PosTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PosTransactionId;

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<decimal> _AmountIn;

        private System.Nullable<decimal> _AmountOut;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _DelFlg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnAmountInChanging(System.Nullable<decimal> value);
        partial void OnAmountInChanged();
        partial void OnAmountOutChanging(System.Nullable<decimal> value);
        partial void OnAmountOutChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        #endregion

        public PosTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_TRANSACTION_ID", Storage = "_PosTransactionId", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", CanBeNull = false, DbType = "VARCHAR2(48) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"STORE_ID", Storage = "_StoreId", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        [DataMember(Order=3)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"REGISTER_ID", Storage = "_RegisterId", CanBeNull = false, DbType = "VARCHAR2(8) NOT NULL")]
        [DataMember(Order=4)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"CASHIER_ID", Storage = "_CashierId", CanBeNull = false, DbType = "VARCHAR2(24) NOT NULL")]
        [DataMember(Order=5)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AmountIn in the schema.
        /// </summary>
        [Column(Name = @"AMOUNT_IN", Storage = "_AmountIn", DbType = "FLOAT(126)")]
        [DataMember(Order=6)]
        public System.Nullable<decimal> AmountIn
        {
            get
            {
                return this._AmountIn;
            }
            set
            {
                if (this._AmountIn != value)
                {
                    this.OnAmountInChanging(value);
                    this.SendPropertyChanging();
                    this._AmountIn = value;
                    this.SendPropertyChanged("AmountIn");
                    this.OnAmountInChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AmountOut in the schema.
        /// </summary>
        [Column(Name = @"AMOUNT_OUT", Storage = "_AmountOut", DbType = "FLOAT(126)")]
        [DataMember(Order=7)]
        public System.Nullable<decimal> AmountOut
        {
            get
            {
                return this._AmountOut;
            }
            set
            {
                if (this._AmountOut != value)
                {
                    this.OnAmountOutChanging(value);
                    this.SendPropertyChanging();
                    this._AmountOut = value;
                    this.SendPropertyChanged("AmountOut");
                    this.OnAmountOutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Prd in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PRD")]
    [DataContract()]
    public partial class Prd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _BlockId;

        private string _BlockDetailId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _TaxId;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private string _Barcode;

        private System.Nullable<decimal> _AdhocCase;

        private EntitySet<DeptPoDet> _DeptPoDets;

        private EntitySet<DeptPrmtn> _DeptPrmtns;

        private EntitySet<DeptStk> _DeptStks;

        private EntitySet<DeptStkInDet> _DeptStkInDets;

        private EntitySet<DeptStkOut> _DeptStkOuts;

        private EntitySet<DeptStkOutDet> _DeptStkOutDets;

        private EntitySet<DeptStkTempValid> _DeptStkTempValids;

        private EntitySet<DeptStkTempValidSave> _DeptStkTempValidSaves;

        private EntitySet<MnStk> _MnStks;

        private EntityRef<ExPrdSize> _ExPrdSize;

        private EntityRef<ExPrdColor> _ExPrdColor;

        private EntityRef<PrdMst> _PrdMst;

        private EntitySet<StkInDet> _StkInDets;

        private EntitySet<StkOutDet> _StkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnBlockIdChanging(System.Nullable<double> value);
        partial void OnBlockIdChanged();
        partial void OnBlockDetailIdChanging(string value);
        partial void OnBlockDetailIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnTaxIdChanging(System.Nullable<double> value);
        partial void OnTaxIdChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnAdhocCaseChanging(System.Nullable<decimal> value);
        partial void OnAdhocCaseChanged();
        #endregion

        public Prd()
        {
            this.Initialize();
            this._DeptPoDets = new EntitySet<DeptPoDet>(new Action<DeptPoDet>(this.attach_DeptPoDets), new Action<DeptPoDet>(this.detach_DeptPoDets));
            this._DeptPrmtns = new EntitySet<DeptPrmtn>(new Action<DeptPrmtn>(this.attach_DeptPrmtns), new Action<DeptPrmtn>(this.detach_DeptPrmtns));
            this._DeptStks = new EntitySet<DeptStk>(new Action<DeptStk>(this.attach_DeptStks), new Action<DeptStk>(this.detach_DeptStks));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            this._DeptStkOuts = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts), new Action<DeptStkOut>(this.detach_DeptStkOuts));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._DeptStkTempValids = new EntitySet<DeptStkTempValid>(new Action<DeptStkTempValid>(this.attach_DeptStkTempValids), new Action<DeptStkTempValid>(this.detach_DeptStkTempValids));
            this._DeptStkTempValidSaves = new EntitySet<DeptStkTempValidSave>(new Action<DeptStkTempValidSave>(this.attach_DeptStkTempValidSaves), new Action<DeptStkTempValidSave>(this.detach_DeptStkTempValidSaves));
            this._MnStks = new EntitySet<MnStk>(new Action<MnStk>(this.attach_MnStks), new Action<MnStk>(this.detach_MnStks));
            this._ExPrdSize  = default(EntityRef<ExPrdSize>);
            this._ExPrdColor  = default(EntityRef<ExPrdColor>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=2)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_ID", Storage = "_BlockId", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> BlockId
        {
            get
            {
                return this._BlockId;
            }
            set
            {
                if (this._BlockId != value)
                {
                    this.OnBlockIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockId = value;
                    this.SendPropertyChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", DbType = "VARCHAR2(40)")]
        [DataMember(Order=4)]
        public string BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    if (this._ExPrdColor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    if (this._ExPrdSize.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "VARCHAR2(80)")]
        [DataMember(Order=19)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AdhocCase in the schema.
        /// </summary>
        [Column(Name = @"ADHOC_CASE", Storage = "_AdhocCase", DbType = "NUMBER")]
        [DataMember(Order=20)]
        public System.Nullable<decimal> AdhocCase
        {
            get
            {
                return this._AdhocCase;
            }
            set
            {
                if (this._AdhocCase != value)
                {
                    this.OnAdhocCaseChanging(value);
                    this.SendPropertyChanging();
                    this._AdhocCase = value;
                    this.SendPropertyChanged("AdhocCase");
                    this.OnAdhocCaseChanged();
                }
            }
        }

        [Association(Name="Prd_DeptPoDet", Storage="_DeptPoDets", OtherKey="ProductId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<DeptPoDet> DeptPoDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPoDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPoDets;
            }
            set
            {
                this._DeptPoDets.Assign(value);
            }
        }

        [Association(Name="Prd_DeptPrmtn", Storage="_DeptPrmtns", OtherKey="ProductId")]
        [DataMember(Order=22, EmitDefaultValue=false)]
        public EntitySet<DeptPrmtn> DeptPrmtns
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPrmtns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPrmtns;
            }
            set
            {
                this._DeptPrmtns.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStk", Storage="_DeptStks", OtherKey="ProductId")]
        [DataMember(Order=23, EmitDefaultValue=false)]
        public EntitySet<DeptStk> DeptStks
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStks;
            }
            set
            {
                this._DeptStks.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkInDet", Storage="_DeptStkInDets", OtherKey="ProductId")]
        [DataMember(Order=24, EmitDefaultValue=false)]
        public EntitySet<DeptStkInDet> DeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkInDets;
            }
            set
            {
                this._DeptStkInDets.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkOut", Storage="_DeptStkOuts", OtherKey="CreateId")]
        [DataMember(Order=25, EmitDefaultValue=false)]
        public EntitySet<DeptStkOut> DeptStkOuts
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOuts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOuts;
            }
            set
            {
                this._DeptStkOuts.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkOutDet", Storage="_DeptStkOutDets", OtherKey="ProductId")]
        [DataMember(Order=26, EmitDefaultValue=false)]
        public EntitySet<DeptStkOutDet> DeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOutDets;
            }
            set
            {
                this._DeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkTempValid", Storage="_DeptStkTempValids", OtherKey="ProductId")]
        [DataMember(Order=27, EmitDefaultValue=false)]
        public EntitySet<DeptStkTempValid> DeptStkTempValids
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkTempValids.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkTempValids;
            }
            set
            {
                this._DeptStkTempValids.Assign(value);
            }
        }

        [Association(Name="Prd_DeptStkTempValidSave", Storage="_DeptStkTempValidSaves", OtherKey="ProductId")]
        [DataMember(Order=28, EmitDefaultValue=false)]
        public EntitySet<DeptStkTempValidSave> DeptStkTempValidSaves
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkTempValidSaves.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkTempValidSaves;
            }
            set
            {
                this._DeptStkTempValidSaves.Assign(value);
            }
        }

        [Association(Name="Prd_MnStk", Storage="_MnStks", OtherKey="ProductId")]
        [DataMember(Order=29, EmitDefaultValue=false)]
        public EntitySet<MnStk> MnStks
        {
            get
            {
                if ((this.serializing 
                  && (this._MnStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._MnStks;
            }
            set
            {
                this._MnStks.Assign(value);
            }
        }

        [Association(Name="ExPrdSize_Prd", Storage="_ExPrdSize", ThisKey="ExFld2", IsForeignKey=true)]
        public ExPrdSize ExPrdSize
        {
            get
            {
                return this._ExPrdSize.Entity;
            }
            set
            {
                ExPrdSize previousValue = this._ExPrdSize.Entity;
                if ((previousValue != value) || (this._ExPrdSize.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ExPrdSize.Entity = null;
                        previousValue.Prds.Remove(this);
                    }
                    this._ExPrdSize.Entity = value;
                    if (value != null)
                    {
                        value.Prds.Add(this);
                        this._ExFld2 = value.SizeId;
                    }
                    else
                    {
                        this._ExFld2 = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("ExPrdSize");
                }
            }
        }

        [Association(Name="ExPrdColor_Prd", Storage="_ExPrdColor", ThisKey="ExFld1", IsForeignKey=true)]
        public ExPrdColor ExPrdColor
        {
            get
            {
                return this._ExPrdColor.Entity;
            }
            set
            {
                ExPrdColor previousValue = this._ExPrdColor.Entity;
                if ((previousValue != value) || (this._ExPrdColor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ExPrdColor.Entity = null;
                        previousValue.Prds.Remove(this);
                    }
                    this._ExPrdColor.Entity = value;
                    if (value != null)
                    {
                        value.Prds.Add(this);
                        this._ExFld1 = value.ColorId;
                    }
                    else
                    {
                        this._ExFld1 = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("ExPrdColor");
                }
            }
        }

        [Association(Name="PrdMst_Prd", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.Prds.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.Prds.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }

        [Association(Name="Prd_StkInDet", Storage="_StkInDets", OtherKey="ProductId")]
        [DataMember(Order=30, EmitDefaultValue=false)]
        public EntitySet<StkInDet> StkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkInDets;
            }
            set
            {
                this._StkInDets.Assign(value);
            }
        }

        [Association(Name="Prd_StkOutDet", Storage="_StkOutDets", OtherKey="ProductId")]
        [DataMember(Order=31, EmitDefaultValue=false)]
        public EntitySet<StkOutDet> StkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkOutDets;
            }
            set
            {
                this._StkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptPoDets(DeptPoDet entity)
        {
            this.SendPropertyChanging("DeptPoDets");
            entity.Prd = this;
        }
    
        private void detach_DeptPoDets(DeptPoDet entity)
        {
            this.SendPropertyChanging("DeptPoDets");
            entity.Prd = null;
        }

        private void attach_DeptPrmtns(DeptPrmtn entity)
        {
            this.SendPropertyChanging("DeptPrmtns");
            entity.Prd = this;
        }
    
        private void detach_DeptPrmtns(DeptPrmtn entity)
        {
            this.SendPropertyChanging("DeptPrmtns");
            entity.Prd = null;
        }

        private void attach_DeptStks(DeptStk entity)
        {
            this.SendPropertyChanging("DeptStks");
            entity.Prd = this;
        }
    
        private void detach_DeptStks(DeptStk entity)
        {
            this.SendPropertyChanging("DeptStks");
            entity.Prd = null;
        }

        private void attach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.Prd = this;
        }
    
        private void detach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.Prd = null;
        }

        private void attach_DeptStkOuts(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts");
            entity.Prd = this;
        }
    
        private void detach_DeptStkOuts(DeptStkOut entity)
        {
            this.SendPropertyChanging("DeptStkOuts");
            entity.Prd = null;
        }

        private void attach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.Prd = this;
        }
    
        private void detach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.Prd = null;
        }

        private void attach_DeptStkTempValids(DeptStkTempValid entity)
        {
            this.SendPropertyChanging("DeptStkTempValids");
            entity.Prd = this;
        }
    
        private void detach_DeptStkTempValids(DeptStkTempValid entity)
        {
            this.SendPropertyChanging("DeptStkTempValids");
            entity.Prd = null;
        }

        private void attach_DeptStkTempValidSaves(DeptStkTempValidSave entity)
        {
            this.SendPropertyChanging("DeptStkTempValidSaves");
            entity.Prd = this;
        }
    
        private void detach_DeptStkTempValidSaves(DeptStkTempValidSave entity)
        {
            this.SendPropertyChanging("DeptStkTempValidSaves");
            entity.Prd = null;
        }

        private void attach_MnStks(MnStk entity)
        {
            this.SendPropertyChanging("MnStks");
            entity.Prd = this;
        }
    
        private void detach_MnStks(MnStk entity)
        {
            this.SendPropertyChanging("MnStks");
            entity.Prd = null;
        }

        private void attach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.Prd = this;
        }
    
        private void detach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.Prd = null;
        }

        private void attach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.Prd = this;
        }
    
        private void detach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.Prd = null;
        }

        private void Initialize()
        {
            this._DeptPoDets = new EntitySet<DeptPoDet>(new Action<DeptPoDet>(this.attach_DeptPoDets), new Action<DeptPoDet>(this.detach_DeptPoDets));
            this._DeptPrmtns = new EntitySet<DeptPrmtn>(new Action<DeptPrmtn>(this.attach_DeptPrmtns), new Action<DeptPrmtn>(this.detach_DeptPrmtns));
            this._DeptStks = new EntitySet<DeptStk>(new Action<DeptStk>(this.attach_DeptStks), new Action<DeptStk>(this.detach_DeptStks));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            this._DeptStkOuts = new EntitySet<DeptStkOut>(new Action<DeptStkOut>(this.attach_DeptStkOuts), new Action<DeptStkOut>(this.detach_DeptStkOuts));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._DeptStkTempValids = new EntitySet<DeptStkTempValid>(new Action<DeptStkTempValid>(this.attach_DeptStkTempValids), new Action<DeptStkTempValid>(this.detach_DeptStkTempValids));
            this._DeptStkTempValidSaves = new EntitySet<DeptStkTempValidSave>(new Action<DeptStkTempValidSave>(this.attach_DeptStkTempValidSaves), new Action<DeptStkTempValidSave>(this.detach_DeptStkTempValidSaves));
            this._MnStks = new EntitySet<MnStk>(new Action<MnStk>(this.attach_MnStks), new Action<MnStk>(this.detach_MnStks));
            this._ExPrdSize = default(EntityRef<ExPrdSize>);
            this._ExPrdColor = default(EntityRef<ExPrdColor>);
            this._PrdMst = default(EntityRef<PrdMst>);
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for PrdMst in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PRD_MST")]
    [DataContract()]
    public partial class PrdMst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ProductMasterId;

        private string _ProductName;

        private string _Description;

        private string _ImagePath;

        private System.Nullable<double> _CategoryId;

        private System.Nullable<double> _CountryId;

        private System.Nullable<double> _UnitId;

        private System.Nullable<double> _TypeId;

        private System.Nullable<double> _ManufacturerId;

        private System.Nullable<double> _SupplierId;

        private System.Nullable<double> _PackagerId;

        private System.Nullable<double> _DistributorId;

        private string _Barcode;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptStk> _DeptStks;

        private EntitySet<DeptStkInDet> _DeptStkInDets;

        private EntitySet<DeptStkOutDet> _DeptStkOutDets;

        private EntitySet<MnPrice> _MnPrices;

        private EntitySet<MnStk> _MnStks;

        private EntitySet<Prd> _Prds;

        private EntityRef<PrdTyp> _PrdTyp;

        private EntitySet<StkInDet> _StkInDets;

        private EntitySet<StkOutDet> _StkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnImagePathChanging(string value);
        partial void OnImagePathChanged();
        partial void OnCategoryIdChanging(System.Nullable<double> value);
        partial void OnCategoryIdChanged();
        partial void OnCountryIdChanging(System.Nullable<double> value);
        partial void OnCountryIdChanged();
        partial void OnUnitIdChanging(System.Nullable<double> value);
        partial void OnUnitIdChanged();
        partial void OnTypeIdChanging(System.Nullable<double> value);
        partial void OnTypeIdChanged();
        partial void OnManufacturerIdChanging(System.Nullable<double> value);
        partial void OnManufacturerIdChanged();
        partial void OnSupplierIdChanging(System.Nullable<double> value);
        partial void OnSupplierIdChanged();
        partial void OnPackagerIdChanging(System.Nullable<double> value);
        partial void OnPackagerIdChanged();
        partial void OnDistributorIdChanging(System.Nullable<double> value);
        partial void OnDistributorIdChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public PrdMst()
        {
            this.Initialize();
            this._DeptStks = new EntitySet<DeptStk>(new Action<DeptStk>(this.attach_DeptStks), new Action<DeptStk>(this.detach_DeptStks));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._MnPrices = new EntitySet<MnPrice>(new Action<MnPrice>(this.attach_MnPrices), new Action<MnPrice>(this.detach_MnPrices));
            this._MnStks = new EntitySet<MnStk>(new Action<MnStk>(this.attach_MnStks), new Action<MnStk>(this.detach_MnStks));
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            this._PrdTyp  = default(EntityRef<PrdTyp>);
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", CanBeNull = false, DbType = "VARCHAR2(52) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_NAME", Storage = "_ProductName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "CLOB", UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order=3)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagePath in the schema.
        /// </summary>
        [Column(Name = @"IMAGE_PATH", Storage = "_ImagePath", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=4)]
        public string ImagePath
        {
            get
            {
                return this._ImagePath;
            }
            set
            {
                if (this._ImagePath != value)
                {
                    this.OnImagePathChanging(value);
                    this.SendPropertyChanging();
                    this._ImagePath = value;
                    this.SendPropertyChanged("ImagePath");
                    this.OnImagePathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryId in the schema.
        /// </summary>
        [Column(Name = @"COUNTRY_ID", Storage = "_CountryId", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitId in the schema.
        /// </summary>
        [Column(Name = @"UNIT_ID", Storage = "_UnitId", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> UnitId
        {
            get
            {
                return this._UnitId;
            }
            set
            {
                if (this._UnitId != value)
                {
                    this.OnUnitIdChanging(value);
                    this.SendPropertyChanging();
                    this._UnitId = value;
                    this.SendPropertyChanged("UnitId");
                    this.OnUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    if (this._PrdTyp.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManufacturerId in the schema.
        /// </summary>
        [Column(Name = @"MANUFACTURER_ID", Storage = "_ManufacturerId", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ManufacturerId
        {
            get
            {
                return this._ManufacturerId;
            }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this.OnManufacturerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManufacturerId = value;
                    this.SendPropertyChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PackagerId in the schema.
        /// </summary>
        [Column(Name = @"PACKAGER_ID", Storage = "_PackagerId", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> PackagerId
        {
            get
            {
                return this._PackagerId;
            }
            set
            {
                if (this._PackagerId != value)
                {
                    this.OnPackagerIdChanging(value);
                    this.SendPropertyChanging();
                    this._PackagerId = value;
                    this.SendPropertyChanged("PackagerId");
                    this.OnPackagerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Name = @"DISTRIBUTOR_ID", Storage = "_DistributorId", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging();
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"BARCODE", Storage = "_Barcode", DbType = "VARCHAR2(52)")]
        [DataMember(Order=13)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=14)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=15)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=16)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=17)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=22)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=23)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=24)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="PrdMst_DeptStk", Storage="_DeptStks", OtherKey="ProductMasterId")]
        [DataMember(Order=25, EmitDefaultValue=false)]
        public EntitySet<DeptStk> DeptStks
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStks;
            }
            set
            {
                this._DeptStks.Assign(value);
            }
        }

        [Association(Name="PrdMst_DeptStkInDet", Storage="_DeptStkInDets", OtherKey="ProductMasterId")]
        [DataMember(Order=26, EmitDefaultValue=false)]
        public EntitySet<DeptStkInDet> DeptStkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkInDets;
            }
            set
            {
                this._DeptStkInDets.Assign(value);
            }
        }

        [Association(Name="PrdMst_DeptStkOutDet", Storage="_DeptStkOutDets", OtherKey="ProductMasterId")]
        [DataMember(Order=27, EmitDefaultValue=false)]
        public EntitySet<DeptStkOutDet> DeptStkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptStkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptStkOutDets;
            }
            set
            {
                this._DeptStkOutDets.Assign(value);
            }
        }

        [Association(Name="PrdMst_MnPrice", Storage="_MnPrices", OtherKey="ProductMasterId")]
        [DataMember(Order=28, EmitDefaultValue=false)]
        public EntitySet<MnPrice> MnPrices
        {
            get
            {
                if ((this.serializing 
                  && (this._MnPrices.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._MnPrices;
            }
            set
            {
                this._MnPrices.Assign(value);
            }
        }

        [Association(Name="PrdMst_MnStk", Storage="_MnStks", OtherKey="ProductMasterId")]
        [DataMember(Order=29, EmitDefaultValue=false)]
        public EntitySet<MnStk> MnStks
        {
            get
            {
                if ((this.serializing 
                  && (this._MnStks.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._MnStks;
            }
            set
            {
                this._MnStks.Assign(value);
            }
        }

        [Association(Name="PrdMst_Prd", Storage="_Prds", OtherKey="ProductMasterId")]
        [DataMember(Order=30, EmitDefaultValue=false)]
        public EntitySet<Prd> Prds
        {
            get
            {
                if ((this.serializing 
                  && (this._Prds.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._Prds;
            }
            set
            {
                this._Prds.Assign(value);
            }
        }

        [Association(Name="PrdTyp_PrdMst", Storage="_PrdTyp", ThisKey="TypeId", IsForeignKey=true)]
        public PrdTyp PrdTyp
        {
            get
            {
                return this._PrdTyp.Entity;
            }
            set
            {
                PrdTyp previousValue = this._PrdTyp.Entity;
                if ((previousValue != value) || (this._PrdTyp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdTyp.Entity = null;
                        previousValue.PrdMsts.Remove(this);
                    }
                    this._PrdTyp.Entity = value;
                    if (value != null)
                    {
                        value.PrdMsts.Add(this);
                        this._TypeId = value.TypeId;
                    }
                    else
                    {
                        this._TypeId = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("PrdTyp");
                }
            }
        }

        [Association(Name="PrdMst_StkInDet", Storage="_StkInDets", OtherKey="ProductMasterId")]
        [DataMember(Order=31, EmitDefaultValue=false)]
        public EntitySet<StkInDet> StkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkInDets;
            }
            set
            {
                this._StkInDets.Assign(value);
            }
        }

        [Association(Name="PrdMst_StkOutDet", Storage="_StkOutDets", OtherKey="ProductMasterId")]
        [DataMember(Order=32, EmitDefaultValue=false)]
        public EntitySet<StkOutDet> StkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkOutDets;
            }
            set
            {
                this._StkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptStks(DeptStk entity)
        {
            this.SendPropertyChanging("DeptStks");
            entity.PrdMst = this;
        }
    
        private void detach_DeptStks(DeptStk entity)
        {
            this.SendPropertyChanging("DeptStks");
            entity.PrdMst = null;
        }

        private void attach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.PrdMst = this;
        }
    
        private void detach_DeptStkInDets(DeptStkInDet entity)
        {
            this.SendPropertyChanging("DeptStkInDets");
            entity.PrdMst = null;
        }

        private void attach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.PrdMst = this;
        }
    
        private void detach_DeptStkOutDets(DeptStkOutDet entity)
        {
            this.SendPropertyChanging("DeptStkOutDets");
            entity.PrdMst = null;
        }

        private void attach_MnPrices(MnPrice entity)
        {
            this.SendPropertyChanging("MnPrices");
            entity.PrdMst = this;
        }
    
        private void detach_MnPrices(MnPrice entity)
        {
            this.SendPropertyChanging("MnPrices");
            entity.PrdMst = null;
        }

        private void attach_MnStks(MnStk entity)
        {
            this.SendPropertyChanging("MnStks");
            entity.PrdMst = this;
        }
    
        private void detach_MnStks(MnStk entity)
        {
            this.SendPropertyChanging("MnStks");
            entity.PrdMst = null;
        }

        private void attach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.PrdMst = this;
        }
    
        private void detach_Prds(Prd entity)
        {
            this.SendPropertyChanging("Prds");
            entity.PrdMst = null;
        }

        private void attach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.PrdMst = this;
        }
    
        private void detach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.PrdMst = null;
        }

        private void attach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.PrdMst = this;
        }
    
        private void detach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.PrdMst = null;
        }

        private void Initialize()
        {
            this._DeptStks = new EntitySet<DeptStk>(new Action<DeptStk>(this.attach_DeptStks), new Action<DeptStk>(this.detach_DeptStks));
            this._DeptStkInDets = new EntitySet<DeptStkInDet>(new Action<DeptStkInDet>(this.attach_DeptStkInDets), new Action<DeptStkInDet>(this.detach_DeptStkInDets));
            this._DeptStkOutDets = new EntitySet<DeptStkOutDet>(new Action<DeptStkOutDet>(this.attach_DeptStkOutDets), new Action<DeptStkOutDet>(this.detach_DeptStkOutDets));
            this._MnPrices = new EntitySet<MnPrice>(new Action<MnPrice>(this.attach_MnPrices), new Action<MnPrice>(this.detach_MnPrices));
            this._MnStks = new EntitySet<MnStk>(new Action<MnStk>(this.attach_MnStks), new Action<MnStk>(this.detach_MnStks));
            this._Prds = new EntitySet<Prd>(new Action<Prd>(this.attach_Prds), new Action<Prd>(this.detach_Prds));
            this._PrdTyp = default(EntityRef<PrdTyp>);
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for PrdTyp in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PRD_TYP")]
    [DataContract()]
    public partial class PrdTyp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _TypeId;

        private string _TypeName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<PrdMst> _PrdMsts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTypeIdChanging(double value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public PrdTyp()
        {
            this.Initialize();
            this._PrdMsts = new EntitySet<PrdMst>(new Action<PrdMst>(this.attach_PrdMsts), new Action<PrdMst>(this.detach_PrdMsts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TypeId in the schema.
        /// </summary>
        [Column(Name = @"TYPE_ID", Storage = "_TypeId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double TypeId
        {
            get
            {
                return this._TypeId;
            }
            set
            {
                if (this._TypeId != value)
                {
                    this.OnTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._TypeId = value;
                    this.SendPropertyChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeName in the schema.
        /// </summary>
        [Column(Name = @"TYPE_NAME", Storage = "_TypeName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string TypeName
        {
            get
            {
                return this._TypeName;
            }
            set
            {
                if (this._TypeName != value)
                {
                    this.OnTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._TypeName = value;
                    this.SendPropertyChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="PrdTyp_PrdMst", Storage="_PrdMsts", OtherKey="TypeId")]
        [DataMember(Order=14, EmitDefaultValue=false)]
        public EntitySet<PrdMst> PrdMsts
        {
            get
            {
                if ((this.serializing 
                  && (this._PrdMsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._PrdMsts;
            }
            set
            {
                this._PrdMsts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PrdMsts(PrdMst entity)
        {
            this.SendPropertyChanging("PrdMsts");
            entity.PrdTyp = this;
        }
    
        private void detach_PrdMsts(PrdMst entity)
        {
            this.SendPropertyChanging("PrdMsts");
            entity.PrdTyp = null;
        }

        private void Initialize()
        {
            this._PrdMsts = new EntitySet<PrdMst>(new Action<PrdMst>(this.attach_PrdMsts), new Action<PrdMst>(this.detach_PrdMsts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for PrdUnit in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PRD_UNIT")]
    [DataContract()]
    public partial class PrdUnit : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _UnitId;

        private string _UnitName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUnitIdChanging(double value);
        partial void OnUnitIdChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public PrdUnit()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UnitId in the schema.
        /// </summary>
        [Column(Name = @"UNIT_ID", Storage = "_UnitId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double UnitId
        {
            get
            {
                return this._UnitId;
            }
            set
            {
                if (this._UnitId != value)
                {
                    this.OnUnitIdChanging(value);
                    this.SendPropertyChanging();
                    this._UnitId = value;
                    this.SendPropertyChanged("UnitId");
                    this.OnUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitName in the schema.
        /// </summary>
        [Column(Name = @"UNIT_NAME", Storage = "_UnitName", DbType = "VARCHAR2(120)")]
        [DataMember(Order=2)]
        public string UnitName
        {
            get
            {
                return this._UnitName;
            }
            set
            {
                if (this._UnitName != value)
                {
                    this.OnUnitNameChanging(value);
                    this.SendPropertyChanging();
                    this._UnitName = value;
                    this.SendPropertyChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Promo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_PROMO")]
    [DataContract()]
    public partial class Promo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _PromotionId;

        private string _PromotionName;

        private System.Nullable<double> _DiscountPrice;

        private System.Nullable<double> _DiscountPercent;

        private System.Nullable<double> _PromotionType;

        private System.Nullable<double> _GiftProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<DeptPrmtn> _DeptPrmtns;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPromotionIdChanging(double value);
        partial void OnPromotionIdChanged();
        partial void OnPromotionNameChanging(string value);
        partial void OnPromotionNameChanged();
        partial void OnDiscountPriceChanging(System.Nullable<double> value);
        partial void OnDiscountPriceChanged();
        partial void OnDiscountPercentChanging(System.Nullable<double> value);
        partial void OnDiscountPercentChanged();
        partial void OnPromotionTypeChanging(System.Nullable<double> value);
        partial void OnPromotionTypeChanged();
        partial void OnGiftProductIdChanging(System.Nullable<double> value);
        partial void OnGiftProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Promo()
        {
            this.Initialize();
            this._DeptPrmtns = new EntitySet<DeptPrmtn>(new Action<DeptPrmtn>(this.attach_DeptPrmtns), new Action<DeptPrmtn>(this.detach_DeptPrmtns));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PromotionId in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_ID", Storage = "_PromotionId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double PromotionId
        {
            get
            {
                return this._PromotionId;
            }
            set
            {
                if (this._PromotionId != value)
                {
                    this.OnPromotionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionId = value;
                    this.SendPropertyChanged("PromotionId");
                    this.OnPromotionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionName in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_NAME", Storage = "_PromotionName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string PromotionName
        {
            get
            {
                return this._PromotionName;
            }
            set
            {
                if (this._PromotionName != value)
                {
                    this.OnPromotionNameChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionName = value;
                    this.SendPropertyChanged("PromotionName");
                    this.OnPromotionNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPrice in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PRICE", Storage = "_DiscountPrice", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> DiscountPrice
        {
            get
            {
                return this._DiscountPrice;
            }
            set
            {
                if (this._DiscountPrice != value)
                {
                    this.OnDiscountPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPrice = value;
                    this.SendPropertyChanged("DiscountPrice");
                    this.OnDiscountPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscountPercent in the schema.
        /// </summary>
        [Column(Name = @"DISCOUNT_PERCENT", Storage = "_DiscountPercent", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> DiscountPercent
        {
            get
            {
                return this._DiscountPercent;
            }
            set
            {
                if (this._DiscountPercent != value)
                {
                    this.OnDiscountPercentChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountPercent = value;
                    this.SendPropertyChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PromotionType in the schema.
        /// </summary>
        [Column(Name = @"PROMOTION_TYPE", Storage = "_PromotionType", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> PromotionType
        {
            get
            {
                return this._PromotionType;
            }
            set
            {
                if (this._PromotionType != value)
                {
                    this.OnPromotionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PromotionType = value;
                    this.SendPropertyChanged("PromotionType");
                    this.OnPromotionTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiftProductId in the schema.
        /// </summary>
        [Column(Name = @"GIFT_PRODUCT_ID", Storage = "_GiftProductId", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> GiftProductId
        {
            get
            {
                return this._GiftProductId;
            }
            set
            {
                if (this._GiftProductId != value)
                {
                    this.OnGiftProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._GiftProductId = value;
                    this.SendPropertyChanged("GiftProductId");
                    this.OnGiftProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=9)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=10)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="Promo_DeptPrmtn", Storage="_DeptPrmtns", OtherKey="PromotionId")]
        [DataMember(Order=18, EmitDefaultValue=false)]
        public EntitySet<DeptPrmtn> DeptPrmtns
        {
            get
            {
                if ((this.serializing 
                  && (this._DeptPrmtns.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._DeptPrmtns;
            }
            set
            {
                this._DeptPrmtns.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeptPrmtns(DeptPrmtn entity)
        {
            this.SendPropertyChanging("DeptPrmtns");
            entity.Promo = this;
        }
    
        private void detach_DeptPrmtns(DeptPrmtn entity)
        {
            this.SendPropertyChanging("DeptPrmtns");
            entity.Promo = null;
        }

        private void Initialize()
        {
            this._DeptPrmtns = new EntitySet<DeptPrmtn>(new Action<DeptPrmtn>(this.attach_DeptPrmtns), new Action<DeptPrmtn>(this.detach_DeptPrmtns));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for Reicpt in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_REICPT")]
    [DataContract()]
    public partial class Reicpt : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ReceiptId;

        private double _DepartmentId;

        private string _PurchaseOrderId;

        private string _ReceiptName;

        private string _ReceiptNumber;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<DeptPo> _DeptPo;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptIdChanging(string value);
        partial void OnReceiptIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnReceiptNameChanging(string value);
        partial void OnReceiptNameChanged();
        partial void OnReceiptNumberChanging(string value);
        partial void OnReceiptNumberChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Reicpt()
        {
            this.Initialize();
            this._DeptPo  = default(EntityRef<DeptPo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_ID", Storage = "_ReceiptId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ReceiptId
        {
            get
            {
                return this._ReceiptId;
            }
            set
            {
                if (this._ReceiptId != value)
                {
                    this.OnReceiptIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptId = value;
                    this.SendPropertyChanged("ReceiptId");
                    this.OnReceiptIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._DeptPo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=3)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._DeptPo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptName in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_NAME", Storage = "_ReceiptName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=4)]
        public string ReceiptName
        {
            get
            {
                return this._ReceiptName;
            }
            set
            {
                if (this._ReceiptName != value)
                {
                    this.OnReceiptNameChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptName = value;
                    this.SendPropertyChanged("ReceiptName");
                    this.OnReceiptNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptNumber in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_NUMBER", Storage = "_ReceiptNumber", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=5)]
        public string ReceiptNumber
        {
            get
            {
                return this._ReceiptNumber;
            }
            set
            {
                if (this._ReceiptNumber != value)
                {
                    this.OnReceiptNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptNumber = value;
                    this.SendPropertyChanged("ReceiptNumber");
                    this.OnReceiptNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="DeptPo_Reicpt", Storage="_DeptPo", ThisKey="PurchaseOrderId,DepartmentId", OtherKey="PurchaseOrderId,DepartmentId", IsForeignKey=true)]
        public DeptPo DeptPo
        {
            get
            {
                return this._DeptPo.Entity;
            }
            set
            {
                DeptPo previousValue = this._DeptPo.Entity;
                if ((previousValue != value) || (this._DeptPo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeptPo.Entity = null;
                        previousValue.Reicpts.Remove(this);
                    }
                    this._DeptPo.Entity = value;
                    if (value != null)
                    {
                        value.Reicpts.Add(this);
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._PurchaseOrderId = default(string);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("DeptPo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._DeptPo = default(EntityRef<DeptPo>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for ReicptOut in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_REICPT_OUT")]
    [DataContract()]
    public partial class ReicptOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ReceiptOutId;

        private double _DepartmentId;

        private System.Nullable<double> _ReceiptOutName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntitySet<ReicptOutCst> _ReicptOutCsts;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptOutIdChanging(double value);
        partial void OnReceiptOutIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnReceiptOutNameChanging(System.Nullable<double> value);
        partial void OnReceiptOutNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public ReicptOut()
        {
            this.Initialize();
            this._ReicptOutCsts = new EntitySet<ReicptOutCst>(new Action<ReicptOutCst>(this.attach_ReicptOutCsts), new Action<ReicptOutCst>(this.detach_ReicptOutCsts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_ID", Storage = "_ReceiptOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ReceiptOutId
        {
            get
            {
                return this._ReceiptOutId;
            }
            set
            {
                if (this._ReceiptOutId != value)
                {
                    this.OnReceiptOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutId = value;
                    this.SendPropertyChanged("ReceiptOutId");
                    this.OnReceiptOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutName in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_NAME", Storage = "_ReceiptOutName", DbType = "NUMBER(10)")]
        [DataMember(Order=3)]
        public System.Nullable<double> ReceiptOutName
        {
            get
            {
                return this._ReceiptOutName;
            }
            set
            {
                if (this._ReceiptOutName != value)
                {
                    this.OnReceiptOutNameChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutName = value;
                    this.SendPropertyChanged("ReceiptOutName");
                    this.OnReceiptOutNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="ReicptOut_ReicptOutCst", Storage="_ReicptOutCsts", ThisKey="ReceiptOutId,DepartmentId", OtherKey="ReceiptOutId,DepartmentId")]
        [DataMember(Order=15, EmitDefaultValue=false)]
        public EntitySet<ReicptOutCst> ReicptOutCsts
        {
            get
            {
                if ((this.serializing 
                  && (this._ReicptOutCsts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._ReicptOutCsts;
            }
            set
            {
                this._ReicptOutCsts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ReicptOutCsts(ReicptOutCst entity)
        {
            this.SendPropertyChanging("ReicptOutCsts");
            entity.ReicptOut = this;
        }
    
        private void detach_ReicptOutCsts(ReicptOutCst entity)
        {
            this.SendPropertyChanging("ReicptOutCsts");
            entity.ReicptOut = null;
        }

        private void Initialize()
        {
            this._ReicptOutCsts = new EntitySet<ReicptOutCst>(new Action<ReicptOutCst>(this.attach_ReicptOutCsts), new Action<ReicptOutCst>(this.detach_ReicptOutCsts));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for ReicptOutCst in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_REICPT_OUT_CST")]
    [DataContract()]
    public partial class ReicptOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ReceiptOutId;

        private double _DepartmentId;

        private double _CostType;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private EntityRef<ReicptOut> _ReicptOut;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiptOutIdChanging(double value);
        partial void OnReceiptOutIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public ReicptOutCst()
        {
            this.Initialize();
            this._ReicptOut  = default(EntityRef<ReicptOut>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReceiptOutId in the schema.
        /// </summary>
        [Column(Name = @"RECEIPT_OUT_ID", Storage = "_ReceiptOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ReceiptOutId
        {
            get
            {
                return this._ReceiptOutId;
            }
            set
            {
                if (this._ReceiptOutId != value)
                {
                    if (this._ReicptOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReceiptOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiptOutId = value;
                    this.SendPropertyChanged("ReceiptOutId");
                    this.OnReceiptOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._ReicptOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

        [Association(Name="ReicptOut_ReicptOutCst", Storage="_ReicptOut", ThisKey="ReceiptOutId,DepartmentId", OtherKey="ReceiptOutId,DepartmentId", IsForeignKey=true)]
        public ReicptOut ReicptOut
        {
            get
            {
                return this._ReicptOut.Entity;
            }
            set
            {
                ReicptOut previousValue = this._ReicptOut.Entity;
                if ((previousValue != value) || (this._ReicptOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ReicptOut.Entity = null;
                        previousValue.ReicptOutCsts.Remove(this);
                    }
                    this._ReicptOut.Entity = value;
                    if (value != null)
                    {
                        value.ReicptOutCsts.Add(this);
                        this._ReceiptOutId = value.ReceiptOutId;
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._ReceiptOutId = default(double);
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("ReicptOut");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._ReicptOut = default(EntityRef<ReicptOut>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for RetBlkIn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_RET_BLK_IN")]
    [DataContract()]
    public partial class RetBlkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _BlockInId;

        private double _BlockDetailId;

        private string _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBlockInIdChanging(double value);
        partial void OnBlockInIdChanged();
        partial void OnBlockDetailIdChanging(double value);
        partial void OnBlockDetailIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public RetBlkIn()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BlockInId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_IN_ID", Storage = "_BlockInId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double BlockInId
        {
            get
            {
                return this._BlockInId;
            }
            set
            {
                if (this._BlockInId != value)
                {
                    this.OnBlockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockInId = value;
                    this.SendPropertyChanged("BlockInId");
                    this.OnBlockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BlockDetailId in the schema.
        /// </summary>
        [Column(Name = @"BLOCK_DETAIL_ID", Storage = "_BlockDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double BlockDetailId
        {
            get
            {
                return this._BlockDetailId;
            }
            set
            {
                if (this._BlockDetailId != value)
                {
                    this.OnBlockDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BlockDetailId = value;
                    this.SendPropertyChanged("BlockDetailId");
                    this.OnBlockDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=3)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for RetPrd in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_RET_PRD")]
    [DataContract()]
    public partial class RetPrd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _ReturnProductId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Description;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _Quantity;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReturnProductIdChanging(double value);
        partial void OnReturnProductIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnDescriptionChanging(System.Nullable<double> value);
        partial void OnDescriptionChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        #endregion

        public RetPrd()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnProductId in the schema.
        /// </summary>
        [Column(Name = @"RETURN_PRODUCT_ID", Storage = "_ReturnProductId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double ReturnProductId
        {
            get
            {
                return this._ReturnProductId;
            }
            set
            {
                if (this._ReturnProductId != value)
                {
                    this.OnReturnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnProductId = value;
                    this.SendPropertyChanged("ReturnProductId");
                    this.OnReturnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for RetTran in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_RET_TRANS")]
    [DataContract()]
    public partial class RetTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ReturnTransactionId;

        private string _TransactionId;

        private string _PosTransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private string _CustomerId;

        private string _PurchaseOrderId;

        private string _ReturnId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReturnTransactionIdChanging(string value);
        partial void OnReturnTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnReturnIdChanging(string value);
        partial void OnReturnIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public RetTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnTransactionId in the schema.
        /// </summary>
        [Column(Name = @"RETURN_TRANSACTION_ID", Storage = "_ReturnTransactionId", CanBeNull = false, DbType = "VARCHAR2(60) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string ReturnTransactionId
        {
            get
            {
                return this._ReturnTransactionId;
            }
            set
            {
                if (this._ReturnTransactionId != value)
                {
                    this.OnReturnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnTransactionId = value;
                    this.SendPropertyChanged("ReturnTransactionId");
                    this.OnReturnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", CanBeNull = false, DbType = "VARCHAR2(48) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_TRANSACTION_ID", Storage = "_PosTransactionId", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        [DataMember(Order=3)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"STORE_ID", Storage = "_StoreId", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        [DataMember(Order=4)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"REGISTER_ID", Storage = "_RegisterId", CanBeNull = false, DbType = "VARCHAR2(8) NOT NULL")]
        [DataMember(Order=5)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"CASHIER_ID", Storage = "_CashierId", CanBeNull = false, DbType = "VARCHAR2(24) NOT NULL")]
        [DataMember(Order=6)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", DbType = "VARCHAR2(60)")]
        [DataMember(Order=7)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", DbType = "VARCHAR2(60)")]
        [DataMember(Order=8)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnId in the schema.
        /// </summary>
        [Column(Name = @"RETURN_ID", Storage = "_ReturnId", DbType = "VARCHAR2(60)")]
        [DataMember(Order=9)]
        public string ReturnId
        {
            get
            {
                return this._ReturnId;
            }
            set
            {
                if (this._ReturnId != value)
                {
                    this.OnReturnIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnId = value;
                    this.SendPropertyChanged("ReturnId");
                    this.OnReturnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=12)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=13)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=19)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=20)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Role in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_ROLE")]
    [DataContract()]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Id;

        private string _Name;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(double value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Role()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", DbType = "VARCHAR2(200)")]
        [DataMember(Order=2)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for SaleTran in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_SALE_TRANS")]
    [DataContract()]
    public partial class SaleTran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _SaleTransactionId;

        private string _TransactionId;

        private string _PosTransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private string _PurchaseOrderId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSaleTransactionIdChanging(string value);
        partial void OnSaleTransactionIdChanged();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnPosTransactionIdChanging(string value);
        partial void OnPosTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnPurchaseOrderIdChanging(string value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public SaleTran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SaleTransactionId in the schema.
        /// </summary>
        [Column(Name = @"SALE_TRANSACTION_ID", Storage = "_SaleTransactionId", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string SaleTransactionId
        {
            get
            {
                return this._SaleTransactionId;
            }
            set
            {
                if (this._SaleTransactionId != value)
                {
                    this.OnSaleTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._SaleTransactionId = value;
                    this.SendPropertyChanged("SaleTransactionId");
                    this.OnSaleTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", CanBeNull = false, DbType = "VARCHAR2(48) NOT NULL")]
        [DataMember(Order=2)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosTransactionId in the schema.
        /// </summary>
        [Column(Name = @"POS_TRANSACTION_ID", Storage = "_PosTransactionId", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        [DataMember(Order=3)]
        public string PosTransactionId
        {
            get
            {
                return this._PosTransactionId;
            }
            set
            {
                if (this._PosTransactionId != value)
                {
                    this.OnPosTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._PosTransactionId = value;
                    this.SendPropertyChanged("PosTransactionId");
                    this.OnPosTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"STORE_ID", Storage = "_StoreId", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        [DataMember(Order=4)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"REGISTER_ID", Storage = "_RegisterId", CanBeNull = false, DbType = "VARCHAR2(8) NOT NULL")]
        [DataMember(Order=5)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"CASHIER_ID", Storage = "_CashierId", CanBeNull = false, DbType = "VARCHAR2(24) NOT NULL")]
        [DataMember(Order=6)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"PURCHASE_ORDER_ID", Storage = "_PurchaseOrderId", DbType = "VARCHAR2(60)")]
        [DataMember(Order=7)]
        public string PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=10)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=11)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=18)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for ScheTmplate in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_SCHE_TMPLATE")]
    [DataContract()]
    public partial class ScheTmplate : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EmployeeId;

        private double _ScheduleId;

        private double _DepartmentId;

        private System.Nullable<double> _Monday;

        private System.Nullable<double> _Tuesday;

        private System.Nullable<double> _Wednesday;

        private System.Nullable<double> _Thursday;

        private System.Nullable<double> _Friday;

        private System.Nullable<double> _Saturday;

        private System.Nullable<double> _Sunday;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private EntityRef<Dept> _Dept;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnScheduleIdChanging(double value);
        partial void OnScheduleIdChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnMondayChanging(System.Nullable<double> value);
        partial void OnMondayChanged();
        partial void OnTuesdayChanging(System.Nullable<double> value);
        partial void OnTuesdayChanged();
        partial void OnWednesdayChanging(System.Nullable<double> value);
        partial void OnWednesdayChanged();
        partial void OnThursdayChanging(System.Nullable<double> value);
        partial void OnThursdayChanged();
        partial void OnFridayChanging(System.Nullable<double> value);
        partial void OnFridayChanged();
        partial void OnSaturdayChanging(System.Nullable<double> value);
        partial void OnSaturdayChanged();
        partial void OnSundayChanging(System.Nullable<double> value);
        partial void OnSundayChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        #endregion

        public ScheTmplate()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScheduleId in the schema.
        /// </summary>
        [Column(Name = @"SCHEDULE_ID", Storage = "_ScheduleId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double ScheduleId
        {
            get
            {
                return this._ScheduleId;
            }
            set
            {
                if (this._ScheduleId != value)
                {
                    this.OnScheduleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ScheduleId = value;
                    this.SendPropertyChanged("ScheduleId");
                    this.OnScheduleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Monday in the schema.
        /// </summary>
        [Column(Name = @"MONDAY", Storage = "_Monday", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Monday
        {
            get
            {
                return this._Monday;
            }
            set
            {
                if (this._Monday != value)
                {
                    this.OnMondayChanging(value);
                    this.SendPropertyChanging();
                    this._Monday = value;
                    this.SendPropertyChanged("Monday");
                    this.OnMondayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tuesday in the schema.
        /// </summary>
        [Column(Name = @"TUESDAY", Storage = "_Tuesday", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Tuesday
        {
            get
            {
                return this._Tuesday;
            }
            set
            {
                if (this._Tuesday != value)
                {
                    this.OnTuesdayChanging(value);
                    this.SendPropertyChanging();
                    this._Tuesday = value;
                    this.SendPropertyChanged("Tuesday");
                    this.OnTuesdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Wednesday in the schema.
        /// </summary>
        [Column(Name = @"WEDNESDAY", Storage = "_Wednesday", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Wednesday
        {
            get
            {
                return this._Wednesday;
            }
            set
            {
                if (this._Wednesday != value)
                {
                    this.OnWednesdayChanging(value);
                    this.SendPropertyChanging();
                    this._Wednesday = value;
                    this.SendPropertyChanged("Wednesday");
                    this.OnWednesdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Thursday in the schema.
        /// </summary>
        [Column(Name = @"THURSDAY", Storage = "_Thursday", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> Thursday
        {
            get
            {
                return this._Thursday;
            }
            set
            {
                if (this._Thursday != value)
                {
                    this.OnThursdayChanging(value);
                    this.SendPropertyChanging();
                    this._Thursday = value;
                    this.SendPropertyChanged("Thursday");
                    this.OnThursdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Friday in the schema.
        /// </summary>
        [Column(Name = @"FRIDAY", Storage = "_Friday", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> Friday
        {
            get
            {
                return this._Friday;
            }
            set
            {
                if (this._Friday != value)
                {
                    this.OnFridayChanging(value);
                    this.SendPropertyChanging();
                    this._Friday = value;
                    this.SendPropertyChanged("Friday");
                    this.OnFridayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Saturday in the schema.
        /// </summary>
        [Column(Name = @"SATURDAY", Storage = "_Saturday", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> Saturday
        {
            get
            {
                return this._Saturday;
            }
            set
            {
                if (this._Saturday != value)
                {
                    this.OnSaturdayChanging(value);
                    this.SendPropertyChanging();
                    this._Saturday = value;
                    this.SendPropertyChanged("Saturday");
                    this.OnSaturdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sunday in the schema.
        /// </summary>
        [Column(Name = @"SUNDAY", Storage = "_Sunday", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> Sunday
        {
            get
            {
                return this._Sunday;
            }
            set
            {
                if (this._Sunday != value)
                {
                    this.OnSundayChanging(value);
                    this.SendPropertyChanging();
                    this._Sunday = value;
                    this.SendPropertyChanged("Sunday");
                    this.OnSundayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"START_DATE", Storage = "_StartDate", DbType = "DATE")]
        [DataMember(Order=17)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE")]
        [DataMember(Order=18)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=19)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=20)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=21)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=22)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=23)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

        [Association(Name="Dept_ScheTmplate", Storage="_Dept", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.ScheTmplates.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.ScheTmplates.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for SimPrd in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_SIM_PRD")]
    [DataContract()]
    public partial class SimPrd : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _BaseProductId;

        private double _OtherProductId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBaseProductIdChanging(double value);
        partial void OnBaseProductIdChanged();
        partial void OnOtherProductIdChanging(double value);
        partial void OnOtherProductIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public SimPrd()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BaseProductId in the schema.
        /// </summary>
        [Column(Name = @"BASE_PRODUCT_ID", Storage = "_BaseProductId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double BaseProductId
        {
            get
            {
                return this._BaseProductId;
            }
            set
            {
                if (this._BaseProductId != value)
                {
                    this.OnBaseProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._BaseProductId = value;
                    this.SendPropertyChanged("BaseProductId");
                    this.OnBaseProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherProductId in the schema.
        /// </summary>
        [Column(Name = @"OTHER_PRODUCT_ID", Storage = "_OtherProductId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double OtherProductId
        {
            get
            {
                return this._OtherProductId;
            }
            set
            {
                if (this._OtherProductId != value)
                {
                    this.OnOtherProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._OtherProductId = value;
                    this.SendPropertyChanged("OtherProductId");
                    this.OnOtherProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for StkDefStat in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_DEF_STAT")]
    [DataContract()]
    public partial class StkDefStat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _DefectStatusId;

        private string _DefectStatusName;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDefectStatusIdChanging(double value);
        partial void OnDefectStatusIdChanged();
        partial void OnDefectStatusNameChanging(string value);
        partial void OnDefectStatusNameChanged();
        #endregion

        public StkDefStat()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusName in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_NAME", Storage = "_DefectStatusName", CanBeNull = false, DbType = "VARCHAR2(800) NOT NULL")]
        [DataMember(Order=2)]
        public string DefectStatusName
        {
            get
            {
                return this._DefectStatusName;
            }
            set
            {
                if (this._DefectStatusName != value)
                {
                    this.OnDefectStatusNameChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusName = value;
                    this.SendPropertyChanged("DefectStatusName");
                    this.OnDefectStatusNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for StkIn in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_IN")]
    [DataContract()]
    public partial class StkIn : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private System.Nullable<System.DateTime> _StockInDate;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _Description;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _StockInCost;

        private System.Nullable<double> _StockInType;

        private System.Nullable<double> _ConfirmFlg;

        private System.Nullable<double> _TotalQuantity;

        private System.Nullable<double> _SrcDepartmentId;

        private System.Nullable<double> _TotalAmount;

        private EntitySet<StkInDet> _StkInDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnStockInDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockInDateChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInCostChanging(System.Nullable<double> value);
        partial void OnStockInCostChanged();
        partial void OnStockInTypeChanging(System.Nullable<double> value);
        partial void OnStockInTypeChanged();
        partial void OnConfirmFlgChanging(System.Nullable<double> value);
        partial void OnConfirmFlgChanged();
        partial void OnTotalQuantityChanging(System.Nullable<double> value);
        partial void OnTotalQuantityChanged();
        partial void OnSrcDepartmentIdChanging(System.Nullable<double> value);
        partial void OnSrcDepartmentIdChanged();
        partial void OnTotalAmountChanging(System.Nullable<double> value);
        partial void OnTotalAmountChanged();
        #endregion

        public StkIn()
        {
            this.Initialize();
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(44) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_DATE", Storage = "_StockInDate", DbType = "DATE")]
        [DataMember(Order=2)]
        public System.Nullable<System.DateTime> StockInDate
        {
            get
            {
                return this._StockInDate;
            }
            set
            {
                if (this._StockInDate != value)
                {
                    this.OnStockInDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockInDate = value;
                    this.SendPropertyChanged("StockInDate");
                    this.OnStockInDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(4000)")]
        [DataMember(Order=4)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInCost in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_COST", Storage = "_StockInCost", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> StockInCost
        {
            get
            {
                return this._StockInCost;
            }
            set
            {
                if (this._StockInCost != value)
                {
                    this.OnStockInCostChanging(value);
                    this.SendPropertyChanging();
                    this._StockInCost = value;
                    this.SendPropertyChanged("StockInCost");
                    this.OnStockInCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SrcDepartmentId in the schema.
        /// </summary>
        [Column(Name = @"SRC_DEPARTMENT_ID", Storage = "_SrcDepartmentId", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> SrcDepartmentId
        {
            get
            {
                return this._SrcDepartmentId;
            }
            set
            {
                if (this._SrcDepartmentId != value)
                {
                    this.OnSrcDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._SrcDepartmentId = value;
                    this.SendPropertyChanged("SrcDepartmentId");
                    this.OnSrcDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="StkIn_StkInDet", Storage="_StkInDets", OtherKey="StockInId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<StkInDet> StkInDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkInDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkInDets;
            }
            set
            {
                this._StkInDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.StkIn = this;
        }
    
        private void detach_StkInDets(StkInDet entity)
        {
            this.SendPropertyChanging("StkInDets");
            entity.StkIn = null;
        }

        private void Initialize()
        {
            this._StkInDets = new EntitySet<StkInDet>(new Action<StkInDet>(this.attach_StkInDets), new Action<StkInDet>(this.detach_StkInDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for StkInDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_IN_DET")]
    [DataContract()]
    public partial class StkInDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _StockInId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<double> _Price;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _StockInType;

        private System.Nullable<double> _SellPrice;

        private EntityRef<StkIn> _StkIn;

        private EntityRef<PrdMst> _PrdMst;

        private EntityRef<Prd> _Prd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockInIdChanging(string value);
        partial void OnStockInIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockInTypeChanging(System.Nullable<double> value);
        partial void OnStockInTypeChanged();
        partial void OnSellPriceChanging(System.Nullable<double> value);
        partial void OnSellPriceChanged();
        #endregion

        public StkInDet()
        {
            this.Initialize();
            this._StkIn  = default(EntityRef<StkIn>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockInId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_ID", Storage = "_StockInId", CanBeNull = false, DbType = "VARCHAR2(44) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string StockInId
        {
            get
            {
                return this._StockInId;
            }
            set
            {
                if (this._StockInId != value)
                {
                    if (this._StkIn.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockInIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockInId = value;
                    this.SendPropertyChanged("StockInId");
                    this.OnStockInIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=3)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockInType in the schema.
        /// </summary>
        [Column(Name = @"STOCK_IN_TYPE", Storage = "_StockInType", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> StockInType
        {
            get
            {
                return this._StockInType;
            }
            set
            {
                if (this._StockInType != value)
                {
                    this.OnStockInTypeChanging(value);
                    this.SendPropertyChanging();
                    this._StockInType = value;
                    this.SendPropertyChanged("StockInType");
                    this.OnStockInTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SellPrice in the schema.
        /// </summary>
        [Column(Name = @"SELL_PRICE", Storage = "_SellPrice", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> SellPrice
        {
            get
            {
                return this._SellPrice;
            }
            set
            {
                if (this._SellPrice != value)
                {
                    this.OnSellPriceChanging(value);
                    this.SendPropertyChanging();
                    this._SellPrice = value;
                    this.SendPropertyChanged("SellPrice");
                    this.OnSellPriceChanged();
                }
            }
        }

        [Association(Name="StkIn_StkInDet", Storage="_StkIn", ThisKey="StockInId", IsForeignKey=true)]
        public StkIn StkIn
        {
            get
            {
                return this._StkIn.Entity;
            }
            set
            {
                StkIn previousValue = this._StkIn.Entity;
                if ((previousValue != value) || (this._StkIn.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._StkIn.Entity = null;
                        previousValue.StkInDets.Remove(this);
                    }
                    this._StkIn.Entity = value;
                    if (value != null)
                    {
                        value.StkInDets.Add(this);
                        this._StockInId = value.StockInId;
                    }
                    else
                    {
                        this._StockInId = default(string);
                    }
                    this.SendPropertyChanged("StkIn");
                }
            }
        }

        [Association(Name="PrdMst_StkInDet", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.StkInDets.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.StkInDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }

        [Association(Name="Prd_StkInDet", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.StkInDets.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.StkInDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._StkIn = default(EntityRef<StkIn>);
            this._PrdMst = default(EntityRef<PrdMst>);
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for StkOut in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_OUT")]
    [DataContract()]
    public partial class StkOut : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutId;

        private System.Nullable<System.DateTime> _StockOutDate;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _StockId;

        private System.Nullable<double> _DefectStatusId;

        private System.Nullable<double> _ConfirmFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _TotalQuantity;

        private string _Description;

        private System.Nullable<double> _TotalAmount;

        private EntityRef<Dept> _Dept;

        private EntitySet<StkOutDet> _StkOutDets;

        private bool serializing;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnStockIdChanging(System.Nullable<double> value);
        partial void OnStockIdChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<double> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(System.Nullable<double> value);
        partial void OnConfirmFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnTotalQuantityChanging(System.Nullable<double> value);
        partial void OnTotalQuantityChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTotalAmountChanging(System.Nullable<double> value);
        partial void OnTotalAmountChanged();
        #endregion

        public StkOut()
        {
            this.Initialize();
            this._Dept  = default(EntityRef<Dept>);
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "DATE")]
        [DataMember(Order=2)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    if (this._Dept.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=17)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_QUANTITY", Storage = "_TotalQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=18)]
        public System.Nullable<double> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(200)")]
        [DataMember(Order=19)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalAmount in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_AMOUNT", Storage = "_TotalAmount", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        [Association(Name="Dept_StkOut", Storage="_Dept", ThisKey="DepartmentId", IsForeignKey=true)]
        public Dept Dept
        {
            get
            {
                return this._Dept.Entity;
            }
            set
            {
                Dept previousValue = this._Dept.Entity;
                if ((previousValue != value) || (this._Dept.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dept.Entity = null;
                        previousValue.StkOuts.Remove(this);
                    }
                    this._Dept.Entity = value;
                    if (value != null)
                    {
                        value.StkOuts.Add(this);
                        this._DepartmentId = value.DepartmentId;
                    }
                    else
                    {
                        this._DepartmentId = default(double);
                    }
                    this.SendPropertyChanged("Dept");
                }
            }
        }

        [Association(Name="StkOut_StkOutDet", Storage="_StkOutDets", OtherKey="StockOutId")]
        [DataMember(Order=21, EmitDefaultValue=false)]
        public EntitySet<StkOutDet> StkOutDets
        {
            get
            {
                if ((this.serializing 
                  && (this._StkOutDets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return this._StkOutDets;
            }
            set
            {
                this._StkOutDets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.StkOut = this;
        }
    
        private void detach_StkOutDets(StkOutDet entity)
        {
            this.SendPropertyChanging("StkOutDets");
            entity.StkOut = null;
        }

        private void Initialize()
        {
            this._Dept = default(EntityRef<Dept>);
            this._StkOutDets = new EntitySet<StkOutDet>(new Action<StkOutDet>(this.attach_StkOutDets), new Action<StkOutDet>(this.detach_StkOutDets));
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }

        [OnSerializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
          this.serializing = true;
        }
    
        [OnSerialized()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
          this.serializing = false;
        }
    }


    /// <summary>
    /// There are no comments for StkOutCst in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_OUT_CST")]
    [DataContract()]
    public partial class StkOutCst : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutId;

        private double _CostType;

        private double _StockoutId;

        private System.Nullable<double> _Cost;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnCostTypeChanging(double value);
        partial void OnCostTypeChanged();
        partial void OnStockoutIdChanging(double value);
        partial void OnStockoutIdChanged();
        partial void OnCostChanging(System.Nullable<double> value);
        partial void OnCostChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public StkOutCst()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostType in the schema.
        /// </summary>
        [Column(Name = @"COST_TYPE", Storage = "_CostType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double CostType
        {
            get
            {
                return this._CostType;
            }
            set
            {
                if (this._CostType != value)
                {
                    this.OnCostTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CostType = value;
                    this.SendPropertyChanged("CostType");
                    this.OnCostTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockoutId in the schema.
        /// </summary>
        [Column(Name = @"STOCKOUT_ID", Storage = "_StockoutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=3)]
        public double StockoutId
        {
            get
            {
                return this._StockoutId;
            }
            set
            {
                if (this._StockoutId != value)
                {
                    this.OnStockoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockoutId = value;
                    this.SendPropertyChanged("StockoutId");
                    this.OnStockoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cost in the schema.
        /// </summary>
        [Column(Name = @"COST", Storage = "_Cost", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if (this._Cost != value)
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for StkOutDet in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_OUT_DET")]
    [DataContract()]
    public partial class StkOutDet : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockOutDetailId;

        private double _StockOutId;

        private string _ProductId;

        private string _ProductMasterId;

        private System.Nullable<double> _Quantity;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _DefectStatusId;

        private string _Description;

        private System.Nullable<double> _GoodQuantity;

        private System.Nullable<double> _ErrorQuantity;

        private System.Nullable<double> _DamageQuantity;

        private System.Nullable<double> _LostQuantity;

        private EntityRef<StkOut> _StkOut;

        private EntityRef<PrdMst> _PrdMst;

        private EntityRef<Prd> _Prd;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockOutDetailIdChanging(double value);
        partial void OnStockOutDetailIdChanged();
        partial void OnStockOutIdChanging(double value);
        partial void OnStockOutIdChanged();
        partial void OnProductIdChanging(string value);
        partial void OnProductIdChanged();
        partial void OnProductMasterIdChanging(string value);
        partial void OnProductMasterIdChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnDefectStatusIdChanging(System.Nullable<double> value);
        partial void OnDefectStatusIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGoodQuantityChanging(System.Nullable<double> value);
        partial void OnGoodQuantityChanged();
        partial void OnErrorQuantityChanging(System.Nullable<double> value);
        partial void OnErrorQuantityChanged();
        partial void OnDamageQuantityChanging(System.Nullable<double> value);
        partial void OnDamageQuantityChanged();
        partial void OnLostQuantityChanging(System.Nullable<double> value);
        partial void OnLostQuantityChanged();
        #endregion

        public StkOutDet()
        {
            this.Initialize();
            this._StkOut  = default(EntityRef<StkOut>);
            this._PrdMst  = default(EntityRef<PrdMst>);
            this._Prd  = default(EntityRef<Prd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockOutDetailId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DETAIL_ID", Storage = "_StockOutDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double StockOutDetailId
        {
            get
            {
                return this._StockOutDetailId;
            }
            set
            {
                if (this._StockOutDetailId != value)
                {
                    this.OnStockOutDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDetailId = value;
                    this.SendPropertyChanged("StockOutDetailId");
                    this.OnStockOutDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_ID", Storage = "_StockOutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double StockOutId
        {
            get
            {
                return this._StockOutId;
            }
            set
            {
                if (this._StockOutId != value)
                {
                    if (this._StkOut.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStockOutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutId = value;
                    this.SendPropertyChanged("StockOutId");
                    this.OnStockOutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_ID", Storage = "_ProductId", CanBeNull = false, DbType = "VARCHAR2(80) NOT NULL")]
        [DataMember(Order=3)]
        public string ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Prd.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductMasterId in the schema.
        /// </summary>
        [Column(Name = @"PRODUCT_MASTER_ID", Storage = "_ProductMasterId", DbType = "VARCHAR2(52)")]
        [DataMember(Order=4)]
        public string ProductMasterId
        {
            get
            {
                return this._ProductMasterId;
            }
            set
            {
                if (this._ProductMasterId != value)
                {
                    if (this._PrdMst.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductMasterId = value;
                    this.SendPropertyChanged("ProductMasterId");
                    this.OnProductMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"QUANTITY", Storage = "_Quantity", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=8)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=9)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=14)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=16)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=18)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodQuantity in the schema.
        /// </summary>
        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=19)]
        public System.Nullable<double> GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ErrorQuantity in the schema.
        /// </summary>
        [Column(Name = @"ERROR_QUANTITY", Storage = "_ErrorQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=20)]
        public System.Nullable<double> ErrorQuantity
        {
            get
            {
                return this._ErrorQuantity;
            }
            set
            {
                if (this._ErrorQuantity != value)
                {
                    this.OnErrorQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ErrorQuantity = value;
                    this.SendPropertyChanged("ErrorQuantity");
                    this.OnErrorQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DamageQuantity in the schema.
        /// </summary>
        [Column(Name = @"DAMAGE_QUANTITY", Storage = "_DamageQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=21)]
        public System.Nullable<double> DamageQuantity
        {
            get
            {
                return this._DamageQuantity;
            }
            set
            {
                if (this._DamageQuantity != value)
                {
                    this.OnDamageQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DamageQuantity = value;
                    this.SendPropertyChanged("DamageQuantity");
                    this.OnDamageQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LostQuantity in the schema.
        /// </summary>
        [Column(Name = @"LOST_QUANTITY", Storage = "_LostQuantity", DbType = "NUMBER(10)")]
        [DataMember(Order=22)]
        public System.Nullable<double> LostQuantity
        {
            get
            {
                return this._LostQuantity;
            }
            set
            {
                if (this._LostQuantity != value)
                {
                    this.OnLostQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LostQuantity = value;
                    this.SendPropertyChanged("LostQuantity");
                    this.OnLostQuantityChanged();
                }
            }
        }

        [Association(Name="StkOut_StkOutDet", Storage="_StkOut", ThisKey="StockOutId", IsForeignKey=true)]
        public StkOut StkOut
        {
            get
            {
                return this._StkOut.Entity;
            }
            set
            {
                StkOut previousValue = this._StkOut.Entity;
                if ((previousValue != value) || (this._StkOut.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._StkOut.Entity = null;
                        previousValue.StkOutDets.Remove(this);
                    }
                    this._StkOut.Entity = value;
                    if (value != null)
                    {
                        value.StkOutDets.Add(this);
                        this._StockOutId = value.StockOutId;
                    }
                    else
                    {
                        this._StockOutId = default(double);
                    }
                    this.SendPropertyChanged("StkOut");
                }
            }
        }

        [Association(Name="PrdMst_StkOutDet", Storage="_PrdMst", ThisKey="ProductMasterId", IsForeignKey=true)]
        public PrdMst PrdMst
        {
            get
            {
                return this._PrdMst.Entity;
            }
            set
            {
                PrdMst previousValue = this._PrdMst.Entity;
                if ((previousValue != value) || (this._PrdMst.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PrdMst.Entity = null;
                        previousValue.StkOutDets.Remove(this);
                    }
                    this._PrdMst.Entity = value;
                    if (value != null)
                    {
                        value.StkOutDets.Add(this);
                        this._ProductMasterId = value.ProductMasterId;
                    }
                    else
                    {
                        this._ProductMasterId = default(string);
                    }
                    this.SendPropertyChanged("PrdMst");
                }
            }
        }

        [Association(Name="Prd_StkOutDet", Storage="_Prd", ThisKey="ProductId", IsForeignKey=true)]
        public Prd Prd
        {
            get
            {
                return this._Prd.Entity;
            }
            set
            {
                Prd previousValue = this._Prd.Entity;
                if ((previousValue != value) || (this._Prd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prd.Entity = null;
                        previousValue.StkOutDets.Remove(this);
                    }
                    this._Prd.Entity = value;
                    if (value != null)
                    {
                        value.StkOutDets.Add(this);
                        this._ProductId = value.ProductId;
                    }
                    else
                    {
                        this._ProductId = default(string);
                    }
                    this.SendPropertyChanged("Prd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            this._StkOut = default(EntityRef<StkOut>);
            this._PrdMst = default(EntityRef<PrdMst>);
            this._Prd = default(EntityRef<Prd>);
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for StkOutTmp in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_STK_OUT_TMP")]
    [DataContract()]
    public partial class StkOutTmp : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _StockoutId;

        private System.Nullable<System.DateTime> _StockOutDate;

        private double _DepartmentId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private System.Nullable<double> _StockId;

        private System.Nullable<double> _DefectStatusId;

        private System.Nullable<double> _ConfirmFlg;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnStockoutIdChanging(double value);
        partial void OnStockoutIdChanged();
        partial void OnStockOutDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStockOutDateChanged();
        partial void OnDepartmentIdChanging(double value);
        partial void OnDepartmentIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnStockIdChanging(System.Nullable<double> value);
        partial void OnStockIdChanged();
        partial void OnDefectStatusIdChanging(System.Nullable<double> value);
        partial void OnDefectStatusIdChanged();
        partial void OnConfirmFlgChanging(System.Nullable<double> value);
        partial void OnConfirmFlgChanged();
        #endregion

        public StkOutTmp()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StockoutId in the schema.
        /// </summary>
        [Column(Name = @"STOCKOUT_ID", Storage = "_StockoutId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=1)]
        public double StockoutId
        {
            get
            {
                return this._StockoutId;
            }
            set
            {
                if (this._StockoutId != value)
                {
                    this.OnStockoutIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockoutId = value;
                    this.SendPropertyChanged("StockoutId");
                    this.OnStockoutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockOutDate in the schema.
        /// </summary>
        [Column(Name = @"STOCK_OUT_DATE", Storage = "_StockOutDate", DbType = "DATE")]
        [DataMember(Order=2)]
        public System.Nullable<System.DateTime> StockOutDate
        {
            get
            {
                return this._StockOutDate;
            }
            set
            {
                if (this._StockOutDate != value)
                {
                    this.OnStockOutDateChanging(value);
                    this.SendPropertyChanging();
                    this._StockOutDate = value;
                    this.SendPropertyChanged("StockOutDate");
                    this.OnStockOutDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=3)]
        public double DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=4)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=5)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=6)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=7)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StockId in the schema.
        /// </summary>
        [Column(Name = @"STOCK_ID", Storage = "_StockId", DbType = "NUMBER(10)")]
        [DataMember(Order=15)]
        public System.Nullable<double> StockId
        {
            get
            {
                return this._StockId;
            }
            set
            {
                if (this._StockId != value)
                {
                    this.OnStockIdChanging(value);
                    this.SendPropertyChanging();
                    this._StockId = value;
                    this.SendPropertyChanged("StockId");
                    this.OnStockIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefectStatusId in the schema.
        /// </summary>
        [Column(Name = @"DEFECT_STATUS_ID", Storage = "_DefectStatusId", DbType = "NUMBER(10)")]
        [DataMember(Order=16)]
        public System.Nullable<double> DefectStatusId
        {
            get
            {
                return this._DefectStatusId;
            }
            set
            {
                if (this._DefectStatusId != value)
                {
                    this.OnDefectStatusIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefectStatusId = value;
                    this.SendPropertyChanged("DefectStatusId");
                    this.OnDefectStatusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmFlg in the schema.
        /// </summary>
        [Column(Name = @"CONFIRM_FLG", Storage = "_ConfirmFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=17)]
        public System.Nullable<double> ConfirmFlg
        {
            get
            {
                return this._ConfirmFlg;
            }
            set
            {
                if (this._ConfirmFlg != value)
                {
                    this.OnConfirmFlgChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmFlg = value;
                    this.SendPropertyChanged("ConfirmFlg");
                    this.OnConfirmFlgChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Sup in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_SUP")]
    [DataContract()]
    public partial class Sup : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _SupplierId;

        private string _SupplierName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSupplierIdChanging(double value);
        partial void OnSupplierIdChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Sup()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SupplierId in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_ID", Storage = "_SupplierId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double SupplierId
        {
            get
            {
                return this._SupplierId;
            }
            set
            {
                if (this._SupplierId != value)
                {
                    this.OnSupplierIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierId = value;
                    this.SendPropertyChanged("SupplierId");
                    this.OnSupplierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierName in the schema.
        /// </summary>
        [Column(Name = @"SUPPLIER_NAME", Storage = "_SupplierName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string SupplierName
        {
            get
            {
                return this._SupplierName;
            }
            set
            {
                if (this._SupplierName != value)
                {
                    this.OnSupplierNameChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierName = value;
                    this.SendPropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for SyncStatus in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_SYNC_STATUS")]
    [DataContract()]
    public partial class SyncStatus : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.DateTime _LastSyncDate;

        private string _CreateId;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnLastSyncDateChanging(System.DateTime value);
        partial void OnLastSyncDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        #endregion

        public SyncStatus()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LastSyncDate in the schema.
        /// </summary>
        [Column(Name = @"LAST_SYNC_DATE", Storage = "_LastSyncDate", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public System.DateTime LastSyncDate
        {
            get
            {
                return this._LastSyncDate;
            }
            set
            {
                if (this._LastSyncDate != value)
                {
                    this.OnLastSyncDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastSyncDate = value;
                    this.SendPropertyChanged("LastSyncDate");
                    this.OnLastSyncDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(180)")]
        [DataMember(Order=2)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Tax in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_TAX")]
    [DataContract()]
    public partial class Tax : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _TaxId;

        private string _TaxName;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTaxIdChanging(double value);
        partial void OnTaxIdChanged();
        partial void OnTaxNameChanging(string value);
        partial void OnTaxNameChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        #endregion

        public Tax()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TaxId in the schema.
        /// </summary>
        [Column(Name = @"TAX_ID", Storage = "_TaxId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public double TaxId
        {
            get
            {
                return this._TaxId;
            }
            set
            {
                if (this._TaxId != value)
                {
                    this.OnTaxIdChanging(value);
                    this.SendPropertyChanging();
                    this._TaxId = value;
                    this.SendPropertyChanged("TaxId");
                    this.OnTaxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TaxName in the schema.
        /// </summary>
        [Column(Name = @"TAX_NAME", Storage = "_TaxName", DbType = "VARCHAR2(2000)")]
        [DataMember(Order=2)]
        public string TaxName
        {
            get
            {
                return this._TaxName;
            }
            set
            {
                if (this._TaxName != value)
                {
                    this.OnTaxNameChanging(value);
                    this.SendPropertyChanging();
                    this._TaxName = value;
                    this.SendPropertyChanged("TaxName");
                    this.OnTaxNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=3)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=4)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=7)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=8)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=12)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=13)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for Tran in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_TRANS")]
    [DataContract()]
    public partial class Tran : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _TransactionId;

        private string _StoreId;

        private string _RegisterId;

        private string _CashierId;

        private System.Nullable<System.DateTime> _CreateDate;

        private string _CreateId;

        private System.Nullable<System.DateTime> _UpdateDate;

        private string _UpdateId;

        private System.Nullable<double> _ExclusiveKey;

        private System.Nullable<double> _DelFlg;

        private System.Nullable<double> _ExFld1;

        private System.Nullable<double> _ExFld2;

        private System.Nullable<double> _ExFld3;

        private string _ExFld4;

        private string _ExFld5;

        private double _TransactionType;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(string value);
        partial void OnTransactionIdChanged();
        partial void OnStoreIdChanging(string value);
        partial void OnStoreIdChanged();
        partial void OnRegisterIdChanging(string value);
        partial void OnRegisterIdChanged();
        partial void OnCashierIdChanging(string value);
        partial void OnCashierIdChanged();
        partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreateIdChanging(string value);
        partial void OnCreateIdChanged();
        partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnExclusiveKeyChanging(System.Nullable<double> value);
        partial void OnExclusiveKeyChanged();
        partial void OnDelFlgChanging(System.Nullable<double> value);
        partial void OnDelFlgChanged();
        partial void OnExFld1Changing(System.Nullable<double> value);
        partial void OnExFld1Changed();
        partial void OnExFld2Changing(System.Nullable<double> value);
        partial void OnExFld2Changed();
        partial void OnExFld3Changing(System.Nullable<double> value);
        partial void OnExFld3Changed();
        partial void OnExFld4Changing(string value);
        partial void OnExFld4Changed();
        partial void OnExFld5Changing(string value);
        partial void OnExFld5Changed();
        partial void OnTransactionTypeChanging(double value);
        partial void OnTransactionTypeChanged();
        #endregion

        public Tran()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", CanBeNull = false, DbType = "VARCHAR2(48) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreId in the schema.
        /// </summary>
        [Column(Name = @"STORE_ID", Storage = "_StoreId", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        [DataMember(Order=2)]
        public string StoreId
        {
            get
            {
                return this._StoreId;
            }
            set
            {
                if (this._StoreId != value)
                {
                    this.OnStoreIdChanging(value);
                    this.SendPropertyChanging();
                    this._StoreId = value;
                    this.SendPropertyChanged("StoreId");
                    this.OnStoreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RegisterId in the schema.
        /// </summary>
        [Column(Name = @"REGISTER_ID", Storage = "_RegisterId", CanBeNull = false, DbType = "VARCHAR2(8) NOT NULL")]
        [DataMember(Order=3)]
        public string RegisterId
        {
            get
            {
                return this._RegisterId;
            }
            set
            {
                if (this._RegisterId != value)
                {
                    this.OnRegisterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RegisterId = value;
                    this.SendPropertyChanged("RegisterId");
                    this.OnRegisterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CashierId in the schema.
        /// </summary>
        [Column(Name = @"CASHIER_ID", Storage = "_CashierId", CanBeNull = false, DbType = "VARCHAR2(24) NOT NULL")]
        [DataMember(Order=4)]
        public string CashierId
        {
            get
            {
                return this._CashierId;
            }
            set
            {
                if (this._CashierId != value)
                {
                    this.OnCashierIdChanging(value);
                    this.SendPropertyChanging();
                    this._CashierId = value;
                    this.SendPropertyChanged("CashierId");
                    this.OnCashierIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateDate in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CreateDate", DbType = "DATE")]
        [DataMember(Order=5)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this._CreateDate;
            }
            set
            {
                if (this._CreateDate != value)
                {
                    this.OnCreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreateDate = value;
                    this.SendPropertyChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateId in the schema.
        /// </summary>
        [Column(Name = @"CREATE_ID", Storage = "_CreateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=6)]
        public string CreateId
        {
            get
            {
                return this._CreateId;
            }
            set
            {
                if (this._CreateId != value)
                {
                    this.OnCreateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CreateId = value;
                    this.SendPropertyChanged("CreateId");
                    this.OnCreateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_DATE", Storage = "_UpdateDate", DbType = "DATE")]
        [DataMember(Order=7)]
        public System.Nullable<System.DateTime> UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Name = @"UPDATE_ID", Storage = "_UpdateId", DbType = "VARCHAR2(200)")]
        [DataMember(Order=8)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExclusiveKey in the schema.
        /// </summary>
        [Column(Name = @"EXCLUSIVE_KEY", Storage = "_ExclusiveKey", DbType = "NUMBER(10)")]
        [DataMember(Order=9)]
        public System.Nullable<double> ExclusiveKey
        {
            get
            {
                return this._ExclusiveKey;
            }
            set
            {
                if (this._ExclusiveKey != value)
                {
                    this.OnExclusiveKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ExclusiveKey = value;
                    this.SendPropertyChanged("ExclusiveKey");
                    this.OnExclusiveKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DelFlg in the schema.
        /// </summary>
        [Column(Name = @"DEL_FLG", Storage = "_DelFlg", DbType = "NUMBER(10)")]
        [DataMember(Order=10)]
        public System.Nullable<double> DelFlg
        {
            get
            {
                return this._DelFlg;
            }
            set
            {
                if (this._DelFlg != value)
                {
                    this.OnDelFlgChanging(value);
                    this.SendPropertyChanging();
                    this._DelFlg = value;
                    this.SendPropertyChanged("DelFlg");
                    this.OnDelFlgChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld1 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD1", Storage = "_ExFld1", DbType = "NUMBER(10)")]
        [DataMember(Order=11)]
        public System.Nullable<double> ExFld1
        {
            get
            {
                return this._ExFld1;
            }
            set
            {
                if (this._ExFld1 != value)
                {
                    this.OnExFld1Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld1 = value;
                    this.SendPropertyChanged("ExFld1");
                    this.OnExFld1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld2 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD2", Storage = "_ExFld2", DbType = "NUMBER(10)")]
        [DataMember(Order=12)]
        public System.Nullable<double> ExFld2
        {
            get
            {
                return this._ExFld2;
            }
            set
            {
                if (this._ExFld2 != value)
                {
                    this.OnExFld2Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld2 = value;
                    this.SendPropertyChanged("ExFld2");
                    this.OnExFld2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld3 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD3", Storage = "_ExFld3", DbType = "NUMBER(10)")]
        [DataMember(Order=13)]
        public System.Nullable<double> ExFld3
        {
            get
            {
                return this._ExFld3;
            }
            set
            {
                if (this._ExFld3 != value)
                {
                    this.OnExFld3Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld3 = value;
                    this.SendPropertyChanged("ExFld3");
                    this.OnExFld3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld4 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD4", Storage = "_ExFld4", DbType = "VARCHAR2(180)")]
        [DataMember(Order=14)]
        public string ExFld4
        {
            get
            {
                return this._ExFld4;
            }
            set
            {
                if (this._ExFld4 != value)
                {
                    this.OnExFld4Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld4 = value;
                    this.SendPropertyChanged("ExFld4");
                    this.OnExFld4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExFld5 in the schema.
        /// </summary>
        [Column(Name = @"EX_FLD5", Storage = "_ExFld5", DbType = "VARCHAR2(180)")]
        [DataMember(Order=15)]
        public string ExFld5
        {
            get
            {
                return this._ExFld5;
            }
            set
            {
                if (this._ExFld5 != value)
                {
                    this.OnExFld5Changing(value);
                    this.SendPropertyChanging();
                    this._ExFld5 = value;
                    this.SendPropertyChanged("ExFld5");
                    this.OnExFld5Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionType in the schema.
        /// </summary>
        [Column(Name = @"TRANSACTION_TYPE", Storage = "_TransactionType", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [DataMember(Order=16)]
        public double TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for UsrInfo in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_USR_INFO")]
    [DataContract()]
    public partial class UsrInfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Username;

        private string _Password;

        private string _EmployeeId;

        private System.Nullable<double> _DepartmentId;

        private System.Nullable<double> _Suspended;

        private System.Nullable<double> _Deleted;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEmployeeIdChanging(string value);
        partial void OnEmployeeIdChanged();
        partial void OnDepartmentIdChanging(System.Nullable<double> value);
        partial void OnDepartmentIdChanged();
        partial void OnSuspendedChanging(System.Nullable<double> value);
        partial void OnSuspendedChanged();
        partial void OnDeletedChanging(System.Nullable<double> value);
        partial void OnDeletedChanged();
        #endregion

        public UsrInfo()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"USERNAME", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR2(200) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"PASSWORD", Storage = "_Password", DbType = "VARCHAR2(200)")]
        [DataMember(Order=2)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeId in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEE_ID", Storage = "_EmployeeId", DbType = "VARCHAR2(80)")]
        [DataMember(Order=3)]
        public string EmployeeId
        {
            get
            {
                return this._EmployeeId;
            }
            set
            {
                if (this._EmployeeId != value)
                {
                    this.OnEmployeeIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeId = value;
                    this.SendPropertyChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DepartmentId in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENT_ID", Storage = "_DepartmentId", DbType = "NUMBER(10)")]
        [DataMember(Order=4)]
        public System.Nullable<double> DepartmentId
        {
            get
            {
                return this._DepartmentId;
            }
            set
            {
                if (this._DepartmentId != value)
                {
                    this.OnDepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._DepartmentId = value;
                    this.SendPropertyChanged("DepartmentId");
                    this.OnDepartmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suspended in the schema.
        /// </summary>
        [Column(Name = @"SUSPENDED", Storage = "_Suspended", DbType = "NUMBER(10)")]
        [DataMember(Order=5)]
        public System.Nullable<double> Suspended
        {
            get
            {
                return this._Suspended;
            }
            set
            {
                if (this._Suspended != value)
                {
                    this.OnSuspendedChanging(value);
                    this.SendPropertyChanging();
                    this._Suspended = value;
                    this.SendPropertyChanged("Suspended");
                    this.OnSuspendedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"DELETED", Storage = "_Deleted", DbType = "NUMBER(10)")]
        [DataMember(Order=6)]
        public System.Nullable<double> Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }


    /// <summary>
    /// There are no comments for UsrRole in the schema.
    /// </summary>
    [Table(Name = @"POS2.CRL_USR_ROLE")]
    [DataContract()]
    public partial class UsrRole : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Userid;

        private double _Roleid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUseridChanging(string value);
        partial void OnUseridChanged();
        partial void OnRoleidChanging(double value);
        partial void OnRoleidChanged();
        #endregion

        public UsrRole()
        {
            this.Initialize();
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Userid in the schema.
        /// </summary>
        [Column(Name = @"USERID", Storage = "_Userid", CanBeNull = false, DbType = "VARCHAR2(200) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=1)]
        public string Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging();
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Roleid in the schema.
        /// </summary>
        [Column(Name = @"ROLEID", Storage = "_Roleid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order=2)]
        public double Roleid
        {
            get
            {
                return this._Roleid;
            }
            set
            {
                if (this._Roleid != value)
                {
                    this.OnRoleidChanging(value);
                    this.SendPropertyChanging();
                    this._Roleid = value;
                    this.SendPropertyChanged("Roleid");
                    this.OnRoleidChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Initialize()
        {
            OnCreated();
        }
    
        [OnDeserializing()]
        [System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
          this.Initialize();
        }
    }
}
